for (; r < l; r += 1);
for (; n < t.length; n++);
for (; ++r < l;);
for (; d < t.length && !r;);
for (; i < h.length && !r;);
for (; o < p.length; o++);
for (; n < t[i].length; n++);
for (; i < e.length; i++);
for (; i < e.length; i++);
for (; d < t.set.length; ++d);
for (; Ue < ie; Ue++);
for (; --i >= 0;);
for (; t < this.set.length; t++);
for (; t;);
for (; ++g < t;);
for (; i < arguments.length; i++);
for (; o < n.length; o += 1);
for (; E < M && S.length > 0;);
for (; l < e.length; l += 1);
for (; s < a.allowedTypes.length; s += 1);
for (; l < n.length; l += 1);
for (; d < e.length; d += 1);
for (; n < e.length; n += 1);
for (; o >= 0; o -= 1);
for (; n < o; n += 1);
for (; i < t; i++);
for (; a < i; a++);
for (; i < e.length; i++);
for (; a < n; a++);
for (; o < n.length; o++);
for (; r < l; r += 1);
for (; c < d; c++);
for (; o < i; o++);
for (; ++i < e;);
for (; l < e && !r;);
for (; o < s; o++);
for (; ++i < n && t(e[i], i, e) !== !1;);
for (; r--;);
for (; n ? a-- : ++a < o;);
for (; ++n < o;);
for (; ++i < n;);
for (; ++n < o;);
for (; i-- && $(t, e[i], 0) > -1;);
for (; ++i < n && $(t, e[i], 0) > -1;);
for (; n < o; n++);
for (; i < n; i++);
for (; !d.paused && s < d.concurrency && d._tasks.length;);
for (; n < i; n++);
for (; a < t.length; a++);
for (; o < s; o++);
for (; i < n; i++);
for (; a--;);
for (; v.length && f < t;);
for (; y.length;);
for (; this.head;);
for (; i < this.length; i++);
for (; t;);
for (; o < t.length; o++);
for (; a < t.length; a++);
for (; o && t >= o.priority;);
for (; a < s; a++);
for (; s < n; s += 1);
for (; a < s; a++);
for (; n < arguments.length - g; n++);
for (; n < arguments.length - g; n++);
for (; n < i.length; n++);
for (; t < R.length; t += 1);
for (; a < s; a++);
for (; i < o; i++);
for (; a < t; a++);
for (; a < s; a += 2);
for (; a < s; a += 2);
for (; i < c.length; i++);
for (; d < o.length; d++);
for (; u < a.length; u++);
for (; h < s.length; h++);
for (; !(c = (h = p.next()).done); c = !0);
for (; !(u = (m = _.next()).done); u = !0);
for (; !(M = (I = A.next()).done); M = !0);
for (; l <= a && a - l + 1 >= r - s; ++l);
for (; s <= t; ++s);
for (; t < e.length; t++);
for (; i < r; i++);
for (; (0, o.isElement)(i););
for (; e < t; e += 1);
for (; i < n; i += 1);
for (; n = e + "#" + o, y[n]; o++);
for (; s < r; ++s);
for (; i < arguments.length; i++);
for (; i < a; r = n[++i]);
for (; n--;);
for (; l < o; l++);
for (; r-- > 0;);
for (; i.length;);
for (; e >= 0; e--);
for (; i < n; i += 1);
for (; i < e.length; i += 1);
for (; t < i; t += 1);
for (; s < r; ++s);
for (; i < arguments.length; i++);
for (; i < a; r = n[++i]);
for (; n--;);
for (; l < o; l++);
for (; r-- > 0;);
for (; i.length;);
for (; t;);
for (; n < o; n++);
for (; t < i; t++);
for (; n < i; n++);
for (; i < s; i++);
for (; s < r; s++);
for (; (t = l.indexOf(i)) > -1;);
for (; i < t.length; i++);
for (; i >= 0; i -= 1);
for (; n < t.length; n++);
for (; s < o.vol.length; s++);
for (; t < e.length; t++);
for (; r > n && (t = this.soundGroupArchive.popFirst()););
for (; this.totalUsedMemory > o;);
for (; this.cmpFunc(e, a.object) >= 0;);
for (; this.cmpFunc(e, a.object) < 0;);
for (; e; e = e.next);
for (; t; t = t.next);
for (; i; i = i.next);
for (; i; i = i.previous);
for (; null !== t && this.cmpFunc(n, t.object) < 0;);
for (; null !== i && this.cmpFunc(n, i.object) >= 0;);
for (; i < this._onLoadQueuedCallback.length; i++);
for (; t < e.length; t++);
for (; e < this.soundIds.length; e++);
for (; o < p.length; o++);
for (; t < this._latencyBuffer.length; t += 1);
for (; i < t.length; i++);
for (; n < t.spellModifications.length; n += 1);
for (; d < l.length; d += 1);
for (; t < l.length; t += 1);
for (; r.length;);
for (; a < r; a += 1);
for (; e.length < t;);
for (; n < o; n += 1);
for (; i < e.sequence.length; i += 1);
for (; t < e.results.length; t += 1);
for (; i < n; i += 1);
for (; a < n; a++);
for (; n < t.length; n++);
for (; o < r; o++);
for (; t < arguments.length; t++);
for (; o < a; ++o);
for (; u < h; ++u);
for (; this._items.length > t; t++);
for (; this._items.length > e; e++);
for (; objects.length > i; i += 1);
for (; e.length > i; i += 1);
for (; a > r; ++r);
for (; value.length > i; i += 1);
for (; this.storeNames.length > s; s++);
for (; o.rows.length > a; a++);
for (; c < l; ++c);
for (; o < t.retries; o++);
for (; a < n.length; a++);
for (; n < this._errors.length; n++);
for (; n < t.length; n += 1);
for (; c < y.length; c++);
for (; c < v.length; c++);
for (; c < S; c++);
for (; x < L; x++);
for (; c < P.length; ++c);
for (; c < S; c++);
for (; o.length && !(e.host = o.shift()););
for (; w >= 0; w--);
for (; y--; y);
for (; i--;);
for (; o < a;);
for (; e > R * T >> 1; n += b);
for (; n < i; ++n);
for (; o < g;);
for (; o >= g && s("invalid-input"), c = u(e.charCodeAt(o++)), (c >= b || c > D((w - _) / r)) && s("overflow"), _ += c * r, h = l <= y ? M : l >= y + T ? T : l - y, !(c < h); l += b);
for (; r < g; ++r);
for (; n < g;);
for (; r < g; ++r);
for (; r < g; ++r);
for (; m = u <= a ? M : u >= a + T ? T : u - a, !(d < m); u += b);
for (; n < a.length; n++);
for (; n < s.length; n++);
for (; t < e.length; t++);
for (; i < t; i++);
for (; i < t.length; i++);
for (; n = 6e4 * ((t.at - e.at) / 12e4 | 0););
for (; i < 48; i++);
for (; i < 4; i++);
for (; i < t.length; i++);
for (; t < o; t++);
for (; o < l.length; o++);
for (; a < r; a++);
for (; t < e.length; t++);
for (; t < e.length; t++);
for (; t < e.length; t++);
for (; t < n.length; t++);
for (; o < l; o++);
for (; i < o; ++i);
for (; i < a; i++);
for (; a < c; a++);
for (; t < i; t++);
for (; o < i; o++);
for (; n >= 0 && mo.test(e););
for (; i < o; i++);
for (; i < n; i++);
for (; n < 12; ++n);
for (; n < 12; n++);
for (; t < 12; t++);
for (; t < 12; t++);
for (; t < 24; t++);
for (; n < 7; ++n);
for (; n < 7; n++);
for (; t < 7; t++);
for (; i < n; i += 1);
for (; a < e.length;);
for (; t > 0;);
for (; t < i; t++);
for (; t < i; t++);
for (; t < 3 && null == e._a[t]; ++t);
for (; t < 7; t++);
for (; i < l; i++);
for (; o < l; o++);
for (; n < t.length; ++n);
for (; i < o; ++i);
for (; n < o; n++);
for (; t < c; t += 1);
for (; t < a.length; t += 1);
for (; n < o; ++n);
for (; n < o; ++n);
for (; e < t; ++e);
for (; e < t; ++e);
for (; e < t; ++e);
for (; e < i; ++e);
for (; e < t; ++e);
for (; n < 12; n++);
for (; o < 7; o++);
for (; t < n; t++);
for (; t < this.length; ++t);
for (; Ga.length <= 9; Ga += "S");
for (; Ga.length <= 9; Ga += "S");
for (; e >= 10;);
for (; s < e.cells.length; s++);
for (; n < e.cells.length; n++);
for (; i < t.length; i++);
for (; n < a; n++);
for (; i < e.length; i++);
for (; t < e.cellId.length; t++);
for (; i < o.length; i += 1);
for (; a < arguments.length - 1; a += 1);
for (; i < t.length; i++);
for (; s < a.length; s += 1);
for (; h < f; h += 1);
for (; h < f; h += 1);
for (; o < t.length; o++);
for (; n < t; n++);
for (; p < m; p++);
for (; p < m; p++);
for (; l < o.length; l++);
for (; l < f.length; l++);
for (; c < l.length; c++);
for (; m < h; m++);
for (; a < o.length; a++);
for (; o < this._spellCasted.length; o++);
for (; o < this.stack.length; o += 1);
for (; u < d.length; u += 1);
for (; n < e.length; n += 1);
for (; c < n.length; c += 1);
for (; h < u.length; h += 1);
for (; o < a; o += 1);
for (; b < w.effects.length; b += 1);
for (; o < i.length; o++);
for (; o < e.length; o++);
for (; n < e.length; n += 1);
for (; n < e.length; n++);
for (; i.length < t;);
for (; i < e.length; i++);
for (; i < e.length; i++);
for (; i < t.length; i++);
for (; t < e.length; t++);
for (; n < t.length; n++);
for (; o < h.values.length; o++);
for (; o < m.values.length; o++);
for (; o < p.values.length; o++);
for (; i < t.length; i++);
for (; a < this.buffs.length; a++);
for (; n < o; n++);
for (; t < this.buffs.length; t++);
for (; t < this.buffs.length; t++);
for (; n < i.stack.length; n++);
for (; o < this.buffs.length; o++);
for (; o < this.buffs.length; o++);
for (; o < a.length; o++);
for (; s < e.turnsList.length; s++);
for (; C < b.length; C++);
for (; s < e.length; s += 1);
for (; m && f < p.length; f += 1);
for (; o < t.skins.length; o++);
for (; i < t.length; i += 1);
for (; e < this.subentities.length; e++);
for (; e < this.subentities.length; e++);
for (; d <= l; d += 1);
for (; p < h; p += 1);
for (; e < h; e += 1);
for (; w < h; w += 1);
for (; m < p.length; m += 1);
for (; A < T; A += 1);
for (; null !== e && this.memoryUsed > this.memoryAllocated;);
for (; null !== t; t = t.next);
for (; null !== e; e = e.next);
for (; i; i = i.next);
for (; null !== t; t = t.next);
for (; u < d; u += 1);
for (; a < n.length; a += 1);
for (; a < n.length; a += 1);
for (; t < e.length; t += 1);
for (; t < e.length; t += 1);
for (; t < e.length; t += 1);
for (; o < n.length; o += 1);
for (; p < U; p += 1);
for (; ne >= 0; ne -= 1);
for (; p < f.length; p += 1);
for (; b >= 0; b -= 1);
for (; n < i.length; n += 1);
for (; t < e.length; t++);
for (; o < e.length; o += 1);
for (; n < e.length; n++);
for (; r < a.length; r++);
for (; n < this.subentities.length; n++);
for (; o < e.length; o += 1);
for (; o < i.length; o += 1);
for (; i < this.subentities.length; i += 1);
for (; a < this.subentities.length; a++);
for (; g < 8; g++);
for (; i < this._properties.length; i += 1);
for (; this._addList.length > 0;);
for (; null !== n; n = n.next);
for (; this._removeList.length > 0;);
for (; null !== e; e = e.next);
for (; t < e.length; t += 1);
for (; e < this._properties.length; e += 1);
for (; this._time < this._transitions[this._currentTransitionIndex].start;);
for (; this._time > this._transitions[this._currentTransitionIndex].end;);
for (; o < this._properties.length; o++);
for (; e < this._properties.length; e += 1);
for (; e < this._properties.length; e += 1);
for (; this._time < this._transitions[this._currentTransitionIndex].start;);
for (; this._time > this._transitions[this._currentTransitionIndex].end;);
for (; o < this._properties.length; o++);
for (; o < n.length; o += 1);
for (; n < t.length; n += 1);
for (; l < r.length; l += 1);
for (; a < n.length; a += 1);
for (; l < r.length; l += 1);
for (; (o < a || s === 1 / 0) && null !== i;);
for (; c < e;);
for (; o < i.length; o += 1);
for (; null !== e.left;);
for (; null !== e.right;);
for (;;);
for (; null !== i;);
for (; null !== o.left;);
for (; null !== i;);
for (; null !== i;);
for (; s < o.length; s += 1);
for (; u < c.length; u += 1);
for (; i > o; i -= 1);
for (; i <= o; i += 1);
for (; d < a; d += 4);
for (; y <= r; y += 1);
for (; n < t.length; n += 1);
for (; i < this._item.effects.length; i++);
for (; s < a.spellLevels.length; s++);
for (; a < s.statesRequired.length; a++);
for (; a < s.statesForbidden.length; a++);
for (; d < r.length; d++);
for (; o < c[u].length; o++);
for (; n < i.length; n++);
for (; i < t.length; i++);
for (; o <= e; o += 1);
for (; o <= t; o += 1);
for (; n < t.length; n++);
for (; i < t.length; i++);
for (; i < l.effects.length; i++);
for (; i < l.criticalEffect.length; i++);
for (; e < o.effects.length; e++);
for (; e < o.criticalEffect.length; e++);
for (; o < n.length; o++);
for (; a <= n; a++);
for (; s < a; s++);
for (; a <= n; a++);
for (; a <= n; a++);
for (; a <= n; a++);
for (; a <= n; a++);
for (; s < a; s++);
for (; r <= n; r++);
for (; d <= r; d++);
for (; r <= n; r++);
for (; a <= n; a++);
for (; s < a; s++);
for (; r <= n; r++);
for (; r <= n; r++);
for (; r < a.length; r++);
for (; h < u.length; h++);
for (; e < 560; e++);
for (; t < e.length; t++);
for (; t < this.spellShortcuts.length; t++);
for (; c >= 0; c--);
for (; a >= 0; a--);
for (; n < s.length; n += 4);
for (; n < f.length; n += 4);
for (; t < s.length; t += 1);
for (; i < t; i++);
for (; h < t; h++);
for (; v < c.length; v += 1);
for (; p[g] && p[g].playerCount <= o;);
for (; v < f.monsters.length; v++);
for (; v < y; v += 1);
for (; A < S; A += 1);
for (; s < a.length; s += 1);
for (; n < e.length; n += 1);
for (; i < n; i++);
for (; e = e.offsetParent;);
for (; t < i; t++);
for (; t--;);
for (; t--;);
for (; i--;);
for (; t--;);
for (; l--;);
for (; c > -this.scrollerWidth;);
for (; a > -this.scrollerHeight;);
for (; r < e; r++);
for (; i < o; i++);
for (; a < o; a++);
for (; a < n.length; a++);
for (; l < n.length; l++);
for (; o < a; o++);
for (; _ < v; _++);
for (; _ < v; _++);
for (; i < e.length; i += 1);
for (; a < t.length; a += 1);
for (; o < e.length; o += 1);
for (; c < r.length; c++);
for (; d < r[c].length; d++);
for (; n < i.length; n++);
for (; o < t.length; o++);
for (; o < i.length; o++);
for (; n < e.length; n++);
for (; t >= 0; t--);
for (; t < this.items.length; t++);
for (; n < this.items.length; n++);
for (; n < t.length; n++);
for (; o < n.length; o++);
for (; n >= 0; n--);
for (; i < t.length; i++);
for (; t >= 0; t--);
for (; n < e.length; n += 1);
for (; t < e.length; t += 1);
for (; i < n; i++);
for (; n < o; n++);
for (; i < n; i++);
for (; h < p; h++);
for (; n < o; n += 1);
for (; n < o; n += 1);
for (; t < i; t += 1);
for (; l < n.length; l++);
for (; h < u; h++);
for (; n < e.length; n += 1);
for (; a < o.upgradeEffects.length; a += 1);
for (; a < o.possibleEffects.length; a += 1);
for (; o < e.length; o++);
for (; l < r.length; l++);
for (; o < e.length; o++);
for (; o < n.length; o++);
for (; i < t.length; i += 1);
for (; i < n; i += 1);
for (; i < n; i += 1);
for (; d < u; d += 1);
for (; t < i; t += 1);
for (; r < l; r += 1);
for (; r < l; r += 1);
for (; t < i.length; t += 1);
for (; t < r.length; t += 1);
for (; n < o; n += 1);
for (; n < o; n += 1);
for (; o < s; o += 1);
for (; n < t.length; n += 1);
for (; i < n; i += 1);
for (; n < s; n += 1);
for (; n < s; n += 1);
for (; o < n.objectives.length; o++);
for (; t < l.length; t += 1);
for (; i < t.length; i++);
for (; t < w.length; t += 1);
for (; t < e.length; t += 1);
for (; l < n.length; l += 1);
for (; M < v.length; M++);
for (; a < e.length; a++);
for (; s < e.length; s++);
for (; n < e.length; n++);
for (; r < e.length; r++);
for (; d < l.effects.length; d += 1);
for (; d < e.length; d++);
for (; h < a[d].length; h++);
for (; t < this.effects.length; t++);
for (; o < e.length; o += 1);
for (; l < c.item.upgradeEffects.length; l += 1);
for (; p < c.item.possibleEffects.length; p += 1);
for (; l < c.effects.length; l += 1);
for (; l < e.length; l++);
for (; d < s.effects.length; d++);
for (; n < e.length; n++);
for (; i < e.length; i++);
for (; n < a; n++);
for (; d < T.length; d++);
for (; a < s; a += 1);
for (; t < this._tagButtons.length; t++);
for (; i < t.length; i++);
for (; t < Math.min(e.length, this._valuePairs.length); t++);
for (; i < this.removeWords.length; i++);
for (; i < e.length; i++);
for (; s < o.length; s++);
for (; a < o; a++);
for (; i < e.subEffectDescription.length; i++);
for (; i < t.length; i++);
for (; l < d; l++);
for (; n < o; n++);
for (; n < o; n++);
for (; d < c.length; d += 1);
for (; c < r.length; c += 1);
for (; h < n.length; h += 1);
for (; i < r.length; i += 1);
for (; i < l.length; i += 1);
for (; n < h.length; n += 1);
for (; r < l; r += 1);
for (; t < i; t += 1);
for (; s < r; s += 1);
for (; c < d; c += 1);
for (; n < o; n += 1);
for (; n < o; n += 1);
for (; t < i; t += 1);
for (; a < s; a += 1);
for (; a < i.length; a++);
for (; n < e.length; n++);
for (; s < r; s += 1);
for (; n < o; n += 1);
for (; t < e.length; t++);
for (; t < i; t += 1);
for (; t < n; t += 1);
for (; a < s; a += 1);
for (; i < n; i += 1);
for (; u < I; u++);
for (; i < e.length; i += 1);
for (; i < this.abilities.length; i++);
for (; c < u; c += 1);
for (; a < s; a += 1);
for (; s < 3; s++);
for (; a < o.length; a++);
for (; n < this.tabList.length; n++);
for (; e < t; e += 1);
for (; e < t; e += 1);
for (; e >= 0; e -= 1);
for (; e > this.index; e -= 1);
for (; i < n; i += 1);
for (; l < p; l += 1);
for (; i < e.length; i++);
for (; i < o; i += 1);
for (; o < n.length; o++);
for (; h < u.length; h++);
for (; a < n.length; a++);
for (; i < e.length; i += 1);
for (; i < e.length; i++);
for (;;);
for (; f < G.length; f++);
for (; n <= i; n++);
for (; n < i.length; n++);
for (; n < e.length; n++);
for (; n < e.length; n++);
for (; a < e.length; a++);
for (; a < t.length; a++);
for (; n < i; ++n);
for (; n < i; n += 1);
for (;;);
for (;;);
for (; c < r; c++);
for (; c >= 0; c--);
for (; h < l; h++);
for (; s < n; ++s);
for (; o < i;);
for (; n < t;);
for (; o < i; ++o);
for (; o < i; ++o);
for (; a < i; ++a);
for (; a < n.length; a += 2);
for (; o < a; ++o);
for (; o < a; ++o);
for (; e.length % 4 !== 0;);
for (; s < n; ++s);
for (; i < e.length; ++i);
for (; s < e.length && !((t -= 2) < 0); ++s);
for (; o < n && !(o + i >= t.length || o >= e.length); ++o);
for (; a < s; ++a);
for (; n < t.length; ++n);
for (; n < t.length; ++n);
for (; t < e; t += 2);
for (; t < e; t += 4);
for (; t < e; t += 8);
for (; u < l; ++u);
for (;;);
for (; s < a; ++s);
for (; ++a < t && (o *= 256););
for (; t > 0 && (o *= 256););
for (; ++a < t && (o *= 256););
for (; n > 0 && (o *= 256););
for (; ++s < i && (a *= 256););
for (; --a >= 0 && (s *= 256););
for (; ++a < i && (s *= 256););
for (; --a >= 0 && (s *= 256););
for (; a >= 0; --a);
for (; a < s; ++a);
for (; s < n; ++s);
for (; s < n - i; ++s);
for (; n < h; n += 4);
for (; a < i; a += 3);
for (; s < l; s += a);
for (; p < m; ++p);
for (; d > 0; a = 256 * a + e[t + u], u += h, d -= 8);
for (; d > 0; s = 256 * s + e[t + u], u += h, d -= 8);
for (; o >= 8; e[i + p] = 255 & r, p += m, r /= 256, o -= 8);
for (; c > 0; e[i + p] = 255 & s, p += m, s /= 256, c -= 8);
for (; o < n;);
for (; c < l; c++);
for (; g < 80; g++);
for (; y < 64; y++);
for (; M < 80; M++);
for (; u < e.length; u += 16);
for (; l < e.length; l += a);
for (; s < e.length; s++);
for (; s < n.length; s += 16);
for (; s < 5; s++);
for (; i < e.length; i++, n += 8);
for (; i < 32 * e.length; i += 8);
for (; f < 16; f++);
for (; f < 80; f += 1);
for (; c < s; c++);
for (; p <= d; p++);
for (; f < o; f++);
for (; g < r; g++);
for (; t < h.monsters.length; t++);
for (; d < c.length; d += 1);
for (; u[g] && u[g].playerCount <= f;);
for (; d < h.monsters.length; d += 1);
for (; d < c.length; d += 1);
for (; d < y.length; d += 1);
for (; d < u; d++);
for (; f < g; f += 1);
for (; s < l; s += 1);
for (; u < m; u += 1);
for (; i < o; i += 1);
for (; _ < d.length; _ += 1);
for (; e < r.length; e++);
for (; n < t.length; n++);
for (; i < e.length; i++);
for (; t < 20; t++);
for (; t < O.length; t++);
for (; a < o.length; a += 1);
for (; i < O.length; i += 1);
for (; o >= 0; o--);
for (; r < v; r++);
for (; t >= 0; t--);
for (; i >= 0; i--);
for (; o < t.length; o += 1);
for (; t < e.length; t++);
for (; n < i.effects.length; n++);
for (; s < e.channels.length; s++);
for (; t < e.length; t++);
for (; a >= 0; a--);
for (; t < this.presets.length; t++);
for (; i <= t; i++);
for (; t < n; t++);
for (; o < n.length; o += 1);
for (; o < T.length; o++);
for (; t < e.length; t++);
for (; i < t.length; i++);
for (; n < e.effects.length; n++);
for (; i < this.linksToReplace.length; i++);
for (; i < t.length; i++);
for (; n < arguments.length; n++);
for (; o < n.length; o++);
for (; l < c; l += 1);
for (; o < e; o++);
for (; i < t.length; i++);
for (; t < e; t++);
for (; h < c.objectives.length; h++);
for (; n < i.objectives.length; n++);
for (; i < t.objectives.length; i++);
for (; i < t.objectives.length; i++);
for (; i < e._lastPhoenixes.length; i += 1);
for (; i < n.length; i += 1);
for (; o < n.objectiveIds.length; o += 1);
for (; n < i.objectiveIds.length; n += 1);
for (; f < _; f += 1);
for (; o < a; o += 1);
for (; n < o; n += 1);
for (; n < o; n += 1);
for (; t < this.serversRawData.length; t++);
for (; t < this.serversRawData.length; t++);
for (; t < this.serversRawData.length; t++);
for (; t < this.serversRawData.length; t++);
for (; i < e.length; i++);
for (; c < t.length; c += 1);
for (; n < o; n += 1);
for (; f < e.length; f += 1);
for (; i < n; i += 1);
for (; r < s.length; r++);
for (; e < this._rows.length; e++);
for (; e < this._rows.length; e++);
for (; i < e.length; i++);
for (; t < e.length; t++);
for (; t < this._rows.length; t++);
for (; t < this._rows.length; t++);
for (; l < this._colCount; l++);
for (; t < e; t++);
for (; this._rows.length < this._minRows;);
for (; t >= 0 && !(0 === e || this._rows.length <= this._minRows); t--);
for (; n < a; n += 1);
for (; i < n; i += 1);
for (; t < C.length; t++);
for (; i < n; i += 1);
for (; i < n; i += 1);
for (; t < e.length; t++);
for (; e < C.length; e++);
for (; t < this._iconOrder.length; t++);
for (; n < i.length; n += 1);
for (; a < i.length; a++);
for (; e < f.length; e++);
for (; o < s.NB_CELLS; o++);
for (; n < y; n++);
for (; r < i.length; r++);
for (; e < 560; e += 1);
for (; a < e; a += 1);
for (; r < e; r += 1);
for (; r < t.buttons.length; r++);
for (; i < t.length; i++);
for (; i < e.dialogMessages.length; i++);
for (; i < e.dialogReplies.length; i++);
for (; r < t.length; r++);
for (; r < t.length; r++);
for (; n < i; n++);
for (; s < b; s++);
for (; n < this.replyElts.length; n++);
for (; n < this.numReplyTabs; n++);
for (; n < t; n++);
for (; t < this.numUsedReplyTabs; t++);
for (; a < o.length; a++);
for (; a < o.length; a++);
for (; c < w; c++);
for (; c < M.length; c++);
for (; t >= e.length; t--);
for (; i < e.length; i++);
for (; t >= 0; t--);
for (; e < 3; e++);
for (; i >= e; i--);
for (; i >= 0 && "" === this.digits[i]; i--);
for (; c < l.length; c += 1);
for (; s < n.length; s += 1);
for (; s < o.length; s += 1);
for (; a < e.invalidBuddiesIds.length; a++);
for (; l < r.getChildCount(); l++);
for (; o < t.actors.length; o++);
for (; t < e.levels.length; t++);
for (; t >= e; t--);
for (; i <= _.ELITE; i++);
for (; t < e.objectives.length; t++);
for (; o < n.length; o++);
for (; r < s.length; r++);
for (; t < this.current.guilds.length; t++);
for (; n < o; n += 1);
for (; s < r; s += 1);
for (; t < e.length; t++);
for (; t < e.length; t++);
for (; t < e.length; t++);
for (; a < o.length; a++);
for (; s < o.breedSpellsId.length; s++);
for (; s < e.spells.length; s++);
for (; s < e.slaveSpells.length; s++);
for (; l < s; l++);
for (; i < e.length; i++);
for (; i < n; i += 1);
for (; t < e.length; t++);
for (; n < e.presets.length; n += 1);
for (; s < a.objects.length; s += 1);
for (; o < n.objects.length; o += 1);
for (; o < a; o += 1);
for (; i < n; i += 1);
for (; s < r; s += 1);
for (; s < r; s += 1);
for (; a < s; a += 1);
for (; l < c; l += 1);
for (; n < o; n += 1);
for (; s < r; s += 1);
for (; r < l; r += 1);
for (; m < f; m += 1);
for (; a < s; a += 1);
for (; n < e.jobsDescription.length; n++);
for (; n < a; n += 1);
for (; i < t.length; i++);
for (; a < o.length; a++);
for (; o < a; o += 1);
for (; r < l; r += 1);
for (; a < s; a += 1);
for (; r < l; r += 1);
for (; f < g; f += 1);
for (; r < l; r += 1);
for (; o < r; o += 1);
for (; o < a; o += 1);
for (; d < u; d += 1);
for (; n < e.rewardableAchievements.length; n++);
for (; o < e.accountAchievements.length; o++);
for (; u < d; u++);
for (; r < i.length; r += 1);
for (; r < n.length; r++);
for (; i < e.guests.length; i++);
for (; a < o.length; a++);
for (; n < i.length; n++);
for (; n < i.length; n++);
for (; n < i.objectives.length; n++);
for (; o < a; o += 1);
for (; r < n.objectives.length; r += 1);
for (; a < s; a += 1);
for (; d < u; d += 1);
for (; g < _; g += 1);
for (; b < M; b += 1);
for (; r < c; r += 1);
for (; p < m; p += 1);
for (; b < M; b += 1);
for (; A < y.length; A++);
for (; s < r; s += 1);
for (; o < a; o += 1);
for (; f < g; f += 1);
for (; c < u; c += 1);
for (; c < u; c += 1);
for (; i < e.length; i++);
for (; t < s.length; t += 1);
for (; t < a.length; t += 1);
for (; t < r.length; t += 1);
for (; t < this._myRank.length; t += 1);
for (; o < i.length; o++);
for (; a < i[o].stages.length; a++);
for (; s < i[o].stages[a].monsters.length; s++);
for (; n < i.length; n++);
for (; o < i[n].stages.length; o++);
for (; n < t.length; n++);
for (; a < t[n].scorer.length; a++);
for (; n < t.length; n++);
for (; a < t[n].scorer.length; a++);
for (; n < t.length; n++);
for (; i < e.length; i++);
for (; a < e[i].stages.length; a++);
for (; r < e[i].stages[a]._challengePts.length; r++);
for (; o < t.length; o++);
for (; s < t[o].scorer.length; s++);
for (; o < i.length; o++);
for (; a < i[o].stages.length; a++);
for (; n < t.ladderResult.length; n += 1);
for (; n < e.current.scoreStageList.length; n++);
for (; n < _.length; n++);
for (; o >= 0; o--);
for (; a < n.length; a++);
for (; s < n[a].stages.length; s++);
for (; a < n.length; a++);
for (; o < t.length; o += 1);
for (; n < t.length; n++);
for (; s < i.length; s++);
for (; i < V.length; i++);
for (; n < t.length; n++);
for (; n < i.length; n += 1);
for (; i < e.length; i++);
for (; d < c.length; d++);
for (; h < u.length; h++);
for (; m < p.length; m++);
for (; r >= 10; r /= 10, s++);
for (; r < d; r++);
for (; 48 === u.charCodeAt(r); r++);
for (; 48 === u.charCodeAt(--d););
for (; r < d;);
for (; r--; u += "0");
for (; d < i; m += "0", d++);
for (; i--; m += "0");
for (; i--; m += "0");
for (; o < e.length; o++);
for (; !t[--o]; t.pop());
for (; o >= 10; o /= 10, n++);
for (; r >= 10; r /= 10, o++);
for (; u.length <= c; u.push(0));
for (; r >= 10; r /= 10, o++);
for (;;);
for (; s >= 10; s /= 10, a++);
for (; s >= 10; s /= 10, r++);
for (; 0 === u[--a]; u.pop());
for (; l < s;);
for (; l < s;);
for (; l < s;);
for (; 0 === d[l]; d.pop(), l--);
for (; 0 === d[0]; d.splice(0, 1), a -= w);
for (; r >= 10; r /= 10, l++);
for (; e < i.length;);
for (; r < l;);
for (; a--; s[a] *= t);
for (; o < s.length; o++);
for (; 0 == g[--p]; g.pop());
for (; ++g[--d] > a;);
for (; !g[--p];);
for (; v <= p; n += c.charAt(g[v++]));
for (; l--;);
for (; o < i; o++);
for (; i--;);
for (; !e[0] && e.length > 1; e.splice(0, 1));
for (; R[h] == (O[h] || 0); h++);
for (; C < N; T[C++] = 0);
for (; 1 == i(_, T, v, C););
for (; i(R, T, N, C) < 1;);
for (; L >= 10; L /= 10, h++);
for (; a % 10 == 0; a /= 10, o--);
for (;;);
for (; i--; r.push(0));
for (; i < a; i++);
for (; i--; p[n++] = 0);
for (; a > d;);
for (; n && !p[--n]; p[n] = i);
for (; 0 == p[0]; p.splice(0, 1), --h);
for (; r--; _.push(0));
for (; --r >= 0;);
for (; l > r;);
for (; r--; n.push(0));
for (; i;);
for (; a % 10 == 0; a /= 10, o--);
for (; a >= 10; a /= 10, o++);
for (;;);
for (; a < m; a += r);
for (; h = A(c, i, 0, 1), a = n.plus(h.times(o)), 1 != a.comparedTo(e););
for (; n < o;);
for (; i--; t = "0" + t);
for (; 48 === a.charCodeAt(--o););
for (; s < r; s++);
for (; ++t; o += i);
for (; --t; o += i);
for (; s < e.length; s++);
for (; g < u.length; g++);
for (; l < e.length; l++);
for (; i < t.length; i++);
for (; A < M.elements.length; A++);
for (; o < i.length; o++);
for (; o < n.length; o++);
for (; o < i.length; o++);
for (; o < n.length; o++);
for (; n < e.length; n += 1);
for (; l < s.length; l += 1);
for (; o < a; o += 1);
for (; c < d; c += 1);
for (; s < r; s += 1);
for (; u < h; u += 1);
for (; i < n; i += 1);
for (; i < e.length; i++);
for (; t < e.length; t++);
for (; n < B; n++);
for (; a < P; a++);
for (; a < t.shortcuts.length; a++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; n < i.length; n++);
for (; i < t.length; i++);
for (; t < e.length; t++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; t < e.length; t++);
for (; o < a; o += 1);
for (; s < o.length; s++);
for (; n < i.length; n++);
for (; c < t.length; c++);
for (; c < l.length; c++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; i < n; i += 1);
for (; o < i.length && (n = i[o], "none" === n); o += 1);
for (; n < i.length; n++);
for (; n < i.length; n++);
for (; s < a.length; s++);
for (; o < t.length; o++);
for (;;);
for (; o < a; o++);
for (; i < u.length; i++);
for (; i < p; i++);
for (; g < p && !(h = this.fighterList.getChild(s[g])); g++);
for (; n < o; n++);
for (; n < i.length; n++);
for (; i < n; i++);
for (; n < i.length; n++);
for (; n < t.length; n++);
for (; l < e.length; l++);
for (; n < e.length; n++);
for (; i < n.buffs.length; i++);
for (; t < this.buffs.length; t++);
for (; e < this.buffs.length; e++);
for (; n < o; n++);
for (; t < i; t++);
for (; t < this.buffs.length; t++);
for (; h < i.length; h++);
for (; p < n.length; p++);
for (; p < n.length; p++);
for (; h < i.length; h++);
for (; g < y; g++);
for (; _ < t.length; _++);
for (; t < e.length; t++);
for (; c < l.length; c++);
for (; A < I.length; A++);
for (; i < this._allSpellDamageInfo[e].length; i++);
for (; l < i.length; l++);
for (; i < e.length; i++);
for (; o < i.length; o++);
for (; c < this.caster.buffs.length; c++);
for (; c < this.effectInstances.length; c++);
for (; n < i.length; n++);
for (; u < this.effectInstances.length; u++);
for (; e < this.target.buffs.length; e++);
for (; o < n.length; o++);
for (; a < u.WALL_MAX_SIZE; a++);
for (; d < l.length; d++);
for (; g < d.length; g++);
for (; o < e.length; o++);
for (; r < s.buffs.length; r++);
for (; C < b.length; C++);
for (; s < 5; s++);
for (; s < e[n].length; s++);
for (; l < r.finalSpellDamage.effectDamages.length; l++);
for (; o < s; o++);
for (; e < a; e++);
for (; e < a; e++);
for (; t < this.effectDamages.length; t++);
for (; t < this.effectDamages.length; t++);
for (; d < this.effectDamages.length; d++);
for (; n < t.length; n++);
for (; o < i.buffs.length; o++);
for (; n < t.length; n++);
for (; n < this.sharedDamages.length; n++);
for (; a < o.effectDamages.length; a++);
for (; o < this.splashDamages.length; o++);
for (; o < this.splashDamages.length; o++);
for (; g < this.target.buffs.length; g++);
for (; D < this.damagesInput.length; D++);
for (; D < o.effectDamages.length; D++);
for (; D < P; D++);
for (; t < this.lifeStealingDamagesReceived.length; t++);
for (; t < this.pushedEntities.length; t++);
for (; t < this.counteredDamagesReceived.length; t++);
for (; t < a.effectDamages.length; t++);
for (; t < this.damagesInput.length; t++);
for (; t < v.length; t++);
for (; t < a.effectDamages.length; t++);
for (; n < e.length; n++);
for (; i < this.damagesInput.length; i++);
for (; i < this.counteredDamagesReceived.length; i++);
for (; i < this.sharedDamages.length; i++);
for (; a < o.effectDamages.length; a++);
for (; _ < f.length; _++);
for (; C < T.length; C++);
for (; n < this.target.buffs.length; n++);
for (; t < this.effectInstances.length; t++);
for (; d < e.length; d++);
for (; g < f.effectDamages.length; g++);
for (; t < e.length; t++);
for (; t < e.length; t++);
for (; o < this.damagesInput.length; o++);
for (; r < this.pushedEntities.length; r++);
for (; d < l.marks.length; d++);
for (; s < a[o].length; s++);
for (; d < this.pushedEntities.length; d++);
for (; u < g.marks.length; u++);
for (; d < this.effectInstances.length; d++);
for (; u < p.length; u++);
for (; d < l[o].length; d++);
for (; r < this.effectInstances.length; r++);
for (; d < c.length; d++);
for (; r < this.effectInstances.length; r++);
for (; c < this.effectInstances.length; c++);
for (; l < this.target.buffs.length; l++);
for (; s && !a;);
for (; o < t; o++);
for (; a && s < t;);
for (; T < M.length; T++);
for (; P < O.length; P++);
for (; p < h.length; p++);
for (; N < I.length; N++);
for (; B < b; B++);
for (; H < r.length; H++);
for (; o < i.length; o++);
for (; w < u.length; w++);
for (; w < t; w++);
for (; E < t && (0 === E ? (p = b, M = f.getNearestCellInDirection(b, i)) : M && (p = M, M = f.getNearestCellInDirection(M, i)), M); E++);
for (; w < u.length; w++);
for (; s < i.length; s++);
for (; s < p; s++);
for (; r.cellId !== i && (s = r, r = f.getNearestCellInDirection(r, o)););
for (; i < e.length; i++);
for (; o < a; o++);
for (; n < e.length; n++);
for (; a < i.length; a++);
for (; r < e.length; r++);
for (; r < e.length; r++);
for (; h > p && !(++m >= s););
for (; r < l.length; r++);
for (; r < l.length; r++);
for (; r < e.length; r++);
for (; r < s.length; r += 1);
for (; t < e.length; t += 1);
for (; e < E.length; e += 1);
for (; s < a.length; s += 1);
for (; n < i.length; n += 1);
for (; n < i.length; n += 1);
for (; t < e.length; t += 1);
for (; n < 32; n += 1);
for (; i < this.lockStatus[e].customLockedReasons.length; i++);
for (; a < o.length; a++);
for (; s < e.effects.length; s++);
for (; o < e.length; o++);
for (; s < r; s += 1);
for (; t < i; t += 1);
for (; i < t.length; i += 1);
for (; o < i.length; o++);
for (; u < d; u += 1);
for (; t < i; t += 1);
for (; e < y; e += 1);
for (; e < T.length; e += 1);
for (; t < b; t += 1);
for (; t < e.length; t += 1);
for (; t < e.length; t += 1);
for (; o < t.length; o += 1);
for (; t < w; t += 1);
for (; t < e.length; t += 1);
for (; i < t.length; i += 1);
for (; u < i.length; u += 1);
for (; t < e.length; t += 1);
for (; r < s.length; r++);
for (; i < t.length; i += 1);
for (; i < t.length; i++);
for (; r < s.length; r++);
for (; d < c.length; d++);
for (; i < e.length; i++);
for (; i < t.length; i++);
for (; h < u.length; h++);
for (; o < e.length; o += 1);
for (; o < i.length; o += 1);
for (; s < o.length; s += 1);
for (; l < this.favSpells.length; l += 1);
for (; t < e.length; t += 1);
for (; i < this.sorters.length; i += 1);
for (; c < o.length; c += 1);
for (; n < i; n++);
for (; o < t.length; o += 1);
for (; n < t.length; n++);
for (; i < e.length; i += 1);
for (; n < e.length; n += 1);
for (; n > 0; n--);
for (; o >= 0; o--);
for (; o < n; o++);
for (; i >= 0; i--);
for (; i < t.length; i++);
for (; o < n.length; o++);
for (; t < this.filterButtons.length; t++);
for (; t < this.filterButtons.length; t++);
for (; t < e.length; t++);
for (; o < n.length; o++);
for (; d !== r && (!t[d].prepareToShow(d, e) || (c++, !a || c !== a)); d += l);
for (; t < e.length; t++);
for (; a >= n; a--);
for (; a < o.length; a++);
for (; n < i.length; n++);
for (; h < o; h++);
for (; t < e.length; t++);
for (; t < e.length; t++);
for (; s >= 0; s--);
for (; i < n; i++);
for (; a < n; a++);
for (; a < e.length; a++);
for (; p < r.length; p++);
for (; p < r.length; p += 16);
for (; t < e.length; t++);
for (; e > 0; e--);
for (; i < e.length; i++, n += 8);
for (; i < 32 * e.length; i += 8);
for (; i < e.length; i++);
for (; i < e.length; i += 2);
for (; n < e.length; n += 3);
for (; a < 4; a++);
for (; n < e.length; o = ++n % 4);
for (; i < e.length; i++);
for (; i < e.length; i++);
for (; l < z.length; l++);
for (; p < d; p++);
for (; i < e.points.length; i++);
for (; t < 1e3;);
for (; t < 1250;);
for (; t < 1375;);
for (; l < i.length; l++);
for (; n < t.length; n++);
for (; c < l; c++);
for (; o < e.length; o += 1);
for (; s < e.length; s += 1);
for (; i.length !== t.schema.length;);
for (; h < t.schema.length; h++);
for (; u < t.schema.length && s[u]; u++);
for (; _ < p.points.length - 1; _++);
for (; o < a; o += 1);
for (; g < _; g += 1);
for (; n < t.length; n += 1);
for (; i < e.length; i++);
for (; a < o.length; a++);
for (; i < e.length; i++);
for (; e < this._NB_REWARDS; e += 1);
for (; n < o; n += 1);
for (; e < t; e += 1);
for (; o < n.length; o++);
for (; t < e.length; t++);
for (; this._pointsSpent < e;);
for (; this._pointsSpent > e && this.decrementPts(););
for (; null !== (n = a.exec(o)););
for (; null !== (t = n.exec(e)););
for (; null !== (t = n.exec(e)););
for (; s < c; s++);
for (; null !== (o = r.exec(e)););
for (; t < i.length; t++);
for (; n < i.length; n++);
for (; _ < v; _ += 1);
for (; t < e.length; t += 1);
for (; o < e.length; o++);
for (; r < e.length; r++);
for (; n < e.length; n++);
for (; s < e.length; s++);
for (; i <= t; i++);
for (; i <= t; i++);
for (; n <= t; n += i);
for (; n <= t; n += i);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; n < i.length; n++);
for (; o < i.length; o++);
for (; s < t.length; s += 1);
for (; n < i.length && (o = i[n], n !== E); n += 1);
for (; n < i.length; n += 1);
for (; m < e.results.length; m += 1);
for (; i >= 0; i--);
for (; t < this.colorBars.length; t++);
for (; e < this.colorBars.length; e++);
for (; e < this.colorBars.length; e++);
for (; n < this.colorBars.length; n++);
for (; t < e.length; t += 1);
for (; i < t.length; i += 1);
for (; d < j.length; d += 1);
for (; c < l; c++);
for (; a < c.length; a += 1);
for (; a < t.length; a++);
for (; o < e.length; o++);
for (; n < t.alignmentRanks.length; n++);
for (; n < this.banners.length; n += 1);
for (; t < n.banners.length; t += 1);
for (; a < t.length; a++);
for (; l < r.length; l++);
for (; r < l; r++);
for (; t < i; t += 1);
for (; d < t.length; d += 1);
for (; h < e.objectiveIds.length; h++);
for (; h < 6; h++);
for (; i < e.length; i += 1);
for (; i < t.length; i += 1);
for (; a < r; a += 1);
for (; a < r; a += 1);
for (; t < a; t += 1);
for (; v < n.length; v += 1);
for (; a < s; a += 1);
for (; l < o; l += 1);
for (; n < o; n += 1);
for (; n < t.length; n += 1);
for (; a < e.length; a += 1);
for (; l < r.dropMonsterIds.length; l++);
for (; a < n; a += 1);
for (; o < n; o += 1);
for (; h < i.length; h += 1);
for (; M < T; M += 1);
for (; t < i; t += 1);
for (; t < i; t += 1);
for (; s < o.length; s += 1);
for (; r < i.length; r += 1);
for (; s < i.length; s += 1);
for (; f < e.length; f++);
for (; c < s.length; c++);
for (; n < a.length; n += 1);
for (; n < s.length; n++);
for (; n < t.length; n += 1);
for (; n < t.length; n += 1);
for (; i < t.length; i += 1);
for (; i < t.length; i += 1);
for (; n < o; n += 1);
for (; t < i; t += 1);
for (; i < t.length; i += 1);
for (; s < o.length; s += 1);
for (; t < i; t += 1);
for (; t < e.length; t += 1);
for (; t < n.length; t += 1);
for (; t < o.length; t += 1);
for (; a < n.length; a += 1);
for (; s < t.length; s += 1);
for (; r < a.length; r += 1);
for (; l < i.length; l += 1);
for (; o < a; o += 1);
for (; i < n; i += 1);
for (; i < n; i += 1);
for (; n < i.length; n += 1);
for (; t < e.length; t++);
for (; h < u; h++);
for (; n < t.length; n++);
for (; n < T; n++);
for (; n < T + C; n++);
for (; t < this.jobButtons.length; t++);
for (; t < e.length; t++);
for (; e < this.jobButtons.length; e++);
for (; i < t.length; i++);
for (; h < a.length; h++);
for (; i < t.length; i++);
for (; i < u.length; i++);
for (; s <= T; s += 1);
for (; u < d; u += 1);
for (; g < _; g += 1);
for (; s <= T; s += 1);
for (; t < e.length; t++);
for (; i < this._recipesData.length; i++);
for (; i < t.ingredientIds.length; i++);
for (; u < s; u += 1);
for (; e < this.nbIngredients; e++);
for (; c < 10; c += 1);
for (; c < 24; c += 1);
for (; i < this.emblemSymbols.length; i += 1);
for (; e < this.emblemSymbolCategories.length; e++);
for (; o < e.length; o++);
for (; o < n.length; o++);
for (; o < e.length; o++);
for (; o < n.length; o++);
for (; n < t.length; n++);
for (; n < this.params.lumHeight; n++);
for (; n < this.params.tintWidth; n++);
for (; o < this.params.tintHeight; o++);
for (; r < c; r += 1);
for (; a < s; a += 1);
for (; t < d; t++);
for (; t < n.length; t++);
for (; i < e.checkboxes.length; i++);
for (; t < this.checkboxes.length; t++);
for (; e < this.checkboxes.length; e++);
for (; e < this.checkboxes.length; e++);
for (; t < e.checkboxes.length; t++);
for (; d < this.rankNames.length; d++);
for (; d < this.rightNames.length; d++);
for (; e < t; e += 1);
for (; g < this.rightNames.length; g++);
for (; t < this.rightNames.length; t++);
for (; i < h; i += 1);
for (; o < n.moods[e.livingObjectMood].length; o += 1);
for (; i < t.itemSlots.length; i += 1);
for (; c < i.length; c++);
for (; t < e.length; t += 1);
for (; o < n.length; o += 1);
for (; i < e.length; i += 1);
for (; n < t.length; n += 1);
for (; c < i.items.length; c += 1);
for (; t < e.length; t += 1);
for (; i < e.length; i += 1);
for (; s < e.length; s += 1);
for (; c < i.length; c += 1);
for (; c < u.length; c += 1);
for (; n < i.breedSpellsId.length; n++);
for (; n < i.length; n++);
for (; i < e.padlockInfo.codeSize; i++);
for (; i >= 0; i--);
for (; i < e.padlockInfo.codeSize; i++);
for (; e < this.codeDigit.length; e++);
for (; t < this.codeDigitContainer.length; t++);
for (; o > 0; o--);
for (; o < e.members.length; o++);
for (; o < e.guests.length; o++);
for (; i < t.rewardableAchievements.length; i += 1);
for (; i >= 0; i--);
for (; n < e._rewardItems[i].itemsReward.length; n++);
for (; o < n.length; o += 1);
for (; i < L.length; i += 1);
for (; t < R.length; t += 1);
for (; t < D.length; t += 1);
for (; n < i.length; n += 1);
for (; i < t.length; i += 1);
for (; C < M; C += 1);
for (; n < a; n += 1);
for (; i < o; i += 1);
for (; i < d; i += 1);
for (; v < d; v += 1);
for (; t < 5; t += 1);
for (; i < n; i += 1);
for (; t < o; t += 1);
for (; t < o; t += 1);
for (; t < o; t += 1);
for (; t < o; t += 1);
for (; r < l; r += 1);
for (; u < r.length; u++);
for (; i < t.length; i++);
for (; o < n.length; o++);
for (;;);
for (; s < o; s++);
for (; n < i.length; n++);
for (; c < r.length; c++);
for (; n < i.length; n++);
for (; i < t.length; i++);
for (; t < e.length; t++);
for (; i < t.length; i++);
for (; o < e.length; o += 2);
for (; a.length;);
for (; c < e.length; c += 2);
for (; o < e.length; o++);
for (; p < l.length; p += 1);
for (; m < s; m += 1);
for (; g < r; g += 1);
for (; void 0 === n && t >= q;);
for (; r < n.length; r++);
for (; d < l.length; d++);
for (; d < n.length; d += 2);
for (; n < this._zoomLevels.length && (t = this._zoomLevels[n], !(e >= 1.2 * t)); n += 1);
for (; O < R.length; O += 1);
for (; D <= b; D += 1);
for (; P <= v; P += 1);
for (; O < R.length; O += 1);
for (; t < e.length; t += 1);
for (; e < this.updateList.length; e += 1);
for (; null !== i; i = i.next);
for (; null !== e; e = e.next);
for (; i < this.updateList.length; i += 1);
for (; n < this.areasToRefresh.length; n += 1);
for (; o < this.areasToRefresh.length; o += 1);
for (; s < this.areasToRefresh.length; s += 1);
for (; t < this.areasToRefresh.length; t += 1);
for (; null !== r; r = r.next);
for (; null !== t; t = t.next);
for (; i < e.length; i += 1);
for (; t < e.length; t++);
for (; t < e.length; t++);
for (; null !== e;);
for (; t < e; t += 1);
for (; h < u.length; h += 1);
for (; a < o.length; a += 1);
for (; n < i.length; n += 1);
for (; o < i.length; o += 1);
for (; r < e; r += 1);
for (; i < t.length; i += 1);
for (; s < a.length; s += 1);
for (; t < e.length; t++);
for (; n < i.length; n += 1);
for (; r < e.length; r += 1);
for (; m < p.length; m += 1);
for (; r < g.length; r += 1);
for (; m < e.length; m += 1);
for (; m < l.length; m += 1);
for (; null !== i && null !== i.icon;);
for (; null !== r && r.object !== i;);
for (; null !== r && r.object !== i;);
for (; this._queue.length;);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; n < i.length; n++);
for (; i < t.length; i++);
for (; n < i.length; n += 1);
for (; n < m; n += 1);
for (; r < a.length; r += 1);
for (; i < m; i += 1);
for (; n < m; n += 1);
for (; o < i; o++);
for (; a < n.length; a++);
for (; o < n.length; o++);
for (; S < E; S++);
for (; t < i; t++);
for (; t < e.length; t++);
for (; i < t.length; i += 1);
for (; t < e.length; t += 1);
for (; a < o; a += 1);
for (; t < e.length; t += 1);
for (; i < t.length; i += 1);
for (; a < s; a += 1);
for (; t < e.length; t += 1);
for (; n < o; n++);
for (; c < e.length; c++);
for (; c < e.length; c++);
for (; i < n; i += 1);
for (; a < s; a += 1);
for (; o < a; o += 1);
for (; t < e.effects.length; t++);
for (; n <= t; n += 1);
for (; i < Math.pow(2, n) + o; i += 1);
for (; o < t.length; o++);
for (; n < t.length; n++);
for (; m <= d; m += 1);
for (; o < e.length; o++);
for (; o < e.length; o++);
for (; i <= this.numBreeds; i++);
for (; i <= this.numBreeds; i++);
for (; l <= $; l++);
for (; o < ce; o++);
for (; i < t.length; i++);
for (; e <= this.numBreeds; e++);
for (; s <= n; s++);
for (; s <= r.numBreeds; s++);
for (; c <= n; c++);
for (; i < y.CHARACTER_COLORS; i++);
for (; e <= t; e++);
for (; o < n.length; o++);
for (; s <= y.CHARACTER_COLORS; s++);
for (; e < y.CHARACTER_COLORS; e++);
for (; s < a.length; s += 1);
for (; t < y.CHARACTER_COLORS; t++);
for (; i < y.CHARACTER_COLORS; i++);
for (; i < o.length; i += 1);
for (; i < this.onChangeRules.length; i += 1);
for (; i < this.onSubmitRules.length; i += 1);
for (; a < t.length; a += 1);
for (; t < i; t += 1);
for (; t < i; t += 1);
for (; u < a.MAX_CRAFT_SLOTS; u += 1);
for (; i < n; i += 1);
for (; i < t.length; i++);
for (; a < this.highlightedSlots.length; a++);
for (; e < this.highlightedSlots.length; e++);
for (; i < n; i += 1);
for (; n < i.length; n++);
for (; i < n; i += 1);
for (; t < e.length; t++);
for (; t < e.length; t += 1);
for (; i < t.length; i += 1);
for (; _ < M.length; _ += 1);
for (; e < M.length; e += 1);
for (; t < M.length; t += 1);
for (; t < e.length; t += 1);
for (; g < d.length; g += 1);
for (; g < u.length; g += 1);
for (; l < t.length; l += 1);
for (; h < this._MAX_SLOTS; h += 1);
for (; i < n; i += 1);
for (; i < n; i += 1);
for (; i < n; i += 1);
for (; t < i; t += 1);
for (; i < t.length; i++);
for (; s < i.length; s++);
for (; o < this.optionDefinitions.length; o++);
for (; s < a.length; s++);
for (; e < this.optionDefinitions.length; e++);
for (; n < i.length; n++);
for (; i < this.optionDefinitions.length; i++);
for (; i < t.elements.length; i++);
for (; t < this.optionDefinitions.length; t++);
for (; d < 5; d++);
for (; t < 5; t++);
for (; n < e.length; n++);
for (; o < t.length; o += 1);
for (; n < e.references.length; n++);
for (; d < h.reference_virtualgift.length; d++);
for (; n < e.promo.length; n++);
for (; d < b.gifts.length; d++);
for (; u < M.references.length; u++);
for (; n < f.length; n++);
for (; n < e.length; n++);
for (; p < u.length; p++);
for (; o < n.length; o++);
for (; o < n.length; o++);
for (; i < t.length; i++);
for (; l < c; l += 1);
for (; s < e.length; s++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; t < e.length; t++);
for (; O < E; O++);
for (; i < t.length; i++);
for (; a < e.length; a++);
for (; a < e.length; a++);
for (; e < this._pageCount; e++);
for (; e < this._pageCount; e++);
for (; t < this._pageCount; t++);
for (; t < e.length; t++);
for (; t < this.articlesPerColumn; t++);
for (; h < e.length; h++);
for (; t < e.length; t++);
for (; t < n.length; t++);
for (; r < s.length; r++);
for (; t < l; t++);
for (; t < i.length; t++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; i < t.length; i++);
for (; o < n.length; o++);
for (; t < e.length; t++);
for (; a < n.length; a++);
for (; i < n.length; i++);
for (; i < d.length; i++);
for (; o < e.length; o++);
for (; m < i - 1; m++);
for (; a < i; a++);
for (; t < e.length; t++);
for (; o < this.outfits.length; o++);
for (; t < this.outfits.length; t++);
for (; o < this.outfitDots.getChildren().length; o++);
for (; o < t.length; o++);
for (; i < t.length; i++);
for (; i < n; i += 1);
for (; s < n.length; s += 1);
for (; n < a.length; n += 1);
for (; h < e.rewards.length; h++);
for (; d < t.length; d += 1);
for (; n >= 0; n--);
for (; i--; i);
for (; n < e.length; n++);
for (; a >= -1 && !o; a--);
for (; t < e.length && "" === e[t]; t++);
for (; i >= 0 && "" === e[i]; i--);
for (; l < s; l++);
for (; l < o.length; l++);
for (; r < i.length; r++);
for (; r < a.length; r++);
for (; e < this._servers.length; e++);
for (; o < e.length; o += 1);
for (; o < n.length; o += 1);
for (; this._shield.level < 100 && t[this._shield.level + a] <= o;);
for (; h < c.length; h++);
for (; a < 10; a += 1);
for (; t < e.length; t++);
for (; o < _.length; o++);
for (; c < a.subParts.length; c++);
for (; r < s.length; r++);
for (; t < e.length; t += 1);
for (; r < a.length; r += 1);
for (; n < i.length; n++);
for (; i < n; i += 1);
for (; i < e.length; i += 1);
for (; i < t.slotList.length; i += 1);
for (; n < o; n += 1);
for (; t < i; t += 1);
for (; i < t; i += 1);
for (; d < x; d += 1);
for (; i < this.slotList.length; i += 1);
for (; o < r; o += 1);
for (; n < this.upgradeWeaponList.length; n++);
for (; s < o.possibleEffects.length; s++);
for (; y < this.numberSlot; y++);
for (; e < this.wrapElementButtons.getChildren().length; e++);
for (; i < this.wrapElementButtons.getChildren().length; i++);
for (; a < e.weapon.possibleEffects.length; a++);
for (; s < e.effects.length; s++);
for (; c < a.effects.length; c++);
for (; s < e.ingredients.length; s++);
for (; n < this.craftItemSlots.length; n++);
for (; e < this.craftItemSlots.length; e++);
for (; s < g; s++);
for (; e < this.resultItemSlots.length; e++);
for (; o < e.item.shatterResults.length; o++);
for (; o < a.length; o++);
for (; a < n.length; a++);
for (; n < this.itemSelected.effects.length; n++);
for (; n < this.upgradeWeaponList.length; n++);
for (; c < s.possibleEffects.length; c++);
for (; o < this.itemSelected.effects.length; o++);
for (; r < Math.min(n - 1, a.levels.length); r++);
for (; r < t.effects.length; r++);
for (; n < d; n++);
for (; m <= g; m++);
for (; s < o.length; s++);
for (; i < n.length; i++);
for (; i < o.length; i++);
for (; i < t.length; i++);
for (; i >= 0; i -= 1);
for (; n < t.length; n++);
for (; s < i.serverLanguages.length; s++);
for (; e < this._splashScreenNews.length; e += 1);
for (; e < l.length; e++);
for (; o < a.length; o++);
for (; t < i; t++);
for (; t < i; t++);
for (; t < l.length; t++);
for (; p < _.length; p++);
for (; e !== (e = e.replace(/>list([ =][^\]]*)?\]([^>]*?)(>\/list])/gi, function (e, t, i) {
  for (var n = e; n !== (n = n.replace(/\[\*\]([^\[]*?)(\[\*\]|>\/list])/i, function (e, t, i) {
    i = ">/list]" === i ? "</*]</list]" : "</*][*]";
    var n = "<*]" + t + i;
    return n;
  })););
  return n = n.replace(/>/g, "<");
})););
for (; n !== (n = n.replace(/\[\*\]([^\[]*?)(\[\*\]|>\/list])/i, function (e, t, i) {
  i = ">/list]" === i ? "</*]</list]" : "</*][*]";
  var n = "<*]" + t + i;
  return n;
})););
for (; e !== (e = e.replace(d, t)););
for (; l < r.length; l++);
for (; p < h.length; p++);
for (; e.text !== (e.text = e.text.replace(u, function (e, t, i, n) {
  return n = n.replace(/\[/g, "&#91;"), n = n.replace(/\]/g, "&#93;"), i = i || "", n = n || "", "[" + t + i + "]" + n + "[/" + t + "]";
})););
for (; i < g; i++);
for (; ce < g; ce++);
for (; a < e.length; a += 1);
for (; r < e.length; r += 1);
for (; o < this._keys.length; o += 1);
for (; t !== document.body;);
for (; a < e.length; a++);
for (; l < h.length; l++);
for (; t < e.length; t++);
for (; t < e.length; t++);
for (; s < a.length; s++);
for (; v < _.length; v++);
for (; I < C.length; I++);
for (; e < this.statedElements.length; e++);
for (; n < e.length; n++);
for (; t < e.length; t++);
for (; o < a; o++);
for (; a < e.length; a++);
for (; t < i; t++);
for (; i < n; i++);
for (; a < e.length; a++);
for (; a < e.length; a++);
for (; o < a; o += 1);
for (; o < a; o++);
for (; e < this.statedElements.length; e++);
for (; e < this.statedElements.length; e++);
for (; e < this.graphics.length; e++);
for (; e < this.graphics.length; e++);
for (; a < e.length; a += 1);
for (; r < l; r += 1);
for (; h.cell === -1;);
for (; i <= n; i += 1);
for (; o <= s; o += 1);
for (; r < s.length; r++);
for (; r < a.length; r++);
for (; i < y; i += 1);
for (; a < w; a += 1);
for (; s >= 0; s -= 1);
for (; t < this._updatedSprites.length; t += 1);
for (; u < this._sprites.length; u += 1);
for (; d < h._position;);
for (; d <= l;);
for (; e < _.length; e++);
for (; o < e.length; o++);
for (; i < n; i += 1);
for (; n < o; n += 1);
for (; i.x !== l.x;);
for (; i.y !== l.y;);
for (; i.y !== l.y;);
for (; w < _; w += 1);
for (; M < v; M += 1);
for (; t < _; t += 1);
for (; n < v; n += 1);
for (; M <= 1; M += 1);
for (; T <= 1; T += 1);
for (; D.i !== N || D.j !== x;);
for (; r < k; r += 1);
for (; r < L.length; r += 1);
for (; r < L.length; r += 1);
for (; W < O.length; W += 1);
for (; null !== B;);
for (; s < e.length; s++);
for (; t < 33; t += 1);
for (; i < 34; i += 1);
for (; o < a; o += 1);
for (; i < 34; i += 1);
for (; t < 33; t += 1);
for (; u < e.length; u++);
for (; i < e.length; i++);
for (; s < t.length; s++);
for (; u < a.length; u += 1);
for (; l < a.NB_CELLS; l++);
for (; e < this.zones.length; e++);
for (; i < this.zones.length;);
for (; t < this.zones.length; t++);
for (; null !== c; c = c.next);
for (; t < o.length; t++);
for (; t < o.length; t++);
for (; null !== e; e = e.next);
for (; null !== e; e = e.next);
for (; e < r.NB_CELLS; e++);
for (; a < n.length; a++);
for (; r < o.NB_CELLS; r++);
for (; n < t.length; n += 1);
for (; n < o; n++);
for (; o < l; o++);
for (; n < i.length; n++);
for (; a < n.length; a++);
for (; i < n; i++);
for (; i < n; i++);
for (; Math.random() < i;);
for (; c < o; c++);
for (; m > 0 && p < o;);
for (; a < n; a++);
for (; o < i.length; o++);
for (; Math.random() < f;);
for (; M < _; M++);
for (; N > 0 && E < _;);
for (; n < t; n++);
for (; i < e.length; i++);
for (; r < s.length; r++);
for (; i < t; i++);
for (; e < this.actors.length; e++);
for (; e < this.actors.length; e++);
for (; u < a.length; u++);
for (; u < a.length; u++);
for (; u < a.length; u++);
for (; n < t.length; n++);
for (; s < a.length; s++);
for (; t < e.length; t++);
for (; o >= 0 && n[o].c !== i; o--);
for (; r >= 0 && (t.unshift(e[r]), e[r] !== s); r--);
for (; o < a; o++);
for (; y < e.length; y++);
for (; o < i.length; o++);
for (; c < l.length; c += 1);
for (; l >= 0; l--);
for (; a >= 0; a--);
for (; o < this.triangles.length; o++);
for (; a < l; a++);
for (; D < L.length; D++);
for (; B < O.length && !N; B++);
for (; M < w.length; M++);
for (; o < e.length; o++);
for (; t < e.length; t++);
for (; !this._stop;);
for (; i--;);
for (; n < i; n += 1);
for (; i < e._lifeVariationMsgs.length; i++);
for (; c < e.length; c += 1);
for (; i < e.length; i++);
for (; i < e.length; i++);
for (; n < i.length; n += 1);
for (; o < i.length; o += 1);
for (; o < i.length; o += 1);
for (; l < e.length; l += 1);
for (; u < h; u++);
for (; i < t.length; i++);
for (; a < n.cells.length; a++);
for (; r < s.length; r += 1);
for (; a < t; a++);
for (; c < r; c += 4);
for (; r < s.length; r += 1);
for (; h < u.length; h += 1);
for (; i < o.length; i++);
for (; i < v.enabledSkills.length; i++);
for (; t < v.enabledSkills.length; t++);
for (; I < R.length; I++);
for (; A < v.enabledSkills.length; A++);
for (; i < t.length; i++);
for (; e < this.interactiveMessageStack.length; e++);
for (; u < r.length; u++);
for (; t < e.length; t++);
for (; c < r.length; c += 1);
for (; d < l.length; d += 1);
for (; l < r.length; l++);
for (; l < r.length; l++);
for (; v < p.reachable.length; v++);
for (; y < p.unreachable.length; y++);
for (; r < s.length; r++);
for (; o < N.length; o++);
for (; d < t.length; d++);
for (; c < s.length; c += 1);
for (; m.length;);
for (; I < T.length;);
for (; I < T.length; I++);
for (; n < this.pathNodes.length; n += 1);
for (; s < a.length; s++);
for (; f < g; f++);
for (; p < i.length; p++);
for (; l < r.length; l++);
for (; n < e.positionsForChallengers.length; n++);
for (; a < e.positionsForDefenders.length; a++);
for (; u < d; u++);
for (; m < d; m++);
for (; d < s.length; d++);
for (; t < e.length; t++);
for (; i < e.length; i++);
for (; n < o; n++);
for (; s < a; s++);
for (; n < o; n++);
for (; n < o; n++);
for (; s < a.length; s += 1);
