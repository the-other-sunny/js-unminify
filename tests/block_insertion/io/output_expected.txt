if (i[n]) {
  return i[n].exports;
}
if (f.isWebGlSupported()) {
  var e = i(1416);
  window.isoEngine = new e(), window.actorManager = window.isoEngine.actorManager, window.background = window.isoEngine.background, window.performanceMonitor = new g();
}
for (var s = window.location.search.slice(1).split(";"), r = 0, l = s.length; r < l; r += 1) {
  var c = s[r],
    d = c.split("=");
  "appVersion" === d[0] && (window.appInfo = window.appInfo || {}, window.appInfo.version = d[1]);
}
if ("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e)) {
  throw new TypeError("Invalid character in header field name");
}
for (var t = new Uint8Array(e), i = new Array(t.length), n = 0; n < t.length; n++) {
  i[n] = String.fromCharCode(t[n]);
}
if (e.slice) {
  return e.slice(0);
}
if (e) {
  return e;
}
if (this._bodyBlob) {
  return Promise.resolve(this._bodyBlob);
}
if (this._bodyArrayBuffer) {
  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
}
if (this._bodyFormData) {
  throw new Error("could not read FormData body as blob");
}
if (e) {
  return e;
}
if (this._bodyBlob) {
  return c(this._bodyBlob);
}
if (this._bodyArrayBuffer) {
  return Promise.resolve(d(this._bodyArrayBuffer));
}
if (this._bodyFormData) {
  throw new Error("could not read FormData body as text");
}
if (e instanceof m) {
  if (e.bodyUsed) {
    throw new TypeError("Already read");
  }
  this.url = e.url, this.credentials = e.credentials, t.headers || (this.headers = new a(e.headers)), this.method = e.method, this.mode = e.mode, this.signal = e.signal, i || null == e._bodyInit || (i = e._bodyInit, e.bodyUsed = !0);
} else {
  this.url = String(e);
}
if (e.bodyUsed) {
  throw new TypeError("Already read");
}
if (this.credentials = t.credentials || this.credentials || "same-origin", !t.headers && this.headers || (this.headers = new a(t.headers)), this.method = p(t.method || this.method || "GET"), this.mode = t.mode || this.mode || null, this.signal = t.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && i) {
  throw new TypeError("Body not allowed for GET or HEAD requests");
}
if (e) {
  var i = e.split("="),
    n = i.shift().replace(/\+/g, " "),
    o = i.join("=").replace(/\+/g, " ");
  t.append(decodeURIComponent(n), decodeURIComponent(o));
}
if (n) {
  var o = i.join(":").trim();
  t.append(n, o);
}
if (s.signal && s.signal.aborted) {
  return o(new e.DOMException("Aborted", "AbortError"));
}
if (y.arrayBuffer) {
  var w = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"],
    b = ArrayBuffer.isView || function (e) {
      return e && w.indexOf(Object.prototype.toString.call(e)) > -1;
    };
}
for (var i in this.map) {
  this.map.hasOwnProperty(i) && e.call(t, this.map[i], i, this);
}
if (T.indexOf(t) === -1) {
  throw new RangeError("Invalid status code");
}
if (null == this) {
  throw TypeError();
}
if (n != n && (n = 0), !(n < 0 || n >= i)) {
  var o,
    a = t.charCodeAt(n);
  return a >= 55296 && a <= 56319 && i > n + 1 && (o = t.charCodeAt(n + 1), o >= 56320 && o <= 57343) ? 1024 * (a - 55296) + o - 56320 + 65536 : a;
}
if (!l) {
  return "";
}
for (var c = ""; ++r < l;) {
  var d = Number(arguments[r]);
  if (!isFinite(d) || d < 0 || d > 1114111 || i(d) != d) {
    throw RangeError("Invalid code point: " + d);
  }
  d <= 65535 ? s.push(d) : (d -= 65536, n = (d >> 10) + 55296, o = d % 1024 + 56320, s.push(n, o)), (r + 1 == l || s.length > a) && (c += t.apply(null, s), s.length = 0);
}
if (!isFinite(d) || d < 0 || d > 1114111 || i(d) != d) {
  throw RangeError("Invalid code point: " + d);
}
for (var n in e) {
  t[n] && t[n].length % 2 === 0 ? i[n] = t[n].concat(e[n]) : i[n] = e[n];
}
for (var i, n, o, s, r, l, d = 0; d < t.length && !r;) {
  var h = t[d],
    p = t[d + 1];
  for (i = n = 0; i < h.length && !r;) {
    if (r = h[i++].exec(e)) {
      for (o = 0; o < p.length; o++) {
        l = r[++n], s = p[o], typeof s === u && s.length > 0 ? 2 == s.length ? typeof s[1] == c ? this[s[0]] = s[1].call(this, l) : this[s[0]] = s[1] : 3 == s.length ? typeof s[1] !== c || s[1].exec && s[1].test ? this[s[0]] = l ? l.replace(s[1], s[2]) : a : this[s[0]] = l ? s[1].call(this, l, s[2]) : a : 4 == s.length && (this[s[0]] = l ? s[3].call(this, l.replace(s[1], s[2])) : a) : this[s] = l ? l : a;
      }
    }
  }
  d += 2;
}
for (i = n = 0; i < h.length && !r;) {
  if (r = h[i++].exec(e)) {
    for (o = 0; o < p.length; o++) {
      l = r[++n], s = p[o], typeof s === u && s.length > 0 ? 2 == s.length ? typeof s[1] == c ? this[s[0]] = s[1].call(this, l) : this[s[0]] = s[1] : 3 == s.length ? typeof s[1] !== c || s[1].exec && s[1].test ? this[s[0]] = l ? l.replace(s[1], s[2]) : a : this[s[0]] = l ? s[1].call(this, l, s[2]) : a : 4 == s.length && (this[s[0]] = l ? s[3].call(this, l.replace(s[1], s[2])) : a) : this[s] = l ? l : a;
    }
  }
}
if (r = h[i++].exec(e)) {
  for (o = 0; o < p.length; o++) {
    l = r[++n], s = p[o], typeof s === u && s.length > 0 ? 2 == s.length ? typeof s[1] == c ? this[s[0]] = s[1].call(this, l) : this[s[0]] = s[1] : 3 == s.length ? typeof s[1] !== c || s[1].exec && s[1].test ? this[s[0]] = l ? l.replace(s[1], s[2]) : a : this[s[0]] = l ? s[1].call(this, l, s[2]) : a : 4 == s.length && (this[s[0]] = l ? s[3].call(this, l.replace(s[1], s[2])) : a) : this[s] = l ? l : a;
  }
}
for (o = 0; o < p.length; o++) {
  l = r[++n], s = p[o], typeof s === u && s.length > 0 ? 2 == s.length ? typeof s[1] == c ? this[s[0]] = s[1].call(this, l) : this[s[0]] = s[1] : 3 == s.length ? typeof s[1] !== c || s[1].exec && s[1].test ? this[s[0]] = l ? l.replace(s[1], s[2]) : a : this[s[0]] = l ? s[1].call(this, l, s[2]) : a : 4 == s.length && (this[s[0]] = l ? s[3].call(this, l.replace(s[1], s[2])) : a) : this[s] = l ? l : a;
}
for (var i in t) {
  if (typeof t[i] === u && t[i].length > 0) {
    for (var n = 0; n < t[i].length; n++) {
      if (A.has(t[i][n], e)) {
        return i === l ? a : i;
      }
    }
  } else if (A.has(t[i], e)) {
    return i === l ? a : i;
  }
}
if (typeof t[i] === u && t[i].length > 0) {
  for (var n = 0; n < t[i].length; n++) {
    if (A.has(t[i][n], e)) {
      return i === l ? a : i;
    }
  }
} else if (A.has(t[i], e)) {
  return i === l ? a : i;
}
for (var n = 0; n < t[i].length; n++) {
  if (A.has(t[i][n], e)) {
    return i === l ? a : i;
  }
}
if (A.has(t[i][n], e)) {
  return i === l ? a : i;
}
if (A.has(t[i], e)) {
  return i === l ? a : i;
}
if ("object" == typeof e && (t = e, e = a), !(this instanceof x)) {
  return new x(e, t).getResult();
}
if (typeof L !== d && !L.ua) {
  var O = new x();
  L.ua = O.getResult(), L.ua.get = function () {
    return O.getUA();
  }, L.ua.set = function (e) {
    O.setUA(e);
    var t = O.getResult();
    for (var i in t) {
      L.ua[i] = t[i];
    }
  };
}
for (var i in t) {
  L.ua[i] = t[i];
}
if (d) {
  return n(l.version, t);
}
if (e instanceof s) {
  return e;
}
if ("string" != typeof e) {
  return null;
}
if (e.length > J) {
  return null;
}
if (!i.test(e)) {
  return null;
}
if (e instanceof s) {
  if (e.loose === t) {
    return e;
  }
  e = e.version;
} else if ("string" != typeof e) {
  throw new TypeError("Invalid Version: " + e);
}
if (e.loose === t) {
  return e;
}
if ("string" != typeof e) {
  throw new TypeError("Invalid Version: " + e);
}
if (e.length > J) {
  throw new TypeError("version is longer than " + J + " characters");
}
if (!(this instanceof s)) {
  return new s(e, t);
}
if (!i) {
  throw new TypeError("Invalid Version: " + e);
}
if (this.raw = e, this.major = +i[1], this.minor = +i[2], this.patch = +i[3], this.major > Z || this.major < 0) {
  throw new TypeError("Invalid major version");
}
if (this.minor > Z || this.minor < 0) {
  throw new TypeError("Invalid minor version");
}
if (this.patch > Z || this.patch < 0) {
  throw new TypeError("Invalid patch version");
}
if (/^[0-9]+$/.test(e)) {
  var t = +e;
  if (t >= 0 && t < Z) {
    return t;
  }
}
if (t >= 0 && t < Z) {
  return t;
}
if (b(e, t)) {
  return null;
}
if (i.prerelease.length || o.prerelease.length) {
  for (var a in i) {
    if (("major" === a || "minor" === a || "patch" === a) && i[a] !== o[a]) {
      return "pre" + a;
    }
  }
  return "prerelease";
}
for (var a in i) {
  if (("major" === a || "minor" === a || "patch" === a) && i[a] !== o[a]) {
    return "pre" + a;
  }
}
if (("major" === a || "minor" === a || "patch" === a) && i[a] !== o[a]) {
  return "pre" + a;
}
for (var a in i) {
  if (("major" === a || "minor" === a || "patch" === a) && i[a] !== o[a]) {
    return a;
  }
}
if (("major" === a || "minor" === a || "patch" === a) && i[a] !== o[a]) {
  return a;
}
if (e instanceof A) {
  if (e.loose === t) {
    return e;
  }
  e = e.value;
}
if (e.loose === t) {
  return e;
}
if (e instanceof S) {
  return e.loose === t ? e : new S(e.raw, t);
}
if (e instanceof A) {
  return new S(e.value, t);
}
if (!(this instanceof S)) {
  return new S(e, t);
}
if (this.loose = t, this.raw = e, this.set = e.split(/\s*\|\|\s*/).map(function (e) {
  return this.parseRange(e.trim());
}, this).filter(function (e) {
  return e.length;
}), !this.set.length) {
  throw new TypeError("Invalid SemVer Range: " + e);
}
for (var i = 0; i < e.length; i++) {
  if (!e[i].test(t)) {
    return !1;
  }
}
if (!e[i].test(t)) {
  return !1;
}
if (t.prerelease.length) {
  for (var i = 0; i < e.length; i++) {
    if (K(e[i].semver), e[i].semver !== Ye && e[i].semver.prerelease.length > 0) {
      var n = e[i].semver;
      if (n.major === t.major && n.minor === t.minor && n.patch === t.patch) {
        return !0;
      }
    }
  }
  return !1;
}
for (var i = 0; i < e.length; i++) {
  if (K(e[i].semver), e[i].semver !== Ye && e[i].semver.prerelease.length > 0) {
    var n = e[i].semver;
    if (n.major === t.major && n.minor === t.minor && n.patch === t.patch) {
      return !0;
    }
  }
}
if (K(e[i].semver), e[i].semver !== Ye && e[i].semver.prerelease.length > 0) {
  var n = e[i].semver;
  if (n.major === t.major && n.minor === t.minor && n.patch === t.patch) {
    return !0;
  }
}
if (n.major === t.major && n.minor === t.minor && n.patch === t.patch) {
  return !0;
}
if (z(e, t, n)) {
  return !1;
}
for (var d = 0; d < t.set.length; ++d) {
  var u = t.set[d],
    h = null,
    p = null;
  if (u.forEach(function (e) {
    e.semver === Ye && (e = new A(">=0.0.0")), h = h || e, p = p || e, o(e.semver, h.semver, n) ? h = e : r(e.semver, p.semver, n) && (p = e);
  }), h.operator === l || h.operator === c) {
    return !1;
  }
  if ((!p.operator || p.operator === l) && a(e, p.semver)) {
    return !1;
  }
  if (p.operator === c && r(e, p.semver)) {
    return !1;
  }
}
if (u.forEach(function (e) {
  e.semver === Ye && (e = new A(">=0.0.0")), h = h || e, p = p || e, o(e.semver, h.semver, n) ? h = e : r(e.semver, p.semver, n) && (p = e);
}), h.operator === l || h.operator === c) {
  return !1;
}
if ((!p.operator || p.operator === l) && a(e, p.semver)) {
  return !1;
}
if (p.operator === c && r(e, p.semver)) {
  return !1;
}
if (e instanceof s) {
  return e;
}
if ("string" != typeof e) {
  return null;
}
for (var Ue = 0; Ue < ie; Ue++) {
  K(Ue, te[Ue]), ee[Ue] || (ee[Ue] = new RegExp(te[Ue]));
}
if (e instanceof s || (e = new s(e, this.loose)), this.prerelease.length && !e.prerelease.length) {
  return -1;
}
if (!this.prerelease.length && e.prerelease.length) {
  return 1;
}
if (!this.prerelease.length && !e.prerelease.length) {
  return 0;
}
do {
  var i = this.prerelease[t],
    n = e.prerelease[t];
  if (K("prerelease compare", t, i, n), void 0 === i && void 0 === n) {
    return 0;
  }
  if (void 0 === n) {
    return 1;
  }
  if (void 0 === i) {
    return -1;
  }
  if (i !== n) {
    return c(i, n);
  }
} while (++t);
if (K("prerelease compare", t, i, n), void 0 === i && void 0 === n) {
  return 0;
}
if (void 0 === n) {
  return 1;
}
if (void 0 === i) {
  return -1;
}
if (i !== n) {
  return c(i, n);
}
if (0 === this.prerelease.length) {
  this.prerelease = [0];
} else {
  for (var i = this.prerelease.length; --i >= 0;) {
    "number" == typeof this.prerelease[i] && (this.prerelease[i]++, i = -2);
  }
  i === -1 && this.prerelease.push(0);
}
for (var i = this.prerelease.length; --i >= 0;) {
  "number" == typeof this.prerelease[i] && (this.prerelease[i]++, i = -2);
}
if (!i) {
  throw new TypeError("Invalid comparator: " + e);
}
if (!(e instanceof A)) {
  throw new TypeError("a Comparator is required");
}
if ("" === this.operator) {
  return i = new S(e.value, t), z(this.value, i, t);
}
if ("" === e.operator) {
  return i = new S(this.value, t), z(e.semver, i, t);
}
if (!(e instanceof S)) {
  throw new TypeError("a Range is required");
}
if (!e) {
  return !1;
}
for (var t = 0; t < this.set.length; t++) {
  if (H(this.set[t], e)) {
    return !0;
  }
}
if (H(this.set[t], e)) {
  return !0;
}
if (d === setTimeout) {
  return setTimeout(e, 0);
}
if ((d === i || !d) && setTimeout) {
  return d = setTimeout, setTimeout(e, 0);
}
if (u === clearTimeout) {
  return clearTimeout(e);
}
if ((u === n || !u) && clearTimeout) {
  return u = clearTimeout, clearTimeout(e);
}
if (!f) {
  var e = o(s);
  f = !0;
  for (var t = m.length; t;) {
    for (p = m, m = []; ++g < t;) {
      p && p[g].run();
    }
    g = -1, t = m.length;
  }
  p = null, f = !1, a(e);
}
for (var t = m.length; t;) {
  for (p = m, m = []; ++g < t;) {
    p && p[g].run();
  }
  g = -1, t = m.length;
}
for (p = m, m = []; ++g < t;) {
  p && p[g].run();
}
if (arguments.length > 1) {
  for (var i = 1; i < arguments.length; i++) {
    t[i - 1] = arguments[i];
  }
}
for (var i = 1; i < arguments.length; i++) {
  t[i - 1] = arguments[i];
}
if (E += 1, !e) {
  return d("emptyPath", e);
}
if (s(e)) {
  return window.wizAssets ? window.resolveLocalFileSystemURL && window.WkWebView ? window.resolveLocalFileSystemURL(_.CDV_PATH + "/" + e, function (t) {
    var i = window.WkWebView.convertFilePath(t.toURL());
    return d(null, e, i);
  }, function (t) {
    return console.error(new Error("assetPreloading ui error" + t)), d("emptyPath", e);
  }) : d(null, e, _.CDV_PATH + "/" + e) : d(null, e, window.Config.uiUrl + "/" + e);
}
if (b[e] || L[e]) {
  return console.warn('initiateAssetLoading: known missing asset "' + e + '" will be skip'), d(null, e, null);
}
if (!window.wizAssets) {
  return d(null, e, t);
}
if (i -= 1, /bones\/1107\/.*/.test(e)) {
  return L[e] = !0, d(s, e, null);
}
if (i > 0 && o(s)) {
  var r = T - i,
    c = l(r);
  return window.gui.isConnected ? y.setTimeout(v.downloadFile, c, t, e, n, a) : window.setTimeout(v.downloadFile, c, t, e, n, a);
}
for (var n = A[t], o = 0; o < n.length; o += 1) {
  var a,
    s = n[o],
    r = s.callback,
    l = s.loadBatchIndex;
  a = i ? s.cssFormat ? w(i) : i : null, r && r(a, l);
}
for (; E < M && S.length > 0;) {
  var e = S.pop();
  c(e);
}
if (a[t] = e, r += 1, i && i(e, t), r === s) {
  return n && n(a);
}
if (0 === s) {
  return n && n(a);
}
for (var r = 0, l = 0; l < e.length; l += 1) {
  h(e[l], t, o, l);
}
if (!t) {
  return i(_.EMPTY_IMAGE, n);
}
if (!t) {
  return i(_.EMPTY_JSON, n);
}
if (4 === ~~a.readyState) {
  if (200 !== ~~a.status && 0 !== ~~a.status) {
    return o -= 1, o > 0 ? (a.open("GET", t, !0), void a.send()) : (s(e) || console.error("loadAndParseJson: Failed to load json " + t + ": " + a.status), i(_.EMPTY_JSON, n));
  }
  var l;
  try {
    l = JSON.parse(a.response);
  } catch (c) {
    return r(e) && (console.error("loadAndParseJson: Could not parse json " + t + ": " + c), window.wizAssets.deleteFile(e, function () {}, function (e) {
      console.error("loadAndParseJson: json could not be deleted: " + t + " with error: " + e);
    })), i(_.EMPTY_JSON, n);
  }
  return i(l, n);
}
if (200 !== ~~a.status && 0 !== ~~a.status) {
  return o -= 1, o > 0 ? (a.open("GET", t, !0), void a.send()) : (s(e) || console.error("loadAndParseJson: Failed to load json " + t + ": " + a.status), i(_.EMPTY_JSON, n));
}
if (o[n] = e, a += 1, t && t(e, n), a === s) {
  return i && i(o);
}
if (n.isPhoneGap) {
  var c = n.capacity || 1073741824,
    d = n.isAndroid ? .3 : .5,
    u = c * d * .4;
  t.MAX_MUSIC_SFX_MEMORY = Math.round(.43 * u / s), t.MAX_TEXTURE_MEMORY_MAP = Math.round(.25 * u), t.MAX_TEXTURE_MEMORY_WORLDMAP = Math.round(.1 * u), t.MAX_TEXTURE_MEMORY_CHARACTER_DISPLAY = Math.round(.05 * u), t.MAX_SPRITES_BUFFER_MAP = Math.max(Math.round(.04 * u / l), 2e4), t.MAX_SPRITES_BUFFER_WORLDMAP = Math.max(Math.round(.005 * u / l), 1e4), t.MAX_SPRITES_BUFFER_CHARACTER_DISPLAY = Math.max(Math.round(.005 * u / l), 4e3), t.MAX_ANIMATIONS = Math.round(.12 * u / r);
} else {
  t.MAX_MUSIC_SFX_MEMORY = 1e3, t.MAX_TEXTURE_MEMORY_MAP = 104857600, t.MAX_TEXTURE_MEMORY_WORLDMAP = 52428800, t.MAX_TEXTURE_MEMORY_CHARACTER_DISPLAY = 20971520, t.MAX_SPRITES_BUFFER_MAP = 8e4, t.MAX_SPRITES_BUFFER_WORLDMAP = 1e4, t.MAX_SPRITES_BUFFER_CHARACTER_DISPLAY = 9e3, t.MAX_ANIMATIONS = 30;
}
if (!a.wizAssets) {
  var o = new Error("deleteFiles called despite wizAssets not available");
  return i ? i(o) : console.error(o);
}
if (!a.wizAssets) {
  var s = new Error("downloadFile called despite wizAssets not available");
  return o ? o(s) : console.error(s);
}
if (!Array.isArray(e)) {
  return console.error(new Error("checkBidHouseCategoriesAddendumIntegrity: types is not an Array"));
}
for (var o in t) {
  if (t.hasOwnProperty(o)) {
    for (var a = t[o], s = 0; s < a.allowedTypes.length; s += 1) {
      var r = a.allowedTypes[s];
      i[r] = !0;
    }
  }
}
if (t.hasOwnProperty(o)) {
  for (var a = t[o], s = 0; s < a.allowedTypes.length; s += 1) {
    var r = a.allowedTypes[s];
    i[r] = !0;
  }
}
for (var a = t[o], s = 0; s < a.allowedTypes.length; s += 1) {
  var r = a.allowedTypes[s];
  i[r] = !0;
}
for (var l = 0; l < n.length; l += 1) {
  var c = n[l];
  e.indexOf(c) === -1 && console.error("BidHouseCategoriesAddendum have an extra type " + c);
}
for (var d = 0; d < e.length; d += 1) {
  var u = e[d];
  n.indexOf(u) === -1 && console.error("BidHouseCategoriesAddendum is missing the type " + u);
}
if (null !== i) {
  var l = i.getMembers();
  for (var c in l) {
    l.hasOwnProperty(c) && r.push(l[c]);
  }
}
for (var c in l) {
  l.hasOwnProperty(c) && r.push(l[c]);
}
if (!Array.isArray(e)) {
  return console.error("Input not an array.", e);
}
for (var n = 0; n < e.length; n += 1) {
  var o = e[n];
  if (o.hasOwnProperty(t) && o[t] === i) {
    return n;
  }
}
if (o.hasOwnProperty(t) && o[t] === i) {
  return n;
}
if (o >= 0) {
  return t[o];
}
if (!Array.isArray(e)) {
  return console.error("Input not an array.", e);
}
for (var n = !1, o = e.length - 1; o >= 0; o -= 1) {
  var a = e[o];
  a.hasOwnProperty(t) && a[t] === i && (e.splice(o, 1), n = !0);
}
for (var t = e || arguments, i = {}, n = 0, o = t.length; n < o; n += 1) {
  var a = t[n];
  for (var s in a) {
    a.hasOwnProperty(s) && (i[s] = a[s]);
  }
}
for (var s in a) {
  a.hasOwnProperty(s) && (i[s] = a[s]);
}
for (var a in i) {
  t[a] !== i[a] && (t[a] = i[a], o = !0);
}
for (var t = 6 - e.length, i = 0; i < t; i++) {
  e = "0" + e;
}
if (t >= 1) {
  var i = Math.floor(t / 365.25);
  if (i >= 1) {
    return i + " " + l("ui.time.years", i);
  }
  var n = Math.floor(t / 30.5);
  return n >= 1 ? n + " " + l("ui.time.months", n) : (t = Math.floor(t), t + " " + l("ui.time.days", t));
}
if (i >= 1) {
  return i + " " + l("ui.time.years", i);
}
if (o >= 1) {
  return o + " " + l("ui.time.hours", o);
}
if (a >= 1) {
  return a + " " + l("ui.time.minutes", a);
}
if (!e) {
  return console.error(new Error("missing word to simplify")), "";
}
for (var t = [], i = e.length, n = "ÀÁÂÃÄÅàáâãäåÒÓÔÕÕÖØòóôõöøÈÉÊËèéêëðÇçÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠšŸÿýŽž", o = "AAAAAAaaaaaaOOOOOOOooooooEEEEeeeeeCcDIIIIiiiiUUUUuuuuNnSsYyyZz", a = 0; a < i; a++) {
  n.indexOf(e[a]) !== -1 ? t[a] = o.substr(n.indexOf(e[a]), 1) : t[a] = e[a];
}
if (e) {
  throw new Error(e);
}
if (!e) {
  return null;
}
if (e.length !== t.length) {
  return !0;
}
for (var i = 0; i < e.length; i++) {
  if (e[i] !== t[i]) {
    return !0;
  }
}
if (e[i] !== t[i]) {
  return !0;
}
for (var i = Object.keys(e), n = i.length, o = new Array(n), a = 0; a < n; a++) {
  o[a] = e[i[a]];
}
if (t && t.sortBy) {
  var s = t.sortBy;
  o.sort(function (e, t) {
    return e[s] - t[s];
  });
}
for (var i = this, n = e.rootElement.getElementsByTagName("a"), o = 0; o < n.length; o++) {
  n[o].href && t(n[o], n[o].href);
}
if (window.cordova && window.cordova.InAppBrowser) {
  var A,
    S = function E() {
      A.removeEventListener("exit", E), A = null;
    };
  I = function (e) {
    return A ? (console.error(new Error("unable to open url " + e + ": in app browser is already opened")), null) : (A = window.cordova.InAppBrowser.open(e, "_blank", "closebuttoncaption=" + l("tablet.common.backToGame")), A.addEventListener("exit", S), A);
  };
} else {
  I = function (e) {
    return window.open(e, "_blank");
  };
}
if (i || e.meta && e.meta.version) {
  if (void 0 !== e.x && (e.x *= -1), void 0 !== e.y && (e.y *= -1), void 0 !== e.transforms && (e.matrices = e.transforms, delete e.transforms), void 0 !== e.isAnimation && (e.isAnim = e.isAnimation, delete e.isAnimation), e.symbols) {
    for (var n in e.symbols) {
      t.jeffVersionDowngrader(e.symbols[n], !0);
    }
  }
  if (e.children) {
    for (var o in e.children) {
      t.jeffVersionDowngrader(e.children[o], !0);
    }
  }
}
if (void 0 !== e.x && (e.x *= -1), void 0 !== e.y && (e.y *= -1), void 0 !== e.transforms && (e.matrices = e.transforms, delete e.transforms), void 0 !== e.isAnimation && (e.isAnim = e.isAnimation, delete e.isAnimation), e.symbols) {
  for (var n in e.symbols) {
    t.jeffVersionDowngrader(e.symbols[n], !0);
  }
}
for (var n in e.symbols) {
  t.jeffVersionDowngrader(e.symbols[n], !0);
}
if (e.children) {
  for (var o in e.children) {
    t.jeffVersionDowngrader(e.children[o], !0);
  }
}
for (var o in e.children) {
  t.jeffVersionDowngrader(e.children[o], !0);
}
for (var s = "", r = 1, l = Object.keys(i).length; r < l; r += 1) {
  var c = Object.keys(i)[r],
    d = i[c];
  null !== d && void 0 !== d || (d = "null"), s += "arg" + r + ': "' + d.toString() + '" ';
}
if (!e) {
  return r;
}
for (var c = 0, d = e.length; c < d; c++) {
  var u = e[c];
  if ("%" === u || "#" === u) {
    var h = parseInt(e[c + 1], 10);
    if (!isNaN(h)) {
      var p = t[h];
      void 0 === n && (s = p), void 0 !== p && null !== p ? r += p : l && (!a || a && !a.isPreview) && i("arg " + h.toString() + " is null/undefined", e, t, n, o), c++;
      continue;
    }
  }
  if ("{" === u || "(" === u) {
    var m = e.indexOf("{" === u ? "}" : ")", c);
    if (m !== -1 && "~" === e[c + 1]) {
      var f = !1;
      switch (e[c + 2]) {
        case "z":
          f = 0 === s || "0" === s;
          break;
        case "p":
          f = s > 1;
          break;
        case "s":
          f = 1 === s || "1" === s;
          break;
        case "m":
          f = 0 === s;
          break;
        case "f":
          f = 0 !== s;
          break;
        case "1":
          "~" === e[c + 3] && "2" === e[c + 4] && (f = void 0 !== t[1] && null !== t[1] && void 0 !== t[2] && null !== t[2], c += 2);
          break;
        default:
          i("Found unknown marker", e, t, n, o);
      }
      f ? r += e.substring(c + 3, m) : l = !1, c = m;
      continue;
    }
  }
  r += u;
}
if ("%" === u || "#" === u) {
  var h = parseInt(e[c + 1], 10);
  if (!isNaN(h)) {
    var p = t[h];
    void 0 === n && (s = p), void 0 !== p && null !== p ? r += p : l && (!a || a && !a.isPreview) && i("arg " + h.toString() + " is null/undefined", e, t, n, o), c++;
    continue;
  }
}
if (!isNaN(h)) {
  var p = t[h];
  void 0 === n && (s = p), void 0 !== p && null !== p ? r += p : l && (!a || a && !a.isPreview) && i("arg " + h.toString() + " is null/undefined", e, t, n, o), c++;
  continue;
}
if ("{" === u || "(" === u) {
  var m = e.indexOf("{" === u ? "}" : ")", c);
  if (m !== -1 && "~" === e[c + 1]) {
    var f = !1;
    switch (e[c + 2]) {
      case "z":
        f = 0 === s || "0" === s;
        break;
      case "p":
        f = s > 1;
        break;
      case "s":
        f = 1 === s || "1" === s;
        break;
      case "m":
        f = 0 === s;
        break;
      case "f":
        f = 0 !== s;
        break;
      case "1":
        "~" === e[c + 3] && "2" === e[c + 4] && (f = void 0 !== t[1] && null !== t[1] && void 0 !== t[2] && null !== t[2], c += 2);
        break;
      default:
        i("Found unknown marker", e, t, n, o);
    }
    f ? r += e.substring(c + 3, m) : l = !1, c = m;
    continue;
  }
}
if (m !== -1 && "~" === e[c + 1]) {
  var f = !1;
  switch (e[c + 2]) {
    case "z":
      f = 0 === s || "0" === s;
      break;
    case "p":
      f = s > 1;
      break;
    case "s":
      f = 1 === s || "1" === s;
      break;
    case "m":
      f = 0 === s;
      break;
    case "f":
      f = 0 !== s;
      break;
    case "1":
      "~" === e[c + 3] && "2" === e[c + 4] && (f = void 0 !== t[1] && null !== t[1] && void 0 !== t[2] && null !== t[2], c += 2);
      break;
    default:
      i("Found unknown marker", e, t, n, o);
  }
  f ? r += e.substring(c + 3, m) : l = !1, c = m;
  continue;
}
if (!e) {
  return a.error(new Error("text is missing for " + i)), "";
}
for (var i = Math.max(e.length - t, 0), n = Array(i), o = 0; o < i; o++) {
  n[o] = e[t + o];
}
if (!s(e)) {
  return !1;
}
if (null !== e) {
  var t = e;
  e = null, t.apply(this, arguments);
}
for (var i = -1, n = Array(e); ++i < e;) {
  n[i] = t(i);
}
for (var c in e) {
  !t && !Ni.call(e, c) || s && ("length" == c || o && ("offset" == c || "parent" == c) || a && ("buffer" == c || "byteLength" == c || "byteOffset" == c) || S(c, l)) || r.push(c);
}
if (!L(e)) {
  return Li(e);
}
for (var i in Object(e)) {
  Ri.call(e, i) && "constructor" != i && t.push(i);
}
if (w(e)) {
  return P(e);
}
if (null === e) {
  throw new Error("Callback was already called.");
}
if (l -= 1, e) {
  r = !0, n(e);
} else {
  if (t === Rt || r && l <= 0) {
    return r = !0, n(null);
  }
  c || a();
}
if (t === Rt || r && l <= 0) {
  return r = !0, n(null);
}
for (c = !0; l < e && !r;) {
  var t = s();
  if (null === t) {
    return r = !0, void (l <= 0 && n(null));
  }
  l += 1, i(t.value, t.key, H(o));
}
if (null === t) {
  return r = !0, void (l <= 0 && n(null));
}
if (n = M(n || b), e <= 0 || !t) {
  return n(null);
}
for (0 === s && i(null); o < s; o++) {
  t(e[o], o, H(n));
}
for (var i = -1, n = null == e ? 0 : e.length; ++i < n && t(e[i], i, e) !== !1;) {
  ;
}
for (var o = -1, a = Object(t), s = n(t), r = s.length; r--;) {
  var l = s[e ? r : ++o];
  if (i(a[l], l, a) === !1) {
    break;
  }
}
if (i(a[l], l, a) === !1) {
  break;
}
for (var o = e.length, a = i + (n ? 1 : -1); n ? a-- : ++a < o;) {
  if (t(e[a], a, e)) {
    return a;
  }
}
if (t(e[a], a, e)) {
  return a;
}
for (var n = i - 1, o = e.length; ++n < o;) {
  if (e[n] === t) {
    return n;
  }
}
if (e[n] === t) {
  return n;
}
for (var i = -1, n = null == e ? 0 : e.length, o = Array(n); ++i < n;) {
  o[i] = t(e[i], i, e);
}
if ("string" == typeof e) {
  return e;
}
if (Wt(e)) {
  return ee(e, ie) + "";
}
if (te(e)) {
  return ji ? ji.call(e) : "";
}
for (var a = Array(o); ++n < o;) {
  a[n] = e[n + t];
}
for (var i = e.length; i-- && $(t, e[i], 0) > -1;) {
  ;
}
for (var i = -1, n = e.length; ++i < n && $(t, e[i], 0) > -1;) {
  ;
}
if (e = ue(e), e && (i || void 0 === t)) {
  return e.replace(Mn, "");
}
if (!e || !(t = ie(t))) {
  return e;
}
if (Wt(e)) {
  o = e.slice(0, -1), e = e[e.length - 1], i[t] = o.concat(o.length > 0 ? n : e);
} else if (s) {
  i[t] = e;
} else {
  if (o = pe(e), 0 === e.length && !a && 0 === o.length) {
    throw new Error("autoInject task functions require explicit parameters.");
  }
  a || o.pop(), i[t] = o.concat(n);
}
if (s) {
  i[t] = e;
} else {
  if (o = pe(e), 0 === e.length && !a && 0 === o.length) {
    throw new Error("autoInject task functions require explicit parameters.");
  }
  a || o.pop(), i[t] = o.concat(n);
}
if (o = pe(e), 0 === e.length && !a && 0 === o.length) {
  throw new Error("autoInject task functions require explicit parameters.");
}
if (null != i && "function" != typeof i) {
  throw new Error("task callback must be a function");
}
if (d.started = !0, Wt(e) || (e = [e]), 0 === e.length && d.idle()) {
  return pt(function () {
    d.drain();
  });
}
for (var n = 0, o = e.length; n < o; n++) {
  var a = {
    data: e[n],
    callback: i || b
  };
  t ? d._tasks.unshift(a) : d._tasks.push(a);
}
for (var i = 0, n = e.length; i < n; i++) {
  var o = e[i],
    a = $(r, o, 0);
  0 === a ? r.shift() : a > 0 && r.splice(a, 1), o.callback.apply(o, arguments), null != t && d.error(t, o.data);
}
if (null == t) {
  t = 1;
} else if (0 === t) {
  throw new Error("Concurrency must not be zero");
}
if (0 === t) {
  throw new Error("Concurrency must not be zero");
}
if (!c) {
  for (c = !0; !d.paused && s < d.concurrency && d._tasks.length;) {
    var e = [],
      t = [],
      i = d._tasks.length;
    d.payload && (i = Math.min(i, d.payload));
    for (var n = 0; n < i; n++) {
      var l = d._tasks.shift();
      e.push(l), r.push(l), t.push(l.data);
    }
    s += 1, 0 === d._tasks.length && d.empty(), s === d.concurrency && d.saturated();
    var u = H(o(e));
    a(t, u);
  }
  c = !1;
}
for (c = !0; !d.paused && s < d.concurrency && d._tasks.length;) {
  var e = [],
    t = [],
    i = d._tasks.length;
  d.payload && (i = Math.min(i, d.payload));
  for (var n = 0; n < i; n++) {
    var l = d._tasks.shift();
    e.push(l), r.push(l), t.push(l.data);
  }
  s += 1, 0 === d._tasks.length && d.empty(), s === d.concurrency && d.saturated();
  var u = H(o(e));
  a(t, u);
}
for (var n = 0; n < i; n++) {
  var l = d._tasks.shift();
  e.push(l), r.push(l), t.push(l.data);
}
if (e) {
  return i(e);
}
if (e) {
  return i(e);
}
if (e) {
  return n(e);
}
for (var i = [], a = 0; a < t.length; a++) {
  o[a] && i.push(t[a]);
}
for (var o = 0, s = t.length; o < s; o++) {
  t[o].apply(null, e);
}
if (t = M(t || b), !Wt(e)) {
  return t(new TypeError("First argument to race must be an array of functions"));
}
if (!e.length) {
  return t();
}
for (var i = 0, n = e.length; i < n; i++) {
  p(e[i])(t);
}
if (e) {
  i(null, {
    error: e
  });
} else {
  var n;
  n = arguments.length <= 2 ? t : a(arguments, 1), i(null, {
    value: n
  });
}
if ("object" == typeof t) {
  e.times = +t.times || a, e.intervalFunc = "function" == typeof t.interval ? t.interval : Ke(+t.interval || s), e.errorFilter = t.errorFilter;
} else {
  if ("number" != typeof t && "string" != typeof t) {
    throw new Error("Invalid arguments for async.retry");
  }
  e.times = +t || a;
}
if ("number" != typeof t && "string" != typeof t) {
  throw new Error("Invalid arguments for async.retry");
}
if (arguments.length < 3 && "function" == typeof e ? (i = t || b, t = e) : (n(r, e), i = i || b), "function" != typeof t) {
  throw new Error("Invalid arguments for async.retry");
}
for (var o = -1, a = co(lo((t - e) / (i || 1)), 0), s = Array(a); a--;) {
  s[n ? a : ++o] = e, e += i;
}
if (!e()) {
  return i(null);
}
if (t) {
  return i(t);
}
if (e()) {
  return n(o);
}
if (0 === v.length && 0 === f) {
  return i(null, m);
}
for (; v.length && f < t;) {
  var e = v.shift();
  e();
}
if (!g) {
  var n = H(function (t, n) {
    if (f--, arguments.length > 2 && (n = a(arguments, 1)), t) {
      var o = {};
      Q(m, function (e, t) {
        o[t] = e;
      }), o[e] = n, g = !0, _ = Object.create(null), i(t, o);
    } else {
      m[e] = n, r(e);
    }
  });
  f++;
  var o = p(t[t.length - 1]);
  t.length > 1 ? o(m, n) : o(n);
}
if (f--, arguments.length > 2 && (n = a(arguments, 1)), t) {
  var o = {};
  Q(m, function (e, t) {
    o[t] = e;
  }), o[e] = n, g = !0, _ = Object.create(null), i(t, o);
} else {
  m[e] = n, r(e);
}
for (var e, t = 0; y.length;) {
  e = y.pop(), t++, V(d(e), function (e) {
    0 === --w[e] && y.push(e);
  });
}
if (t !== h) {
  throw new Error("async.auto cannot execute tasks due to a recursive dependency");
}
if (!h) {
  return i(null);
}
if (!Wt(t)) {
  return n(i, [t]), void y.push(i);
}
if (!e[r]) {
  throw new Error("async.auto task `" + i + "` has a non-existent dependency `" + r + "` in " + o.join(", "));
}
for (; this.head;) {
  this.shift();
}
for (var e = Array(this.length), t = this.head, i = 0; i < this.length; i++) {
  e[i] = t.data, t = t.next;
}
for (var t = this.head; t;) {
  var i = t.next;
  e(t) && this.removeLink(t), t = i;
}
for (var i = [], o = 0; o < t.length; o++) {
  t[o] && (i = xn.apply(i, t[o]));
}
for (var i = {}, o = Object.prototype.hasOwnProperty, a = 0; a < t.length; a++) {
  if (t[a]) {
    var s = t[a].key,
      r = t[a].val;
    o.call(i, s) ? i[s].push(r) : i[s] = [r];
  }
}
if (t[a]) {
  var s = t[a].key,
    r = t[a].val;
  o.call(i, s) ? i[s].push(r) : i[s] = [r];
}
if (null == n && (n = b), "function" != typeof n) {
  throw new Error("task callback must be a function");
}
if (i.started = !0, Wt(e) || (e = [e]), 0 === e.length) {
  return pt(function () {
    i.drain();
  });
}
for (var o = i._tasks.head; o && t >= o.priority;) {
  o = o.next;
}
for (var a = 0, s = e.length; a < s; a++) {
  var r = {
    data: e[a],
    priority: t,
    callback: n
  };
  o ? i._tasks.insertBefore(o, r) : i._tasks.push(r);
}
if (t = M(t || b), !Wt(e)) {
  return t(new Error("First argument to waterfall must be an array of functions"));
}
if (!e.length) {
  return t();
}
if (!this.date) {
  return {};
}
if (!d) {
  return void console.error(new Error("The dom is gone"));
}
if (!f) {
  d.style.webkitTransition = h;
  for (var e in t) {
    d.style[e] = t[e];
  }
  d.addEventListener("webkitTransitionEnd", m), p = window.setTimeout(m, l + r);
}
for (var e in t) {
  d.style[e] = t[e];
}
if (0 === n) {
  return {
    x: o.x,
    y: o.y,
    touches: [],
    touchCount: 0
  };
}
for (var a = [], s = 0; s < n; s += 1) {
  a.push({
    x: i[s].clientX,
    y: i[s].clientY
  });
}
if ("number" != typeof e.level || "number" != typeof e.wisdom || "number" != typeof e.xpRatioMount || "number" != typeof e.experienceFactor || "number" != typeof e.xpGuildGivenPercent || "number" != typeof e.xpAlliancePrismBonusPercent) {
  return console.error("xpFormula: there are params in playerData that are not a number", {
    level: e.level,
    wisdom: e.wisdom,
    experienceFactor: e.experienceFactor,
    xpRatioMount: e.xpRatioMount,
    xpGuildGivenPercent: e.xpGuildGivenPercent,
    xpAlliancePrismBonusPercent: e.xpAlliancePrismBonusPercent
  }), 0;
}
if (f = i(f * g), f = i(f * _), f = i(f * n(r)), f <= 0) {
  return 0;
}
if (o = i ? {} : [], t instanceof Array) {
  var s = t.length;
  for (a = 0; a < s; a++) {
    t[a] && e.indexOf(t[a][n].toString()) !== -1 && (i ? o[t[a][n]] = t[a] : o.push(t[a]));
  }
} else {
  for (a in t) {
    t[a] && e.indexOf(t[a][n].toString()) !== -1 && (i ? o[t[a][n]] = t[a] : o.push(t[a]));
  }
}
for (a = 0; a < s; a++) {
  t[a] && e.indexOf(t[a][n].toString()) !== -1 && (i ? o[t[a][n]] = t[a] : o.push(t[a]));
}
for (a in t) {
  t[a] && e.indexOf(t[a][n].toString()) !== -1 && (i ? o[t[a][n]] = t[a] : o.push(t[a]));
}
if (!i) {
  return !1;
}
if (!n) {
  return o.error(new Error("PL need a caller")), a;
}
do {
  s++, l = 0, l = i(e, n, s), l && (r = l.requiredXp);
} while (r <= a && s < 51);
for (var e in f) {
  f[e].clear();
}
for (var e in f) {
  f[e].start();
}
for (var e in f) {
  f[e]["continue"]();
}
for (var e in f) {
  f[e].suspend();
}
if (arguments.length > g) {
  for (var n = 0; n < arguments.length - g; n++) {
    i[n] = arguments[n + g];
  }
}
for (var n = 0; n < arguments.length - g; n++) {
  i[n] = arguments[n + g];
}
if (arguments.length > g) {
  for (var n = 0; n < arguments.length - g; n++) {
    i[n] = arguments[n + g];
  }
}
for (var n = 0; n < arguments.length - g; n++) {
  i[n] = arguments[n + g];
}
if (this._startedAtTime && !this._timeout && !this._interval) {
  var e = Date.now() - this._startedAtTime,
    t = Math.max(0, this._delay - e);
  this._type === s.TIMEOUT ? this._timeout = window.setTimeout(n(this), t) : this._type === s.INTERVAL && (this._timeout = window.setTimeout(a(this), t));
}
for (t in e) {
  return !1;
}
if (e && "object" == typeof e) {
  for (var i in e) {
    e.hasOwnProperty(i) && t.push(i);
  }
}
for (var i in e) {
  e.hasOwnProperty(i) && t.push(i);
}
if (e && "object" == typeof e && t && "object" == typeof t && Array.isArray(i)) {
  for (var n = 0; n < i.length; n++) {
    var o = i[n];
    t[o] = e[o];
  }
}
for (var n = 0; n < i.length; n++) {
  var o = i[n];
  t[o] = e[o];
}
if (!window.Config.sessionId) {
  return console.warn("Cannot make URL sticky (no session ID has been set):", e), e;
}
for (var t = 0; t < R.length; t += 1) {
  var i = R[t];
  if (i.id === e) {
    return i;
  }
}
if (i.id === e) {
  return i;
}
if (!window.Config || e && window.Config.language === e) {
  return t();
}
if (W === F) {
  return console.warn("Already logged in"), e();
}
if (W === k) {
  return console.warn("Already logging in"), t.once("loginEnd", e);
}
if (o) {
  if (/^\[GUEST]/.test(o)) {
    if (window.Config.disabledFeatures.guest) {
      return i.done(new Error("identification: no guests"));
    }
    var a = _.getValue("guestAccount", {}, !0);
    a.nickname = n.toString();
  }
} else {
  console.error("dofus.login: loginName is empty");
}
if (/^\[GUEST]/.test(o)) {
  if (window.Config.disabledFeatures.guest) {
    return i.done(new Error("identification: no guests"));
  }
  var a = _.getValue("guestAccount", {}, !0);
  a.nickname = n.toString();
}
if (window.Config.disabledFeatures.guest) {
  return i.done(new Error("identification: no guests"));
}
if (W === k) {
  return t.once("loginEnd", function (n) {
    return n ? i(n) : void t.accessGameServer(e, i);
  });
}
if (W === H) {
  return e === P ? (console.warn("Already accessing this game server (" + e + ")"), t.once("accessGameEnd", i)) : i(new Error("Already accessing game server " + P + " (while trying to access " + e + ")"));
}
if (P = e, W !== F) {
  return t.login(function (n) {
    return n ? i(n) : void t.accessGameServer(e, i);
  });
}
if (!l) {
  return i(new Error("Unknown server: " + e));
}
if (4 === ~~i.readyState) {
  if (i.onreadystatechange = null, 200 !== ~~i.status) {
    return t(new Error("Error loading json: " + e));
  }
  var n;
  try {
    n = JSON.parse(i.responseText);
  } catch (o) {
    return t(o);
  }
  return t(null, n);
}
if (i.onreadystatechange = null, 200 !== ~~i.status) {
  return t(new Error("Error loading json: " + e));
}
if ("function" != typeof t) {
  return console.warn("Tried to register non-function", t, "as event handler for event:", e), this;
}
if (void 0 !== i) {
  var n = i.indexOf(t);
  n !== -1 && (i.splice(n, 1), this.emit("removeListener", e, t), 0 === i.length && delete this.eventHandlers[e]);
}
if (void 0 === t) {
  return !1;
}
for (var i = !1, o = n.call(arguments, 1), a = 0, s = t.length; a < s; a++) {
  var r = t[a];
  void 0 !== r && (r.apply(this, o), i = !0, r.once && (r.once > 1 ? r.once-- : delete r.once, this.removeListener(e, r)));
}
if (!window.gui.playerData) {
  return e;
}
if (t) {
  return t;
}
for (var t = Object.keys(v), i = 0, o = t.length; i < o; i++) {
  var a = t[i];
  n(a);
  for (var s in e) {
    var l = e[s],
      c = r(s);
    c && l.indexOf(a) !== -1 && c.addChannel(a);
  }
}
for (var s in e) {
  var l = e[s],
    c = r(s);
  c && l.indexOf(a) !== -1 && c.addChannel(a);
}
if (!d) {
  d = {};
  for (var t in e) {
    if (e.hasOwnProperty(t)) {
      if (N[t]) {
        continue;
      }
      d[t] = e[t];
    }
  }
}
for (var t in e) {
  if (e.hasOwnProperty(t)) {
    if (N[t]) {
      continue;
    }
    d[t] = e[t];
  }
}
if (e.hasOwnProperty(t)) {
  if (N[t]) {
    continue;
  }
  d[t] = e[t];
}
if (N[t]) {
  continue;
}
if (i && n instanceof i) {
  y.emit(e, [n, r]);
} else if (i && window.event instanceof i) {
  y.emit(e, [window.event, r]);
} else {
  var l = [{
    message: n,
    url: o,
    lineno: a,
    colno: s
  }];
  r && l.push(r), y.emit(e, l);
}
if (i && window.event instanceof i) {
  y.emit(e, [window.event, r]);
} else {
  var l = [{
    message: n,
    url: o,
    lineno: a,
    colno: s
  }];
  r && l.push(r), y.emit(e, l);
}
if (!t) {
  return !0;
}
if (void 0 === h) {
  return JSON.stringify("<undefined>");
}
if (d && h instanceof d) {
  return JSON.stringify("[DOM Window]");
}
if (c && h instanceof c) {
  return JSON.stringify("[DOM Element (" + a(h) + ")]");
}
if (l && h instanceof l) {
  return JSON.stringify("[DOM Node (" + h.nodeName + ")]");
}
if (r && h instanceof r) {
  return JSON.stringify("[RegExp (" + h.toString() + ")]");
}
if (h instanceof n) {
  try {
    t.error = o.parse(h);
  } catch (p) {
    "string" == typeof h.stack && (t.error = h.stack.split("\n"));
  }
  return JSON.stringify(h.name + ": " + h.message);
}
if (s && h instanceof s) {
  return t.filename = h.filename, t.lineno = e.lineno, t.colno = e.colno || e.column, h.error && (t.error = i(h.error)), i(h.message);
}
if (Array.isArray(h)) {
  return u.indexOf(h) !== -1 ? JSON.stringify("[Circular reference]") : (u.push(h), "[" + h.map(i).join(",") + "]");
}
if (h && "object" == typeof h) {
  if (u.indexOf(h) !== -1) {
    return JSON.stringify("[Circular reference]");
  }
  u.push(h);
  var m = Object.keys(h);
  return "{" + m.map(function (e) {
    return JSON.stringify(e) + ":" + i(h[e]);
  }).join(",") + "}";
}
if (u.indexOf(h) !== -1) {
  return JSON.stringify("[Circular reference]");
}
for (var t = e.length, i = new Array(t), o = {}, a = 0; a < t; a++) {
  var s = e[a];
  "string" == typeof s ? i[a] = s : i[a] = n(e[a], o);
}
if ("undefined" != typeof e.stacktrace || "undefined" != typeof e["opera#sourceloc"]) {
  return this.parseOpera(e);
}
if (e.stack && e.stack.match(i)) {
  return this.parseV8OrIE(e);
}
if (e.stack) {
  return this.parseFFOrSafari(e);
}
if (e.indexOf(":") === -1) {
  return [e];
}
if (t.indexOf(" > eval") > -1 && (t = t.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1")), t.indexOf("@") === -1 && t.indexOf(":") === -1) {
  return new e({
    functionName: t
  });
}
for (var i = /Line (\d+).*script (?:in )?(\S+)/i, n = t.message.split("\n"), o = [], a = 2, s = n.length; a < s; a += 2) {
  var r = i.exec(n[a]);
  r && o.push(new e({
    fileName: r[2],
    lineNumber: r[1],
    source: n[a]
  }));
}
for (var i = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, n = t.stacktrace.split("\n"), o = [], a = 0, s = n.length; a < s; a += 2) {
  var r = i.exec(n[a]);
  r && o.push(new e({
    functionName: r[3] || void 0,
    fileName: r[2],
    lineNumber: r[1],
    source: n[a]
  }));
}
if (e) {
  for (var i = 0; i < c.length; i++) {
    void 0 !== e[c[i]] && this["set" + t(c[i])](e[c[i]]);
  }
}
for (var i = 0; i < c.length; i++) {
  void 0 !== e[c[i]] && this["set" + t(c[i])](e[c[i]]);
}
if ("[object Array]" !== Object.prototype.toString.call(e)) {
  throw new TypeError("Args must be an Array");
}
if (e instanceof n) {
  this.evalOrigin = e;
} else {
  if (!(e instanceof Object)) {
    throw new TypeError("Eval Origin must be an Object or StackFrame");
  }
  this.evalOrigin = new n(e);
}
if (!(e instanceof Object)) {
  throw new TypeError("Eval Origin must be an Object or StackFrame");
}
if (0 === s.indexOf("@")) {
  var r = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(s, ""),
    l = r[1],
    c = r[2],
    d = r[3];
}
for (var d = 0; d < o.length; d++) {
  n.prototype["get" + t(o[d])] = i(o[d]), n.prototype["set" + t(o[d])] = function (e) {
    return function (t) {
      this[e] = Boolean(t);
    };
  }(o[d]);
}
for (var u = 0; u < a.length; u++) {
  n.prototype["get" + t(a[u])] = i(a[u]), n.prototype["set" + t(a[u])] = function (t) {
    return function (i) {
      if (!e(i)) {
        throw new TypeError(t + " must be a Number");
      }
      this[t] = Number(i);
    };
  }(a[u]);
}
if (!e(i)) {
  throw new TypeError(t + " must be a Number");
}
for (var h = 0; h < s.length; h++) {
  n.prototype["get" + t(s[h])] = i(s[h]), n.prototype["set" + t(s[h])] = function (e) {
    return function (t) {
      this[e] = String(t);
    };
  }(s[h]);
}
for (var h, p = t[Symbol.iterator](); !(c = (h = p.next()).done); c = !0) {
  var m = h.value,
    f = l.ID,
    g = l.Tag,
    _ = l.Class,
    v = l.Attributes,
    y = l.NthChild;
  switch (m) {
    case "ID":
      if (Boolean(f) && o(e, f)) {
        return f;
      }
      break;
    case "Tag":
      if (Boolean(g) && o(e, g)) {
        return g;
      }
      break;
    case "Class":
      if (Boolean(_) && _.length && (r = s(e, _, g))) {
        return r;
      }
      break;
    case "Attributes":
      if (Boolean(v) && v.length && (r = s(e, v, g))) {
        return r;
      }
      break;
    case "NthChild":
      if (Boolean(y)) {
        return y;
      }
  }
}
if (Boolean(f) && o(e, f)) {
  return f;
}
if (Boolean(g) && o(e, g)) {
  return g;
}
if (Boolean(_) && _.length && (r = s(e, _, g))) {
  return r;
}
if (Boolean(v) && v.length && (r = s(e, v, g))) {
  return r;
}
if (Boolean(y)) {
  return y;
}
if (d) {
  throw u;
}
for (var m, _ = d[Symbol.iterator](); !(u = (m = _.next()).done); u = !0) {
  var v = m.value,
    y = r(v, n, a, l);
  Boolean(y) && c.push(y);
}
if (h) {
  throw p;
}
for (var I, A = c[Symbol.iterator](); !(M = (I = A.next()).done); M = !0) {
  var S = I.value;
  b.unshift(S);
  var E = b.join(" > ");
  if ((0, f.isUnique)(e, E)) {
    return E;
  }
}
if ((0, f.isUnique)(e, E)) {
  return E;
}
if (T) {
  throw C;
}
if (!e.hasAttribute("class")) {
  return [];
}
if (s === r) {
  return void e.push(n.slice(0, s).join(""));
}
for (var l = o; l <= a && a - l + 1 >= r - s; ++l) {
  n[s] = t[l], i(e, t, n, l + 1, a, s + 1, r);
}
for (var n = [], o = e.length, a = [], s = 1; s <= t; ++s) {
  i(n, e, a, 0, o - 1, 0, s);
}
if (Array.isArray(e)) {
  for (var t = 0, i = Array(e.length); t < e.length; t++) {
    i[t] = e[t];
  }
  return i;
}
for (var t = 0, i = Array(e.length); t < e.length; t++) {
  i[t] = e[t];
}
if (Boolean(a)) {
  var s = a.childNodes,
    r = s.length;
  for (i = 0; i < r; i++) {
    if (n = s[i], (0, o.isElement)(n) && (t++, n === e)) {
      return ":nth-child(" + t + ")";
    }
  }
}
for (i = 0; i < r; i++) {
  if (n = s[i], (0, o.isElement)(n) && (t++, n === e)) {
    return ":nth-child(" + t + ")";
  }
}
if (n = s[i], (0, o.isElement)(n) && (t++, n === e)) {
  return ":nth-child(" + t + ")";
}
if (!Boolean(t)) {
  return !1;
}
for (var t = [], i = e; (0, o.isElement)(i);) {
  t.push(i), i = i.parentNode;
}
if (!i) {
  return console.error("Invalid window: " + e);
}
if (i.openState) {
  i.openingTweener && (i.openingTweener.cancel(), o(i, null, !0));
  var a = T.indexOf(e);
  T.splice(a, 1), i === b && (b = null), i.openState = !1, M = e, i.emit("close", t), v.emit("close", {
    id: e
  });
  var s = i.position;
  i.closingTweener = c.tween(i, {
    opacity: 0,
    webkitTransform: "translate3d(" + s.x + "px," + s.y + "px,0) scale(0.8)"
  }, {
    time: 150,
    delay: 0,
    easing: "ease-out"
  }, function () {
    n(i, t);
  });
}
if (w) {
  for (var e = 0, t = w.length; e < t; e += 1) {
    a(w[e]);
  }
  w = null, window.foreground.unlock("windowsManagerDialog");
}
for (var e = 0, t = w.length; e < t; e += 1) {
  a(w[e]);
}
if (!e.openState) {
  return t.cancelSlide();
}
if (t = t || {}, t.forceToOpen || !window.gui.uiLocker || !window.gui.uiLocker.isFeatureLockedByWindow(e, t.tabId)) {
  if (("market" === e || "DailyQuestRerollWindow" === e) && window.gui.playerData.isShopDisabled() && window.gui.scenarioManager.isBehaviourEnabled(g.DISABLE_FAKE_SHOP)) {
    return void window.gui.openPopup({
      title: h("tablet.window.shop.title"),
      message: h("ui.popup.accessDenied.serviceUnavailable")
    });
  }
  if ("register" === e && window.Config.disabledFeatures.guest) {
    return window.gui.openPopup({
      title: h("ui.login.createAccount"),
      message: h("ui.popup.accessDenied.serviceUnavailable")
    }), console.error(new Error("windowsManager: register should not open"));
  }
  var i = y[e];
  if (!i) {
    return console.error("Invalid window: " + e);
  }
  i.closingTweener && (i.closingTweener.cancel(), n(i));
  var a = i.group;
  if (a) {
    for (var s in y) {
      var l = y[s];
      a === l.group && l.openState && e !== s && this.close(s);
    }
  }
  var d = i.positionInfo,
    u = i.position;
  if (d && !u && (i.position = u = m.buildWindowStyleFromInfo(d), i.setStyles({
    webkitTransform: "translate3d(" + u.x + "px," + u.y + "px,0) scale(0.8)",
    width: u.width + "px",
    height: u.height + "px",
    opacity: 0
  })), d && d.isModal || t.isModal) {
    i.addClassNames("modal");
    var p = window.gui.windowsContainer.createChild("div", {
      className: "modalWindowOverlay"
    });
    i.once("close", function () {
      p.destroy();
    });
  }
  i.openState = !0, i.show(), this.emit("open", {
    id: e,
    extraParams: t
  }), i.emit("open", t), v.focusWindow(e), u = i.position;
  var f = d && d.isDefault;
  return f || i.initialPosition || (i.initialPosition = {
    x: u.x,
    y: u.y,
    width: u.width,
    height: u.height
  }), u.x = Math.min(r.windowFullScreenWidth - u.width, Math.max(0, u.x)), u.y = Math.max(0, Math.min(r.windowFullScreenHeight - _, u.y)), i.openingTweener = c.tween(i, {
    opacity: 1,
    webkitTransform: "translate3d(" + u.x + "px," + u.y + "px,0) scale(1)"
  }, {
    time: 150,
    delay: 0,
    easing: "ease-out"
  }, function () {
    o(i, t);
  }), window.gui.splashScreen.hide(), i;
}
if (("market" === e || "DailyQuestRerollWindow" === e) && window.gui.playerData.isShopDisabled() && window.gui.scenarioManager.isBehaviourEnabled(g.DISABLE_FAKE_SHOP)) {
  return void window.gui.openPopup({
    title: h("tablet.window.shop.title"),
    message: h("ui.popup.accessDenied.serviceUnavailable")
  });
}
if ("register" === e && window.Config.disabledFeatures.guest) {
  return window.gui.openPopup({
    title: h("ui.login.createAccount"),
    message: h("ui.popup.accessDenied.serviceUnavailable")
  }), console.error(new Error("windowsManager: register should not open"));
}
if (!i) {
  return console.error("Invalid window: " + e);
}
if (a) {
  for (var s in y) {
    var l = y[s];
    a === l.group && l.openState && e !== s && this.close(s);
  }
}
for (var s in y) {
  var l = y[s];
  a === l.group && l.openState && e !== s && this.close(s);
}
if (d && !u && (i.position = u = m.buildWindowStyleFromInfo(d), i.setStyles({
  webkitTransform: "translate3d(" + u.x + "px," + u.y + "px,0) scale(0.8)",
  width: u.width + "px",
  height: u.height + "px",
  opacity: 0
})), d && d.isModal || t.isModal) {
  i.addClassNames("modal");
  var p = window.gui.windowsContainer.createChild("div", {
    className: "modalWindowOverlay"
  });
  i.once("close", function () {
    p.destroy();
  });
}
if (t.openState && b !== t) {
  var i = T.indexOf(e);
  i !== -1 && T.splice(i, 1), T.unshift(e), b = t, t.getParent().appendChild(t), t.emit("focus");
}
if (t) {
  i = m.buildWindowStyleFromInfo(t);
} else if (n.initialPosition) {
  var o = n.initialPosition;
  i = {
    x: o.x,
    y: o.y,
    width: o.width,
    height: o.height
  };
} else {
  i = m.buildWindowStyleFromInfo(n.positionInfo);
}
if (n.initialPosition) {
  var o = n.initialPosition;
  i = {
    x: o.x,
    y: o.y,
    width: o.width,
    height: o.height
  };
} else {
  i = m.buildWindowStyleFromInfo(n.positionInfo);
}
if (!w) {
  Array.isArray(e) || (e = [e]), w = e;
  for (var i = 0, n = e.length; i < n; i += 1) {
    v.open(e[i], t);
  }
  window.foreground.lock("windowsManagerDialog");
}
for (var i = 0, n = e.length; i < n; i += 1) {
  v.open(e[i], t);
}
for (var e in y) {
  "popup" !== e && y[e].openState && this._forceClose(e);
}
if (a && a.openState) {
  var s = a.position.x,
    r = a.position.y,
    l = a.position.width,
    d = a.position.height;
  null !== t && void 0 !== t || (t = s), null !== i && void 0 !== i || (i = r), null !== n && void 0 !== n || (n = l), null !== o && void 0 !== o || (o = d);
  var u = "translate3d(" + t + "px, " + i + "px,0)";
  c.tween(a, {
    opacity: 1,
    webkitTransform: u,
    width: n + "px",
    height: o + "px"
  }, {
    time: 150,
    delay: 0,
    easing: "ease-out"
  }, function () {
    v.positionWindow(e, {
      left: t,
      top: i,
      width: n,
      height: o
    });
  });
}
if (n && o.openState) {
  var a,
    s,
    l,
    c = n.position.width,
    d = o.position.width,
    u = o.position.x,
    h = u;
  t.leftOf ? (a = u - c, a < 0 && (a = 0, h = Math.min(c, r.screenWidth - d))) : t.rightOf && (a = u + d, a + c > r.screenWidth && (a = r.screenWidth - c, h = Math.max(0, a - d))), t.sameHeight && (s = n.position.height, l = n.position.y), n.position.x = a, t.height && (n.position.height = t.height), v.positionWindow(e, n.position), (h !== u || s) && v.moveAndResizeWindow(i, h, l, null, s);
}
if (n && o.openState) {
  var a;
  t.below && (a = o.position.y + o.position.height, t.fullHeight && (n.position.height = r.windowFullScreenHeight - a)), n.position.x = o.position.x, n.position.y = a, t.height && (n.position.height = t.height), v.positionWindow(e, n.position);
}
for (var t in y) {
  "popup" !== t && y[t].openState && ("function" == typeof y[t].getOpenedTabId ? e.push(t + " > " + y[t].getOpenedTabId()) : e.push(t));
}
if (this.getWindow(e)) {
  return this.getWindow(e).openState;
}
for (var n, o = 1; n = e + "#" + o, y[n]; o++) {
  ;
}
for (var e in this.optionDefs) {
  var t = this.optionDefs[e];
  this[e] = s.getValue(l + e, t.init);
}
if (t !== n) {
  this[e] = t, s.setValue(l + e, t);
  var o = this.optionDefs[e];
  o.onChange && o.onChange(t, n), this.isEmitting && console.error("GameOptions: change " + e + " is reentering change " + this.isEmitting), this.isEmitting = e, this.emit(e, t, n, i), this.isEmitting = null;
}
if (e.customInspect && i && A(i.inspect) && i.inspect !== t.inspect && (!i.constructor || i.constructor.prototype !== i)) {
  var o = i.inspect(n, e);
  return y(o) || (o = l(e, o, n)), o;
}
if (a) {
  return a;
}
if (e.showHidden && (s = Object.getOwnPropertyNames(i)), I(i) && (s.indexOf("message") >= 0 || s.indexOf("description") >= 0)) {
  return d(i);
}
if (0 === s.length) {
  if (A(i)) {
    var g = i.name ? ": " + i.name : "";
    return e.stylize("[Function" + g + "]", "special");
  }
  if (M(i)) {
    return e.stylize(RegExp.prototype.toString.call(i), "regexp");
  }
  if (C(i)) {
    return e.stylize(Date.prototype.toString.call(i), "date");
  }
  if (I(i)) {
    return d(i);
  }
}
if (A(i)) {
  var g = i.name ? ": " + i.name : "";
  return e.stylize("[Function" + g + "]", "special");
}
if (M(i)) {
  return e.stylize(RegExp.prototype.toString.call(i), "regexp");
}
if (C(i)) {
  return e.stylize(Date.prototype.toString.call(i), "date");
}
if (I(i)) {
  return d(i);
}
if (m(i) && (v = !0, w = ["[", "]"]), A(i)) {
  var b = i.name ? ": " + i.name : "";
  _ = " [Function" + b + "]";
}
if (M(i) && (_ = " " + RegExp.prototype.toString.call(i)), C(i) && (_ = " " + Date.prototype.toUTCString.call(i)), I(i) && (_ = " " + d(i)), 0 === s.length && (!v || 0 == i.length)) {
  return w[0] + _ + w[1];
}
if (n < 0) {
  return M(i) ? e.stylize(RegExp.prototype.toString.call(i), "regexp") : e.stylize("[Object]", "special");
}
if (b(t)) {
  return e.stylize("undefined", "undefined");
}
if (y(t)) {
  var i = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
  return e.stylize(i, "string");
}
for (var a = [], s = 0, r = t.length; s < r; ++s) {
  L(t, String(s)) ? a.push(h(e, t, i, n, String(s), !0)) : a.push("");
}
if (c = Object.getOwnPropertyDescriptor(t, o) || {
  value: t[o]
}, c.get ? r = c.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : c.set && (r = e.stylize("[Setter]", "special")), L(n, o) || (s = "[" + o + "]"), r || (e.seen.indexOf(c.value) < 0 ? (r = g(i) ? l(e, c.value, null) : l(e, c.value, i - 1), r.indexOf("\n") > -1 && (r = a ? r.split("\n").map(function (e) {
  return "  " + e;
}).join("\n").substr(2) : "\n" + r.split("\n").map(function (e) {
  return "   " + e;
}).join("\n"))) : r = e.stylize("[Circular]", "special")), b(s)) {
  if (a && o.match(/^\d+$/)) {
    return r;
  }
  s = JSON.stringify("" + o), s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = e.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = e.stylize(s, "string"));
}
if (a && o.match(/^\d+$/)) {
  return r;
}
if (!y(e)) {
  for (var t = [], i = 0; i < arguments.length; i++) {
    t.push(o(arguments[i]));
  }
  return t.join(" ");
}
for (var t = [], i = 0; i < arguments.length; i++) {
  t.push(o(arguments[i]));
}
for (var i = 1, n = arguments, a = n.length, s = String(e).replace(O, function (e) {
    if ("%%" === e) {
      return "%";
    }
    if (i >= a) {
      return e;
    }
    switch (e) {
      case "%s":
        return String(n[i++]);
      case "%d":
        return Number(n[i++]);
      case "%j":
        try {
          return JSON.stringify(n[i++]);
        } catch (t) {
          return "[Circular]";
        }
      default:
        return e;
    }
  }), r = n[i]; i < a; r = n[++i]) {
  s += g(r) || !T(r) ? " " + r : " " + o(r);
}
if ("%%" === e) {
  return "%";
}
if (i >= a) {
  return e;
}
if (!s) {
  if (n.throwDeprecation) {
    throw new Error(o);
  }
  n.traceDeprecation ? console.trace(o) : console.error(o), s = !0;
}
if (n.throwDeprecation) {
  throw new Error(o);
}
if (b(e.process)) {
  return function () {
    return t.deprecate(i, o).apply(this, arguments);
  };
}
if (n.noDeprecation === !0) {
  return i;
}
if (b(R) && (R = n.env.NODE_DEBUG || ""), e = e.toUpperCase(), !D[e]) {
  if (new RegExp("\\b" + e + "\\b", "i").test(R)) {
    var i = n.pid;
    D[e] = function () {
      var n = t.format.apply(t, arguments);
      console.error("%s %d: %s", e, i, n);
    };
  } else {
    D[e] = function () {};
  }
}
if (new RegExp("\\b" + e + "\\b", "i").test(R)) {
  var i = n.pid;
  D[e] = function () {
    var n = t.format.apply(t, arguments);
    console.error("%s %d: %s", e, i, n);
  };
} else {
  D[e] = function () {};
}
if (!t || !T(t)) {
  return e;
}
for (var i = Object.keys(t), n = i.length; n--;) {
  e[i[n]] = t[i[n]];
}
if (!o(e) || e < 0 || isNaN(e)) {
  throw TypeError("n must be a positive number");
}
if (this._events || (this._events = {}), "error" === e && (!this._events.error || a(this._events.error) && !this._events.error.length)) {
  if (t = arguments[1], t instanceof Error) {
    throw t;
  }
  var d = new Error('Uncaught, unspecified "error" event. (' + t + ")");
  throw d.context = t, d;
}
if (t = arguments[1], t instanceof Error) {
  throw t;
}
if (i = this._events[e], s(i)) {
  return !1;
}
if (n(i)) {
  switch (arguments.length) {
    case 1:
      i.call(this);
      break;
    case 2:
      i.call(this, arguments[1]);
      break;
    case 3:
      i.call(this, arguments[1], arguments[2]);
      break;
    default:
      r = Array.prototype.slice.call(arguments, 1), i.apply(this, r);
  }
} else if (a(i)) {
  for (r = Array.prototype.slice.call(arguments, 1), c = i.slice(), o = c.length, l = 0; l < o; l++) {
    c[l].apply(this, r);
  }
}
if (a(i)) {
  for (r = Array.prototype.slice.call(arguments, 1), c = i.slice(), o = c.length, l = 0; l < o; l++) {
    c[l].apply(this, r);
  }
}
for (r = Array.prototype.slice.call(arguments, 1), c = i.slice(), o = c.length, l = 0; l < o; l++) {
  c[l].apply(this, r);
}
if (!n(t)) {
  throw TypeError("listener must be a function");
}
if (!n(t)) {
  throw TypeError("listener must be a function");
}
if (!n(t)) {
  throw TypeError("listener must be a function");
}
if (!this._events || !this._events[e]) {
  return this;
}
if (i = this._events[e], s = i.length, o = -1, i === t || n(i.listener) && i.listener === t) {
  delete this._events[e], this._events.removeListener && this.emit("removeListener", e, t);
} else if (a(i)) {
  for (r = s; r-- > 0;) {
    if (i[r] === t || i[r].listener && i[r].listener === t) {
      o = r;
      break;
    }
  }
  if (o < 0) {
    return this;
  }
  1 === i.length ? (i.length = 0, delete this._events[e]) : i.splice(o, 1), this._events.removeListener && this.emit("removeListener", e, t);
}
if (a(i)) {
  for (r = s; r-- > 0;) {
    if (i[r] === t || i[r].listener && i[r].listener === t) {
      o = r;
      break;
    }
  }
  if (o < 0) {
    return this;
  }
  1 === i.length ? (i.length = 0, delete this._events[e]) : i.splice(o, 1), this._events.removeListener && this.emit("removeListener", e, t);
}
for (r = s; r-- > 0;) {
  if (i[r] === t || i[r].listener && i[r].listener === t) {
    o = r;
    break;
  }
}
if (i[r] === t || i[r].listener && i[r].listener === t) {
  o = r;
  break;
}
if (o < 0) {
  return this;
}
if (!this._events) {
  return this;
}
if (!this._events.removeListener) {
  return 0 === arguments.length ? this._events = {} : this._events[e] && delete this._events[e], this;
}
if (0 === arguments.length) {
  for (t in this._events) {
    "removeListener" !== t && this.removeAllListeners(t);
  }
  return this.removeAllListeners("removeListener"), this._events = {}, this;
}
for (t in this._events) {
  "removeListener" !== t && this.removeAllListeners(t);
}
if (i = this._events[e], n(i)) {
  this.removeListener(e, i);
} else if (i) {
  for (; i.length;) {
    this.removeListener(e, i[i.length - 1]);
  }
}
if (i) {
  for (; i.length;) {
    this.removeListener(e, i[i.length - 1]);
  }
}
for (; i.length;) {
  this.removeListener(e, i[i.length - 1]);
}
if (this._events) {
  var t = this._events[e];
  if (n(t)) {
    return 1;
  }
  if (t) {
    return t.length;
  }
}
if (n(t)) {
  return 1;
}
if (t) {
  return t.length;
}
if (!this._hasListeners) {
  var e = this;
  window.gui.on("appGoBackground", function () {
    null !== e.accountName && e.autosave && e._save();
  }), this._hasListeners = !0;
}
if (i()) {
  var n = c(t);
  if (e.emit("tapend", n), !M) {
    var o = Date.now();
    !A && C && T >= o - C ? e.emit("doubletap", n) : e.emit("tap", n) && r(), C = o;
  }
}
if (e.emit("tapend", n), !M) {
  var o = Date.now();
  !A && C && T >= o - C ? e.emit("doubletap", n) : e.emit("tap", n) && r(), C = o;
}
if (!e._tapBehavior) {
  t = t || {}, e._tapBehavior = !0, e.allowDomEvents();
  var y,
    w,
    b,
    M,
    T = t.doubletapTimeout || m,
    C = 0,
    I = !0,
    A = t.repeatDelay;
  e.enable = n, e.disable = o, e.tap = a, e.cancelTap = s, e.on("dom.touchstart", _), e.setEnable = function (t) {
    "boolean" != typeof t && console.error(new Error("tapBehavior: setEnable has been called with an undefined param")), I = t, e.emit("enable", t);
  }, e.isEnable = function () {
    return I;
  };
}
for (var e = f.length - 1; e >= 0; e--) {
  f[e].cancelTap();
}
if (i && i.padding) {
  var c = i.padding;
  s.width += 2 * c, s.height += 2 * c;
}
if (x = Date.now(), A = O.x, S = O.y, n(t), T) {
  if (1 !== O.touchCount) {
    return;
  }
  return N = E, E = O.x - A, e.emit("slide", O), e.slideOut = O.x < 0 || O.x > C.width || O.y < 0 || O.y > C.height, void (e.slideOut ? I || (I = !0, e.emit("slideOut", O)) : (e.emit("slideIn", O), I = !1));
}
if (1 !== O.touchCount) {
  return;
}
if (!(s < d)) {
  if (Math.abs(a) > Math.abs(i)) {
    if (w && "y" !== w || !r.requestInteractionHandle("SLIDE", e)) {
      return void e.cancelSlide();
    }
    T = !0;
  } else {
    if (w && "x" !== w || !r.requestInteractionHandle("SLIDE", e)) {
      return void e.cancelSlide();
    }
    T = !0;
  }
  e.isSliding = !0, e.emit("slideStart", O, C), E = N = 0, o.isIOS && (R = l.setInterval(_, 100));
}
if (Math.abs(a) > Math.abs(i)) {
  if (w && "y" !== w || !r.requestInteractionHandle("SLIDE", e)) {
    return void e.cancelSlide();
  }
  T = !0;
} else {
  if (w && "x" !== w || !r.requestInteractionHandle("SLIDE", e)) {
    return void e.cancelSlide();
  }
  T = !0;
}
if (w && "y" !== w || !r.requestInteractionHandle("SLIDE", e)) {
  return void e.cancelSlide();
}
if (w && "x" !== w || !r.requestInteractionHandle("SLIDE", e)) {
  return void e.cancelSlide();
}
if (w) {
  var o = "x" === w ? i : n,
    a = "x" === w ? A : S;
  t = g(o - b[w], o - a);
} else {
  t = g(i - b.x, i - A) && "x" || g(n - b.y, n - S) && "y";
}
if (x !== P) {
  return void (P = x);
}
if (!(e < a.screenWidth - u)) {
  return e + 2 * N >= a.screenWidth ? (m(), y(), void r.abortInteraction()) : Date.now() - x > 5e3 ? f() : void 0;
}
if (!e._slideBehavior) {
  e._slideBehavior = !0, e.allowDomEvents();
  var w,
    b,
    M,
    T,
    C,
    I,
    A,
    S,
    E,
    N,
    x,
    L = !1,
    O = {},
    R = null,
    D = u / 2;
  t && i(t), e.setSlideDirection = i, e.setSwipeMinimum = function (e) {
    D = e;
  }, e.isSliding = !1, e.slideOut = !1, e.lockSlide = function (e) {
    L = e;
  }, e.cancelSlide = f;
  var P = 0;
  e.on("dom.touchstart", function (t) {
    M || L || (C = c(e.rootElement), n(t), A = O.x, S = O.y, e.slideOut = !1, M = !0, b = {
      x: O.x,
      y: O.y
    }, v());
  });
}
if (this.myWindow.exchangeType !== f.TAXCOLLECTOR) {
  return void this.myWindow.windowManager.close(this.myWindow.id);
}
if (this._sendWindowKPI(), "number" == typeof this.freeContentDelay || "function" == typeof this.freeContent) {
  if ("function" != typeof this.freeContent) {
    return console.error("missing freeContent method for", this.id);
  }
  this.freeContentTimeout = window.setTimeout(this.freeContent.bind(this), this.freeContentDelay || 0);
}
if ("function" != typeof this.freeContent) {
  return console.error("missing freeContent method for", this.id);
}
if (this.position) {
  var i = y(this.rootElement),
    n = y(this.header.rootElement),
    o = i.width,
    a = n.height + (n.top - i.top);
  e = Math.max(0, e), t = Math.max(0, t), e + o > v.windowFullScreenWidth && (e = v.windowFullScreenWidth - o), t + a > v.windowFullScreenHeight && (t = v.windowFullScreenHeight - a), this.setStyle("webkitTransform", "translate3d(" + e + "px, " + t + "px, 0)"), this.position.x = e, this.position.y = t, this.emit("positioned");
}
if (!this.tabs) {
  var e = window.gui.playerData;
  this._openedTimestamp = _.now(), this._scBalanceWhenOpen = e.inventory.kamas, this._hcBalanceWhenOpen = e.inventory.goultines;
}
if (t && t.attr) {
  for (i in t.attr) {
    n.setAttribute(i, t.attr[i]);
  }
}
for (i in t.attr) {
  n.setAttribute(i, t.attr[i]);
}
if (this.rootElement) {
  throw new Error("WuiDom has already an element assigned");
}
if ("string" == typeof e) {
  this.rootElement = o(e, t), t && t.hasOwnProperty("text") && this.setText(t.text);
} else {
  if (!(e instanceof window.Element)) {
    throw new Error("WuiDom.assign requires the given argument to be a DOM Element or tagName.");
  }
  this.rootElement = e;
}
if (!(e instanceof window.Element)) {
  throw new Error("WuiDom.assign requires the given argument to be a DOM Element or tagName.");
}
if (!t && (e = this._childrenMap[e], !e)) {
  throw new Error("WuiDom: Given name is not a current child");
}
if (i === -1) {
  throw new Error("WuiDom: Not a current child");
}
if (e !== this._parent) {
  if (this._name) {
    if (e._childrenMap[this._name]) {
      throw new Error("WuiDom: Parent already has a child with this name");
    }
    e._childrenMap[this._name] = this;
  }
  this._parent = e;
}
if (this._name) {
  if (e._childrenMap[this._name]) {
    throw new Error("WuiDom: Parent already has a child with this name");
  }
  e._childrenMap[this._name] = this;
}
if (e._childrenMap[this._name]) {
  throw new Error("WuiDom: Parent already has a child with this name");
}
if (this._contentType && this._contentType !== c.WUI && this._clearLinearContent(), this === e._parent) {
  var t = this._childrenList.indexOf(e);
  t !== -1 && this._childrenList.splice(t, 1);
} else {
  e._unsetParent(), e._setParent(this);
}
if (this === e._parent) {
  var n = this._childrenList.indexOf(e);
  n !== -1 && this._childrenList.splice(n, 1);
} else {
  e._unsetParent();
}
if (t) {
  if (i = this._childrenList.indexOf(t), i === -1) {
    throw new Error("WuiDom: Wanted sibling is not a child");
  }
} else {
  i = this._childrenList.length;
}
if (i = this._childrenList.indexOf(t), i === -1) {
  throw new Error("WuiDom: Wanted sibling is not a child");
}
if (!e._parent) {
  throw new Error("WuiDom: sibling has no parent");
}
for (var i in e) {
  t[i] = e[i];
}
if (!e) {
  return {};
}
for (var t = {}, i = 0, n = arguments.length; i < n; i += 1) {
  var o = arguments[i];
  t[o] = e.getPropertyValue(o);
}
for (var i = 0; i < e.length; i += 1) {
  this.toggleClassName(e[i], t);
}
for (var t = 0, i = e.length; t < i; t += 1) {
  var n = e[t];
  n.emit("destroy"), n._parent = null, n._destroyChildren(), n._removeDom(), n.removeAllListeners();
}
if (this.domListeners) {
  var e = this.rootElement;
  for (var t in this.domListeners) {
    if (t.match(/^touch/)) {
      var i = this.domListeners[t];
      for (var n in i) {
        var o = i[n];
        e.removeEventListener(n, o), e.addEventListener(n, o);
      }
    }
  }
}
for (var t in this.domListeners) {
  if (t.match(/^touch/)) {
    var i = this.domListeners[t];
    for (var n in i) {
      var o = i[n];
      e.removeEventListener(n, o), e.addEventListener(n, o);
    }
  }
}
if (t.match(/^touch/)) {
  var i = this.domListeners[t];
  for (var n in i) {
    var o = i[n];
    e.removeEventListener(n, o), e.addEventListener(n, o);
  }
}
for (var n in i) {
  var o = i[n];
  e.removeEventListener(n, o), e.addEventListener(n, o);
}
if (e.customInspect && i && A(i.inspect) && i.inspect !== t.inspect && (!i.constructor || i.constructor.prototype !== i)) {
  var o = i.inspect(n, e);
  return y(o) || (o = l(e, o, n)), o;
}
if (a) {
  return a;
}
if (e.showHidden && (s = Object.getOwnPropertyNames(i)), I(i) && (s.indexOf("message") >= 0 || s.indexOf("description") >= 0)) {
  return d(i);
}
if (0 === s.length) {
  if (A(i)) {
    var g = i.name ? ": " + i.name : "";
    return e.stylize("[Function" + g + "]", "special");
  }
  if (M(i)) {
    return e.stylize(RegExp.prototype.toString.call(i), "regexp");
  }
  if (C(i)) {
    return e.stylize(Date.prototype.toString.call(i), "date");
  }
  if (I(i)) {
    return d(i);
  }
}
if (A(i)) {
  var g = i.name ? ": " + i.name : "";
  return e.stylize("[Function" + g + "]", "special");
}
if (M(i)) {
  return e.stylize(RegExp.prototype.toString.call(i), "regexp");
}
if (C(i)) {
  return e.stylize(Date.prototype.toString.call(i), "date");
}
if (I(i)) {
  return d(i);
}
if (m(i) && (v = !0, w = ["[", "]"]), A(i)) {
  var b = i.name ? ": " + i.name : "";
  _ = " [Function" + b + "]";
}
if (M(i) && (_ = " " + RegExp.prototype.toString.call(i)), C(i) && (_ = " " + Date.prototype.toUTCString.call(i)), I(i) && (_ = " " + d(i)), 0 === s.length && (!v || 0 == i.length)) {
  return w[0] + _ + w[1];
}
if (n < 0) {
  return M(i) ? e.stylize(RegExp.prototype.toString.call(i), "regexp") : e.stylize("[Object]", "special");
}
if (b(t)) {
  return e.stylize("undefined", "undefined");
}
if (y(t)) {
  var i = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
  return e.stylize(i, "string");
}
for (var a = [], s = 0, r = t.length; s < r; ++s) {
  L(t, String(s)) ? a.push(h(e, t, i, n, String(s), !0)) : a.push("");
}
if (c = Object.getOwnPropertyDescriptor(t, o) || {
  value: t[o]
}, c.get ? r = c.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : c.set && (r = e.stylize("[Setter]", "special")), L(n, o) || (s = "[" + o + "]"), r || (e.seen.indexOf(c.value) < 0 ? (r = g(i) ? l(e, c.value, null) : l(e, c.value, i - 1), r.indexOf("\n") > -1 && (r = a ? r.split("\n").map(function (e) {
  return "  " + e;
}).join("\n").substr(2) : "\n" + r.split("\n").map(function (e) {
  return "   " + e;
}).join("\n"))) : r = e.stylize("[Circular]", "special")), b(s)) {
  if (a && o.match(/^\d+$/)) {
    return r;
  }
  s = JSON.stringify("" + o), s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = e.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = e.stylize(s, "string"));
}
if (a && o.match(/^\d+$/)) {
  return r;
}
if (!y(e)) {
  for (var t = [], i = 0; i < arguments.length; i++) {
    t.push(o(arguments[i]));
  }
  return t.join(" ");
}
for (var t = [], i = 0; i < arguments.length; i++) {
  t.push(o(arguments[i]));
}
for (var i = 1, n = arguments, a = n.length, s = String(e).replace(O, function (e) {
    if ("%%" === e) {
      return "%";
    }
    if (i >= a) {
      return e;
    }
    switch (e) {
      case "%s":
        return String(n[i++]);
      case "%d":
        return Number(n[i++]);
      case "%j":
        try {
          return JSON.stringify(n[i++]);
        } catch (t) {
          return "[Circular]";
        }
      default:
        return e;
    }
  }), r = n[i]; i < a; r = n[++i]) {
  s += g(r) || !T(r) ? " " + r : " " + o(r);
}
if ("%%" === e) {
  return "%";
}
if (i >= a) {
  return e;
}
if (!s) {
  if (n.throwDeprecation) {
    throw new Error(o);
  }
  n.traceDeprecation ? console.trace(o) : console.error(o), s = !0;
}
if (n.throwDeprecation) {
  throw new Error(o);
}
if (b(e.process)) {
  return function () {
    return t.deprecate(i, o).apply(this, arguments);
  };
}
if (n.noDeprecation === !0) {
  return i;
}
if (b(R) && (R = n.env.NODE_DEBUG || ""), e = e.toUpperCase(), !D[e]) {
  if (new RegExp("\\b" + e + "\\b", "i").test(R)) {
    var i = n.pid;
    D[e] = function () {
      var n = t.format.apply(t, arguments);
      console.error("%s %d: %s", e, i, n);
    };
  } else {
    D[e] = function () {};
  }
}
if (new RegExp("\\b" + e + "\\b", "i").test(R)) {
  var i = n.pid;
  D[e] = function () {
    var n = t.format.apply(t, arguments);
    console.error("%s %d: %s", e, i, n);
  };
} else {
  D[e] = function () {};
}
if (!t || !T(t)) {
  return e;
}
for (var i = Object.keys(t), n = i.length; n--;) {
  e[i[n]] = t[i[n]];
}
if (!o(e) || e < 0 || isNaN(e)) {
  throw TypeError("n must be a positive number");
}
if (this._events || (this._events = {}), "error" === e && (!this._events.error || a(this._events.error) && !this._events.error.length)) {
  if (t = arguments[1], t instanceof Error) {
    throw t;
  }
  throw TypeError('Uncaught, unspecified "error" event.');
}
if (t = arguments[1], t instanceof Error) {
  throw t;
}
if (i = this._events[e], s(i)) {
  return !1;
}
if (n(i)) {
  switch (arguments.length) {
    case 1:
      i.call(this);
      break;
    case 2:
      i.call(this, arguments[1]);
      break;
    case 3:
      i.call(this, arguments[1], arguments[2]);
      break;
    default:
      r = Array.prototype.slice.call(arguments, 1), i.apply(this, r);
  }
} else if (a(i)) {
  for (r = Array.prototype.slice.call(arguments, 1), c = i.slice(), o = c.length, l = 0; l < o; l++) {
    c[l].apply(this, r);
  }
}
if (a(i)) {
  for (r = Array.prototype.slice.call(arguments, 1), c = i.slice(), o = c.length, l = 0; l < o; l++) {
    c[l].apply(this, r);
  }
}
for (r = Array.prototype.slice.call(arguments, 1), c = i.slice(), o = c.length, l = 0; l < o; l++) {
  c[l].apply(this, r);
}
if (!n(t)) {
  throw TypeError("listener must be a function");
}
if (!n(t)) {
  throw TypeError("listener must be a function");
}
if (!n(t)) {
  throw TypeError("listener must be a function");
}
if (!this._events || !this._events[e]) {
  return this;
}
if (i = this._events[e], s = i.length, o = -1, i === t || n(i.listener) && i.listener === t) {
  delete this._events[e], this._events.removeListener && this.emit("removeListener", e, t);
} else if (a(i)) {
  for (r = s; r-- > 0;) {
    if (i[r] === t || i[r].listener && i[r].listener === t) {
      o = r;
      break;
    }
  }
  if (o < 0) {
    return this;
  }
  1 === i.length ? (i.length = 0, delete this._events[e]) : i.splice(o, 1), this._events.removeListener && this.emit("removeListener", e, t);
}
if (a(i)) {
  for (r = s; r-- > 0;) {
    if (i[r] === t || i[r].listener && i[r].listener === t) {
      o = r;
      break;
    }
  }
  if (o < 0) {
    return this;
  }
  1 === i.length ? (i.length = 0, delete this._events[e]) : i.splice(o, 1), this._events.removeListener && this.emit("removeListener", e, t);
}
for (r = s; r-- > 0;) {
  if (i[r] === t || i[r].listener && i[r].listener === t) {
    o = r;
    break;
  }
}
if (i[r] === t || i[r].listener && i[r].listener === t) {
  o = r;
  break;
}
if (o < 0) {
  return this;
}
if (!this._events) {
  return this;
}
if (!this._events.removeListener) {
  return 0 === arguments.length ? this._events = {} : this._events[e] && delete this._events[e], this;
}
if (0 === arguments.length) {
  for (t in this._events) {
    "removeListener" !== t && this.removeAllListeners(t);
  }
  return this.removeAllListeners("removeListener"), this._events = {}, this;
}
for (t in this._events) {
  "removeListener" !== t && this.removeAllListeners(t);
}
if (i = this._events[e], n(i)) {
  this.removeListener(e, i);
} else if (i) {
  for (; i.length;) {
    this.removeListener(e, i[i.length - 1]);
  }
}
if (i) {
  for (; i.length;) {
    this.removeListener(e, i[i.length - 1]);
  }
}
for (; i.length;) {
  this.removeListener(e, i[i.length - 1]);
}
if (this._events) {
  var t = this._events[e];
  if (n(t)) {
    return 1;
  }
  if (t) {
    return t.length;
  }
}
if (n(t)) {
  return 1;
}
if (t) {
  return t.length;
}
if (s[0] === r) {
  var l = s[1];
  if (l && !this.domListeners[l]) {
    switch (l) {
      case "touchstart":
        var c = function (e) {
            o() || 1 !== e.which || t.emit("dom.touchstart", e);
          },
          d = function (e) {
            i(), t.emit("dom.touchstart", e);
          };
        this.domListeners.touchstart = {
          mousedown: c,
          touchstart: d
        }, this.rootElement.addEventListener("mousedown", c), this.rootElement.addEventListener("touchstart", d);
        break;
      case "touchmove":
        var u = function (e) {
            a || 1 !== e.which || t.emit("dom.touchmove", e);
          },
          h = function (e) {
            t.emit("dom.touchmove", e);
          };
        this.domListeners.touchmove = {
          mousemove: u,
          touchmove: h
        }, this.rootElement.addEventListener("mousemove", u), this.rootElement.addEventListener("touchmove", h);
        break;
      case "touchend":
        var p = function (e) {
            return o() || 1 !== e.which ? void n() : void t.emit("dom.touchend", e);
          },
          m = function (e) {
            i(), t.emit("dom.touchend", e), e.preventDefault();
          };
        this.domListeners.touchend = {
          mouseup: p,
          touchend: m
        }, this.rootElement.addEventListener("mouseup", p), this.rootElement.addEventListener("touchend", m);
        break;
      default:
        var f = function (i) {
          t.emit(e, i);
        };
        this.domListeners[l] = f, this.rootElement.addEventListener(l, f);
    }
  }
}
if (l && !this.domListeners[l]) {
  switch (l) {
    case "touchstart":
      var c = function (e) {
          o() || 1 !== e.which || t.emit("dom.touchstart", e);
        },
        d = function (e) {
          i(), t.emit("dom.touchstart", e);
        };
      this.domListeners.touchstart = {
        mousedown: c,
        touchstart: d
      }, this.rootElement.addEventListener("mousedown", c), this.rootElement.addEventListener("touchstart", d);
      break;
    case "touchmove":
      var u = function (e) {
          a || 1 !== e.which || t.emit("dom.touchmove", e);
        },
        h = function (e) {
          t.emit("dom.touchmove", e);
        };
      this.domListeners.touchmove = {
        mousemove: u,
        touchmove: h
      }, this.rootElement.addEventListener("mousemove", u), this.rootElement.addEventListener("touchmove", h);
      break;
    case "touchend":
      var p = function (e) {
          return o() || 1 !== e.which ? void n() : void t.emit("dom.touchend", e);
        },
        m = function (e) {
          i(), t.emit("dom.touchend", e), e.preventDefault();
        };
      this.domListeners.touchend = {
        mouseup: p,
        touchend: m
      }, this.rootElement.addEventListener("mouseup", p), this.rootElement.addEventListener("touchend", m);
      break;
    default:
      var f = function (i) {
        t.emit(e, i);
      };
      this.domListeners[l] = f, this.rootElement.addEventListener(l, f);
  }
}
if (0 === this.listeners(e).length) {
  var t = e.split(".");
  if (t[0] === r) {
    var i = t[1],
      n = this.domListeners[i];
    if (n) {
      if (null !== n && "object" == typeof n) {
        for (var o in n) {
          var a = n[o];
          this.rootElement.removeEventListener(o, a);
        }
        return void delete this.domListeners[i];
      }
      this.rootElement.removeEventListener(i, n), delete this.domListeners[i];
    }
  }
}
if (t[0] === r) {
  var i = t[1],
    n = this.domListeners[i];
  if (n) {
    if (null !== n && "object" == typeof n) {
      for (var o in n) {
        var a = n[o];
        this.rootElement.removeEventListener(o, a);
      }
      return void delete this.domListeners[i];
    }
    this.rootElement.removeEventListener(i, n), delete this.domListeners[i];
  }
}
if (n) {
  if (null !== n && "object" == typeof n) {
    for (var o in n) {
      var a = n[o];
      this.rootElement.removeEventListener(o, a);
    }
    return void delete this.domListeners[i];
  }
  this.rootElement.removeEventListener(i, n), delete this.domListeners[i];
}
if (null !== n && "object" == typeof n) {
  for (var o in n) {
    var a = n[o];
    this.rootElement.removeEventListener(o, a);
  }
  return void delete this.domListeners[i];
}
for (var o in n) {
  var a = n[o];
  this.rootElement.removeEventListener(o, a);
}
for (var e in this.domListeners) {
  var t = this.domListeners[e];
  if (null === t || "object" != typeof t) {
    this.rootElement.removeEventListener(e, t);
  } else {
    for (var i in t) {
      var n = t[i];
      this.rootElement.removeEventListener(i, n);
    }
  }
}
if (null === t || "object" != typeof t) {
  this.rootElement.removeEventListener(e, t);
} else {
  for (var i in t) {
    var n = t[i];
    this.rootElement.removeEventListener(i, n);
  }
}
for (var i in t) {
  var n = t[i];
  this.rootElement.removeEventListener(i, n);
}
if ("string" != typeof e) {
  throw new TypeError('Failed to construct "CustomEvent": An event name must be provided.');
}
for (var t = this; t;) {
  if (t.matches(e)) {
    return t;
  }
  t = t.parentElement;
}
if (t.matches(e)) {
  return t;
}
if (t && (o = t.length), !o) {
  throw new Error("No node was specified (DOM Exception 8)");
}
if (1 === o) {
  return e(t[0]);
}
for (i = document.createDocumentFragment(), n = 0; n < o; n++) {
  i.appendChild(e(t[n]));
}
if (o(n) || (e = i(85), Object.defineProperty(Element.prototype, "classList", {
  get: function () {
    function t() {}
    return t.prototype = new e(this, "class"), new t();
  }
})), !o(t)) {
  e = i(85);
  var a = DOMTokenList.prototype,
    s = function (e) {
      return function () {
        var t,
          i = arguments.length;
        for (t = 0; t < i; t++) {
          e.call(this, arguments[t]);
        }
      };
    };
  a.add = s(a.add), a.remove = s(a.remove), a.toggle = function (t, i) {
    return 1 in arguments && this.contains(t) === i ? i : e.prototype.toggle.call(this, t, i);
  };
}
for (t = 0; t < i; t++) {
  e.call(this, arguments[t]);
}
for (var i = t.length, n = 0; n < i; n++) {
  e[n] = t[n];
}
if ("" === e || void 0 === e) {
  throw new Error("An invalid or illegal string was specified (DOM Exception 12)");
}
if (/\s+/.test(e)) {
  throw new Error("InvalidCharacterError: String contains an invalid character (DOM Exception 5)");
}
for (var t, i = 0, s = arguments.length, r = o(this), l = !1; i < s; i++) {
  t = arguments[i], a(t), r.indexOf(t) < 0 && (r.push(t), l = !0);
}
for (var t, i, s = 0, r = arguments.length, l = o(this), c = !1; s < r; s++) {
  for (i = arguments[s], a(i); (t = l.indexOf(i)) > -1;) {
    l.splice(t, 1), c = !0;
  }
}
for (i = arguments[s], a(i); (t = l.indexOf(i)) > -1;) {
  l.splice(t, 1), c = !0;
}
if (i) {
  if ("string" == typeof i && d.indexOf(i) < 0) {
    return console.error("Invalid addIcon option:", i);
  }
  var n = new r("div", {
    className: "btnIcon"
  });
  "before" === i && this.appendChild(n), e.text && this.createChild("div", {
    className: "btnText",
    text: e.text
  }), "after" !== i && i !== !0 || this.appendChild(n);
}
if ("string" == typeof i && d.indexOf(i) < 0) {
  return console.error("Invalid addIcon option:", i);
}
for (var t = this.content.getChildren(), i = 0; i < t.length; i++) {
  this.content.removeChild(t[i]);
}
if (i.centerOnTarget) {
  var u = t.left + t.width / 2,
    h = t.top + t.height / 2;
  a = p.getCenteredTooltipPosition(l, c, u, h);
} else {
  a = p.getBestTooltipPosition(l, c, t, d);
}
if (e._tooltipEnabled && !window.gui.pingSystem.isActive() && w.requestInteractionHandle("TOOLTIP", c) && (clearTimeout(h), h = null, !d || d !== e)) {
  var t = n(),
    i = t instanceof g;
  if (d && d.emit("tooltipOut"), !i) {
    return c._closeTooltip(!0), void c._setContent(!1);
  }
  c._updateAndAppear(t, p.getTargetRect(e), {
    margin: A / 2
  }), c.delClassNames("noBackground"), d = e, e.emit("tooltipOn");
}
if (d && d.emit("tooltipOut"), !i) {
  return c._closeTooltip(!0), void c._setContent(!1);
}
if (!e.hasOwnProperty("_tooltipEnabled")) {
  e._tooltipEnabled = !0, i = i || {}, t = "string" == typeof t ? new g("div", {
    text: t
  }) : t, v(e), y(e), e.on("longtap", function () {
    y.start(), o(), u = !0;
  }), e.on("touchenter", function () {
    u && o();
  });
  var s = this;
  i.openOnTap ? e.on("tap", o) : i.longTapExplanation && e.on("tap", a), e.on("touchleave", r);
}
if (M) {
  M = !1;
  var e = document.elementFromPoint(p, m);
  if (!e) {
    return void (M = !0);
  }
  if (e === v) {
    return void o();
  }
  v = e, g = b.touchedElements = [];
  var t = document.createEvent("Event");
  t.initEvent("touching", !0, !0), e.dispatchEvent(t);
}
if (!e) {
  return void (M = !0);
}
if (e === v) {
  return void o();
}
for (var e = g.length - 1, t = f.length - 1, i = Math.max(e, t); i >= 0; i -= 1) {
  var n = f[t],
    o = g[e];
  n !== o && (n && n.emit("touchleave", b), o && o.emit("touchenter", b)), t -= 1, e -= 1;
}
for (var e in d) {
  T.createSoundPermanent(d[e], "ui");
}
if (v && f.isRoleplayMode) {
  T.playLoopSound("music", v.id, v.volume / 100);
} else if (f.isFightMode) {
  var t = e && w ? w : y;
  t && T.playLoopSound("music", t.id, t.volume / 100);
}
if (f.isFightMode) {
  var t = e && w ? w : y;
  t && T.playLoopSound("music", t.id, t.volume / 100);
}
if (!T.channels.ui.muted) {
  var t = d[e];
  if (!t) {
    return console.warn("Incorrect UI sound id: " + e);
  }
  M || a(), T.playSound("ui", t);
}
if (!t) {
  return console.warn("Incorrect UI sound id: " + e);
}
for (var n = 0; n < t.length; n++) {
  var o = t[n],
    a = _[o.type_id];
  a && (i[a] = o);
}
for (var n in e) {
  if (e.hasOwnProperty(n)) {
    for (var o = e[n], a = [], s = 0; s < o.vol.length; s++) {
      a.push(o.vol[s] / 100);
    }
    T.createSoundGroup(n, {
      id: o.id,
      vol: a
    }, i);
  }
}
if (e.hasOwnProperty(n)) {
  for (var o = e[n], a = [], s = 0; s < o.vol.length; s++) {
    a.push(o.vol[s] / 100);
  }
  T.createSoundGroup(n, {
    id: o.id,
    vol: a
  }, i);
}
for (var o = e[n], a = [], s = 0; s < o.vol.length; s++) {
  a.push(o.vol[s] / 100);
}
for (var t in e) {
  if ("ambient" !== t) {
    var i = e[t];
    this.setChannelVolume(t, i.volume, i.muted);
  }
}
if ("ambient" !== t) {
  var i = e[t];
  this.setChannelVolume(t, i.volume, i.muted);
}
for (var t in T.channels) {
  if ("ambient" !== t) {
    var i = "music" === t && h.isIpad2,
      n = i ? 0 : 1;
    e[t] = {
      muted: i,
      volume: n
    };
  }
}
if ("ambient" !== t) {
  var i = "music" === t && h.isIpad2,
    n = i ? 0 : 1;
  e[t] = {
    muted: i,
    volume: n
  };
}
for (var t = 0; t < e.length; t++) {
  var i = e[t];
  this.channels[i] = new l(i);
}
if (!this.audioContext && o) {
  this.audioContext = new o(), s.prototype.audioContext = this.audioContext;
  for (var e in this.soundsById) {
    this.soundsById.hasOwnProperty(e) && this.soundsById[e].init();
  }
}
for (var e in this.soundsById) {
  this.soundsById.hasOwnProperty(e) && this.soundsById[e].init();
}
for (var t in e) {
  if (e.hasOwnProperty(t)) {
    var i = e[t];
    this.setVolume(t, i.volume, i.muted);
  }
}
if (e.hasOwnProperty(t)) {
  var i = e[t];
  this.setVolume(t, i.volume, i.muted);
}
for (var t in this.channels) {
  if (this.channels.hasOwnProperty(t)) {
    var i = this.channels[t];
    if (!i.loopSound) {
      continue;
    }
    if (e) {
      i.loopSound.stop();
    } else {
      var n = i.muted;
      i.muted = !0, i.setVolume(null, n);
    }
  }
}
if (this.channels.hasOwnProperty(t)) {
  var i = this.channels[t];
  if (!i.loopSound) {
    continue;
  }
  if (e) {
    i.loopSound.stop();
  } else {
    var n = i.muted;
    i.muted = !0, i.setVolume(null, n);
  }
}
if (!i.loopSound) {
  continue;
}
if (e) {
  i.loopSound.stop();
} else {
  var n = i.muted;
  i.muted = !0, i.setVolume(null, n);
}
if (n && "FROM_MISSING_AUDIO_LIST" !== n) {
  var o = "";
  switch (typeof n) {
    case "string":
      o = n;
      break;
    case "object":
      try {
        o = JSON.stringify(n);
      } catch (a) {
        o = "failed stringify: " + a;
      }
      break;
    default:
      console.error("loadSound: UNKNOWN typeof " + typeof n + " for " + n);
  }
  console.error("loadSound: error " + o + ' for "audio/' + e + '.mp3": "' + t.soundGroupId + '",');
}
if (i) {
  return i();
}
for (var t in this.permanentSounds) {
  if (this.permanentSounds.hasOwnProperty(t)) {
    var i = this.permanentSounds[t];
    e += i.usedMemory;
  }
}
if (this.permanentSounds.hasOwnProperty(t)) {
  var i = this.permanentSounds[t];
  e += i.usedMemory;
}
for (var n in this.soundsById) {
  if (this.soundsById.hasOwnProperty(n)) {
    var o = this.soundsById[n];
    e += o.usedMemory;
  }
}
if (this.soundsById.hasOwnProperty(n)) {
  var o = this.soundsById[n];
  e += o.usedMemory;
}
if (i) {
  return i;
}
if (!i) {
  return console.warn('Channel id "' + e + '" does not exist.');
}
for (var e in this.channels) {
  this.stopLoopSound(e);
}
for (e in this.channels) {
  var s = this.channels[e];
  s.loopSound && (a[s.loopSound.id] = !0);
}
for (e in this.soundGroupsById) {
  t = this.soundGroupsById[e], t.poolRef = this.soundGroupArchive.add(t), this.soundGroupArchiveById[e] = t, delete this.soundGroupsById[e];
}
for (e in this.soundsById) {
  a[e] || (i = this.soundsById[e], i.poolRef = this.soundArchive.add(i), this.soundArchiveById[e] = i, delete this.soundsById[e]);
}
for (var r = this.soundGroupArchive.getCount(); r > n && (t = this.soundGroupArchive.popFirst());) {
  t.poolRef = null, delete this.soundGroupArchiveById[t.id], r -= 1;
}
for (this._calculateMem(); this.totalUsedMemory > o;) {
  if (i = this.soundArchive.popFirst(), !i) {
    this._calculateMem(), this.totalUsedMemory > o && console.error("No more sound to release but " + this.totalUsedMemory + " used out of " + o);
    break;
  }
  i.poolRef = null, delete this.soundArchiveById[i.id], this.freeSound(i), this._calculateMem();
}
if (i = this.soundArchive.popFirst(), !i) {
  this._calculateMem(), this.totalUsedMemory > o && console.error("No more sound to release but " + this.totalUsedMemory + " used out of " + o);
  break;
}
if (this.muted) {
  return d;
}
if (a.muted) {
  return d;
}
if (!this.muted) {
  var a = this.channels[e];
  if (a && !a.muted) {
    var s = this.getSoundGroup(t);
    if (!s) {
      return console.error(new Error('SoundGroup "' + t + '" does not exist.'));
    }
    i = i || 1, s.play(i * a.volume, n, o);
  }
}
if (a && !a.muted) {
  var s = this.getSoundGroup(t);
  if (!s) {
    return console.error(new Error('SoundGroup "' + t + '" does not exist.'));
  }
  i = i || 1, s.play(i * a.volume, n, o);
}
if (!s) {
  return console.error(new Error('SoundGroup "' + t + '" does not exist.'));
}
for (var n in e) {
  this.createSoundGroup(n, e[n], i);
}
if (this.count += 1, null === this.first) {
  return this.first = t, this.last = t, t;
}
if (i < 0) {
  return t.next = this.first, this.first.previous = t, this.first = t, t;
}
if (o >= 0) {
  return t.previous = this.last, this.last.next = t, this.last = t, t;
}
if (i + o < 0) {
  for (a = this.first.next; this.cmpFunc(e, a.object) >= 0;) {
    a = a.next;
  }
  t.next = a, t.previous = a.previous, t.previous.next = t, a.previous = t;
} else {
  for (a = this.last.previous; this.cmpFunc(e, a.object) < 0;) {
    a = a.previous;
  }
  t.previous = a, t.next = a.next, t.next.previous = t, a.next = t;
}
for (a = this.first.next; this.cmpFunc(e, a.object) >= 0;) {
  a = a.next;
}
for (a = this.last.previous; this.cmpFunc(e, a.object) < 0;) {
  a = a.previous;
}
if (!e) {
  return null;
}
if (!e) {
  return null;
}
for (var e = this.first; e; e = e.next) {
  e.container = null;
}
for (var e = [], t = this.first; t; t = t.next) {
  e.push(t.object);
}
for (var i = this.first; i; i = i.next) {
  e(i.object, t);
}
for (var i = this.last; i; i = i.previous) {
  e(i.object, t);
}
if (e.container !== this) {
  return this.add(e.object);
}
for (null === i ? this.last = t : i.previous = t, null === t ? this.first = i : t.next = i; null !== t && this.cmpFunc(n, t.object) < 0;) {
  i = t, t = t.previous;
}
for (; null !== i && this.cmpFunc(n, i.object) >= 0;) {
  t = i, i = i.next;
}
if (!this._audioNodeReady && this.audioContext) {
  var e,
    t = this.audioContext,
    i = t.createGain();
  e = t.createStereoPanner ? t.createStereoPanner() : t.createPanner(), i.connect(e), e.connect(t.destination), i.gain.value = 0, this.sourceConnector = i, this.gain = i.gain, this.panNode = e, this._audioNodeReady = !0;
}
if (this._audioNodeReady) {
  var e = this.audioContext,
    t = this.panNode,
    i = this.sourceConnector;
  i.disconnect(t), t.disconnect(e.destination), this.source && (this.source.disconnect(i), this.source.onended = null, this.source = null), this.sourceConnector = null, this.gain = null, this.panNode = null, this.rawAudioData = null, this._audioNodeReady = !1;
}
if (this._createAudioNodes(), this.rawAudioData) {
  var i = this,
    n = this.audioManager.settings.maxPlayLatency,
    o = this.audioContext;
  o.decodeAudioData(this.rawAudioData, e, t);
}
if (this.volume = e, this.playing) {
  if (!this.fade) {
    return void (this.gain.value = e);
  }
  e <= 0 && (e = s);
  var t = this.audioContext.currentTime;
  this.gain.cancelScheduledValues(t), this.gain.setValueAtTime(this.gain.value || s, t), this.gain.linearRampToValueAtTime(e, t + this.fade);
}
if (!this.fade) {
  return void (this.gain.value = e);
}
if (this.source) {
  var t = Math.pow(2, (this._playPitch + this.pitch) / 12);
  if (!e) {
    return void (this.source.playbackRate.value = t);
  }
  var i = this.audioContext.currentTime;
  this.source.playbackRate.cancelScheduledValues(i), this.source.playbackRate.setValueAtTime(this.source.playbackRate.value || s, i), this.source.playbackRate.linearRampToValueAtTime(t, i + e);
}
if (!e) {
  return void (this.source.playbackRate.value = t);
}
if (4 === ~~o.readyState) {
  return 200 !== ~~o.status && 0 !== ~~o.status ? e("xhrError:" + o.status) : void (n.audioContext ? n.audioContext.decodeAudioData(o.response, t, e) : (n.rawAudioData = o.response, n._finalizeLoad(null)));
}
if (o.length > 2) {
  o(a, this.id, function (t, n) {
    return t ? e(t) : void i(n);
  });
} else {
  try {
    var s = o(a, this.id);
    if ("FROM_MISSING_AUDIO_LIST" === s) {
      return e(s);
    }
    i(s);
  } catch (r) {
    e(r);
  }
}
if ("FROM_MISSING_AUDIO_LIST" === s) {
  return e(s);
}
if (!this.buffer) {
  return void (this._playTriggered = Date.now());
}
if (this.gain.cancelScheduledValues(t), this.fade ? (this.gain.setValueAtTime(this.gain.value || s, t), this.gain.linearRampToValueAtTime(this.volume || s, t + this.fade)) : this.gain.value = this.volume, this._fadeTimeout) {
  return this._onStopCallback = null, this.source.onended = null, this.stopping = !1, window.clearTimeout(this._fadeTimeout), void (this._fadeTimeout = null);
}
if (!this.playing && !this.stopping) {
  return e && e();
}
if (this._playTriggered = 0, this.stopping = !0, this.playing = !1, !this.source) {
  return e && e();
}
if (this._onStopCallback = e, !this._fadeTimeout) {
  if (this.fade) {
    var t = this,
      i = this.audioContext.currentTime;
    return this.gain.cancelScheduledValues(i), this.gain.setValueAtTime(this.gain.value || s, i), this.gain.linearRampToValueAtTime(s, i + this.fade), void (this._fadeTimeout = window.setTimeout(function () {
      t._fadeTimeout = null, t._stopAndClear();
    }, 1e3 * this.fade));
  }
  this._stopAndClear();
}
if (this.fade) {
  var t = this,
    i = this.audioContext.currentTime;
  return this.gain.cancelScheduledValues(i), this.gain.setValueAtTime(this.gain.value || s, i), this.gain.linearRampToValueAtTime(s, i + this.fade), void (this._fadeTimeout = window.setTimeout(function () {
    t._fadeTimeout = null, t._stopAndClear();
  }, 1e3 * this.fade));
}
for (var i = 0; i < this._onLoadQueuedCallback.length; i++) {
  this._onLoadQueuedCallback[i](e, this);
}
for (var e = this.soundIds, t = 0; t < e.length; t++) {
  this.audioManager.loadSound(e[t], {
    soundGroupId: this.id
  });
}
if (0 !== this.soundIds.length) {
  this._ready || this._createSounds(), this.soundIndex = Math.trunc(Math.random() * this.soundIds.length), this.volIndex = this.soundIndex, this.pitchIndex = this.soundIndex;
  var n = this.soundIds[this.soundIndex],
    o = this.audioManager.getSound(n);
  if (!o) {
    return console.warn("[Sound Group: " + this.id + "] sound id " + n + "  cannot be played.");
  }
  e = e || 1, i = i || 0, e *= this.volumes[this.volIndex], i += this.pitches[this.pitchIndex], o.play(e, t, i);
}
if (!o) {
  return console.warn("[Sound Group: " + this.id + "] sound id " + n + "  cannot be played.");
}
for (var e = 0; e < this.soundIds.length; e++) {
  var t = this.soundIds[e];
  this.audioManager.createSound(t);
}
if (t = Math.max(0, Math.min(1, t || 1)), this.loopId = e, this.loopVol = t, !c.muted && !this.muted) {
  if (e === p && h) {
    return h.play(t * this.volume, i, n), void (this.nextLoop && (this.nextLoop.cancelOnLoadCallbacks(), this.nextLoop = null));
  }
  if (h = null, !this.nextLoop || this.nextLoop.id !== e) {
    var m = this;
    u ? (this.nextLoop && this.nextLoop.cancelOnLoadCallbacks(), this.nextLoop = c.createSound(e, this.id), this.nextLoop.load(function (e) {
      return e ? (m.nextLoop.unload(), void (m.nextLoop = null)) : (s(m.loopSound), void l());
    })) : (this.nextLoop = c.createSound(e, this.id), s(this.loopSound, l));
  }
}
if (e === p && h) {
  return h.play(t * this.volume, i, n), void (this.nextLoop && (this.nextLoop.cancelOnLoadCallbacks(), this.nextLoop = null));
}
if (h = null, !this.nextLoop || this.nextLoop.id !== e) {
  var m = this;
  u ? (this.nextLoop && this.nextLoop.cancelOnLoadCallbacks(), this.nextLoop = c.createSound(e, this.id), this.nextLoop.load(function (e) {
    return e ? (m.nextLoop.unload(), void (m.nextLoop = null)) : (s(m.loopSound), void l());
  })) : (this.nextLoop = c.createSound(e, this.id), s(this.loopSound, l));
}
if (a.length > 2) {
  a(s, this.id, function (t, i) {
    return t ? e(t) : void n(i);
  });
} else {
  try {
    var r = a(s, this.id);
    if ("FROM_MISSING_AUDIO_LIST" === r) {
      return e(r);
    }
    n(r);
  } catch (l) {
    e(l);
  }
}
if ("FROM_MISSING_AUDIO_LIST" === r) {
  return e(r);
}
if (this._audio.volume = this.volume, this._audio.pause(), this._audio.currentTime = 0, this._audio.play(s), this.playing = !0, !this.loop) {
  var e = 1e3 * this._audio.duration;
  if (!(isNaN(e) || e <= 0)) {
    var t = this;
    this._onEnd = window.setTimeout(function () {
      t._onEnd = null, t._playing = !1, t.onEnd && t.onEnd();
    }, e);
  }
}
if (!(isNaN(e) || e <= 0)) {
  var t = this;
  this._onEnd = window.setTimeout(function () {
    t._onEnd = null, t._playing = !1, t.onEnd && t.onEnd();
  }, e);
}
if (!o.usedMemory) {
  var e = Number(o.media.getDuration());
  !e || e < 0 || (o.usedMemory = e);
}
if (o.errorOccured) {
  return this._finalizeLoad("previouslyFailed");
}
if (a.length > 2) {
  a(r, o.id, function (e, t) {
    return e ? o._finalizeLoad(e) : void n(t);
  });
} else {
  try {
    var c = a(r, o.id);
    if ("FROM_MISSING_AUDIO_LIST" === c) {
      return o._finalizeLoad(c);
    }
    n(c);
  } catch (d) {
    o._finalizeLoad(d);
  }
}
if ("FROM_MISSING_AUDIO_LIST" === c) {
  return o._finalizeLoad(c);
}
if (a.prototype.unload.call(this)) {
  if (!this.media) {
    return;
  }
  this.media.stop(), this.media.release();
}
if (!this.media) {
  return;
}
if (t === window.cordova.plugins.Yanap.AUDIO_INSTANCE_STATUS.ERROR) {
  return e(i);
}
if (!n.usedMemory && n.media && n.media.fileLength) {
  var o = ~~n.media.fileLength / u;
  o <= 0 || (n.usedMemory = o);
}
if (n.errorOccured) {
  return this._finalizeLoad("previouslyFailed");
}
if (o.length > 2) {
  o(a, n.id, function (e, t) {
    return e ? n._finalizeLoad(e) : void i(t);
  });
} else {
  try {
    var s = o(a, n.id);
    if ("FROM_MISSING_AUDIO_LIST" === s) {
      return n._finalizeLoad(s);
    }
    i(s);
  } catch (r) {
    n._finalizeLoad(r);
  }
}
if ("FROM_MISSING_AUDIO_LIST" === s) {
  return n._finalizeLoad(s);
}
if (c.prototype.unload.call(this)) {
  if (!this.media) {
    return;
  }
  this.media.stop(), this.media.release();
}
if (!this.media) {
  return;
}
if (!c) {
  throw new Error("logger missing");
}
if (0 !== e.length && !_) {
  var t = e.shift();
  window.setTimeout(function () {
    o(e), n(t);
  }, 0);
}
if (I !== !1) {
  I = !1;
  var e = C.slice();
  o(e), C.length = 0;
}
if (c = e, d) {
  return d.destroy(), d = null, void setTimeout(function () {
    t.connect(c, i);
  }, 0);
}
if (d !== this) {
  return console.warn("onOpen - Ignoring event: possible missing call to Primus#destroy");
}
if (g = !1, t.emit("open", u), u && p && Date.now() < m) {
  for (var e = {}, i = 0, n = {}, o = 0; o < p.length; o++) {
    var a = p[o];
    if ("message" === a.type) {
      try {
        var s = JSON.parse(a.data);
        if ("sendMessage" !== s.call) {
          n["call-" + s.call] = 1;
          continue;
        }
        var r = s.data.type;
        if (w[r]) {
          continue;
        }
        i++, e[r] = 1;
      } catch (l) {
        console.error("Message to be resent is not JSON: " + a.data.toString().substring(0, 100));
      }
      d.socket.write(a.data, a.options);
    } else {
      n[a.type] = 1;
    }
  }
  i && console.error("Resent " + p.length + " previously unsent messages. Types: {" + Object.keys(e).join(",") + "} Skipped: {" + Object.keys(n).join(",") + "}");
}
for (var e = {}, i = 0, n = {}, o = 0; o < p.length; o++) {
  var a = p[o];
  if ("message" === a.type) {
    try {
      var s = JSON.parse(a.data);
      if ("sendMessage" !== s.call) {
        n["call-" + s.call] = 1;
        continue;
      }
      var r = s.data.type;
      if (w[r]) {
        continue;
      }
      i++, e[r] = 1;
    } catch (l) {
      console.error("Message to be resent is not JSON: " + a.data.toString().substring(0, 100));
    }
    d.socket.write(a.data, a.options);
  } else {
    n[a.type] = 1;
  }
}
if ("message" === a.type) {
  try {
    var s = JSON.parse(a.data);
    if ("sendMessage" !== s.call) {
      n["call-" + s.call] = 1;
      continue;
    }
    var r = s.data.type;
    if (w[r]) {
      continue;
    }
    i++, e[r] = 1;
  } catch (l) {
    console.error("Message to be resent is not JSON: " + a.data.toString().substring(0, 100));
  }
  d.socket.write(a.data, a.options);
} else {
  n[a.type] = 1;
}
if ("sendMessage" !== s.call) {
  n["call-" + s.call] = 1;
  continue;
}
if (w[r]) {
  continue;
}
if (p = null, s.isFeatureOn("decoRecoResend")) {
  var n = h && d.socket && d.socket.writeBuffer;
  n && n.length && (p = n, m = Date.now() + y);
}
if (!_) {
  if (r.receiving(), "SequenceStartMessage" === e._messageType && (T += 1), T > 0) {
    if (M.push(e), "SequenceEndMessage" === e._messageType && (T -= 1, T <= 0)) {
      var i = {
        _messageType: "messageSequence",
        sequence: M
      };
      I ? C.push(i) : t.emit("messageSequence", i), M = [], T = 0;
    }
  } else {
    t.emit("data", e), b[e._messageType] || (t.lastReceivedMessage = e._messageType), I ? C.push(e) : n(e);
  }
}
if (r.receiving(), "SequenceStartMessage" === e._messageType && (T += 1), T > 0) {
  if (M.push(e), "SequenceEndMessage" === e._messageType && (T -= 1, T <= 0)) {
    var i = {
      _messageType: "messageSequence",
      sequence: M
    };
    I ? C.push(i) : t.emit("messageSequence", i), M = [], T = 0;
  }
} else {
  t.emit("data", e), b[e._messageType] || (t.lastReceivedMessage = e._messageType), I ? C.push(e) : n(e);
}
if (M.push(e), "SequenceEndMessage" === e._messageType && (T -= 1, T <= 0)) {
  var i = {
    _messageType: "messageSequence",
    sequence: M
  };
  I ? C.push(i) : t.emit("messageSequence", i), M = [], T = 0;
}
if (!d) {
  return console.warn("Client trying to send while primus is null for call: " + e);
}
if (!this.isListening) {
  var e = this;
  this._connectionLatency = new a(window.dofus.connectionManager), this._connectionLatency.startListening(), this.isListening = !0, window.dofus.connectionManager.on("BasicPongMessage", this._gotPong.bind(this)), window.gui.on("connected", function () {
    e._connectionLatency.startPingLoop();
  }), window.gui.on("appLeaveBackground", function () {
    e._connectionLatency.startPingLoop();
  }), window.gui.on("disconnect", function () {
    e._connectionLatency.stopPingLoop();
  }), window.gui.on("appGoBackground", function () {
    e._connectionLatency.stopPingLoop();
  });
}
if (0 === this._latencyBuffer.length) {
  return e;
}
for (var t = 0; t < this._latencyBuffer.length; t += 1) {
  e += this._latencyBuffer[t];
}
if (this._lastPingSent) {
  var e = Date.now() - this._lastPingSent;
  this._lastPingSent = 0, this.startPingLoop(), this._latencyBuffer.push(e), this._getLatencySamplesCount() > o && this._latencyBuffer.shift();
}
if (!this._isListening) {
  this._isListening = !0;
  var e = this;
  this._connectionManager.on("BasicLatencyStatsRequestMessage", function () {
    e._connectionManager.sendMessage("BasicLatencyStatsMessage", {
      latency: e._getLatencyAvg(),
      sampleCount: e._getLatencySamplesCount(),
      max: e._getLatencySamplesMax()
    });
  }), this._connectionManager.on("BasicPongMessage", function () {
    e._addSample();
  });
}
if (!this._pingLoopTimeout) {
  var e = this;
  this._pingLoopTimeout = window.setTimeout(function () {
    e.sendPing(), e.stopPingLoop();
  }, n);
}
for (var i = 0; i < t.length; i++) {
  var n = t[i] || {};
  n.accountId && (n.uniqueNickname = new a(e, n.accountName));
}
for (var n = 0; n < t.spellModifications.length; n += 1) {
  var s = t.spellModifications[n];
  this.spellModifications.push(new a(s));
}
if (this.actionPointsCurrent = t.actionPointsCurrent, this.additionnalPoints = t.additionnalPoints, this.energyPoints = t.energyPoints, this.experience = t.experience, this.experienceLevelFloor = t.experienceLevelFloor, this.experienceNextLevelFloor = t.experienceNextLevelFloor, this.kamas = t.kamas, this.lifePoints = t.lifePoints, this.maxEnergyPoints = t.maxEnergyPoints, this.maxLifePoints = t.maxLifePoints, this.movementPointsCurrent = t.movementPointsCurrent, this.remoteBankTaxKamas = t.remoteBankTaxKamas, this.spellsPoints = t.spellsPoints, this.statsPoints = t.statsPoints, i) {
  for (var l = Object.keys(t), c = Object.keys(this), d = 0; d < l.length; d += 1) {
    var u = l[d];
    c.indexOf(u) === -1 && console.error(new Error("CharacterCharacteristicsInformations: key: " + u + " is missing"));
  }
}
for (var l = Object.keys(t), c = Object.keys(this), d = 0; d < l.length; d += 1) {
  var u = l[d];
  c.indexOf(u) === -1 && console.error(new Error("CharacterCharacteristicsInformations: key: " + u + " is missing"));
}
if (this.additionnalPoints <= 0) {
  return 0;
}
for (var e = !1, t = 0; t < l.length; t += 1) {
  var i = l[t],
    n = this[i];
  if (n) {
    if (n.getAdditionalPts() < s.MAX_ADDITIONNAL_PER_CARAC) {
      e = !0;
      break;
    }
  } else {
    r.error("stat missing for", i);
  }
}
if (n) {
  if (n.getAdditionalPts() < s.MAX_ADDITIONNAL_PER_CARAC) {
    e = !0;
    break;
  }
} else {
  r.error("stat missing for", i);
}
if (n.getAdditionalPts() < s.MAX_ADDITIONNAL_PER_CARAC) {
  e = !0;
  break;
}
if (!e) {
  throw new Error("Need logger!");
}
if (this._logger = e, t || this._logger.error(new Error("Nickname is empty.")), this._rawNickname = t || "nickname" + n + "1234", this._rawToken = i || "", this._nickname = "", this._token = "", !this._rawToken) {
  var o = this._rawNickname.split(n);
  if (1 === o.length) {
    this._nickname = o[0];
  } else {
    var s = o.splice(o.length - 1) || [""];
    s[0].length === a || "#guest" === o.join(n) ? (this._nickname = o.join(n), this._token = s[0]) : this._logger.error(new Error("Wrong format on the nickname:" + this._rawNickname));
  }
}
if (1 === o.length) {
  this._nickname = o[0];
} else {
  var s = o.splice(o.length - 1) || [""];
  s[0].length === a || "#guest" === o.join(n) ? (this._nickname = o.join(n), this._token = s[0]) : this._logger.error(new Error("Wrong format on the nickname:" + this._rawNickname));
}
for (var n in i) {
  void 0 === e[n] && (e[n] = i[n]);
}
for (; r.length;) {
  var e = r.shift();
  t.log(e.name, e.data, e.options);
}
if (!i) {
  return void c.error("ankAnalytics checkModel: " + e + " is missing from the models");
}
for (var n = Object.keys(t), o = [], a = 0, r = i.length; a < r; a += 1) {
  var l = i[a];
  if ("relative_soft_currency_gained" !== l && "relative_hard_currency_gained" !== l && "time_spent_on_action" !== l) {
    var d = n.indexOf(l) === -1,
      u = g.indexOf(l) === -1 && (void 0 === t[l] || null === t[l]);
    (d || u) && o.push(l);
  }
}
if ("relative_soft_currency_gained" !== l && "relative_hard_currency_gained" !== l && "time_spent_on_action" !== l) {
  var d = n.indexOf(l) === -1,
    u = g.indexOf(l) === -1 && (void 0 === t[l] || null === t[l]);
  (d || u) && o.push(l);
}
if (f) {
  t = t || {}, t.date && c.error(new Error("Do not use the date."));
  var i = n(e);
  window.developmentMode && h && o(e, t);
  var a = r(l.now(), "yyyy-mm-dd'T'HH:MM:ssp"),
    s = {
      game_id: p,
      event_id: i,
      session_id: m,
      date: a,
      data: t
    };
  u && c.info("ankAnalytics.send: " + e, JSON.stringify(s)), d.sendKPIEvent(m, i, a, t);
}
if (1 !== s.length || "string" !== h(n) || /\d/.test(n) || (o = n, n = void 0), n = n || 0 === n ? n : new Date(), n instanceof Date || (n = new Date(n)), isNaN(n)) {
  throw TypeError("Invalid date");
}
for (e = String(e), t = t || 2; e.length < t;) {
  e = "0" + e;
}
for (var o in i) {
  var a = n[o],
    s = i[o];
  if (a) {
    if (a.getProperty) {
      e[s] = a.getProperty("objectGID");
    } else {
      var r = "analytics#addEquippedItem: getProperty is not a function. posId: " + o + ", itemName: ";
      r += s + ", objectGID: " + a.objectGID + ", id: " + a.id, console.error(new Error(r)), e[s] = void 0;
    }
  } else {
    e[s] = void 0;
  }
}
if (a) {
  if (a.getProperty) {
    e[s] = a.getProperty("objectGID");
  } else {
    var r = "analytics#addEquippedItem: getProperty is not a function. posId: " + o + ", itemName: ";
    r += s + ", objectGID: " + a.objectGID + ", id: " + a.id, console.error(new Error(r)), e[s] = void 0;
  }
} else {
  e[s] = void 0;
}
if (a.getProperty) {
  e[s] = a.getProperty("objectGID");
} else {
  var r = "analytics#addEquippedItem: getProperty is not a function. posId: " + o + ", itemName: ";
  r += s + ", objectGID: " + a.objectGID + ", id: " + a.id, console.error(new Error(r)), e[s] = void 0;
}
if (window.gui.playerData) {
  var t = window.gui.playerData,
    i = t.characterBaseInformations || {},
    n = t.position || {};
  e.server_id = window.gui.serversData.connectedServerId, e.character_id = t.id, e.character_level = i.level, e.soft_currency_balance = t.inventory.kamas, e.hard_currency_balance = t.inventory.goultines, e.breed = i.breed, e.map_id = n.mapId;
}
for (var t = 0, i = e.servers || [], n = 0, o = i.length; n < o; n += 1) {
  var a = i[n];
  t += a.charactersCount;
}
if (c) {
  var i = new l(e);
  if (t) {
    var n = t.revenue;
    n && i.setRevenue(n.price, n.currency);
    var o = t.transactionId;
    o && (o = "string" == typeof o ? o : o.toString(), i.setTransactionId(o));
  }
  s.trackEvent(i);
}
if (t) {
  var n = t.revenue;
  n && i.setRevenue(n.price, n.currency);
  var o = t.transactionId;
  o && (o = "string" == typeof o ? o : o.toString(), i.setTransactionId(o));
}
for (var i in d) {
  var o = ~~i,
    a = d[i];
  e < o && t >= o && n(a);
}
if (t && i && n && a) {
  s = i, r = n, l = a;
  var d = r[t.environment] || r.EnvironmentSandbox,
    u = new r(t.appToken, d),
    h = r[t.logLevel] || r.LogLevelSuppress;
  u.setLogLevel(h), s.create(u), o(), c = !0;
}
for (var i in e) {
  t += e[i];
}
if (!t._isSpectator) {
  var e = t._fightManager.getAvailableFighters();
  for (var i in e) {
    t._updateMonsterLife(e[i]);
  }
}
for (var i in e) {
  t._updateMonsterLife(e[i]);
}
for (var i = 0; i < e.sequence.length; i += 1) {
  t._logSpellCast(e.sequence[i]);
}
if (!t._isSpectator) {
  var i = e.informations;
  t._addTeamHP(i.teamId, i.contextualId, i.stats.lifePoints), t._addMonster(i);
}
if (!t._isSpectator) {
  t._sendAliveMonsterReport(e);
  var i = t._getWinnerTeamId(e);
  a.log("Fight_Report.Fight_End", {
    nb_turns: t._fightManager.getTurnCount() + 1,
    fight_id: t._currentFightId,
    time_spent_on_action: ~~(e.duration / 1e3),
    tactical_used: t._fightManager.wasTacticalUsed(),
    winner_team_id: i
  }, {
    noSessionId: !0
  }), t._teamHPMap = {
    0: {},
    1: {}
  }, t._monsterMap = {}, t._isSpectator = !1, t._currentFightId = null, t._fightManager.resetTacticInfo();
}
if (!(e.contextualId >= 0)) {
  var t = {};
  this._monsterMap[e.contextualId] = t, t.monster_id = e.creatureGenericId, t.monster_level = e.monsterLevel, t.monster_grade = e.creatureGrade, t.team_id = e.teamId;
}
if (!(e.id >= 0)) {
  var t = this._monsterMap[e.id];
  t || (t = this._monsterMap[e.id] = {});
  var i = e.data.stats;
  t.ratio_life_remaining = Math.ceil(100 * i.lifePoints / i.maxLifePoints) / 100, 1 === t.ratio_life_remaining && i.lifePoints !== i.maxLifePoints && (t.ratio_life_remaining = .99);
}
for (var t = 0; t < e.results.length; t += 1) {
  var i = e.results[t];
  if (i.alive && !(i.id >= 0)) {
    var n = this._monsterMap[i.id];
    if (!n) {
      return;
    }
    void 0 === n.ratio_life_remaining && (n.ratio_life_remaining = 1), a.log("fight_report.fight_end_alive_monster_description", {
      fight_id: this._currentFightId,
      team_id: n.team_id,
      monster_id: n.monster_id,
      monster_level: n.monster_level,
      monster_grade: n.monster_grade,
      ratio_life_remaining: n.ratio_life_remaining
    }, {
      noSessionId: !0
    });
  }
}
if (i.alive && !(i.id >= 0)) {
  var n = this._monsterMap[i.id];
  if (!n) {
    return;
  }
  void 0 === n.ratio_life_remaining && (n.ratio_life_remaining = 1), a.log("fight_report.fight_end_alive_monster_description", {
    fight_id: this._currentFightId,
    team_id: n.team_id,
    monster_id: n.monster_id,
    monster_level: n.monster_level,
    monster_grade: n.monster_grade,
    ratio_life_remaining: n.ratio_life_remaining
  }, {
    noSessionId: !0
  });
}
if (!n) {
  return;
}
for (var e in this._monsterMap) {
  var t = this._monsterMap[e];
  a.log("Fight_Report.Fight_Monster_Description", {
    fight_id: this._currentFightId,
    team_id: t.team_id,
    monster_id: t.monster_id,
    monster_level: t.monster_level,
    monster_grade: t.monster_grade
  }, {
    noSessionId: !0
  });
}
if (!this._isSpectator) {
  var t = s(),
    i = t.gui.playerData.id,
    n = "GameActionFightSpellCastMessage" === e._messageType || "GameActionFightCloseCombatMessage" === e._messageType;
  if (n && e.sourceId === i) {
    var o = e.spellId ? e.spellId : 0,
      r = e.spellLevel ? e.spellLevel : 1;
    a.log("Fight_Action.Spell_Cast_By_User", {
      spell_id: o,
      spell_level: r,
      fight_id: this._currentFightId,
      breed_id: t.gui.playerData.characterBreed.id
    });
  }
}
if (n && e.sourceId === i) {
  var o = e.spellId ? e.spellId : 0,
    r = e.spellLevel ? e.spellLevel : 1;
  a.log("Fight_Action.Spell_Cast_By_User", {
    spell_id: o,
    spell_level: r,
    fight_id: this._currentFightId,
    breed_id: t.gui.playerData.characterBreed.id
  });
}
for (var t = null, i = 0, n = e.results.length; i < n; i += 1) {
  var o = e.results[i];
  if (o.alive) {
    t = o.id;
    break;
  }
}
if (o.alive) {
  t = o.id;
  break;
}
if ("number" == typeof e) {
  return e;
}
if (e.isFullScreen && (a = r.screenWidth, l = r.screenHeight), e.mustAvoidToolbar && (a = r.screenExceptToolbar.width, l = r.screenExceptToolbar.height), e.width) {
  t = s(e.width, a);
  var c = e.maxWidth || a;
  t = c && c < t ? c : t;
}
if (e.height) {
  i = s(e.height, l);
  var d = Math.min(e.maxHeight || l, l);
  i = Math.min(i, d);
}
if (e.minHeight) {
  var u = s(e.minHeight, l);
  i = Math.max(u, i);
}
if (e.minWidth) {
  var h = s(e.minWidth, l);
  t = Math.max(h, t);
}
if ((p || e.hasOwnProperty("x")) && (n = s(p ? e.left : e.x, a, t)), e.hasOwnProperty("right")) {
  var m = s(e.right, a, t);
  t ? n = a - m - t : t = a - m - n;
}
if ((f || e.hasOwnProperty("y")) && (o = s(f ? e.top : e.y, l, i)), e.bottom) {
  var g = s(e.bottom, l, i);
  i ? o = l - g - i : i = l - g - o;
}
if (t) {
  var i = "tablet.fatal.idb",
    n = u && u[i] || h && h[i] || "IDB failure";
  return "string" == typeof t && "IDB_" === t.substr(0, 4) && (n += "\n\n(" + t + ")"), window.dofus.reloadAppOnFatalError("InitializeDiskCache: " + t, n);
}
for (var i = Object.keys(e), n = i.length, o = new Array(n), a = 0; a < n; a++) {
  o[a] = e[i[a]];
}
if (t && t.sortBy) {
  var s = t.sortBy;
  o.sort(function (e, t) {
    return e[s] - t[s];
  });
}
for (var o in e) {
  n.push(e[o]);
}
if (i) {
  var a = f.getKey(t);
  n.sort(function (e, t) {
    return e[a] - t[a];
  });
}
if (i) {
  return t(i);
}
for (var s in n) {
  o = n[s] && void 0 !== n[s][a];
  break;
}
for (var t = window.Config.serverLanguages, i = [], n = 0; n < t.length; n++) {
  i.push(t[n]), i.push(p.BETA_SUFFIX + t[n]);
}
if (t) {
  return i(t);
}
for (var r in n) {
  n[r][v] || (s[r] = n[r]);
}
if (0 === a.length) {
  return i(null, s);
}
if (t) {
  return i(t);
}
for (var o = 0, r = a.length; o < r; o++) {
  var l = a[o],
    c = n[l];
  c ? s[l] = c : n[l] = g.newDummyRecord(f.getKey(e), l);
}
if (t) {
  return n(t);
}
if ("number" == typeof e) {
  return e;
}
for (var t = 1; t < arguments.length; t++) {
  t > 1 && (e += ", "), e += r(arguments[t]);
}
for (var i in b) {
  if (e.indexOf(i) !== -1) {
    var n = ++b[i];
    if (n % M !== 1) {
      return e;
    }
    e += " (x" + n + ")";
  }
}
if (e.indexOf(i) !== -1) {
  var n = ++b[i];
  if (n % M !== 1) {
    return e;
  }
  e += " (x" + n + ")";
}
if (n % M !== 1) {
  return e;
}
if (null === e) {
  return "null";
}
if (void 0 !== e.name || void 0 !== e.code || void 0 !== e.message) {
  var t = e.name ? e.name : e.code;
  return t + (e.message ? "(" + e.message + ")" : "");
}
for (var n in e) {
  i += n + ":" + e[n] + " ";
}
if (console.info("Object store creation completed for: " + i), !w) {
  return y++, y === v ? (p = e, w = !0, t()) : void 0;
}
for (var o = 0, a = n.length; o < a; ++o) {
  i(n[o]);
}
if (void 0 === t || null === t) {
  return void console.error(new Error("IndexedDB id to get in object store: " + e + ", is invalid: " + t));
}
if (t = d(t), null === t) {
  return void console.error(new Error("IndexedDB id to get in object store: " + e + ", is invalid: " + t));
}
if (!t.length) {
  return i(null, o, r);
}
for (var l = p.transaction(e, g.READ_ONLY), c = l.objectStore(e), d = a(e), u = 0, h = t.length; u < h; ++u) {
  n(t[u]);
}
if (!t) {
  return void console.error("IndexedDB object to put in object store: " + e + ", is invalid: " + t);
}
if (t[d] = u(t[d]), null === t[d]) {
  return void console.error("IndexedDB object to put in object store: " + e + ", is invalid: " + t);
}
for (o in t) {
  r = !1;
  break;
}
if (r) {
  return i();
}
for (o in t) {
  n(t[o]);
}
if (t) {
  var n = t.value;
  n[_] || (i[n[a]] = n), t["continue"]();
}
if (!f) {
  return i(s("IDB_NOT_SUPPORTED"));
}
if (!p) {
  return void t(new Error("IndexedDB request failed: disk cache not yet initialized"));
}
if (i) {
  return t(i);
}
if (t) {
  return i(t);
}
if (!n || !p.objectStoreNames.contains(n)) {
  return void i(new Error("IndexedDB putAll operation called but cache completion is not set up"));
}
if (Object.defineProperty) {
  try {
    Object.defineProperty(e, "test", {
      enumerable: !1
    }), e.test && (cleanInterface = !0);
  } catch (t) {}
}
if (n.prototype = {
  contains: function (e) {
    return -1 !== this._items.indexOf(e);
  },
  item: function (e) {
    return this._items[e];
  },
  indexOf: function (e) {
    return this._items.indexOf(e);
  },
  push: function (e) {
    this._items.push(e), this.length += 1;
    for (var t = 0; this._items.length > t; t++) {
      this[t] = this._items[t];
    }
  },
  splice: function () {
    this._items.splice.apply(this._items, arguments), this.length = this._items.length;
    for (var e in this) {
      e === parseInt(e, 10) + "" && delete this[e];
    }
    for (e = 0; this._items.length > e; e++) {
      this[e] = this._items[e];
    }
  }
}, cleanInterface) {
  for (var o in {
    indexOf: !1,
    push: !1,
    splice: !1
  }) {
    Object.defineProperty(n.prototype, o, {
      enumerable: !1
    });
  }
}
for (var t = 0; this._items.length > t; t++) {
  this[t] = this._items[t];
}
for (var e in this) {
  e === parseInt(e, 10) + "" && delete this[e];
}
for (e = 0; this._items.length > e; e++) {
  this[e] = this._items[e];
}
for (var o in {
  indexOf: !1,
  push: !1,
  splice: !1
}) {
  Object.defineProperty(n.prototype, o, {
    enumerable: !1
  });
}
if (!("object" != typeof e || null === e || e instanceof Boolean || e instanceof Date || e instanceof Number || e instanceof RegExp || e instanceof Blob || e instanceof String)) {
  for (i = 0; objects.length > i; i += 1) {
    if (objects[i] === e) {
      return {
        $ref: paths[i]
      };
    }
  }
  if (objects.push(e), paths.push(t), "[object Array]" === Object.prototype.toString.apply(e)) {
    for (o = [], i = 0; e.length > i; i += 1) {
      o[i] = derez(e[i], t + "[" + i + "]");
    }
  } else {
    o = {};
    for (n in e) {
      Object.prototype.hasOwnProperty.call(e, n) && (o[n] = derez(e[n], t + "[" + JSON.stringify(n) + "]"));
    }
  }
  return o;
}
for (i = 0; objects.length > i; i += 1) {
  if (objects[i] === e) {
    return {
      $ref: paths[i]
    };
  }
}
if (objects[i] === e) {
  return {
    $ref: paths[i]
  };
}
if (objects.push(e), paths.push(t), "[object Array]" === Object.prototype.toString.apply(e)) {
  for (o = [], i = 0; e.length > i; i += 1) {
    o[i] = derez(e[i], t + "[" + i + "]");
  }
} else {
  o = {};
  for (n in e) {
    Object.prototype.hasOwnProperty.call(e, n) && (o[n] = derez(e[n], t + "[" + JSON.stringify(n) + "]"));
  }
}
for (o = [], i = 0; e.length > i; i += 1) {
  o[i] = derez(e[i], t + "[" + i + "]");
}
for (n in e) {
  Object.prototype.hasOwnProperty.call(e, n) && (o[n] = derez(e[n], t + "[" + JSON.stringify(n) + "]"));
}
if (-1 === e.indexOf(o)) {
  return i = e.split(","), t = i[0].split(":")[1], n = i[1], new Blob([n], {
    type: t
  });
}
for (var a = n.length, s = new Uint8Array(a), r = 0; a > r; ++r) {
  s[r] = n.charCodeAt(r);
}
if (value && "object" == typeof value) {
  if ("[object Array]" === Object.prototype.toString.apply(value)) {
    for (i = 0; value.length > i; i += 1) {
      item = value[i], item && "object" == typeof item && (path = item.$ref, value[i] = "string" == typeof path && px.test(path) ? eval(path) : rez(item));
    }
  } else if (void 0 !== value.$type) {
    switch (value.$type) {
      case "blob":
      case "file":
        value = dataURLToBlob(value.$enc);
        break;
      case "bool":
        value = Boolean("true" === value.$enc);
        break;
      case "date":
        value = new Date(value.$enc);
        break;
      case "num":
        value = Number(value.$enc);
        break;
      case "regex":
        value = eval(value.$enc);
    }
  } else {
    for (name in value) {
      "object" == typeof value[name] && (item = value[name], item && (path = item.$ref, value[name] = "string" == typeof path && px.test(path) ? eval(path) : rez(item)));
    }
  }
}
if ("[object Array]" === Object.prototype.toString.apply(value)) {
  for (i = 0; value.length > i; i += 1) {
    item = value[i], item && "object" == typeof item && (path = item.$ref, value[i] = "string" == typeof path && px.test(path) ? eval(path) : rez(item));
  }
} else if (void 0 !== value.$type) {
  switch (value.$type) {
    case "blob":
    case "file":
      value = dataURLToBlob(value.$enc);
      break;
    case "bool":
      value = Boolean("true" === value.$enc);
      break;
    case "date":
      value = new Date(value.$enc);
      break;
    case "num":
      value = Number(value.$enc);
      break;
    case "regex":
      value = eval(value.$enc);
  }
} else {
  for (name in value) {
    "object" == typeof value[name] && (item = value[name], item && (path = item.$ref, value[name] = "string" == typeof path && px.test(path) ? eval(path) : rez(item)));
  }
}
for (i = 0; value.length > i; i += 1) {
  item = value[i], item && "object" == typeof item && (path = item.$ref, value[i] = "string" == typeof path && px.test(path) ? eval(path) : rez(item));
}
if (void 0 !== value.$type) {
  switch (value.$type) {
    case "blob":
    case "file":
      value = dataURLToBlob(value.$enc);
      break;
    case "bool":
      value = Boolean("true" === value.$enc);
      break;
    case "date":
      value = new Date(value.$enc);
      break;
    case "num":
      value = Number(value.$enc);
      break;
    case "regex":
      value = eval(value.$enc);
  }
} else {
  for (name in value) {
    "object" == typeof value[name] && (item = value[name], item && (path = item.$ref, value[name] = "string" == typeof path && px.test(path) ? eval(path) : rez(item)));
  }
}
for (name in value) {
  "object" == typeof value[name] && (item = value[name], item && (path = item.$ref, value[name] = "string" == typeof path && px.test(path) ? eval(path) : rez(item)));
}
if (data.rows.length > i) {
  try {
    var value = idbModules.Sca.decode(data.rows.item(i).value),
      indexKey = eval("value['" + keyPath + "']");
    tx.executeSql("UPDATE " + idbModules.util.quote(me.__idbObjectStore.name) + " set " + columnName + " = ? where key = ?", [idbModules.Key.encode(indexKey), data.rows.item(i).key], function () {
      initIndexForRow(i + 1);
    }, error);
  } catch (e) {
    initIndexForRow(i + 1);
  }
} else {
  idbModules.DEBUG && console.log("Updating the indexes in table", me.__idbObjectStore.__storeProps), tx.executeSql("UPDATE __sys__ set indexList = ? where name = ?", [me.__idbObjectStore.__storeProps.indexList, me.__idbObjectStore.name], function () {
    me.__idbObjectStore.__setReadyState("createIndex", !0), success(me);
  }, error);
}
if (void 0 !== t) {
  i = void 0 === this.__ready[t] || this.__ready[t];
} else {
  for (var n in this.__ready) {
    this.__ready[n] || (i = !1);
  }
}
for (var n in this.__ready) {
  this.__ready[n] || (i = !1);
}
if (i) {
  e();
} else {
  idbModules.DEBUG && console.log("Waiting for to be ready", t);
  var o = this;
  window.setTimeout(function () {
    o.__waitForReady(e, t);
  }, 100);
}
if (props || idbModules.util.throwDOMException(0, "Data Error - Could not locate defination for this table", props), props.keyPath) {
  if (void 0 !== key && idbModules.util.throwDOMException(0, "Data Error - The object store uses in-line keys and the key parameter was provided", props), value) {
    try {
      var primaryKey = eval("value['" + props.keyPath + "']");
      void 0 === primaryKey ? "true" === props.autoInc ? getNextAutoIncKey() : idbModules.util.throwDOMException(0, "Data Error - Could not eval key from keyPath") : callback(primaryKey);
    } catch (e) {
      idbModules.util.throwDOMException(0, "Data Error - Could not eval key from keyPath", e);
    }
  } else {
    idbModules.util.throwDOMException(0, "Data Error - KeyPath was specified, but value was not");
  }
} else {
  void 0 !== key ? callback(key) : "false" === props.autoInc ? idbModules.util.throwDOMException(0, "Data Error - The object store uses out-of-line keys and has no key generator and the key parameter was not provided. ", props) : getNextAutoIncKey();
}
if (void 0 !== key && idbModules.util.throwDOMException(0, "Data Error - The object store uses in-line keys and the key parameter was provided", props), value) {
  try {
    var primaryKey = eval("value['" + props.keyPath + "']");
    void 0 === primaryKey ? "true" === props.autoInc ? getNextAutoIncKey() : idbModules.util.throwDOMException(0, "Data Error - Could not eval key from keyPath") : callback(primaryKey);
  } catch (e) {
    idbModules.util.throwDOMException(0, "Data Error - Could not eval key from keyPath", e);
  }
} else {
  idbModules.util.throwDOMException(0, "Data Error - KeyPath was specified, but value was not");
}
for (var key in indexes) {
  try {
    paramMap[indexes[key].columnName] = idbModules.Key.encode(eval("value['" + indexes[key].keyPath + "']"));
  } catch (e) {
    error(e);
  }
}
for (key in paramMap) {
  sqlStart.push(key + ","), sqlEnd.push("?,"), sqlValues.push(paramMap[key]);
}
if (0 === t.rows.length) {
  return o();
}
if ("number" == typeof o) {
  this.mode = o, 2 !== o && e.DEBUG && console.log("Mode should be a string, but was specified as ", o);
} else if ("string" == typeof o) {
  switch (o) {
    case "readwrite":
      this.mode = i;
      break;
    case "readonly":
      this.mode = t;
      break;
    default:
      this.mode = t;
  }
}
if ("string" == typeof o) {
  switch (o) {
    case "readwrite":
      this.mode = i;
      break;
    case "readonly":
      this.mode = t;
      break;
    default:
      this.mode = t;
  }
}
for (var s = 0; this.storeNames.length > s; s++) {
  a.objectStoreNames.contains(this.storeNames[s]) || e.util.throwDOMException(0, "The operation failed because the requested database object could not be found. For example, an object store did not exist but was being opened.", this.storeNames[s]);
}
if (this.__running && this.mode !== n) {
  return void (e.DEBUG && console.log("Looks like the request set is already running", this.mode));
}
for (var a = 0; o.rows.length > a; a++) {
  this.objectStoreNames.push(o.rows.item(a).name);
}
if (window.openDatabase) {
  var i = window.openDatabase("__sysdb__", 1, "System Database", t);
  i.transaction(function (e) {
    e.executeSql("CREATE TABLE IF NOT EXISTS dbVersions (name VARCHAR(255), version INT);", []);
  }, function () {
    e.DEBUG && console.log("Error in sysdb transaction - when creating dbVersions", arguments);
  });
  var n = {
    open: function (n, o) {
      function a() {
        if (!l) {
          var t = e.Event("error", arguments);
          r.readyState = "done", r.error = "DOMError", e.util.callback("onerror", r, t), l = !0;
        }
      }
      function s(s) {
        var l = window.openDatabase(n, 1, n, t);
        r.readyState = "done", void 0 === o && (o = s || 1), (0 >= o || s > o) && e.util.throwDOMException(0, "An attempt was made to open a database using a lower version than the existing version.", o), l.transaction(function (t) {
          t.executeSql("CREATE TABLE IF NOT EXISTS __sys__ (name VARCHAR(255), keyPath VARCHAR(255), autoInc BOOLEAN, indexList BLOB)", [], function () {
            t.executeSql("SELECT * FROM __sys__", [], function (t, c) {
              var d = e.Event("success");
              r.source = r.result = new e.IDBDatabase(l, n, o, c), o > s ? i.transaction(function (t) {
                t.executeSql("UPDATE dbVersions set version = ? where name = ?", [o, n], function () {
                  var t = e.Event("upgradeneeded");
                  t.oldVersion = s, t.newVersion = o, r.transaction = r.result.__versionTransaction = new e.IDBTransaction([], 2, r.source), e.util.callback("onupgradeneeded", r, t, function () {
                    var t = e.Event("success");
                    e.util.callback("onsuccess", r, t);
                  });
                }, a);
              }, a) : e.util.callback("onsuccess", r, d);
            }, a);
          }, a);
        }, a);
      }
      var r = new e.IDBOpenRequest(),
        l = !1;
      return i.transaction(function (e) {
        e.executeSql("SELECT * FROM dbVersions where name = ?", [n], function (e, t) {
          0 === t.rows.length ? e.executeSql("INSERT INTO dbVersions VALUES (?,?)", [n, o || 1], function () {
            s(0);
          }, a) : s(t.rows.item(0).version);
        }, a);
      }, a), r;
    },
    deleteDatabase: function (n) {
      function o(t) {
        if (!r) {
          s.readyState = "done", s.error = "DOMError";
          var i = e.Event("error");
          i.message = t, i.debug = arguments, e.util.callback("onerror", s, i), r = !0;
        }
      }
      function a() {
        i.transaction(function (t) {
          t.executeSql("DELETE FROM dbVersions where name = ? ", [n], function () {
            s.result = void 0;
            var t = e.Event("success");
            t.newVersion = null, t.oldVersion = l, e.util.callback("onsuccess", s, t);
          }, o);
        }, o);
      }
      var s = new e.IDBOpenRequest(),
        r = !1,
        l = null;
      return i.transaction(function (i) {
        i.executeSql("SELECT * FROM dbVersions where name = ?", [n], function (i, r) {
          if (0 === r.rows.length) {
            s.result = void 0;
            var c = e.Event("success");
            return c.newVersion = null, c.oldVersion = l, void e.util.callback("onsuccess", s, c);
          }
          l = r.rows.item(0).version;
          var d = window.openDatabase(n, 1, n, t);
          d.transaction(function (t) {
            t.executeSql("SELECT * FROM __sys__", [], function (t, i) {
              var n = i.rows;
              !function s(i) {
                i >= n.length ? t.executeSql("DROP TABLE __sys__", [], function () {
                  a();
                }, o) : t.executeSql("DROP TABLE " + e.util.quote(n.item(i).name), [], function () {
                  s(i + 1);
                }, function () {
                  s(i + 1);
                });
              }(0);
            }, function () {
              a();
            });
          }, o);
        });
      }, o), s;
    },
    cmp: function (t, i) {
      return e.Key.encode(t) > e.Key.encode(i) ? 1 : t === i ? 0 : -1;
    }
  };
  e.shimIndexedDB = n;
}
if (!l) {
  var t = e.Event("error", arguments);
  r.readyState = "done", r.error = "DOMError", e.util.callback("onerror", r, t), l = !0;
}
if (!r) {
  s.readyState = "done", s.error = "DOMError";
  var i = e.Event("error");
  i.message = t, i.debug = arguments, e.util.callback("onerror", s, i), r = !0;
}
if (0 === r.rows.length) {
  s.result = void 0;
  var c = e.Event("success");
  return c.newVersion = null, c.oldVersion = l, void e.util.callback("onsuccess", s, c);
}
if ((navigator.userAgent.match(/Android 2/) || navigator.userAgent.match(/Android 3/) || navigator.userAgent.match(/Android 4\.[0-3]/)) && (navigator.userAgent.match(/Chrome/) || (i = !0)), void 0 !== e.indexedDB && !i || void 0 === e.openDatabase) {
  e.IDBDatabase = e.IDBDatabase || e.webkitIDBDatabase, e.IDBTransaction = e.IDBTransaction || e.webkitIDBTransaction, e.IDBCursor = e.IDBCursor || e.webkitIDBCursor, e.IDBKeyRange = e.IDBKeyRange || e.webkitIDBKeyRange, e.IDBTransaction || (e.IDBTransaction = {});
  try {
    e.IDBTransaction.READ_ONLY = e.IDBTransaction.READ_ONLY || "readonly", e.IDBTransaction.READ_WRITE = e.IDBTransaction.READ_WRITE || "readwrite";
  } catch (n) {}
} else {
  e.shimIndexedDB.__useShim();
}
if (!e) {
  return s(new Error("staticContent is not initialized. Cannot perform request: " + t));
}
if (4 === ~~l.readyState) {
  var e;
  if (200 !== ~~l.status && (e = "staticContent xhrError: " + l.status + ", responseText: " + l.responseText), r.retry(e)) {
    return console.warn("staticContent.request failed code ", l.status + ", will retry...");
  }
  if (e) {
    return s(r.mainError());
  }
  var t;
  try {
    t = JSON.parse(l.response);
  } catch (i) {
    return s(i);
  }
  s(null, t);
}
if (200 !== ~~l.status && (e = "staticContent xhrError: " + l.status + ", responseText: " + l.responseText), r.retry(e)) {
  return console.warn("staticContent.request failed code ", l.status + ", will retry...");
}
if (e) {
  return s(r.mainError());
}
if ("string" != typeof e || 0 === e.length) {
  return a;
}
for (var c = 0; c < l; ++c) {
  var d,
    u,
    h,
    p,
    m = e[c].replace(s, "%20"),
    f = m.indexOf(n);
  f >= 0 ? (d = m.substr(0, f), u = m.substr(f + 1)) : (d = m, u = ""), h = decodeURIComponent(d), p = decodeURIComponent(u), i(a, h) ? Array.isArray(a[h]) ? a[h].push(p) : a[h] = [a[h], p] : a[h] = p;
}
if (e instanceof Array) {
  return [].concat(e);
}
for (var i in e) {
  t[i] = e[i];
}
if (t.minTimeout > t.maxTimeout) {
  throw new Error("minTimeout is greater than maxTimeout");
}
for (var n = [], o = 0; o < t.retries; o++) {
  n.push(this.createTimeout(o, t));
}
if (i instanceof Array && (n = i, i = null), !n) {
  n = [];
  for (var o in e) {
    "function" == typeof e[o] && n.push(o);
  }
}
for (var o in e) {
  "function" == typeof e[o] && n.push(o);
}
for (var a = 0; a < n.length; a++) {
  var s = n[a],
    r = e[s];
  e[s] = function (n) {
    var o = t.operation(i),
      a = Array.prototype.slice.call(arguments, 1),
      s = a.pop();
    a.push(function (e) {
      o.retry(e) || (e && (arguments[0] = o.mainError()), s.apply(this, arguments));
    }), o.attempt(function () {
      n.apply(e, a);
    });
  }.bind(e, r), e[s].options = i;
}
if (this._timeout && clearTimeout(this._timeout), !e) {
  return !1;
}
if (e && t - this._operationStart >= this._maxRetryTime) {
  return this._errors.push(e), this._errors.unshift(new Error("RetryOperation timeout occurred")), !1;
}
if (void 0 === i) {
  if (!this._cachedTimeouts) {
    return !1;
  }
  this._errors.splice(0, this._errors.length - 1), i = this._cachedTimeouts.slice(-1);
}
if (!this._cachedTimeouts) {
  return !1;
}
if (0 === this._errors.length) {
  return null;
}
for (var e = {}, t = null, i = 0, n = 0; n < this._errors.length; n++) {
  var o = this._errors[n],
    a = o.message,
    s = (e[a] || 0) + 1;
  e[a] = s, s >= i && (t = o, i = s);
}
if (e) {
  return console.error(e);
}
if (e.reason) {
  if (e.reason === f.INCOMPATIBLE_APP_VERSION) {
    var t, i;
    return u.isAndroidApp ? (t = h("tablet.ui.popup.accessDenied.incompatibleAppAndroid"), i = "market://details?id=com.ankama.dofustouch") : u.isIOSApp ? (t = h("tablet.ui.popup.accessDenied.incompatibleAppIOS"), i = "https://itunes.apple.com/app/id1041406978") : t = h("tablet.ui.popup.accessDenied.incompatibleApp"), void window.gui.openConfirmPopup({
      title: h("ui.popup.accessDenied"),
      message: t,
      cb: function (e) {
        e && i && window.open(i, "_system", "location=no");
      }
    });
  }
  if (e.reason === f.INCOMPATIBLE_BUILD_VERSION) {
    return t = h("tablet.ui.popup.accessDenied.incompatibleBuild"), void window.gui.openConfirmPopup({
      title: h("ui.popup.accessDenied"),
      message: t,
      noDisable: !0,
      cb: function (e) {
        e && window.location.reload();
      }
    });
  }
  window.gui.openSimplePopup(p(e), h("ui.popup.accessDenied"));
} else {
  window.gui.openSimplePopup(h("ui.popup.connectionFailed.text")), console.warn("login error without reason:", e);
}
if (e.reason === f.INCOMPATIBLE_APP_VERSION) {
  var t, i;
  return u.isAndroidApp ? (t = h("tablet.ui.popup.accessDenied.incompatibleAppAndroid"), i = "market://details?id=com.ankama.dofustouch") : u.isIOSApp ? (t = h("tablet.ui.popup.accessDenied.incompatibleAppIOS"), i = "https://itunes.apple.com/app/id1041406978") : t = h("tablet.ui.popup.accessDenied.incompatibleApp"), void window.gui.openConfirmPopup({
    title: h("ui.popup.accessDenied"),
    message: t,
    cb: function (e) {
      e && i && window.open(i, "_system", "location=no");
    }
  });
}
if (e.reason === f.INCOMPATIBLE_BUILD_VERSION) {
  return t = h("tablet.ui.popup.accessDenied.incompatibleBuild"), void window.gui.openConfirmPopup({
    title: h("ui.popup.accessDenied"),
    message: t,
    noDisable: !0,
    cb: function (e) {
      e && window.location.reload();
    }
  });
}
if (n) {
  return window.gui.openSimplePopup(m(n), h("ui.popup.accessDenied")), o(n);
}
if (i = i || {}, o = o || n, window.Config.byPassToken) {
  return l(null, {
    username: i.account,
    token: i.password
  });
}
if (i.account) {
  var p = i.account.split("|");
  return window.gui.playerData.setForcedAccount(p[1]), d.login(p[0], i.password, i.save, l);
}
if (!g) {
  throw new Error("THROW Need the logger: " + t);
}
if (window.Config.disabledFeatures.guest) {
  return t({
    error: new Error("createGuest: guest is disabled")
  });
}
if (f) {
  return _.account.createGuest(window, s, t);
}
if (i.content) {
  try {
    n = JSON.parse(i.content);
  } catch (o) {
    return t({
      error: new Error("createGuest: unable to parse JSON (" + i.content + ")")
    });
  }
}
if (e) {
  return t({
    error: new Error(e + " (status code: " + i.xhr.status + ")"),
    userError: i.xhr.status && i.xhr.status >= 600 && n ? n.text : null
  });
}
if (e) {
  return i(e);
}
if (window.gui.playerData.isShopDisabled()) {
  return e(new Error("SHOP_DISABLE"));
}
if (e) {
  return void M.error("sendKPIEvent: Error on event id: " + t + ", error: " + e);
}
if (0 === t.length) {
  return i;
}
for (var n = 0; n < t.length; n += 1) {
  var o = t[n] || "",
    a = e.getResponseHeader(o.toLowerCase());
  a && (i[o] = a);
}
if (4 === e) {
  if (i < 200 || i >= 300) {
    return t("there was a problem with the request", {
      xhr: this
    });
  }
  var a = {
    content: this.responseText,
    headers: o(d, m),
    xhr: this
  };
  return t(null, a);
}
if (i < 200 || i >= 300) {
  return t("there was a problem with the request", {
    xhr: this
  });
}
if (!e) {
  return l("no options provided", {
    xhr: {}
  });
}
if (s.indexOf(c) === -1) {
  return l('unsupported request type "' + c + '"', {
    xhr: {}
  });
}
if (!d) {
  return l("unable to retrieve browser XMLHttpRequest object", {
    xhr: {}
  });
}
if ("/json/Ankama/v5/Api/CreateApiKey" === t && 401 === e) {
  return !0;
}
if ("/json/Ankama/v5/Account/CreateToken" === t) {
  if (500 === e) {
    return !0;
  }
  if (403 === e) {
    return !0;
  }
}
if (500 === e) {
  return !0;
}
if (403 === e) {
  return !0;
}
if ("/json/Ankama/v5/Account/ValidateGuestWithApiKey" === t) {
  if (400 === e) {
    return !0;
  }
  if (422 === e) {
    return !0;
  }
}
if (400 === e) {
  return !0;
}
if (422 === e) {
  return !0;
}
if (e.status < 400 || e.status > 599) {
  return e;
}
if (n(e.status, t)) {
  return e;
}
if ("/json/Ankama/v5/Account/CreateToken" === i && 403 === e) {
  var n = new Error("CreateToken 403 force NOTOKEN");
  return n.reason = "NOTOKEN", t.resetHaapiKey(), n;
}
if (r) {
  return t(r);
}
if (i._statusCode || e.status > 599 || n(e.status, a)) {
  throw i._statusCode = i._statusCode || e.status, i;
}
if (t = t || {}, l = e, !t.save) {
  return e;
}
if (!e) {
  return d.removeItem("HAAPI_KEY"), d.removeItem("HAAPI_KEY_TIMEOUT"), e;
}
if (e && c(e) && e instanceof n) {
  return e;
}
if (!l(e)) {
  throw new TypeError("Parameter 'url' must be a string, not " + typeof e);
}
if (o) {
  o = o[0];
  var a = o.toLowerCase();
  this.protocol = a, n = n.substr(o.length);
}
if (i || o || n.match(/^\/\/[^@\/]+@[^@\/]+/)) {
  var s = "//" === n.substr(0, 2);
  !s || o && C[o] || (n = n.substr(2), this.slashes = !0);
}
if (!C[o] && (s || o && !I[o])) {
  for (var r = -1, c = 0; c < y.length; c++) {
    var d = n.indexOf(y[c]);
    d !== -1 && (r === -1 || d < r) && (r = d);
  }
  var u, m;
  m = r === -1 ? n.lastIndexOf("@") : n.lastIndexOf("@", r), m !== -1 && (u = n.slice(0, m), n = n.slice(m + 1), this.auth = decodeURIComponent(u)), r = -1;
  for (var c = 0; c < v.length; c++) {
    var d = n.indexOf(v[c]);
    d !== -1 && (r === -1 || d < r) && (r = d);
  }
  r === -1 && (r = n.length), this.host = n.slice(0, r), n = n.slice(r), this.parseHost(), this.hostname = this.hostname || "";
  var f = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
  if (!f) {
    for (var g = this.hostname.split(/\./), c = 0, S = g.length; c < S; c++) {
      var E = g[c];
      if (E && !E.match(b)) {
        for (var N = "", x = 0, L = E.length; x < L; x++) {
          N += E.charCodeAt(x) > 127 ? "x" : E[x];
        }
        if (!N.match(b)) {
          var O = g.slice(0, c),
            R = g.slice(c + 1),
            D = E.match(M);
          D && (O.push(D[1]), R.unshift(D[2])), R.length && (n = "/" + R.join(".") + n), this.hostname = O.join(".");
          break;
        }
      }
    }
  }
  if (this.hostname.length > w ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), !f) {
    for (var P = this.hostname.split("."), B = [], c = 0; c < P.length; ++c) {
      var k = P[c];
      B.push(k.match(/[^A-Za-z0-9_-]/) ? "xn--" + h.encode(k) : k);
    }
    this.hostname = B.join(".");
  }
  var F = this.port ? ":" + this.port : "",
    H = this.hostname || "";
  this.host = H + F, this.href += this.host, f && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== n[0] && (n = "/" + n));
}
for (var r = -1, c = 0; c < y.length; c++) {
  var d = n.indexOf(y[c]);
  d !== -1 && (r === -1 || d < r) && (r = d);
}
for (var c = 0; c < v.length; c++) {
  var d = n.indexOf(v[c]);
  d !== -1 && (r === -1 || d < r) && (r = d);
}
if (!f) {
  for (var g = this.hostname.split(/\./), c = 0, S = g.length; c < S; c++) {
    var E = g[c];
    if (E && !E.match(b)) {
      for (var N = "", x = 0, L = E.length; x < L; x++) {
        N += E.charCodeAt(x) > 127 ? "x" : E[x];
      }
      if (!N.match(b)) {
        var O = g.slice(0, c),
          R = g.slice(c + 1),
          D = E.match(M);
        D && (O.push(D[1]), R.unshift(D[2])), R.length && (n = "/" + R.join(".") + n), this.hostname = O.join(".");
        break;
      }
    }
  }
}
for (var g = this.hostname.split(/\./), c = 0, S = g.length; c < S; c++) {
  var E = g[c];
  if (E && !E.match(b)) {
    for (var N = "", x = 0, L = E.length; x < L; x++) {
      N += E.charCodeAt(x) > 127 ? "x" : E[x];
    }
    if (!N.match(b)) {
      var O = g.slice(0, c),
        R = g.slice(c + 1),
        D = E.match(M);
      D && (O.push(D[1]), R.unshift(D[2])), R.length && (n = "/" + R.join(".") + n), this.hostname = O.join(".");
      break;
    }
  }
}
if (E && !E.match(b)) {
  for (var N = "", x = 0, L = E.length; x < L; x++) {
    N += E.charCodeAt(x) > 127 ? "x" : E[x];
  }
  if (!N.match(b)) {
    var O = g.slice(0, c),
      R = g.slice(c + 1),
      D = E.match(M);
    D && (O.push(D[1]), R.unshift(D[2])), R.length && (n = "/" + R.join(".") + n), this.hostname = O.join(".");
    break;
  }
}
for (var N = "", x = 0, L = E.length; x < L; x++) {
  N += E.charCodeAt(x) > 127 ? "x" : E[x];
}
if (!N.match(b)) {
  var O = g.slice(0, c),
    R = g.slice(c + 1),
    D = E.match(M);
  D && (O.push(D[1]), R.unshift(D[2])), R.length && (n = "/" + R.join(".") + n), this.hostname = O.join(".");
  break;
}
if (this.hostname.length > w ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), !f) {
  for (var P = this.hostname.split("."), B = [], c = 0; c < P.length; ++c) {
    var k = P[c];
    B.push(k.match(/[^A-Za-z0-9_-]/) ? "xn--" + h.encode(k) : k);
  }
  this.hostname = B.join(".");
}
for (var P = this.hostname.split("."), B = [], c = 0; c < P.length; ++c) {
  var k = P[c];
  B.push(k.match(/[^A-Za-z0-9_-]/) ? "xn--" + h.encode(k) : k);
}
if (!T[a]) {
  for (var c = 0, S = _.length; c < S; c++) {
    var z = _[c],
      W = encodeURIComponent(z);
    W === z && (W = escape(z)), n = n.split(z).join(W);
  }
}
for (var c = 0, S = _.length; c < S; c++) {
  var z = _[c],
    W = encodeURIComponent(z);
  W === z && (W = escape(z)), n = n.split(z).join(W);
}
if (U !== -1 ? (this.search = n.substr(U), this.query = n.substr(U + 1), t && (this.query = A.parse(this.query)), n = n.slice(0, U)) : t && (this.search = "", this.query = {}), n && (this.pathname = n), I[a] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
  var F = this.pathname || "",
    k = this.search || "";
  this.path = F + k;
}
if (l(e)) {
  var t = new n();
  t.parse(e, !1, !0), e = t;
}
if (Object.keys(this).forEach(function (e) {
  i[e] = this[e];
}, this), i.hash = e.hash, "" === e.href) {
  return i.href = i.format(), i;
}
if (e.slashes && !e.protocol) {
  return Object.keys(e).forEach(function (t) {
    "protocol" !== t && (i[t] = e[t]);
  }), I[i.protocol] && i.hostname && !i.pathname && (i.path = i.pathname = "/"), i.href = i.format(), i;
}
if (e.protocol && e.protocol !== i.protocol) {
  if (!I[e.protocol]) {
    return Object.keys(e).forEach(function (t) {
      i[t] = e[t];
    }), i.href = i.format(), i;
  }
  if (i.protocol = e.protocol, e.host || C[e.protocol]) {
    i.pathname = e.pathname;
  } else {
    for (var o = (e.pathname || "").split("/"); o.length && !(e.host = o.shift());) {
      ;
    }
    e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== o[0] && o.unshift(""), o.length < 2 && o.unshift(""), i.pathname = o.join("/");
  }
  if (i.search = e.search, i.query = e.query, i.host = e.host || "", i.auth = e.auth, i.hostname = e.hostname || e.host, i.port = e.port, i.pathname || i.search) {
    var a = i.pathname || "",
      s = i.search || "";
    i.path = a + s;
  }
  return i.slashes = i.slashes || e.slashes, i.href = i.format(), i;
}
if (!I[e.protocol]) {
  return Object.keys(e).forEach(function (t) {
    i[t] = e[t];
  }), i.href = i.format(), i;
}
if (i.protocol = e.protocol, e.host || C[e.protocol]) {
  i.pathname = e.pathname;
} else {
  for (var o = (e.pathname || "").split("/"); o.length && !(e.host = o.shift());) {
    ;
  }
  e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== o[0] && o.unshift(""), o.length < 2 && o.unshift(""), i.pathname = o.join("/");
}
for (var o = (e.pathname || "").split("/"); o.length && !(e.host = o.shift());) {
  ;
}
if (i.search = e.search, i.query = e.query, i.host = e.host || "", i.auth = e.auth, i.hostname = e.hostname || e.host, i.port = e.port, i.pathname || i.search) {
  var a = i.pathname || "",
    s = i.search || "";
  i.path = a + s;
}
if (f && (i.hostname = "", i.port = null, i.host && ("" === m[0] ? m[0] = i.host : m.unshift(i.host)), i.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === o[0] ? o[0] = e.host : o.unshift(e.host)), e.host = null), h = h && ("" === o[0] || "" === m[0])), c) {
  i.host = e.host || "" === e.host ? e.host : i.host, i.hostname = e.hostname || "" === e.hostname ? e.hostname : i.hostname, i.search = e.search, i.query = e.query, m = o;
} else if (o.length) {
  m || (m = []), m.pop(), m = m.concat(o), i.search = e.search, i.query = e.query;
} else if (!u(e.search)) {
  if (f) {
    i.hostname = i.host = m.shift();
    var g = !!(i.host && i.host.indexOf("@") > 0) && i.host.split("@");
    g && (i.auth = g.shift(), i.host = i.hostname = g.shift());
  }
  return i.search = e.search, i.query = e.query, d(i.pathname) && d(i.search) || (i.path = (i.pathname ? i.pathname : "") + (i.search ? i.search : "")), i.href = i.format(), i;
}
if (o.length) {
  m || (m = []), m.pop(), m = m.concat(o), i.search = e.search, i.query = e.query;
} else if (!u(e.search)) {
  if (f) {
    i.hostname = i.host = m.shift();
    var g = !!(i.host && i.host.indexOf("@") > 0) && i.host.split("@");
    g && (i.auth = g.shift(), i.host = i.hostname = g.shift());
  }
  return i.search = e.search, i.query = e.query, d(i.pathname) && d(i.search) || (i.path = (i.pathname ? i.pathname : "") + (i.search ? i.search : "")), i.href = i.format(), i;
}
if (!u(e.search)) {
  if (f) {
    i.hostname = i.host = m.shift();
    var g = !!(i.host && i.host.indexOf("@") > 0) && i.host.split("@");
    g && (i.auth = g.shift(), i.host = i.hostname = g.shift());
  }
  return i.search = e.search, i.query = e.query, d(i.pathname) && d(i.search) || (i.path = (i.pathname ? i.pathname : "") + (i.search ? i.search : "")), i.href = i.format(), i;
}
if (f) {
  i.hostname = i.host = m.shift();
  var g = !!(i.host && i.host.indexOf("@") > 0) && i.host.split("@");
  g && (i.auth = g.shift(), i.host = i.hostname = g.shift());
}
if (!m.length) {
  return i.pathname = null, i.search ? i.path = "/" + i.search : i.path = null, i.href = i.format(), i;
}
for (var _ = m.slice(-1)[0], v = (i.host || e.host) && ("." === _ || ".." === _) || "" === _, y = 0, w = m.length; w >= 0; w--) {
  _ = m[w], "." == _ ? m.splice(w, 1) : ".." === _ ? (m.splice(w, 1), y++) : y && (m.splice(w, 1), y--);
}
if (!h && !p) {
  for (; y--; y) {
    m.unshift("..");
  }
}
for (; y--; y) {
  m.unshift("..");
}
if (f) {
  i.hostname = i.host = b ? "" : m.length ? m.shift() : "";
  var g = !!(i.host && i.host.indexOf("@") > 0) && i.host.split("@");
  g && (i.auth = g.shift(), i.host = i.hostname = g.shift());
}
for (var i = e.length, n = []; i--;) {
  n[i] = t(e[i]);
}
for (var t, i, n = [], o = 0, a = e.length; o < a;) {
  t = e.charCodeAt(o++), t >= 55296 && t <= 56319 && o < a ? (i = e.charCodeAt(o++), 56320 == (64512 & i) ? n.push(((1023 & t) << 10) + (1023 & i) + 65536) : (n.push(t), o--)) : n.push(t);
}
for (e = i ? D(e / I) : e >> 1, e += D(e / t); e > R * T >> 1; n += b) {
  e = D(e / R);
}
for (i = e.lastIndexOf(E), i < 0 && (i = 0), n = 0; n < i; ++n) {
  e.charCodeAt(n) >= 128 && s("not-basic"), f.push(e.charCodeAt(n));
}
for (o = i > 0 ? i + 1 : 0; o < g;) {
  for (a = _, r = 1, l = b; o >= g && s("invalid-input"), c = u(e.charCodeAt(o++)), (c >= b || c > D((w - _) / r)) && s("overflow"), _ += c * r, h = l <= y ? M : l >= y + T ? T : l - y, !(c < h); l += b) {
    m = b - h, r > D(w / m) && s("overflow"), r *= m;
  }
  t = f.length + 1, y = p(_ - a, t, 0 == a), D(_ / t) > w - v && s("overflow"), v += D(_ / t), _ %= t, f.splice(_++, 0, v);
}
for (a = _, r = 1, l = b; o >= g && s("invalid-input"), c = u(e.charCodeAt(o++)), (c >= b || c > D((w - _) / r)) && s("overflow"), _ += c * r, h = l <= y ? M : l >= y + T ? T : l - y, !(c < h); l += b) {
  m = b - h, r > D(w / m) && s("overflow"), r *= m;
}
for (e = c(e), g = e.length, t = S, i = 0, a = A, r = 0; r < g; ++r) {
  f = e[r], f < 128 && C.push(P(f));
}
for (n = o = C.length, o && C.push(E); n < g;) {
  for (l = w, r = 0; r < g; ++r) {
    f = e[r], f >= t && f < l && (l = f);
  }
  for (_ = n + 1, l - t > D((w - i) / _) && s("overflow"), i += (l - t) * _, t = l, r = 0; r < g; ++r) {
    if (f = e[r], f < t && ++i > w && s("overflow"), f == t) {
      for (d = i, u = b; m = u <= a ? M : u >= a + T ? T : u - a, !(d < m); u += b) {
        y = d - m, v = b - m, C.push(P(h(m + y % v, 0))), d = D(y / v);
      }
      C.push(P(h(d, 0))), a = p(i, _, n == o), i = 0, ++n;
    }
  }
  ++i, ++t;
}
for (l = w, r = 0; r < g; ++r) {
  f = e[r], f >= t && f < l && (l = f);
}
for (_ = n + 1, l - t > D((w - i) / _) && s("overflow"), i += (l - t) * _, t = l, r = 0; r < g; ++r) {
  if (f = e[r], f < t && ++i > w && s("overflow"), f == t) {
    for (d = i, u = b; m = u <= a ? M : u >= a + T ? T : u - a, !(d < m); u += b) {
      y = d - m, v = b - m, C.push(P(h(m + y % v, 0))), d = D(y / v);
    }
    C.push(P(h(d, 0))), a = p(i, _, n == o), i = 0, ++n;
  }
}
if (f = e[r], f < t && ++i > w && s("overflow"), f == t) {
  for (d = i, u = b; m = u <= a ? M : u >= a + T ? T : u - a, !(d < m); u += b) {
    y = d - m, v = b - m, C.push(P(h(m + y % v, 0))), d = D(y / v);
  }
  C.push(P(h(d, 0))), a = p(i, _, n == o), i = 0, ++n;
}
for (d = i, u = b; m = u <= a ? M : u >= a + T ? T : u - a, !(d < m); u += b) {
  y = d - m, v = b - m, C.push(P(h(m + y % v, 0))), d = D(y / v);
}
if (!e) {
  throw new Error("Need the logger!");
}
for (var n in t) {
  if (t.hasOwnProperty(n)) {
    var o = t[n];
    i.push("- " + o);
  }
}
if (t.hasOwnProperty(n)) {
  var o = t[n];
  i.push("- " + o);
}
if (e) {
  var n = parseInt(e, 10);
  if (isNaN(n)) {
    return t = new Error("birthDateTimestamp is not a number for: " + e), {
      error: t,
      birthDate: i
    };
  }
  try {
    i = r(n, "yyyy-mm-dd");
  } catch (o) {
    t = o;
  }
  if (t) {
    return {
      error: t,
      birthDate: i
    };
  }
}
if (isNaN(n)) {
  return t = new Error("birthDateTimestamp is not a number for: " + e), {
    error: t,
    birthDate: i
  };
}
if (t) {
  return {
    error: t,
    birthDate: i
  };
}
if (!e || !e.origin || "https://account.ankama.tst" === e.origin || "https://account.ankama.lan" === e.origin || "https://account.ankama.com" === e.origin) {
  if (e && e.data && e.data.success) {
    var i = {
      login: e.data.login,
      password: e.data.password
    };
    return t.setValue("guestAccount", i, 1), void n(null, i);
  }
  var o = {
    error: new Error("View gave no data.")
  };
  n(o);
}
if (e && e.data && e.data.success) {
  var i = {
    login: e.data.login,
    password: e.data.password
  };
  return t.setValue("guestAccount", i, 1), void n(null, i);
}
if (e.cordova && e.cordova.InAppBrowser ? d = e.cordova.InAppBrowser.open(c, "_blank", "location=yes,hidden=no") : u = e.open(c, "_blank"), !d && !u) {
  var h = {
    error: new Error("Cannot get the view.")
  };
  n(h);
}
if (r.guest) {
  return a(new Error("validateGuest: guest is disabled"));
}
if (d.error) {
  return a(d.error);
}
if (o(l.event.imageUrl) && o(l.month.protectorImageUrl) && o(l.zodiac.imageUrl)) {
  return n(null, l);
}
if (this._lastUpdate === p) {
  return u = !0, i(null, this._cachedResult, u);
}
for (45 === e.charCodeAt(0) && (n = 1, c = -1), n; n < a.length; n++) {
  i = t(a.charCodeAt(n)), l = 60 * l + i;
}
for (n = 0; n < s.length; n++) {
  r /= 60, i = t(s.charCodeAt(n)), l += i * r;
}
for (var t = 0; t < e.length; t++) {
  e[t] = i(e[t]);
}
for (var i = 0; i < t; i++) {
  e[i] = Math.round((e[i - 1] || 0) + 6e4 * e[i]);
}
for (i = 0; i < t.length; i++) {
  n[i] = e[t[i]];
}
for (var i, n; n = 6e4 * ((t.at - e.at) / 12e4 | 0);) {
  i = new c(new Date(e.at + n)), i.offset === e.offset ? e = i : t = i;
}
for (i = 1; i < 48; i++) {
  t = new c(new Date(n, i, 1)), t.offset !== o.offset && (e = u(o, t), a.push(e), a.push(new c(new Date(e.at + 6e4)))), o = t;
}
for (i = 0; i < 4; i++) {
  a.push(new c(new Date(n + i, 0, 1))), a.push(new c(new Date(n + i, 6, 1)));
}
for (n(t), i = 0; i < t.length; i++) {
  o = t[i], W[o] = W[o] || {}, W[o][e] = !0;
}
for (t = 0; t < o; t++) {
  n = W[e[t].offset] || {};
  for (i in n) {
    n.hasOwnProperty(i) && (a[i] = !0);
  }
}
for (i in n) {
  n.hasOwnProperty(i) && (a[i] = !0);
}
for (t in a) {
  a.hasOwnProperty(t) && s.push(z[t]);
}
if (e && e.length > 3) {
  var t = z[v(e)];
  if (t) {
    return t;
  }
  x("Moment Timezone found " + e + " from the Intl api, but did not have that data loaded.");
}
if (t) {
  return t;
}
for (o = 0; o < l.length; o++) {
  for (n = new d(w(l[o]), r), a = 0; a < r; a++) {
    n.scoreOffsetAt(s[a]);
  }
  c.push(n);
}
for (n = new d(w(l[o]), r), a = 0; a < r; a++) {
  n.scoreOffsetAt(s[a]);
}
for ("string" == typeof e && (e = [e]), t = 0; t < e.length; t++) {
  n = e[t].split("|"), i = n[0], o = v(i), k[o] = e[t], z[o] = i, m(o, n[2].split(" "));
}
for (e in z) {
  z.hasOwnProperty(e) && (k[e] || k[F[e]]) && z[e] && t.push(z[e]);
}
for ("string" == typeof e && (e = [e]), t = 0; t < e.length; t++) {
  i = e[t].split("|"), n = v(i[0]), o = v(i[1]), F[n] = o, z[n] = i[0], F[o] = n, z[o] = i[1];
}
if (e && e.length) {
  for (t = 0; t < e.length; t++) {
    o = e[t].split("|"), i = o[0].toUpperCase(), n = o[1].split(" "), H[i] = new l(i, n);
  }
}
for (t = 0; t < e.length; t++) {
  o = e[t].split("|"), i = o[0].toUpperCase(), n = o[1].split(" "), H[i] = new l(i, n);
}
if (e = I(e), !e) {
  return null;
}
for (t = 0; t < n.length; t++) {
  if (i < n[t]) {
    return t;
  }
}
if (i < n[t]) {
  return t;
}
for (o = 0; o < l; o++) {
  if (t = s[o], i = s[o + 1], n = s[o ? o - 1 : o], t < i && L.moveAmbiguousForward ? t = i : t > n && L.moveInvalidForward && (t = n), a < r[o] - 6e4 * t) {
    return s[o];
  }
}
if (t = s[o], i = s[o + 1], n = s[o ? o - 1 : o], t < i && L.moveAmbiguousForward ? t = i : t > n && L.moveInvalidForward && (t = n), a < r[o] - 6e4 * t) {
  return s[o];
}
if (void 0 === t._z && (o && N(t) && !t._isUTC && (t._d = e.utc(t._a)._d, t.utc().add(o.parse(t), "minutes")), t._z = o), t._z) {
  if (n = t._z.utcOffset(t), Math.abs(n) < 16 && (n /= 60), void 0 !== t.utcOffset) {
    var a = t._z;
    t.utcOffset(-n, i), t._z = a;
  } else {
    t.zone(n, i);
  }
}
if (n = t._z.utcOffset(t), Math.abs(n) < 16 && (n /= 60), void 0 !== t.utcOffset) {
  var a = t._z;
  t.utcOffset(-n, i), t._z = a;
} else {
  t.zone(n, i);
}
if (t) {
  if ("string" != typeof t) {
    throw new Error("Time zone name must be a string, got " + t + " [" + typeof t + "]");
  }
  return this._z = w(t), this._z ? e.updateOffset(this, i) : x("Moment Timezone has no data for " + t + ". See http://momentjs.com/timezone/docs/#/data-loading/."), this;
}
if ("string" != typeof t) {
  throw new Error("Time zone name must be a string, got " + t + " [" + typeof t + "]");
}
if (this._z) {
  return this._z.name;
}
if (Object.getOwnPropertyNames) {
  return 0 === Object.getOwnPropertyNames(e).length;
}
for (t in e) {
  if (r(e, t)) {
    return !1;
  }
}
if (r(e, t)) {
  return !1;
}
for (i = 0; i < o; ++i) {
  n.push(t(e[i], i));
}
for (var i in t) {
  r(t, i) && (e[i] = t[i]);
}
if (null == e._isValid) {
  var t = g(e),
    i = ao.call(t.parsedDateParts, function (e) {
      return null != e;
    }),
    n = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidEra && !t.invalidMonth && !t.invalidWeekday && !t.weekdayMismatch && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && i);
  if (e._strict && (n = n && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), null != Object.isFrozen && Object.isFrozen(e)) {
    return n;
  }
  e._isValid = n;
}
if (e._strict && (n = n && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), null != Object.isFrozen && Object.isFrozen(e)) {
  return n;
}
if (c(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), c(t._i) || (e._i = t._i), c(t._f) || (e._f = t._f), c(t._l) || (e._l = t._l), c(t._strict) || (e._strict = t._strict), c(t._tzm) || (e._tzm = t._tzm), c(t._isUTC) || (e._isUTC = t._isUTC), c(t._offset) || (e._offset = t._offset), c(t._pf) || (e._pf = g(t)), c(t._locale) || (e._locale = t._locale), a > 0) {
  for (i = 0; i < a; i++) {
    n = so[i], o = t[n], c(o) || (e[n] = o);
  }
}
for (i = 0; i < a; i++) {
  n = so[i], o = t[n], c(o) || (e[n] = o);
}
if (null != t.deprecationHandler && t.deprecationHandler(null, e), n) {
  var o,
    a,
    s,
    l = [],
    c = arguments.length;
  for (a = 0; a < c; a++) {
    if (o = "", "object" == typeof arguments[a]) {
      o += "\n[" + a + "] ";
      for (s in arguments[0]) {
        r(arguments[0], s) && (o += s + ": " + arguments[0][s] + ", ");
      }
      o = o.slice(0, -2);
    } else {
      o = arguments[a];
    }
    l.push(o);
  }
  M(e + "\nArguments: " + Array.prototype.slice.call(l).join("") + "\n" + new Error().stack), n = !1;
}
for (a = 0; a < c; a++) {
  if (o = "", "object" == typeof arguments[a]) {
    o += "\n[" + a + "] ";
    for (s in arguments[0]) {
      r(arguments[0], s) && (o += s + ": " + arguments[0][s] + ", ");
    }
    o = o.slice(0, -2);
  } else {
    o = arguments[a];
  }
  l.push(o);
}
if (o = "", "object" == typeof arguments[a]) {
  o += "\n[" + a + "] ";
  for (s in arguments[0]) {
    r(arguments[0], s) && (o += s + ": " + arguments[0][s] + ", ");
  }
  o = o.slice(0, -2);
} else {
  o = arguments[a];
}
for (s in arguments[0]) {
  r(arguments[0], s) && (o += s + ": " + arguments[0][s] + ", ");
}
for (i in e) {
  r(e, i) && (t = e[i], I(t) ? this[i] = t : this["_" + i] = t);
}
for (i in t) {
  r(t, i) && (s(e[i]) && s(t[i]) ? (n[i] = {}, p(n[i], e[i]), p(n[i], t[i])) : null != t[i] ? n[i] = t[i] : delete n[i]);
}
for (i in e) {
  r(e, i) && !r(t, i) && s(e[i]) && (n[i] = p({}, n[i]));
}
for (t = 0, i = n.length; t < i; t++) {
  go[n[t]] ? n[t] = go[n[t]] : n[t] = O(n[t]);
}
for (o = 0; o < i; o++) {
  a += I(n[o]) ? n[o].call(t, e) : n[o];
}
for (mo.lastIndex = 0; n >= 0 && mo.test(e);) {
  e = e.replace(mo, i), mo.lastIndex = 0, n -= 1;
}
for (i in e) {
  r(e, i) && (t = G(i), t && (n[t] = e[i]));
}
for (t in e) {
  r(e, t) && i.push({
    unit: t,
    priority: To[t]
  });
}
if ("object" == typeof e) {
  e = U(e);
  var i,
    n = Y(e),
    o = n.length;
  for (i = 0; i < o; i++) {
    this[n[i].unit](e[n[i].unit]);
  }
} else if (e = G(e), I(this[e])) {
  return this[e](t);
}
for (i = 0; i < o; i++) {
  this[n[i].unit](e[n[i].unit]);
}
if (e = G(e), I(this[e])) {
  return this[e](t);
}
for ("string" == typeof e && (e = [e]), d(t) && (o = function (e, i) {
  i[t] = X(e);
}), n = e.length, i = 0; i < n; i++) {
  Go[e[i]] = o;
}
if (isNaN(e) || isNaN(t)) {
  return NaN;
}
if (!this._monthsParse) {
  for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], n = 0; n < 12; ++n) {
    a = m([2e3, n]), this._shortMonthsParse[n] = this.monthsShort(a, "").toLocaleLowerCase(), this._longMonthsParse[n] = this.months(a, "").toLocaleLowerCase();
  }
}
for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], n = 0; n < 12; ++n) {
  a = m([2e3, n]), this._shortMonthsParse[n] = this.monthsShort(a, "").toLocaleLowerCase(), this._longMonthsParse[n] = this.months(a, "").toLocaleLowerCase();
}
if (this._monthsParseExact) {
  return ue.call(this, e, t, i);
}
for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), n = 0; n < 12; n++) {
  if (o = m([2e3, n]), i && !this._longMonthsParse[n] && (this._longMonthsParse[n] = new RegExp("^" + this.months(o, "").replace(".", "") + "$", "i"), this._shortMonthsParse[n] = new RegExp("^" + this.monthsShort(o, "").replace(".", "") + "$", "i")), i || this._monthsParse[n] || (a = "^" + this.months(o, "") + "|^" + this.monthsShort(o, ""), this._monthsParse[n] = new RegExp(a.replace(".", ""), "i")), i && "MMMM" === t && this._longMonthsParse[n].test(e)) {
    return n;
  }
  if (i && "MMM" === t && this._shortMonthsParse[n].test(e)) {
    return n;
  }
  if (!i && this._monthsParse[n].test(e)) {
    return n;
  }
}
if (o = m([2e3, n]), i && !this._longMonthsParse[n] && (this._longMonthsParse[n] = new RegExp("^" + this.months(o, "").replace(".", "") + "$", "i"), this._shortMonthsParse[n] = new RegExp("^" + this.monthsShort(o, "").replace(".", "") + "$", "i")), i || this._monthsParse[n] || (a = "^" + this.months(o, "") + "|^" + this.monthsShort(o, ""), this._monthsParse[n] = new RegExp(a.replace(".", ""), "i")), i && "MMMM" === t && this._longMonthsParse[n].test(e)) {
  return n;
}
if (i && "MMM" === t && this._shortMonthsParse[n].test(e)) {
  return n;
}
if (!i && this._monthsParse[n].test(e)) {
  return n;
}
if (!e.isValid()) {
  return e;
}
if ("string" == typeof t) {
  if (/^\d+$/.test(t)) {
    t = X(t);
  } else if (t = e.localeData().monthsParse(t), !d(t)) {
    return e;
  }
}
if (/^\d+$/.test(t)) {
  t = X(t);
} else if (t = e.localeData().monthsParse(t), !d(t)) {
  return e;
}
if (t = e.localeData().monthsParse(t), !d(t)) {
  return e;
}
for (t = 0; t < 12; t++) {
  i = m([2e3, t]), n.push(this.monthsShort(i, "")), o.push(this.months(i, "")), a.push(this.months(i, "")), a.push(this.monthsShort(i, ""));
}
for (n.sort(e), o.sort(e), a.sort(e), t = 0; t < 12; t++) {
  n[t] = ne(n[t]), o[t] = ne(o[t]);
}
for (t = 0; t < 24; t++) {
  a[t] = ne(a[t]);
}
if (!this._weekdaysParse) {
  for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], n = 0; n < 7; ++n) {
    a = m([2e3, 1]).day(n), this._minWeekdaysParse[n] = this.weekdaysMin(a, "").toLocaleLowerCase(), this._shortWeekdaysParse[n] = this.weekdaysShort(a, "").toLocaleLowerCase(), this._weekdaysParse[n] = this.weekdays(a, "").toLocaleLowerCase();
  }
}
for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], n = 0; n < 7; ++n) {
  a = m([2e3, 1]).day(n), this._minWeekdaysParse[n] = this.weekdaysMin(a, "").toLocaleLowerCase(), this._shortWeekdaysParse[n] = this.weekdaysShort(a, "").toLocaleLowerCase(), this._weekdaysParse[n] = this.weekdays(a, "").toLocaleLowerCase();
}
if (this._weekdaysParseExact) {
  return Fe.call(this, e, t, i);
}
for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), n = 0; n < 7; n++) {
  if (o = m([2e3, 1]).day(n), i && !this._fullWeekdaysParse[n] && (this._fullWeekdaysParse[n] = new RegExp("^" + this.weekdays(o, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[n] = new RegExp("^" + this.weekdaysShort(o, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[n] = new RegExp("^" + this.weekdaysMin(o, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[n] || (a = "^" + this.weekdays(o, "") + "|^" + this.weekdaysShort(o, "") + "|^" + this.weekdaysMin(o, ""), this._weekdaysParse[n] = new RegExp(a.replace(".", ""), "i")), i && "dddd" === t && this._fullWeekdaysParse[n].test(e)) {
    return n;
  }
  if (i && "ddd" === t && this._shortWeekdaysParse[n].test(e)) {
    return n;
  }
  if (i && "dd" === t && this._minWeekdaysParse[n].test(e)) {
    return n;
  }
  if (!i && this._weekdaysParse[n].test(e)) {
    return n;
  }
}
if (o = m([2e3, 1]).day(n), i && !this._fullWeekdaysParse[n] && (this._fullWeekdaysParse[n] = new RegExp("^" + this.weekdays(o, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[n] = new RegExp("^" + this.weekdaysShort(o, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[n] = new RegExp("^" + this.weekdaysMin(o, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[n] || (a = "^" + this.weekdays(o, "") + "|^" + this.weekdaysShort(o, "") + "|^" + this.weekdaysMin(o, ""), this._weekdaysParse[n] = new RegExp(a.replace(".", ""), "i")), i && "dddd" === t && this._fullWeekdaysParse[n].test(e)) {
  return n;
}
if (i && "ddd" === t && this._shortWeekdaysParse[n].test(e)) {
  return n;
}
if (i && "dd" === t && this._minWeekdaysParse[n].test(e)) {
  return n;
}
if (!i && this._weekdaysParse[n].test(e)) {
  return n;
}
if (!this.isValid()) {
  return null != e ? this : NaN;
}
if (!this.isValid()) {
  return null != e ? this : NaN;
}
if (!this.isValid()) {
  return null != e ? this : NaN;
}
if (null != e) {
  var t = Re(e, this.localeData());
  return this.day(this.day() % 7 ? t : t - 7);
}
for (t = 0; t < 7; t++) {
  i = m([2e3, 1]).day(t), n = ne(this.weekdaysMin(i, "")), o = ne(this.weekdaysShort(i, "")), a = ne(this.weekdays(i, "")), s.push(n), r.push(o), l.push(a), c.push(n), c.push(o), c.push(a);
}
for (i = 0; i < n; i += 1) {
  if (e[i] !== t[i]) {
    return i;
  }
}
if (e[i] !== t[i]) {
  return i;
}
for (var t, i, n, o, a = 0; a < e.length;) {
  for (o = et(e[a]).split("-"), t = o.length, i = et(e[a + 1]), i = i ? i.split("-") : null; t > 0;) {
    if (n = nt(o.slice(0, t).join("-"))) {
      return n;
    }
    if (i && i.length >= t && $e(o, i) >= t - 1) {
      break;
    }
    t--;
  }
  a++;
}
for (o = et(e[a]).split("-"), t = o.length, i = et(e[a + 1]), i = i ? i.split("-") : null; t > 0;) {
  if (n = nt(o.slice(0, t).join("-"))) {
    return n;
  }
  if (i && i.length >= t && $e(o, i) >= t - 1) {
    break;
  }
  t--;
}
if (n = nt(o.slice(0, t).join("-"))) {
  return n;
}
if (i && i.length >= t && $e(o, i) >= t - 1) {
  break;
}
if (void 0 === fa[t] && "undefined" != typeof e && e && e.exports && it(t)) {
  try {
    a = ua._abbr, o = n, i(154)("./" + t), ot(a);
  } catch (s) {
    fa[t] = null;
  }
}
if (null !== t) {
  var i,
    n = ma;
  if (t.abbr = e, null != fa[e]) {
    C("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), n = fa[e]._config;
  } else if (null != t.parentLocale) {
    if (null != fa[t.parentLocale]) {
      n = fa[t.parentLocale]._config;
    } else {
      if (i = nt(t.parentLocale), null == i) {
        return ga[t.parentLocale] || (ga[t.parentLocale] = []), ga[t.parentLocale].push({
          name: e,
          config: t
        }), null;
      }
      n = i._config;
    }
  }
  return fa[e] = new E(S(n, t)), ga[e] && ga[e].forEach(function (e) {
    at(e.name, e.config);
  }), ot(e), fa[e];
}
if (t.abbr = e, null != fa[e]) {
  C("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), n = fa[e]._config;
} else if (null != t.parentLocale) {
  if (null != fa[t.parentLocale]) {
    n = fa[t.parentLocale]._config;
  } else {
    if (i = nt(t.parentLocale), null == i) {
      return ga[t.parentLocale] || (ga[t.parentLocale] = []), ga[t.parentLocale].push({
        name: e,
        config: t
      }), null;
    }
    n = i._config;
  }
}
if (null != t.parentLocale) {
  if (null != fa[t.parentLocale]) {
    n = fa[t.parentLocale]._config;
  } else {
    if (i = nt(t.parentLocale), null == i) {
      return ga[t.parentLocale] || (ga[t.parentLocale] = []), ga[t.parentLocale].push({
        name: e,
        config: t
      }), null;
    }
    n = i._config;
  }
}
if (null != fa[t.parentLocale]) {
  n = fa[t.parentLocale]._config;
} else {
  if (i = nt(t.parentLocale), null == i) {
    return ga[t.parentLocale] || (ga[t.parentLocale] = []), ga[t.parentLocale].push({
      name: e,
      config: t
    }), null;
  }
  n = i._config;
}
if (i = nt(t.parentLocale), null == i) {
  return ga[t.parentLocale] || (ga[t.parentLocale] = []), ga[t.parentLocale].push({
    name: e,
    config: t
  }), null;
}
if (null != t) {
  var i,
    n,
    o = ma;
  null != fa[e] && null != fa[e].parentLocale ? fa[e].set(S(fa[e]._config, t)) : (n = nt(e), null != n && (o = n._config), t = S(o, t), null == n && (t.abbr = e), i = new E(t), i.parentLocale = fa[e], fa[e] = i), ot(e);
} else {
  null != fa[e] && (null != fa[e].parentLocale ? (fa[e] = fa[e].parentLocale, e === ot() && ot(e)) : null != fa[e] && delete fa[e]);
}
if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e) {
  return ua;
}
if (!a(e)) {
  if (t = nt(e)) {
    return t;
  }
  e = [e];
}
if (t = nt(e)) {
  return t;
}
if (l) {
  for (g(e).iso = !0, t = 0, i = c; t < i; t++) {
    if (wa[t][1].exec(l[1])) {
      o = wa[t][0], n = wa[t][2] !== !1;
      break;
    }
  }
  if (null == o) {
    return void (e._isValid = !1);
  }
  if (l[3]) {
    for (t = 0, i = d; t < i; t++) {
      if (ba[t][1].exec(l[3])) {
        a = (l[2] || " ") + ba[t][0];
        break;
      }
    }
    if (null == a) {
      return void (e._isValid = !1);
    }
  }
  if (!n && null != a) {
    return void (e._isValid = !1);
  }
  if (l[4]) {
    if (!ya.exec(l[4])) {
      return void (e._isValid = !1);
    }
    s = "Z";
  }
  e._f = o + (a || "") + (s || ""), Mt(e);
} else {
  e._isValid = !1;
}
for (g(e).iso = !0, t = 0, i = c; t < i; t++) {
  if (wa[t][1].exec(l[1])) {
    o = wa[t][0], n = wa[t][2] !== !1;
    break;
  }
}
if (wa[t][1].exec(l[1])) {
  o = wa[t][0], n = wa[t][2] !== !1;
  break;
}
if (null == o) {
  return void (e._isValid = !1);
}
if (l[3]) {
  for (t = 0, i = d; t < i; t++) {
    if (ba[t][1].exec(l[3])) {
      a = (l[2] || " ") + ba[t][0];
      break;
    }
  }
  if (null == a) {
    return void (e._isValid = !1);
  }
}
for (t = 0, i = d; t < i; t++) {
  if (ba[t][1].exec(l[3])) {
    a = (l[2] || " ") + ba[t][0];
    break;
  }
}
if (ba[t][1].exec(l[3])) {
  a = (l[2] || " ") + ba[t][0];
  break;
}
if (null == a) {
  return void (e._isValid = !1);
}
if (!n && null != a) {
  return void (e._isValid = !1);
}
if (l[4]) {
  if (!ya.exec(l[4])) {
    return void (e._isValid = !1);
  }
  s = "Z";
}
if (!ya.exec(l[4])) {
  return void (e._isValid = !1);
}
if (e) {
  var n = sa.indexOf(e),
    o = new Date(t[0], t[1], t[2]).getDay();
  if (n !== o) {
    return g(i).weekdayMismatch = !0, i._isValid = !1, !1;
  }
}
if (n !== o) {
  return g(i).weekdayMismatch = !0, i._isValid = !1, !1;
}
if (e) {
  return Ca[e];
}
if (t) {
  return 0;
}
if (i) {
  if (t = ut(i[4], i[3], i[2], i[5], i[6], i[7]), !mt(i[1], t, e)) {
    return;
  }
  e._a = t, e._tzm = ft(i[8], i[9], i[10]), e._d = Me.apply(null, e._a), e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), g(e).rfc2822 = !0;
} else {
  e._isValid = !1;
}
if (t = ut(i[4], i[3], i[2], i[5], i[6], i[7]), !mt(i[1], t, e)) {
  return;
}
if (!e._d) {
  for (n = yt(e), e._w && null == e._a[Yo] && null == e._a[qo] && bt(e), null != e._dayOfYear && (a = vt(e._a[Uo], n[Uo]), (e._dayOfYear > ye(a) || 0 === e._dayOfYear) && (g(e)._overflowDayOfYear = !0), i = Me(a, 0, e._dayOfYear), e._a[qo] = i.getUTCMonth(), e._a[Yo] = i.getUTCDate()), t = 0; t < 3 && null == e._a[t]; ++t) {
    e._a[t] = s[t] = n[t];
  }
  for (; t < 7; t++) {
    e._a[t] = s[t] = null == e._a[t] ? 2 === t ? 1 : 0 : e._a[t];
  }
  24 === e._a[jo] && 0 === e._a[Vo] && 0 === e._a[Xo] && 0 === e._a[Qo] && (e._nextDay = !0, e._a[jo] = 0), e._d = (e._useUTC ? Me : be).apply(null, s), o = e._useUTC ? e._d.getUTCDay() : e._d.getDay(), null != e._tzm && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), e._nextDay && (e._a[jo] = 24), e._w && "undefined" != typeof e._w.d && e._w.d !== o && (g(e).weekdayMismatch = !0);
}
for (n = yt(e), e._w && null == e._a[Yo] && null == e._a[qo] && bt(e), null != e._dayOfYear && (a = vt(e._a[Uo], n[Uo]), (e._dayOfYear > ye(a) || 0 === e._dayOfYear) && (g(e)._overflowDayOfYear = !0), i = Me(a, 0, e._dayOfYear), e._a[qo] = i.getUTCMonth(), e._a[Yo] = i.getUTCDate()), t = 0; t < 3 && null == e._a[t]; ++t) {
  e._a[t] = s[t] = n[t];
}
for (; t < 7; t++) {
  e._a[t] = s[t] = null == e._a[t] ? 2 === t ? 1 : 0 : e._a[t];
}
if (e._f === t.ISO_8601) {
  return void dt(e);
}
if (e._f === t.RFC_2822) {
  return void gt(e);
}
for (o = P(e._f, e._locale).match(po) || [], l = o.length, i = 0; i < l; i++) {
  a = o[i], n = (c.match(te(a, e)) || [])[0], n && (s = c.substr(0, c.indexOf(n)), s.length > 0 && g(e).unusedInput.push(s), c = c.slice(c.indexOf(n) + n.length), u += n.length), go[a] ? (n ? g(e).empty = !1 : g(e).unusedTokens.push(a), se(a, n, e)) : e._strict && !n && g(e).unusedTokens.push(a);
}
if (0 === l) {
  return g(e).invalidFormat = !0, void (e._d = new Date(NaN));
}
for (o = 0; o < l; o++) {
  a = 0, s = !1, t = y({}, e), null != e._useUTC && (t._useUTC = e._useUTC), t._f = e._f[o], Mt(t), _(t) && (s = !0), a += g(t).charsLeftOver, a += 10 * g(t).unusedTokens.length, g(t).score = a, r ? a < n && (n = a, i = t) : (null == n || a < n || s) && (n = a, i = t, s && (r = !0));
}
if (!e._d) {
  var t = U(e._i),
    i = void 0 === t.day ? t.date : t.day;
  e._a = h([t.year, t.month, i, t.hour, t.minute, t.second, t.millisecond], function (e) {
    return e && parseInt(e, 10);
  }), wt(e);
}
if (1 === t.length && a(t[0]) && (t = t[0]), !t.length) {
  return xt();
}
for (i = t[0], n = 1; n < t.length; ++n) {
  t[n].isValid() && !t[n][e](i) || (i = t[n]);
}
for (t in e) {
  if (r(e, t) && (Wo.call(Ea, t) === -1 || null != e[t] && isNaN(e[t]))) {
    return !1;
  }
}
if (r(e, t) && (Wo.call(Ea, t) === -1 || null != e[t] && isNaN(e[t]))) {
  return !1;
}
for (i = 0; i < o; ++i) {
  if (e[Ea[i]]) {
    if (n) {
      return !1;
    }
    parseFloat(e[Ea[i]]) !== X(e[Ea[i]]) && (n = !0);
  }
}
if (e[Ea[i]]) {
  if (n) {
    return !1;
  }
  parseFloat(e[Ea[i]]) !== X(e[Ea[i]]) && (n = !0);
}
if (n) {
  return !1;
}
for (n = 0; n < o; n++) {
  (i && e[n] !== t[n] || !i && X(e[n]) !== X(t[n])) && s++;
}
if (!this.isValid()) {
  return null != e ? this : NaN;
}
if (null != e) {
  if ("string" == typeof e) {
    if (e = Gt(Fo, e), null === e) {
      return this;
    }
  } else {
    Math.abs(e) < 16 && !n && (e = 60 * e);
  }
  return !this._isUTC && i && (o = qt(this)), this._offset = e, this._isUTC = !0, null != o && this.add(o, "m"), a !== e && (!i || this._changeInProgress ? ri(this, ii(e - a, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, t.updateOffset(this, !0), this._changeInProgress = null)), this;
}
if ("string" == typeof e) {
  if (e = Gt(Fo, e), null === e) {
    return this;
  }
} else {
  Math.abs(e) < 16 && !n && (e = 60 * e);
}
if (e = Gt(Fo, e), null === e) {
  return this;
}
if (null != this._tzm) {
  this.utcOffset(this._tzm, !1, !0);
} else if ("string" == typeof this._i) {
  var e = Gt(ko, this._i);
  null != e ? this.utcOffset(e) : this.utcOffset(0, !0);
}
if ("string" == typeof this._i) {
  var e = Gt(ko, this._i);
  null != e ? this.utcOffset(e) : this.utcOffset(0, !0);
}
if (!c(this._isDSTShifted)) {
  return this._isDSTShifted;
}
for (t = 0; t < c; t += 1) {
  i = a[t], o = o || r(e, i);
}
for (t = 0; t < a.length; t += 1) {
  i = a[t], o = o || r(e, i);
}
if (!this.isValid()) {
  return NaN;
}
if (n = Ut(e, this), !n.isValid()) {
  return NaN;
}
if (e.date() < t.date()) {
  return -Ti(t, e);
}
if (!this.isValid()) {
  return null;
}
if (!this.isValid()) {
  return "moment.invalid(/* " + this._i + " */)";
}
if (e = G(e), void 0 === e || "millisecond" === e || !this.isValid()) {
  return this;
}
if (e = G(e), void 0 === e || "millisecond" === e || !this.isValid()) {
  return this;
}
for (n = 0, o = s.length; n < o; ++n) {
  switch (typeof s[n].since) {
    case "string":
      a = t(s[n].since).startOf("day"), s[n].since = a.valueOf();
  }
  switch (typeof s[n].until) {
    case "undefined":
      s[n].until = +(1 / 0);
      break;
    case "string":
      a = t(s[n].until).startOf("day").valueOf(), s[n].until = a.valueOf();
  }
}
for (e = e.toUpperCase(), n = 0, o = l.length; n < o; ++n) {
  if (a = l[n].name.toUpperCase(), s = l[n].abbr.toUpperCase(), r = l[n].narrow.toUpperCase(), i) {
    switch (t) {
      case "N":
      case "NN":
      case "NNN":
        if (s === e) {
          return l[n];
        }
        break;
      case "NNNN":
        if (a === e) {
          return l[n];
        }
        break;
      case "NNNNN":
        if (r === e) {
          return l[n];
        }
    }
  } else if ([a, s, r].indexOf(e) >= 0) {
    return l[n];
  }
}
if (a = l[n].name.toUpperCase(), s = l[n].abbr.toUpperCase(), r = l[n].narrow.toUpperCase(), i) {
  switch (t) {
    case "N":
    case "NN":
    case "NNN":
      if (s === e) {
        return l[n];
      }
      break;
    case "NNNN":
      if (a === e) {
        return l[n];
      }
      break;
    case "NNNNN":
      if (r === e) {
        return l[n];
      }
  }
} else if ([a, s, r].indexOf(e) >= 0) {
  return l[n];
}
if (s === e) {
  return l[n];
}
if (a === e) {
  return l[n];
}
if (r === e) {
  return l[n];
}
if ([a, s, r].indexOf(e) >= 0) {
  return l[n];
}
for (e = 0, t = n.length; e < t; ++e) {
  if (i = this.clone().startOf("day").valueOf(), n[e].since <= i && i <= n[e].until) {
    return n[e].name;
  }
  if (n[e].until <= i && i <= n[e].since) {
    return n[e].name;
  }
}
if (i = this.clone().startOf("day").valueOf(), n[e].since <= i && i <= n[e].until) {
  return n[e].name;
}
if (n[e].until <= i && i <= n[e].since) {
  return n[e].name;
}
for (e = 0, t = n.length; e < t; ++e) {
  if (i = this.clone().startOf("day").valueOf(), n[e].since <= i && i <= n[e].until) {
    return n[e].narrow;
  }
  if (n[e].until <= i && i <= n[e].since) {
    return n[e].narrow;
  }
}
if (i = this.clone().startOf("day").valueOf(), n[e].since <= i && i <= n[e].until) {
  return n[e].narrow;
}
if (n[e].until <= i && i <= n[e].since) {
  return n[e].narrow;
}
for (e = 0, t = n.length; e < t; ++e) {
  if (i = this.clone().startOf("day").valueOf(), n[e].since <= i && i <= n[e].until) {
    return n[e].abbr;
  }
  if (n[e].until <= i && i <= n[e].since) {
    return n[e].abbr;
  }
}
if (i = this.clone().startOf("day").valueOf(), n[e].since <= i && i <= n[e].until) {
  return n[e].abbr;
}
if (n[e].until <= i && i <= n[e].since) {
  return n[e].abbr;
}
for (e = 0, i = a.length; e < i; ++e) {
  if (n = a[e].since <= a[e].until ? 1 : -1, o = this.clone().startOf("day").valueOf(), a[e].since <= o && o <= a[e].until || a[e].until <= o && o <= a[e].since) {
    return (this.year() - t(a[e].since).year()) * n + a[e].offset;
  }
}
if (n = a[e].since <= a[e].until ? 1 : -1, o = this.clone().startOf("day").valueOf(), a[e].since <= o && o <= a[e].until || a[e].until <= o && o <= a[e].since) {
  return (this.year() - t(a[e].since).year()) * n + a[e].offset;
}
for (e = 0, t = s.length; e < t; ++e) {
  n.push(ne(s[e].name)), i.push(ne(s[e].abbr)), o.push(ne(s[e].narrow)), a.push(ne(s[e].name)), a.push(ne(s[e].abbr)), a.push(ne(s[e].narrow));
}
if (d(e) && (t = e, e = void 0), e = e || "", null != t) {
  return En(e, t, i, "month");
}
for (n = 0; n < 12; n++) {
  o[n] = En(e, n, i, "month");
}
if (null != i) {
  return En(t, (i + s) % 7, n, "day");
}
for (o = 0; o < 7; o++) {
  r[o] = En(t, (o + s) % 7, n, "day");
}
if (!this.isValid()) {
  return NaN;
}
if (e = G(e), "month" === e || "quarter" === e || "year" === e) {
  switch (t = this._days + n / 864e5, i = this._months + Gn(t), e) {
    case "month":
      return i;
    case "quarter":
      return i / 3;
    case "year":
      return i / 12;
  }
} else {
  switch (t = this._days + Math.round(Un(this._months)), e) {
    case "week":
      return t / 7 + n / 6048e5;
    case "day":
      return t + n / 864e5;
    case "hour":
      return 24 * t + n / 36e5;
    case "minute":
      return 1440 * t + n / 6e4;
    case "second":
      return 86400 * t + n / 1e3;
    case "millisecond":
      return Math.floor(864e5 * t) + n;
    default:
      throw new Error("Unknown unit " + e);
  }
}
if (!this.isValid()) {
  return this.localeData().invalidDate();
}
if (!this.isValid()) {
  return this.localeData().invalidDate();
}
for (t = 0; t < n; t++) {
  if (t in i && e.call(this, i[t], t, i)) {
    return !0;
  }
}
if (t in i && e.call(this, i[t], t, i)) {
  return !0;
}
for (t in e) {
  r(e, t) && i.push(t);
}
for (t = 0; t < this.length; ++t) {
  if (this[t] === e) {
    return t;
  }
}
if (this[t] === e) {
  return t;
}
for (Ga = "SSSS"; Ga.length <= 9; Ga += "S") {
  ee(Ga, Po);
}
for (Ga = "S"; Ga.length <= 9; Ga += "S") {
  oe(Ga, Mn);
}
if (0 === e) {
  return e + "-ıncı";
}
if (e = parseInt(e, 10), isNaN(e)) {
  return !1;
}
if (e < 0) {
  return !0;
}
if (e < 10) {
  return 4 <= e && e <= 7;
}
if (e < 100) {
  var t = e % 10,
    i = e / 10;
  return o(0 === t ? i : t);
}
if (e < 1e4) {
  for (; e >= 10;) {
    e /= 10;
  }
  return o(e);
}
for (; e >= 10;) {
  e /= 10;
}
if (t) {
  switch (i) {
    case "s":
      o = "काही सेकंद";
      break;
    case "ss":
      o = "%d सेकंद";
      break;
    case "m":
      o = "एक मिनिट";
      break;
    case "mm":
      o = "%d मिनिटे";
      break;
    case "h":
      o = "एक तास";
      break;
    case "hh":
      o = "%d तास";
      break;
    case "d":
      o = "एक दिवस";
      break;
    case "dd":
      o = "%d दिवस";
      break;
    case "M":
      o = "एक महिना";
      break;
    case "MM":
      o = "%d महिने";
      break;
    case "y":
      o = "एक वर्ष";
      break;
    case "yy":
      o = "%d वर्षे";
  }
} else {
  switch (i) {
    case "s":
      o = "काही सेकंदां";
      break;
    case "ss":
      o = "%d सेकंदां";
      break;
    case "m":
      o = "एका मिनिटा";
      break;
    case "mm":
      o = "%d मिनिटां";
      break;
    case "h":
      o = "एका तासा";
      break;
    case "hh":
      o = "%d तासां";
      break;
    case "d":
      o = "एका दिवसा";
      break;
    case "dd":
      o = "%d दिवसां";
      break;
    case "M":
      o = "एका महिन्या";
      break;
    case "MM":
      o = "%d महिन्यां";
      break;
    case "y":
      o = "एका वर्षा";
      break;
    case "yy":
      o = "%d वर्षां";
  }
}
if (e.week() === this.week()) {
  return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
}
if (e.week() === this.week()) {
  return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
}
if (0 === e) {
  return e + "'unjy";
}
if (0 === e) {
  return e + "'ıncı";
}
if (!this._highLightsListCb) {
  var o = "shopHighLightsListRequest";
  this._highLightsListCb = n;
  var a = {
    type: i
  };
  e(o, a);
}
if (!this._nextTimeout) {
  if (n <= this._eventFlushMs) {
    var o = this._eventFlushMs - n + 10;
    return void (this._nextTimeout = setTimeout(function () {
      t._nextTimeout = 0, t._next(e);
    }, o));
  }
  this._stack.current.length <= 0 || n > this._eventFlushMs && (this._flushEvents(e), this._lastTimestamp = i);
}
if (n <= this._eventFlushMs) {
  var o = this._eventFlushMs - n + 10;
  return void (this._nextTimeout = setTimeout(function () {
    t._nextTimeout = 0, t._next(e);
  }, o));
}
if (this._stack.current = [], o) {
  return void this._callbackAndLeave(o, e);
}
if (!e) {
  throw new Error("Need the logger!");
}
if (e.banEndDate) {
  var t = s(new Date(e.banEndDate), "yyyy-mm-dd HH:MM");
  return a("ui.popup.accessDenied.bannedWithDuration", t);
}
for (var t = {}, i = 0, s = 0; s < e.cells.length; s++) {
  var l = e.cells[s];
  t[l] = new o(l, i, a.fullRed);
}
for (var t = {}, i = 0, n = 0; n < e.cells.length; n++) {
  var s = e.cells[n];
  t[s] = new o(s, i, a.fullRed);
}
if (e._bonesId) {
  var t = {
    contextualId: "paddockItem:" + e.cellId,
    look: {
      bonesId: e._bonesId,
      scales: [100],
      skins: []
    },
    disposition: {
      cellId: e.cellId,
      direction: 1
    },
    name: e._nameId,
    durability: e.durability,
    _type: "PaddockObject"
  };
  window.actorManager.addActor(t);
}
if (t) {
  var i,
    n = e.reactionType;
  switch (n) {
    case 1:
      i = "AnimEmoteRest_Statique_0";
      break;
    case 2:
      i = "AnimAttaque0";
      break;
    case 3:
      i = "AnimEmoteCaresse";
      break;
    case 4:
      i = "AnimEmoteReproductionF";
      break;
    case 5:
      i = "AnimEmoteReproductionM";
      break;
    default:
      return;
  }
  t.loadAndPlayAnimation({
    base: i
  }, {
    loop: !1
  });
}
for (var t = e.paddockItemDescription, i = 0; i < t.length; i++) {
  n(t[i]);
}
for (var t = [], i = [], n = 0, a = e.cells.length; n < a; n++) {
  t.push({
    cellId: e.cells[n],
    objectGID: e.referenceIds[n]
  }), i.push(s + e._iconIds[n] + ".png");
  var r = window.isoEngine.mapRenderer.objects[e.cells[n]];
  r && r.remove();
}
for (var i = 0; i < e.length; i++) {
  t[i].img = e[i];
}
for (var t = 0; t < e.cellId.length; t++) {
  var i = "paddockItem:" + e.cellId[t],
    n = window.actorManager.getActor(i);
  n && n.loadAndPlayAnimation({
    base: "AnimHit",
    direction: 1
  }, {
    loop: !1
  });
}
if (e) {
  return console.error("GameRolePlaySpellAnimMessage error", e);
}
if (e.result !== o.SUCCESS) {
  var t = "";
  switch (e.result) {
    case o.NONE:
      t = a("ui.popup.statboostFailed.text");
      break;
    case o.GUEST:
      t = a("ui.fight.guestAccount");
      break;
    case o.RESTRICTED:
      t = a("ui.charSel.deletionErrorUnsecureMode");
      break;
    case o.IN_FIGHT:
      t = a("ui.error.cantDoInFight");
      break;
    case o.NOT_ENOUGH_POINT:
      t = a("ui.popup.statboostFailed.notEnoughPoint");
  }
  t && window.gui.chat.logError(t);
}
if (window.powerManagement) {
  return i ? console.warn("PowerManager already active") : void window.powerManagement.dim(function () {
    i = !0;
  }, function (e) {
    console.warn("PowerManager failed to acquire wakelock", e);
  });
}
if (window.powerManagement) {
  return i ? void window.powerManagement.release(function () {
    i = !1;
  }, function (e) {
    console.warn("PowerManager failed to release wakelock", e);
  }) : console.warn("PowerManager was not active");
}
if (!t) {
  throw new Error("Final callback was already called");
}
for (var i = 0; i < o.length; i += 1) {
  e.removeListener(o[i].eventName, o[i].callback);
}
if ("function" != typeof n) {
  throw new TypeError("Final argument must be a callback function");
}
for (var a = 0; a < arguments.length - 1; a += 1) {
  var s = arguments[a];
  e.on(s, t), o.push({
    eventName: s,
    callback: t
  });
}
if (null !== o[e._messageType]) {
  var t = "background-color: #BFA;";
  e._messageType && e._messageType.indexOf("ErrorMessage") === -1 || (t = "background-color: #F00; color: #FFF;"), console.log("[DOFUS PROXY] received: %c" + e._messageType, t, e);
}
if ("sendMessage" === e.call) {
  if (a[e.data.data.type]) {
    return;
  }
  return void console.log("[DOFUS PROXY]     send: %c" + e.data.data.type, "background-color: #6DF;", e.data.data.data);
}
if (a[e.data.data.type]) {
  return;
}
if (n.fightTurnStart(i), n.clearHighlights(), i && s.soundOnPlayerTurnStart && c("PLAYER_TURN"), !n.mapRenderer.isReady) {
  return n.mapRenderer.once("ready", function () {
    o._displayUserZones();
  });
}
if (!e) {
  return console.error(new Error("Foreground.unlock: no reason provided"));
}
for (var t = Object.keys(this.lockMap), i = 0; i < t.length; i++) {
  if (this.lockMap[t[i]]) {
    return;
  }
}
if (this.lockMap[t[i]]) {
  return;
}
if (i) {
  var a = document.createEvent("Event");
  a.initEvent("drop", !0, !0), i.dispatchEvent(a);
} else {
  c.tween(_, {
    webkitTransform: "translate3d(0,0,0) scale(1)"
  }, {
    time: 100,
    easing: "ease-out"
  }, function () {
    w.onDragClassName && _.delClassNames(w.onDragClassName), p.isLostDrop = !0, _ !== y ? (v.appendChild(_), _.delClassNames("customDragElement"), _.setStyles(I), _.emit("dragEnd", S.x, S.y)) : (y.hide(), M.emit("dragEnd", S.x, S.y)), p.emit("dragEnd", M, M._dragManager.source, T), y.hide(), n();
  });
}
if (_ = r.dragElement ? e : y, !m && (!t.prepareForDrag || t.prepareForDrag(n, _, e))) {
  var b = u.getCoordinatesRelativeToBody(i, d);
  i = b.x, d = b.y, m = !0, p.isDragging = !0, M = e, T = n, w = t;
  var S = h(e.rootElement),
    E = {
      left: S.x,
      top: S.y,
      width: r.containerWidth || S.width,
      height: r.containerHeight || S.height
    };
  if (C.x = E.left, C.y = E.top, r.dragElement) {
    v = e.getParent(), window.gui.gameGuiContainer.appendChild(e), I.left = e.getStyle("left"), I.top = e.getStyle("top"), _.setStyles({
      left: E.left + "px",
      top: E.top + "px",
      webkitTransform: "translate3d(0,0,0)"
    }), _.addClassNames("customDragElement");
  } else {
    I.left = I.top = 0, _.setStyles({
      left: E.left + "px",
      top: E.top + "px",
      width: E.width + "px",
      height: E.height + "px",
      webkitTransform: "translate3d(0,0,0)"
    });
    var N = w.styles || {};
    N.backgroundImage = w.backgroundImage || N.backgroundImage || "none", _.icon.setStyles(N);
  }
  w.onDragClassName && _.addClassNames(w.onDragClassName), _.show(), f = E.left + Math.floor(E.width / 2) - i, g = E.top + Math.floor(E.height / 2) - d, A.x = i, A.y = d, c.tween(_, {
    webkitTransform: "translate3d(" + -f + "px," + -g + "px,0) scale(1.5)"
  }, {
    time: 100,
    easing: "ease-out"
  }, function () {
    s.on("dragMove", o), r.noHover || l.start(), e.emit("dragStart"), p.emit("dragStart", M, M._dragManager.source, T);
  }), s.once("dragEnd", a);
}
if (C.x = E.left, C.y = E.top, r.dragElement) {
  v = e.getParent(), window.gui.gameGuiContainer.appendChild(e), I.left = e.getStyle("left"), I.top = e.getStyle("top"), _.setStyles({
    left: E.left + "px",
    top: E.top + "px",
    webkitTransform: "translate3d(0,0,0)"
  }), _.addClassNames("customDragElement");
} else {
  I.left = I.top = 0, _.setStyles({
    left: E.left + "px",
    top: E.top + "px",
    width: E.width + "px",
    height: E.height + "px",
    webkitTransform: "translate3d(0,0,0)"
  });
  var N = w.styles || {};
  N.backgroundImage = w.backgroundImage || N.backgroundImage || "none", _.icon.setStyles(N);
}
if (o()) {
  t.stopPropagation();
  var a, s;
  if (i.matchPositionOnDrop) {
    var r = h(e.rootElement);
    a = r.x - A.x + Math.floor(r.width / 2) - f, s = r.y - A.y + Math.floor(r.height / 2) - g;
  } else {
    a = S.x - A.x, s = S.y - A.y;
  }
  e.emit("beforeDragEnd"), c.tween(_, {
    webkitTransform: "translate3d(" + a + "px," + s + "px,0) scale(1)"
  }, {
    time: 100,
    easing: "ease-out"
  }, function () {
    T = T || {}, T.x = S.x, T.y = S.y, w.onDragClassName && _.delClassNames(w.onDragClassName), _ !== y ? (v.appendChild(_), _.delClassNames("customDragElement"), _.setStyles({
      left: I.left,
      top: I.top,
      webkitTransform: "translate3d(0px,0px, 0)"
    }), _.emit("dragEnd", a, s)) : M.emit("dragEnd", a, s), p.isLostDrop = !1, p.emit("dragEnd", M, M._dragManager.source, T), e.delClassNames("dragOver"), e.emit("drop", M, M._dragManager.source, T), y.hide(), n();
  });
}
if (i.matchPositionOnDrop) {
  var r = h(e.rootElement);
  a = r.x - A.x + Math.floor(r.width / 2) - f, s = r.y - A.y + Math.floor(r.height / 2) - g;
} else {
  a = S.x - A.x, s = S.y - A.y;
}
if (!g) {
  if (Math.abs(t.x - l) < v && Math.abs(t.y - c) < v) {
    return;
  }
  if (!p.requestInteractionHandle("DRAG", m)) {
    return m.cancel();
  }
  g = !0, d.emit("_dragStart", t.x, t.y);
}
if (Math.abs(t.x - l) < v && Math.abs(t.y - c) < v) {
  return;
}
if (!p.requestInteractionHandle("DRAG", m)) {
  return m.cancel();
}
if (e._dragManager.enable && !_) {
  v = i;
  var s = h(n);
  l = s.x, c = s.y, a(), d = e, t.dragOnTouchstart ? (v = 0, o(n)) : t.dragInsteadOfScroll && p.setPriorityBehavior("DRAG");
}
if (e.attr) {
  for (var i in e.attr) {
    t[i] = e.attr[i];
  }
}
for (var i in e.attr) {
  t[i] = e.attr[i];
}
if (this._tapOnNumberInputBox(), e) {
  var i = this,
    n = !1;
  this.on("change", t), window.gui.numberInputPad.once("hide", function () {
    return i.removeListener("change", t), e(n);
  });
}
if (d.isVisible()) {
  var t = l(d, e.x, e.y);
  d.setStyle("webkitTransform", "translate3d(" + t.x + "px, " + t.y + "px, 0)");
}
if (e(i), Math.abs(a - i.x) > 10 || Math.abs(s - i.y) > 10) {
  if (!h("TOUCH", f)) {
    return r();
  }
  a = i.x, s = i.y;
  var n = c.convertScreenToCanvasCoordinate(a, s);
  p.touchMove(n.x, n.y, this.tapOptions);
}
if (!h("TOUCH", f)) {
  return r();
}
if (i) {
  return r();
}
if (this.removeListener("dom.touchmove", t), this.locked || n || !i || !h("TOUCH", f)) {
  return void (i = !1);
}
for (var t, i, n, o, a = e.humanoidInfo.options || [], s = 0; s < a.length; s += 1) {
  var r = a[s];
  "HumanOptionGuild" === r._type ? n = r.guildInformations : "HumanOptionAlliance" === r._type ? o = r.allianceInformations : "HumanOptionOrnament" === r._type ? i = r.ornamentId : "HumanOptionTitle" === r._type && (t = r.titleId);
}
if (s(), n.name && n.humanoidInfo) {
  if (x = i, i.nicknameLabel) {
    if ("full" === i.nicknameLabel.getType()) {
      return I.closeTooltip(), !1;
    }
    i.nicknameLabel.hide();
  }
  return t(n), I.hideBackgroundOnce(), !1;
}
if (x = i, i.nicknameLabel) {
  if ("full" === i.nicknameLabel.getType()) {
    return I.closeTooltip(), !1;
  }
  i.nicknameLabel.hide();
}
if ("full" === i.nicknameLabel.getType()) {
  return I.closeTooltip(), !1;
}
if (n.npcData && n.npcData.nameId) {
  T.setText(n.npcData.nameId);
} else if ("GameRolePlayGroupMonsterInformations" === n.type) {
  m._constructMonsterTooltip(T, n, i);
} else {
  if ("PaddockObject" !== n.type) {
    return I.openState && e(), !1;
  }
  var o = n.durability.durability + "/" + n.durability.durabilityMax;
  T.setText(n.name + " (" + o + ")");
}
if ("GameRolePlayGroupMonsterInformations" === n.type) {
  m._constructMonsterTooltip(T, n, i);
} else {
  if ("PaddockObject" !== n.type) {
    return I.openState && e(), !1;
  }
  var o = n.durability.durability + "/" + n.durability.durabilityMax;
  T.setText(n.name + " (" + o + ")");
}
if ("PaddockObject" !== n.type) {
  return I.openState && e(), !1;
}
if (!n) {
  return N = null, void (I.openState && e());
}
if (N !== n) {
  N = n, I.resetBackground();
  var s,
    r,
    h,
    f,
    g = A.mapRenderer.isPaddock(n),
    _ = A.mapRenderer.getPaddockProperties(),
    v = n.data,
    y = S.playerData.isFighting;
  if (g && _) {
    return i(), void c(n, _);
  }
  if (v) {
    if (i(), y) {
      if (!a(v)) {
        return;
      }
    } else if (!l(n, v)) {
      return;
    }
  } else {
    if (s = D.interactiveElements[n.id], !s || y) {
      return void (I.openState && e());
    }
    i();
    var w = s._houseData;
    if (s.ageBonus) {
      var b = s.ageBonus;
      T.appendChild(new p(b));
    }
    if (s._name && T.createChild("div", {
      className: "name",
      text: s._name
    }), w) {
      var M = w.houseId,
        C = window.gui.playerData.position.getHousePropertiesById(M);
      return void (C ? u(n, C.ownerName, C.houseId, C._displayedName) : u(n, C.ownerName, C.houseId));
    }
    var E;
    for (h = 0, f = s.enabledSkills.length; h < f; h += 1) {
      r = s.enabledSkills[h], E = T.createChild("div"), E.createChild("div", {
        className: ["interaction", "cursor", "id" + r._cursor]
      }), E.createChild("div", {
        className: "interaction",
        text: r._name
      });
    }
    for (h = 0, f = s.disabledSkills.length; h < f; h += 1) {
      r = s.disabledSkills[h], E = T.createChild("div"), E.createChild("div", {
        className: ["interaction", "cursor", "id" + r._cursor, "disable"]
      }), E.createChild("div", {
        className: "interaction",
        text: r._name
      });
    }
  }
  o(n);
}
if (g && _) {
  return i(), void c(n, _);
}
if (v) {
  if (i(), y) {
    if (!a(v)) {
      return;
    }
  } else if (!l(n, v)) {
    return;
  }
} else {
  if (s = D.interactiveElements[n.id], !s || y) {
    return void (I.openState && e());
  }
  i();
  var w = s._houseData;
  if (s.ageBonus) {
    var b = s.ageBonus;
    T.appendChild(new p(b));
  }
  if (s._name && T.createChild("div", {
    className: "name",
    text: s._name
  }), w) {
    var M = w.houseId,
      C = window.gui.playerData.position.getHousePropertiesById(M);
    return void (C ? u(n, C.ownerName, C.houseId, C._displayedName) : u(n, C.ownerName, C.houseId));
  }
  var E;
  for (h = 0, f = s.enabledSkills.length; h < f; h += 1) {
    r = s.enabledSkills[h], E = T.createChild("div"), E.createChild("div", {
      className: ["interaction", "cursor", "id" + r._cursor]
    }), E.createChild("div", {
      className: "interaction",
      text: r._name
    });
  }
  for (h = 0, f = s.disabledSkills.length; h < f; h += 1) {
    r = s.disabledSkills[h], E = T.createChild("div"), E.createChild("div", {
      className: ["interaction", "cursor", "id" + r._cursor, "disable"]
    }), E.createChild("div", {
      className: "interaction",
      text: r._name
    });
  }
}
if (i(), y) {
  if (!a(v)) {
    return;
  }
} else if (!l(n, v)) {
  return;
}
if (!a(v)) {
  return;
}
if (!l(n, v)) {
  return;
}
if (s = D.interactiveElements[n.id], !s || y) {
  return void (I.openState && e());
}
if (s.ageBonus) {
  var b = s.ageBonus;
  T.appendChild(new p(b));
}
if (s._name && T.createChild("div", {
  className: "name",
  text: s._name
}), w) {
  var M = w.houseId,
    C = window.gui.playerData.position.getHousePropertiesById(M);
  return void (C ? u(n, C.ownerName, C.houseId, C._displayedName) : u(n, C.ownerName, C.houseId));
}
for (h = 0, f = s.enabledSkills.length; h < f; h += 1) {
  r = s.enabledSkills[h], E = T.createChild("div"), E.createChild("div", {
    className: ["interaction", "cursor", "id" + r._cursor]
  }), E.createChild("div", {
    className: "interaction",
    text: r._name
  });
}
for (h = 0, f = s.disabledSkills.length; h < f; h += 1) {
  r = s.disabledSkills[h], E = T.createChild("div"), E.createChild("div", {
    className: ["interaction", "cursor", "id" + r._cursor, "disable"]
  }), E.createChild("div", {
    className: "interaction",
    text: r._name
  });
}
if (R[N] = P[N], A = r.getChangeMapCellAt(R.x, R.y, M), b.arrow.setStyle("opacity", A !== -1 ? 1 : 0), e[N] < C) {
  S = Math.abs(C - e[N]), k[N] = c.min[N];
} else {
  if (!(e[N] > I)) {
    return;
  }
  S = Math.abs(I - e[N]), k[N] = c.max[N];
}
if (!(e[N] > I)) {
  return;
}
if (k[N] !== c[N]) {
  B.x = c.x, B.y = c.y, c.follow(B);
  var t = 0,
    i = H,
    n = B[N],
    o = k[N];
  Math.abs(k[N] - B[N]) > t && (t = Math.abs(k[N] - B[N]), i = H * S);
  var a = F[N];
  a.playing || a.start(!1), "x" === N ? a.reset().from({
    x: n
  }).to({
    x: o
  }, t / i) : a.reset().from({
    y: n
  }).to({
    y: o
  }, t / i);
}
if (this.locked) {
  return this.cancelTransform();
}
if (b = null, d.fightState === o.UNDEFINED && 1 === e.touchCount) {
  var n = e.x - t[0].x,
    a = e.y - t[0].y;
  x = e;
  var r,
    l = c.zoom === c.minZoom || c.zoom === c.maxZoom;
  if (Math.abs(n) > Math.abs(a)) {
    if (r = l || Math.abs(a) < D, Math.abs(c.x - c.min.x) < 1 && n > 0 && r) {
      if (!u.isBehaviourEnabled(T.LEFT_SLIDE_CHANGEMAP)) {
        return;
      }
      return b = f, M = "left", R.x = 0, O.min = 0, O.max = L.x, C = s.mapHeight / 3, I = 2 * C, E = "x", void (N = "y");
    }
    if (Math.abs(c.x - c.max.x) < 1 && n < 0 && r) {
      if (!u.isBehaviourEnabled(T.RIGHT_SLIDE_CHANGEMAP)) {
        return;
      }
      return b = v, M = "right", R.x = s.mapWidth, O.min = -L.x, O.max = 0, C = s.mapHeight / 3, I = 2 * C, E = "x", void (N = "y");
    }
  } else {
    if (r = l || Math.abs(n) < D, Math.abs(c.y - c.min.y) < 1 && a > 0 && r) {
      if (!u.isBehaviourEnabled(T.TOP_SLIDE_CHANGEMAP)) {
        return;
      }
      return b = y, M = "top", R.y = 0, O.min = 0, O.max = L.y, C = s.mapWidth / 3, I = 2 * C, E = "y", void (N = "x");
    }
    if (Math.abs(c.y - c.max.y) < 1 && a < 0 && r) {
      if (!u.isBehaviourEnabled(T.BOTTOM_SLIDE_CHANGEMAP)) {
        return;
      }
      return b = w, M = "bottom", R.y = s.mapHeight, O.min = -L.y, O.max = 0, C = s.mapWidth / 3, I = 2 * C, E = "y", void (N = "x");
    }
  }
}
if (Math.abs(n) > Math.abs(a)) {
  if (r = l || Math.abs(a) < D, Math.abs(c.x - c.min.x) < 1 && n > 0 && r) {
    if (!u.isBehaviourEnabled(T.LEFT_SLIDE_CHANGEMAP)) {
      return;
    }
    return b = f, M = "left", R.x = 0, O.min = 0, O.max = L.x, C = s.mapHeight / 3, I = 2 * C, E = "x", void (N = "y");
  }
  if (Math.abs(c.x - c.max.x) < 1 && n < 0 && r) {
    if (!u.isBehaviourEnabled(T.RIGHT_SLIDE_CHANGEMAP)) {
      return;
    }
    return b = v, M = "right", R.x = s.mapWidth, O.min = -L.x, O.max = 0, C = s.mapHeight / 3, I = 2 * C, E = "x", void (N = "y");
  }
} else {
  if (r = l || Math.abs(n) < D, Math.abs(c.y - c.min.y) < 1 && a > 0 && r) {
    if (!u.isBehaviourEnabled(T.TOP_SLIDE_CHANGEMAP)) {
      return;
    }
    return b = y, M = "top", R.y = 0, O.min = 0, O.max = L.y, C = s.mapWidth / 3, I = 2 * C, E = "y", void (N = "x");
  }
  if (Math.abs(c.y - c.max.y) < 1 && a < 0 && r) {
    if (!u.isBehaviourEnabled(T.BOTTOM_SLIDE_CHANGEMAP)) {
      return;
    }
    return b = w, M = "bottom", R.y = s.mapHeight, O.min = -L.y, O.max = 0, C = s.mapWidth / 3, I = 2 * C, E = "y", void (N = "x");
  }
}
if (r = l || Math.abs(a) < D, Math.abs(c.x - c.min.x) < 1 && n > 0 && r) {
  if (!u.isBehaviourEnabled(T.LEFT_SLIDE_CHANGEMAP)) {
    return;
  }
  return b = f, M = "left", R.x = 0, O.min = 0, O.max = L.x, C = s.mapHeight / 3, I = 2 * C, E = "x", void (N = "y");
}
if (!u.isBehaviourEnabled(T.LEFT_SLIDE_CHANGEMAP)) {
  return;
}
if (Math.abs(c.x - c.max.x) < 1 && n < 0 && r) {
  if (!u.isBehaviourEnabled(T.RIGHT_SLIDE_CHANGEMAP)) {
    return;
  }
  return b = v, M = "right", R.x = s.mapWidth, O.min = -L.x, O.max = 0, C = s.mapHeight / 3, I = 2 * C, E = "x", void (N = "y");
}
if (!u.isBehaviourEnabled(T.RIGHT_SLIDE_CHANGEMAP)) {
  return;
}
if (r = l || Math.abs(n) < D, Math.abs(c.y - c.min.y) < 1 && a > 0 && r) {
  if (!u.isBehaviourEnabled(T.TOP_SLIDE_CHANGEMAP)) {
    return;
  }
  return b = y, M = "top", R.y = 0, O.min = 0, O.max = L.y, C = s.mapWidth / 3, I = 2 * C, E = "y", void (N = "x");
}
if (!u.isBehaviourEnabled(T.TOP_SLIDE_CHANGEMAP)) {
  return;
}
if (Math.abs(c.y - c.max.y) < 1 && a < 0 && r) {
  if (!u.isBehaviourEnabled(T.BOTTOM_SLIDE_CHANGEMAP)) {
    return;
  }
  return b = w, M = "bottom", R.y = s.mapHeight, O.min = -L.y, O.max = 0, C = s.mapWidth / 3, I = 2 * C, E = "y", void (N = "x");
}
if (!u.isBehaviourEnabled(T.BOTTOM_SLIDE_CHANGEMAP)) {
  return;
}
if (F.x.playing && F.x.stop(), F.y.playing && F.y.stop(), b) {
  var e;
  if (e = "x" === E ? "translate3d(0," + P.y + "px,0)" : "translate3d(" + P.x + "px,0,0)", g.tween(b, {
    webkitTransform: e
  }, {
    time: 200,
    easing: "ease-out"
  }), b.arrow.setStyle("opacity", 0), b = null, this.locked) {
    return;
  }
  if (Math.abs(P[E]) === L[E] && A !== -1) {
    var t = l.convertCanvasToSceneCoordinate(R.x, R.y);
    r._tapRoleplay(t.x, t.y, r.mapRenderer.getCellId(t.x, t.y), {
      canvasX: R.x,
      canvasY: R.y,
      changeMapRequest: M,
      mode: "roleplay"
    });
  }
} else {
  this.setTranslationEnable(d.fightState !== o.BATTLE), Date.now() - i > 100 || c.addInertia(h, p, .8);
}
if (e = "x" === E ? "translate3d(0," + P.y + "px,0)" : "translate3d(" + P.x + "px,0,0)", g.tween(b, {
  webkitTransform: e
}, {
  time: 200,
  easing: "ease-out"
}), b.arrow.setStyle("opacity", 0), b = null, this.locked) {
  return;
}
if (Math.abs(P[E]) === L[E] && A !== -1) {
  var t = l.convertCanvasToSceneCoordinate(R.x, R.y);
  r._tapRoleplay(t.x, t.y, r.mapRenderer.getCellId(t.x, t.y), {
    canvasX: R.x,
    canvasY: R.y,
    changeMapRequest: M,
    mode: "roleplay"
  });
}
if (!o) {
  return i(new Error("Spell " + e + " could not be found, its fighter " + t + " does not exist"));
}
if (o.spells[e]) {
  return i(null, o.spells[e]);
}
if (a.spells[e]) {
  return o.spells[e] = a.spells[e].clone(), o.spells[e].setLevel(a.spells[e].level), i(null, o.spells[e]);
}
for (var s in n) {
  if (n.hasOwnProperty(s)) {
    var l = n[s];
    if (l.id === t) {
      continue;
    }
    if (l.spells[e]) {
      return o.spells[e] = l.spells[e].clone(), i(null, o.spells[e]);
    }
  }
}
if (n.hasOwnProperty(s)) {
  var l = n[s];
  if (l.id === t) {
    continue;
  }
  if (l.spells[e]) {
    return o.spells[e] = l.spells[e].clone(), i(null, o.spells[e]);
  }
}
if (l.id === t) {
  continue;
}
if (l.spells[e]) {
  return o.spells[e] = l.spells[e].clone(), i(null, o.spells[e]);
}
for (var t in a._fighters) {
  a._fighters.hasOwnProperty(t) && a.removeFighter(t);
}
if (a.fightState === P.PREPARATION) {
  var t = s(e);
  a.emit("UpdatePreFightersList", t.contextualId);
}
if (!n || !n.data.alive) {
  return console.warn("Fighter was killed previously.");
}
if (e && t) {
  for (var i in e.spells) {
    if (e.spells.hasOwnProperty(i)) {
      var n = t.spellData.spells[i];
      n && a._refreshCooldown(e, e.spells[i], n.level);
    }
  }
}
for (var i in e.spells) {
  if (e.spells.hasOwnProperty(i)) {
    var n = t.spellData.spells[i];
    n && a._refreshCooldown(e, e.spells[i], n.level);
  }
}
if (e.spells.hasOwnProperty(i)) {
  var n = t.spellData.spells[i];
  n && a._refreshCooldown(e, e.spells[i], n.level);
}
for (var e in r.characters.slaves) {
  r.characters.slaves.hasOwnProperty(e) && a.prepareSpellsWithInitialCooldown(r.characters.slaves[e]);
}
if (a._lastFighterId) {
  var t = a._lastFighterId,
    i = a.getFighter(t);
  if (!i) {
    return console.warn("Turn confirmation failed, fighter does not exist:", t);
  }
  if (i.markFinishingBuffs(), i.data.stats.actionPoints = i.data.stats.maxActionPoints, i.data.stats.movementPoints = i.data.stats.maxMovementPoints, t === e.controlledCharacterId) {
    var n = e.getControlledCharacter();
    e.setCharacteristic(n, "actionPointsCurrent", i.data.stats.maxActionPoints), e.setCharacteristic(n, "movementPointsCurrent", i.data.stats.maxMovementPoints);
    for (var o in i.spells) {
      if (i.spells.hasOwnProperty(o)) {
        var s = i.spells[o];
        s.newTurn();
      }
    }
    a._checkInactivityOnTurnEnd(), window.isoEngine.displayTextBanner("tablet.fight.animation.endOfUserTurn");
  }
  a.prepareNextPlayableCharacter(), a.emit("GameFightTurnEnd", t);
}
if (!i) {
  return console.warn("Turn confirmation failed, fighter does not exist:", t);
}
if (i.markFinishingBuffs(), i.data.stats.actionPoints = i.data.stats.maxActionPoints, i.data.stats.movementPoints = i.data.stats.maxMovementPoints, t === e.controlledCharacterId) {
  var n = e.getControlledCharacter();
  e.setCharacteristic(n, "actionPointsCurrent", i.data.stats.maxActionPoints), e.setCharacteristic(n, "movementPointsCurrent", i.data.stats.maxMovementPoints);
  for (var o in i.spells) {
    if (i.spells.hasOwnProperty(o)) {
      var s = i.spells[o];
      s.newTurn();
    }
  }
  a._checkInactivityOnTurnEnd(), window.isoEngine.displayTextBanner("tablet.fight.animation.endOfUserTurn");
}
for (var o in i.spells) {
  if (i.spells.hasOwnProperty(o)) {
    var s = i.spells[o];
    s.newTurn();
  }
}
if (i.spells.hasOwnProperty(o)) {
  var s = i.spells[o];
  s.newTurn();
}
if (!i) {
  return console.warn("Turn end failed, fighter does not exist");
}
if (!i.data.alive && (a.decrementDuration(t), i.markFinishingBuffs(), i.data.stats.actionPoints = i.data.stats.maxActionPoints, i.data.stats.movementPoints = i.data.stats.maxMovementPoints, a.emit("GameFightTurnEnd", t), t === r.characters.controlledCharacterId)) {
  for (var n in i.spells) {
    if (i.spells.hasOwnProperty(n)) {
      var o = i.spells[n];
      o.newTurn();
    }
  }
}
for (var n in i.spells) {
  if (i.spells.hasOwnProperty(n)) {
    var o = i.spells[n];
    o.newTurn();
  }
}
if (i.spells.hasOwnProperty(n)) {
  var o = i.spells[n];
  o.newTurn();
}
if (t === r.id && i !== _.ACTION_SUMMON_STATIC_CREATURE) {
  var s = a.getFighter(o.contextualId);
  if (!s) {
    return console.error(new Error("Summoning failed, fighter does not exist"));
  }
  i === R || s.isBomb ? r.characters.addSummonedBomb() : s.isCreature && r.characters.addSummonedCreature();
}
if (!s) {
  return console.error(new Error("Summoning failed, fighter does not exist"));
}
if (e._synchronizeBuff) {
  for (var n in i) {
    i.hasOwnProperty(n) && i[n].enableBuffs();
  }
}
for (var n in i) {
  i.hasOwnProperty(n) && i[n].enableBuffs();
}
for (var o = 0; o < t.length; o++) {
  var s = t[o];
  if (s.alive) {
    var r = i[s.contextualId];
    if (!r) {
      return console.error(new Error("Synchronizing failed, fighter does not exist"));
    }
    r.synchronizeData(s);
  }
}
if (s.alive) {
  var r = i[s.contextualId];
  if (!r) {
    return console.error(new Error("Synchronizing failed, fighter does not exist"));
  }
  r.synchronizeData(s);
}
if (!r) {
  return console.error(new Error("Synchronizing failed, fighter does not exist"));
}
if (!i) {
  return console.error(new Error("Changing fighter's look failed, fighter does not exist"));
}
if (t = 0 === i ? n.spellData.spells[D] : n.spellData.getSpellBySpellLevelId(e.spellLevelId), t && a.spellCastCounts[t.id]) {
  a.spellCastCounts[t.id] -= 1;
  var o = t.getProperty("apCost", t.level);
  r.characters.setCharacteristic(n, "actionPointsCurrent", n.characteristics.actionPointsCurrent + o);
}
if (0 === t) {
  return r.characters.controlledCharacterId;
}
for (var i = e.indexOf(this.currentFighterId), n = 1; n < t; n++) {
  var o = e[(i + n) % t],
    a = this.getFighter(o);
  if (!a) {
    return console.error(new Error("Find next controllable character failed, fighter does not exist"));
  }
  if (r.characters.canControlCharacterId(o) && a.data.alive) {
    return o;
  }
}
if (!a) {
  return console.error(new Error("Find next controllable character failed, fighter does not exist"));
}
if (r.characters.canControlCharacterId(o) && a.data.alive) {
  return o;
}
for (var e in this._fighters) {
  if (this._fighters.hasOwnProperty(e)) {
    var t = this._fighters[e];
    t.id <= 0 && "" === t.name && t.data.disposition.cellId === -1 && "GameFightCharacterInformations" === t.data._type && !t.isBomb && !t.isCreature && (this.removeFighter(e), window.actorManager.removeActor(e));
  }
  this.emit("UpdatePreFightersList");
}
if (this._fighters.hasOwnProperty(e)) {
  var t = this._fighters[e];
  t.id <= 0 && "" === t.name && t.data.disposition.cellId === -1 && "GameFightCharacterInformations" === t.data._type && !t.isBomb && !t.isCreature && (this.removeFighter(e), window.actorManager.removeActor(e));
}
if (!n) {
  return void console.warn("Fighter information could not be extracted from this message type: " + e._messageType);
}
for (var o in n) {
  if (n.hasOwnProperty(o)) {
    var a = n[o];
    if (a.isItem || 0 === a.spellLevel.initialCooldown) {
      continue;
    }
    this.getFighterSpell(o, e.spellData.characterId, t);
  }
}
if (n.hasOwnProperty(o)) {
  var a = n[o];
  if (a.isItem || 0 === a.spellLevel.initialCooldown) {
    continue;
  }
  this.getFighterSpell(o, e.spellData.characterId, t);
}
if (a.isItem || 0 === a.spellLevel.initialCooldown) {
  continue;
}
if (i) {
  return console.error(i);
}
if (o.timeCreationStarted = l.timeCreationStarted, o instanceof f.StateBuff && (952 === o.actionId ? C(T.fightLeavingStateStep, [H ? H.castingSpellId : -1, o.targetId, o.stateId, a]) : C(T.fightEnteringStateStep, [H ? H.castingSpellId : -1, o.targetId, o.stateId, o.effect.getDurationString(), a])), "FightTemporaryBoostEffect" === n._type) {
  var s = e.actionId;
  s !== _.ACTION_CHARACTER_MAKE_INVISIBLE && s !== _.ACTION_CHARACTER_UPDATE_BOOST && s !== _.ACTION_CHARACTER_CHANGE_LOOK && s !== _.ACTION_CHARACTER_CHANGE_COLOR && s !== _.ACTION_CHARACTER_ADD_APPEARANCE && s !== _.ACTION_FIGHT_SET_STATE && C(T.fightTemporaryBoostStep, [H ? H.castingSpellId : -1, e.effect.targetId, o.effect.description, o.effect.duration, o.effect.getDurationString(), a]);
}
if (s) {
  return t(s);
}
if (!l) {
  return t(new Error("unable to find spell id " + e.spellId));
}
if (!u && m && !H.isCriticalFail) {
  var f = c.getControlledCharacter().spellData.getSpells(I.USABLE),
    g = f[e.spellId];
  if (g) {
    var _ = l.getProperty("globalCooldown");
    _ === -1 && (_ = g.getProperty("minCastInterval")), _ && C(T.fightSpellCooldownVariationStep, [H.castingSpellId, d, e.spellId, _]);
  }
}
if (g) {
  var _ = l.getProperty("globalCooldown");
  _ === -1 && (_ = g.getProperty("minCastInterval")), _ && C(T.fightSpellCooldownVariationStep, [H.castingSpellId, d, e.spellId, _]);
}
if (!t || 0 === t.length) {
  return i();
}
if ("GameFightSpellCooldown" !== t._type) {
  return i();
}
if (e) {
  return o(e);
}
if (!i) {
  return o(new Error("Restoring buffs failed, fighter does not exist"));
}
if (n.isInReconnection = !1, e) {
  return console.error(e);
}
if (r.characters.mainCharacter.currentSummonedCreature = e.summonCount, r.characters.mainCharacter.currentSummonedBomb = e.bombCount, this.turnCount = e.gameTurn - 1, this.emit("TurnCountUpdated", e.gameTurn - 1), "GameFightSpectateMessage" === e._messageType) {
  return t._restoreBuffs(e.effects), M.flush();
}
for (var r in s) {
  if (s.hasOwnProperty(r)) {
    var l = s[r],
      c = l.data.stats;
    if (c) {
      c.initiative || 0 === c.initiative || (console.warn("Initiative stats is not defined, it will be initialized at 0."), c.initiative = 0);
      var d = ~~(c.initiative * c.lifePoints / c.maxLifePoints);
      0 === l.data.teamId ? (n.push({
        fighter: r,
        init: d
      }), o += d) : (i.push({
        fighter: r,
        init: d
      }), a += d);
    }
  }
}
if (s.hasOwnProperty(r)) {
  var l = s[r],
    c = l.data.stats;
  if (c) {
    c.initiative || 0 === c.initiative || (console.warn("Initiative stats is not defined, it will be initialized at 0."), c.initiative = 0);
    var d = ~~(c.initiative * c.lifePoints / c.maxLifePoints);
    0 === l.data.teamId ? (n.push({
      fighter: r,
      init: d
    }), o += d) : (i.push({
      fighter: r,
      init: d
    }), a += d);
  }
}
if (c) {
  c.initiative || 0 === c.initiative || (console.warn("Initiative stats is not defined, it will be initialized at 0."), c.initiative = 0);
  var d = ~~(c.initiative * c.lifePoints / c.maxLifePoints);
  0 === l.data.teamId ? (n.push({
    fighter: r,
    init: d
  }), o += d) : (i.push({
    fighter: r,
    init: d
  }), a += d);
}
for (p = 0; p < m; p++) {
  t.push(u[p].fighter), t.push(h[p].fighter);
}
for (m = f.length; p < m; p++) {
  t.push(f[p].fighter);
}
if (!n) {
  return !1;
}
if (!s || !s.isLoaded) {
  return !1;
}
if (c > d) {
  return !1;
}
if ((h || u) && !r.characters.canSummonCreature()) {
  return !1;
}
if (p && !r.characters.canSummonBomb()) {
  return !1;
}
for (l = 0; l < o.length; l++) {
  var g = window.gui.databases.SpellStates[o[l]];
  if (m && m.length > 0 && m.indexOf(o[l]) !== -1) {
    return !1;
  }
  if (e === D && g && g.preventsFight) {
    return !1;
  }
}
if (m && m.length > 0 && m.indexOf(o[l]) !== -1) {
  return !1;
}
if (e === D && g && g.preventsFight) {
  return !1;
}
if (f) {
  for (l = 0; l < f.length; l++) {
    if (o.indexOf(f[l]) === -1) {
      return !1;
    }
  }
}
for (l = 0; l < f.length; l++) {
  if (o.indexOf(f[l]) === -1) {
    return !1;
  }
}
if (o.indexOf(f[l]) === -1) {
  return !1;
}
if (_ && _.hasBeenCast()) {
  var v = _.getProperty("maxCastPerTurn");
  if (v > 0 && _.castingData.castThisTurn >= v) {
    return !1;
  }
  if (_.getCooldown(n) > 0) {
    return !1;
  }
}
if (v > 0 && _.castingData.castThisTurn >= v) {
  return !1;
}
if (_.getCooldown(n) > 0) {
  return !1;
}
if (!i || !i.spells[e]) {
  return 0;
}
for (var s in a) {
  if (a.hasOwnProperty(s)) {
    o = [];
    for (var r = a[s], l = r.buffs, c = 0; c < l.length; c++) {
      var d = l[c],
        u = a[d.aliveSource];
      if (n === this.INCREMENT_MODE_SOURCE && d.aliveSource === e || n === this.INCREMENT_MODE_TARGET && d.targetId === e || (!u || u && !u.data.alive) && d.targetId === e) {
        var h = this.spellBuffsToIgnore.length;
        if (n === this.INCREMENT_MODE_SOURCE && h && this.buffSkipped.indexOf(d.id) === -1) {
          for (var p = !1, m = 0; m < h; m++) {
            var f = this.spellBuffsToIgnore[m];
            if (f.castingSpellId === d.castingSpell.castingSpellId && f.casterId === e) {
              p = !0, this.buffSkipped.push(d.id);
              break;
            }
          }
          if (p) {
            o.map(function (e) {
              return e.id;
            }).indexOf(d.id) === -1 && o.push(d);
            continue;
          }
        }
        var g = d.incrementDuration(t, i);
        d.isActive() ? (o.push(d), g && this.emit("BuffUpdate", d, r)) : (d.remove(), this.emit("BuffRemove", d, r));
      } else {
        o.push(d);
      }
    }
    r.buffs = o;
  }
}
if (a.hasOwnProperty(s)) {
  o = [];
  for (var r = a[s], l = r.buffs, c = 0; c < l.length; c++) {
    var d = l[c],
      u = a[d.aliveSource];
    if (n === this.INCREMENT_MODE_SOURCE && d.aliveSource === e || n === this.INCREMENT_MODE_TARGET && d.targetId === e || (!u || u && !u.data.alive) && d.targetId === e) {
      var h = this.spellBuffsToIgnore.length;
      if (n === this.INCREMENT_MODE_SOURCE && h && this.buffSkipped.indexOf(d.id) === -1) {
        for (var p = !1, m = 0; m < h; m++) {
          var f = this.spellBuffsToIgnore[m];
          if (f.castingSpellId === d.castingSpell.castingSpellId && f.casterId === e) {
            p = !0, this.buffSkipped.push(d.id);
            break;
          }
        }
        if (p) {
          o.map(function (e) {
            return e.id;
          }).indexOf(d.id) === -1 && o.push(d);
          continue;
        }
      }
      var g = d.incrementDuration(t, i);
      d.isActive() ? (o.push(d), g && this.emit("BuffUpdate", d, r)) : (d.remove(), this.emit("BuffRemove", d, r));
    } else {
      o.push(d);
    }
  }
  r.buffs = o;
}
for (var r = a[s], l = r.buffs, c = 0; c < l.length; c++) {
  var d = l[c],
    u = a[d.aliveSource];
  if (n === this.INCREMENT_MODE_SOURCE && d.aliveSource === e || n === this.INCREMENT_MODE_TARGET && d.targetId === e || (!u || u && !u.data.alive) && d.targetId === e) {
    var h = this.spellBuffsToIgnore.length;
    if (n === this.INCREMENT_MODE_SOURCE && h && this.buffSkipped.indexOf(d.id) === -1) {
      for (var p = !1, m = 0; m < h; m++) {
        var f = this.spellBuffsToIgnore[m];
        if (f.castingSpellId === d.castingSpell.castingSpellId && f.casterId === e) {
          p = !0, this.buffSkipped.push(d.id);
          break;
        }
      }
      if (p) {
        o.map(function (e) {
          return e.id;
        }).indexOf(d.id) === -1 && o.push(d);
        continue;
      }
    }
    var g = d.incrementDuration(t, i);
    d.isActive() ? (o.push(d), g && this.emit("BuffUpdate", d, r)) : (d.remove(), this.emit("BuffRemove", d, r));
  } else {
    o.push(d);
  }
}
if (n === this.INCREMENT_MODE_SOURCE && d.aliveSource === e || n === this.INCREMENT_MODE_TARGET && d.targetId === e || (!u || u && !u.data.alive) && d.targetId === e) {
  var h = this.spellBuffsToIgnore.length;
  if (n === this.INCREMENT_MODE_SOURCE && h && this.buffSkipped.indexOf(d.id) === -1) {
    for (var p = !1, m = 0; m < h; m++) {
      var f = this.spellBuffsToIgnore[m];
      if (f.castingSpellId === d.castingSpell.castingSpellId && f.casterId === e) {
        p = !0, this.buffSkipped.push(d.id);
        break;
      }
    }
    if (p) {
      o.map(function (e) {
        return e.id;
      }).indexOf(d.id) === -1 && o.push(d);
      continue;
    }
  }
  var g = d.incrementDuration(t, i);
  d.isActive() ? (o.push(d), g && this.emit("BuffUpdate", d, r)) : (d.remove(), this.emit("BuffRemove", d, r));
} else {
  o.push(d);
}
if (n === this.INCREMENT_MODE_SOURCE && h && this.buffSkipped.indexOf(d.id) === -1) {
  for (var p = !1, m = 0; m < h; m++) {
    var f = this.spellBuffsToIgnore[m];
    if (f.castingSpellId === d.castingSpell.castingSpellId && f.casterId === e) {
      p = !0, this.buffSkipped.push(d.id);
      break;
    }
  }
  if (p) {
    o.map(function (e) {
      return e.id;
    }).indexOf(d.id) === -1 && o.push(d);
    continue;
  }
}
for (var p = !1, m = 0; m < h; m++) {
  var f = this.spellBuffsToIgnore[m];
  if (f.castingSpellId === d.castingSpell.castingSpellId && f.casterId === e) {
    p = !0, this.buffSkipped.push(d.id);
    break;
  }
}
if (f.castingSpellId === d.castingSpell.castingSpellId && f.casterId === e) {
  p = !0, this.buffSkipped.push(d.id);
  break;
}
if (p) {
  o.map(function (e) {
    return e.id;
  }).indexOf(d.id) === -1 && o.push(d);
  continue;
}
for (var i in t) {
  if (t.hasOwnProperty(i)) {
    for (var n = t[i], o = S(n.buffs), a = 0; a < o.length; a++) {
      var s = o[a];
      s.source === e && n.dispelUniqueBuff(s.id, !1, !0, !1), n.isBomb && (s.aliveSource = n.data.stats.summoner);
    }
  }
}
if (t.hasOwnProperty(i)) {
  for (var n = t[i], o = S(n.buffs), a = 0; a < o.length; a++) {
    var s = o[a];
    s.source === e && n.dispelUniqueBuff(s.id, !1, !0, !1), n.isBomb && (s.aliveSource = n.data.stats.summoner);
  }
}
for (var n = t[i], o = S(n.buffs), a = 0; a < o.length; a++) {
  var s = o[a];
  s.source === e && n.dispelUniqueBuff(s.id, !1, !0, !1), n.isBomb && (s.aliveSource = n.data.stats.summoner);
}
if (this.emit("spellCasted"), r.characters.controlledCharacterId === t) {
  var i = this.spellCastCounts[e];
  this.spellCastCounts[e] = i ? i + 1 : 1;
  var n = r.characters.getControlledCharacter(),
    o = n.spellData.spells[e],
    a = o.getProperty("apCost", o.level);
  r.characters.setCharacteristic(n, "actionPointsCurrent", n.characteristics.actionPointsCurrent - a);
}
if (t(), e && console.error(e), o.isProcessing = !1, o.fightMessagesStack.length) {
  var i = o.fightMessagesStack.shift();
  o.processFightSequenceMessage(i.msg, i.callback);
} else if (o._finishFightSequenceCb) {
  var n = o._finishFightSequenceCb;
  o._finishFightSequenceCb = null, o.timeCreationStarted = null, n();
}
if (o._finishFightSequenceCb) {
  var n = o._finishFightSequenceCb;
  o._finishFightSequenceCb = null, o.timeCreationStarted = null, n();
}
if (t = t || n, this.timeCreationStarted = this.timeCreationStarted ? this.timeCreationStarted : Date.now(), this.isProcessing) {
  return this.fightMessagesStack.push({
    msg: e,
    callback: t
  });
}
for (var i = window.gui.playerData, n = 0, o = 0; o < this._spellCasted.length; o++) {
  this._spellCasted[o] === e && n++;
}
if (!e || "EffectInstanceInteger" !== e._type) {
  return !1;
}
if (!e) {
  return s && l.ensureAsync(function () {
    return s(new Error("No effect specified"));
  });
}
if (d.isInReconnection || c.gui.playerData.isSpectator || 0 === d.currentFighterId) {
  var h = d.getFighter(this.source);
  h && h.isBomb ? this.aliveSource = this.targetId : this.aliveSource = this.source;
} else {
  this.aliveSource = d.currentFighterId;
}
if (this.castingSpell.spell) {
  var e = this.getParam1() || 0,
    t = this.getParam2() || 0,
    i = this.getParam3() || 0;
  o(this.effect) && (e = i, i = 0);
  var n = this.castingSpell.spell.effectInstances;
  for (var a in n) {
    if (n.hasOwnProperty(a)) {
      var s = n[a];
      if (this.actionId === s.effectId && e === s.diceNum && t === s.diceSide && i === s.value) {
        this.effect.targetMask = this.effect.targetMask || s.targetMask, this.effect.triggers = this.effect.triggers || s.triggers, this.effect.rawZone = this.effect.rawZone || s.rawZone;
        break;
      }
    }
  }
}
for (var a in n) {
  if (n.hasOwnProperty(a)) {
    var s = n[a];
    if (this.actionId === s.effectId && e === s.diceNum && t === s.diceSide && i === s.value) {
      this.effect.targetMask = this.effect.targetMask || s.targetMask, this.effect.triggers = this.effect.triggers || s.triggers, this.effect.rawZone = this.effect.rawZone || s.rawZone;
      break;
    }
  }
}
if (n.hasOwnProperty(a)) {
  var s = n[a];
  if (this.actionId === s.effectId && e === s.diceNum && t === s.diceSide && i === s.value) {
    this.effect.targetMask = this.effect.targetMask || s.targetMask, this.effect.triggers = this.effect.triggers || s.triggers, this.effect.rawZone = this.effect.rawZone || s.rawZone;
    break;
  }
}
if (this.actionId === s.effectId && e === s.diceNum && t === s.diceSide && i === s.value) {
  this.effect.targetMask = this.effect.targetMask || s.targetMask, this.effect.triggers = this.effect.triggers || s.triggers, this.effect.rawZone = this.effect.rawZone || s.rawZone;
  break;
}
if (e || t) {
  a.diceNum = e, a.diceSide = t;
} else {
  switch (a.effectId) {
    case r.ACTION_CHARACTER_DISPELL_SPELL:
      a.diceNum = 0, a.diceSide = 0;
  }
}
if (this.targetId !== e.targetId || this.effect.effectId !== e.actionId || this.effectUid !== e.effectUid || this.duration !== e.duration || this.effect.hasOwnProperty("delay") && this.effect.delay !== e.effect.delay || i || !t && this.castingSpell.spell.id !== e.castingSpell.spell.id || this.constructor !== e.constructor || this.source !== e.source || this.isTrigger() && !n) {
  return !1;
}
if (788 === o) {
  if (this.getParam1() !== e.getParam1()) {
    return !1;
  }
} else if (m.indexOf(o) !== -1) {
  if (this.getParam1() !== e.getParam1()) {
    return !1;
  }
} else {
  if (165 === o) {
    return !1;
  }
  if (o === r.ACTION_SUMMON_CREATURE) {
    return !1;
  }
  if (o === e.actionId && (952 === o || 951 === o || 950 === o) && this instanceof s && e instanceof s && this.stateId !== e.stateId) {
    return !1;
  }
}
if (this.getParam1() !== e.getParam1()) {
  return !1;
}
if (m.indexOf(o) !== -1) {
  if (this.getParam1() !== e.getParam1()) {
    return !1;
  }
} else {
  if (165 === o) {
    return !1;
  }
  if (o === r.ACTION_SUMMON_CREATURE) {
    return !1;
  }
  if (o === e.actionId && (952 === o || 951 === o || 950 === o) && this instanceof s && e instanceof s && this.stateId !== e.stateId) {
    return !1;
  }
}
if (this.getParam1() !== e.getParam1()) {
  return !1;
}
if (165 === o) {
  return !1;
}
if (o === r.ACTION_SUMMON_CREATURE) {
  return !1;
}
if (o === e.actionId && (952 === o || 951 === o || 950 === o) && this instanceof s && e instanceof s && this.stateId !== e.stateId) {
  return !1;
}
for (var i = -1, o = 0; o < this.stack.length; o += 1) {
  var a = this.stack[o];
  if (a.uid === e) {
    i = o;
    break;
  }
}
if (a.uid === e) {
  i = o;
  break;
}
if (i !== -1) {
  this.stack.splice(i, 1);
  var s = 0,
    r = 0,
    l = 0,
    c = this.stack[0];
  c && (s = c.getParam1(), r = c.getParam2(), l = c.getParam3()), this.setParam1(s), this.setParam2(r), this.setParam3(l);
  for (var d = this.stack.splice(1) || [], u = 0; u < d.length; u += 1) {
    var h = d[u];
    this.addBuff(h);
  }
  return c ? this.refreshDescription(t) : t();
}
for (var d = this.stack.splice(1) || [], u = 0; u < d.length; u += 1) {
  var h = d[u];
  this.addBuff(h);
}
if (t = void 0 === t ? Number.MIN_VALUE : t, t === this.id) {
  return !0;
}
if (o) {
  return t();
}
if (this.duration > 1 || this.duration < 0) {
  return !1;
}
if (n === i || n === this.source) {
  return !1;
}
for (var t in e) {
  e.hasOwnProperty(t) && ("effectCaller" === t ? this._effectCaller = e[t] : this[t] = e[t]);
}
if (null !== e.effectId && "null" !== e.effectId) {
  return !0;
}
for (var i = [], n = 0; n < e.length; n += 1) {
  var o = e[n];
  a(o) && i.indexOf(o.effectId) === -1 && i.push(o.effectId);
}
if ("Items" === e) {
  if (i === T.ACTION_ITEM_DUNGEON_KEY_DATE) {
    switch (t) {
      case S:
      case E:
      case N:
      case x:
      case L:
        return !1;
    }
  }
  if (i === T.ACTION_ITEM_PETS_EAT) {
    return !1;
  }
  if (i === T.ACTION_ITEM_MIMICRY_OBJ_GID) {
    return !1;
  }
}
if (i === T.ACTION_ITEM_DUNGEON_KEY_DATE) {
  switch (t) {
    case S:
    case E:
    case N:
    case x:
    case L:
      return !1;
  }
}
if (i === T.ACTION_ITEM_PETS_EAT) {
  return !1;
}
if (i === T.ACTION_ITEM_MIMICRY_OBJ_GID) {
  return !1;
}
if ("Monsters" === e) {
  if (i === T.ACTION_CHARACTER_SUMMON_MONSTER_GROUP) {
    return !1;
  }
  if (i === T.ACTION_LADDER_ID) {
    return !1;
  }
}
if (i === T.ACTION_CHARACTER_SUMMON_MONSTER_GROUP) {
  return !1;
}
if (i === T.ACTION_LADDER_ID) {
  return !1;
}
if (!e) {
  return i();
}
for (var a in o[e]) {
  if (o[e].hasOwnProperty(a)) {
    var s = parseInt(a, 10);
    n.indexOf(s) === -1 && n.push(s);
  }
}
if (o[e].hasOwnProperty(a)) {
  var s = parseInt(a, 10);
  n.indexOf(s) === -1 && n.push(s);
}
if (a) {
  return i(a);
}
for (var l = g.extractElementsFrom(n, s, !0, y.getKey(e)), c = 0; c < n.length; c += 1) {
  var d = n[c];
  if (!l[d]) {
    for (var u = o[e][d], h = 0; h < u.length; h += 1) {
      var p = u[h];
      if (p.setBroken(!0), r(e, d, p.effectId)) {
        var m = "id " + d + " unavailable in table " + e;
        m += " caller: " + p.getCaller(), m += " for effectId: " + p.effectId, M.error(new Error(m));
      }
    }
    l[d] = A;
  }
}
if (!l[d]) {
  for (var u = o[e][d], h = 0; h < u.length; h += 1) {
    var p = u[h];
    if (p.setBroken(!0), r(e, d, p.effectId)) {
      var m = "id " + d + " unavailable in table " + e;
      m += " caller: " + p.getCaller(), m += " for effectId: " + p.effectId, M.error(new Error(m));
    }
  }
  l[d] = A;
}
for (var u = o[e][d], h = 0; h < u.length; h += 1) {
  var p = u[h];
  if (p.setBroken(!0), r(e, d, p.effectId)) {
    var m = "id " + d + " unavailable in table " + e;
    m += " caller: " + p.getCaller(), m += " for effectId: " + p.effectId, M.error(new Error(m));
  }
}
if (p.setBroken(!0), r(e, d, p.effectId)) {
  var m = "id " + d + " unavailable in table " + e;
  m += " caller: " + p.getCaller(), m += " for effectId: " + p.effectId, M.error(new Error(m));
}
for (var f in l) {
  l.hasOwnProperty(f) && (t[e][f] = l[f]);
}
for (var o = 0, a = t.length; o < a; o += 1) {
  var s = t[o],
    r = e[s];
  if (n(r)) {
    var l = "param " + (s + 1) + " is falsy";
    return l += " for effect " + i.effectId + " from " + i.getCaller(), M.error(l), !1;
  }
}
if (n(r)) {
  var l = "param " + (s + 1) + " is falsy";
  return l += " for effect " + i.effectId + " from " + i.getCaller(), M.error(l), !1;
}
if (1 === t[1]) {
  return;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (r === T.ACTION_LADDER_ID) {
  if (e.isBroken()) {
    break;
  }
  n(t[2]) && (t[2] = 0);
}
if (e.isBroken()) {
  break;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (s = c(t, [2], e), !s) {
  e.setBroken(!0);
  break;
}
if (null === t[0] && t[2] && (t[0] = t[2]), s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (n(t[2]) && (t[2] = t[0]), s = c(t, [2], e), !s) {
  e.setBroken(!0);
  break;
}
if (s = c(t, [1], e), !s) {
  e.setBroken(!0);
  break;
}
if (t[1] === l || t[0] <= 10) {
  return;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (n(t[0]) && !n(t[2]) && (t[0] = t[2]), s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (s = c(t, [1], e), !s) {
  e.setBroken(!0);
  break;
}
if (n(d)) {
  break;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (i) {
  var m = i.Monsters[d];
  if (m === A) {
    return h = "Unknown monster", e.setDescription(["", u, h]);
  }
  m || (M.error(new Error("monster " + d + " missing for effectId " + r)), m = {});
  var g = m.grades || [],
    v = g[p];
  v || (M.error(new Error("monster " + d + " missing grade " + p + " for effectId " + r)), v = {}), u = v.level, h = m.nameId, e.setDescription(["", u, h]);
} else {
  o("Monsters", d, e);
}
if (m === A) {
  return h = "Unknown monster", e.setDescription(["", u, h]);
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (n(t[0]) && !n(t[2]) && (t[0] = t[2]), s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (i) {
  var y = a.gui.playerData.characterBaseInformations || {},
    w = y.sex ? "nameFemaleId" : "nameMaleId";
  t[2] = i.Titles[t[0]][w], e.setDescription(t);
} else {
  o("Titles", t[0], e);
}
if (n(t[0]) && !n(t[2]) && (t[0] = t[2]), s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (n(t[2]) && !n(t[0]) && (t[2] = t[0]), s = c(t, [2], e), !s) {
  e.setBroken(!0);
  break;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (i) {
  var b = i.Items[t[0]];
  b === A ? (t[0] = "missing_item_" + t[0], e.setDescription(t), e.iconId = 15116) : (t[0] = b.nameId, e.setDescription(t), e.iconId = b.iconId);
} else {
  o("Items", t[0], e);
}
if (n(t[0]) && !n(t[2]) && (t[0] = t[2]), s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (S) {
  if (E) {
    I = S[t[0]] ? S[t[0]].mapId : -1;
    var N = E[I];
    N && (t[0] = N.nameId || f("ui.effect.noMapName")), e.setDescription(t);
  } else {
    I = S[t[0]] ? S[t[0]].mapId : -1, o("MapPositions", I, e);
  }
} else {
  o("MapReferences", t[0], e);
}
if (E) {
  I = S[t[0]] ? S[t[0]].mapId : -1;
  var N = E[I];
  N && (t[0] = N.nameId || f("ui.effect.noMapName")), e.setDescription(t);
} else {
  I = S[t[0]] ? S[t[0]].mapId : -1, o("MapPositions", I, e);
}
if (s = c(t, [1], e), !s) {
  e.setBroken(!0);
  break;
}
if (n(t[0]) && !n(t[2]) && (t[0] = t[2]), s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (t[2] || (t[2] = t[0]), s = c(t, [2], e), !s) {
  e.setBroken(!0);
  break;
}
if (s = c(t, [0], e), !s) {
  e.setBroken(!0);
  break;
}
if (t[2] = n(t[2]) ? "0" : t[2], "string" != typeof t[1] || "string" != typeof t[2]) {
  break;
}
if (s = c(t, [1, 2], e), !s) {
  e.setBroken(!0);
  break;
}
if (i) {
  var B = "#" + _.toHexaString(t[1], 3),
    k = i.InfoMessages[t[2]];
  k && (t[0] = '<span style="color:' + B + '">' + k.textId + "</span>"), e.setDescription(t);
} else {
  o("InfoMessages", t[2], e);
}
if (e.requiresInvocationDescription()) {
  var s = i[0];
  if (!n || !n.Monsters || !n.Monsters[s]) {
    return o("Monsters", s, e), a();
  }
  var r = n.Monsters[s],
    l = [],
    c = i[1];
  (c < 1 || c > r.grades.length) && (c = r.grades.length);
  var d = r.grades[c - 1],
    u = 1,
    h = C();
  h.gui && h.gui.playerData.characterBaseInformations && h.gui.playerData.characterBaseInformations.level && (u = h.gui.playerData.characterBaseInformations.level);
  var p = Math.floor(d.lifePoints + d.lifePoints * u / 100),
    m = Math.floor((d.wisdom + d.wisdom * u / 100) / 10);
  return l.push(f("ui.stats.HP") + f("ui.common.colon") + p), l.push(f("ui.stats.shortAP") + f("ui.common.colon") + d.actionPoints), l.push(f("ui.stats.shortMP") + f("ui.common.colon") + d.movementPoints), l.push(f("ui.stats.dodgeAP") + f("ui.common.colon") + (d.paDodge + m)), l.push(f("ui.stats.dodgeMP") + f("ui.common.colon") + (d.pmDodge + m)), l.push(f("ui.stats.neutralReductionPercent") + f("ui.common.colon") + d.neutralResistance), l.push(f("ui.stats.earthReductionPercent") + f("ui.common.colon") + d.earthResistance), l.push(f("ui.stats.fireReductionPercent") + f("ui.common.colon") + d.fireResistance), l.push(f("ui.stats.waterReductionPercent") + f("ui.common.colon") + d.waterResistance), l.push(f("ui.stats.airReductionPercent") + f("ui.common.colon") + d.airResistance), e.subEffectDescription = l, a();
}
if (!n || !n.Monsters || !n.Monsters[s]) {
  return o("Monsters", s, e), a();
}
if (e.requiresGlyphDescription() || e.requiresTrapDescription() || e.requiresBombDescription()) {
  var g = i[0];
  if (e.requiresBombDescription()) {
    var _ = i[0];
    if (!n || !n.SpellBombs || !n.SpellBombs[_]) {
      return o("SpellBombs", _, e), a();
    }
    if (!n.SpellBombs[_] || n.SpellBombs[_] === A) {
      return a();
    }
    g = n.SpellBombs[_].explodSpellId;
  }
  if (!n || !n.Spells || !n.Spells[g]) {
    return o("Spells", g, e), a();
  }
  if (!n.Spells[g] || n.Spells[g] === A) {
    return a();
  }
  var v = n.Spells[g].spellLevels[i[1] - 1 || 0];
  if (!n || !n.SpellLevels || !n.SpellLevels[v]) {
    return o("SpellLevels", v, e), a();
  }
  for (var y = [], w = n.SpellLevels[v], b = 0; b < w.effects.length; b += 1) {
    var M = w.effects[b];
    M.effectCaller = "SubEffect spellLevelId: " + v + " effect#" + b, M.effectCaller += " from parent: " + e.getCaller(), y.push(M);
  }
  return t.createEffectInstances(y, function (t, i) {
    if (t) {
      return a(t);
    }
    for (var n = [], o = 0; o < i.length; o++) {
      if (i[o].description && !i[o].hidden) {
        n.push(i[o].description);
        var s = i[o].getDurationString();
        s && (n[n.length - 1] += " (" + s + ")");
      }
    }
    return e.subEffectDescription = n.length > 0 && n, a();
  });
}
if (e.requiresBombDescription()) {
  var _ = i[0];
  if (!n || !n.SpellBombs || !n.SpellBombs[_]) {
    return o("SpellBombs", _, e), a();
  }
  if (!n.SpellBombs[_] || n.SpellBombs[_] === A) {
    return a();
  }
  g = n.SpellBombs[_].explodSpellId;
}
if (!n || !n.SpellBombs || !n.SpellBombs[_]) {
  return o("SpellBombs", _, e), a();
}
if (!n.SpellBombs[_] || n.SpellBombs[_] === A) {
  return a();
}
if (!n || !n.Spells || !n.Spells[g]) {
  return o("Spells", g, e), a();
}
if (!n.Spells[g] || n.Spells[g] === A) {
  return a();
}
if (!n || !n.SpellLevels || !n.SpellLevels[v]) {
  return o("SpellLevels", v, e), a();
}
for (var y = [], w = n.SpellLevels[v], b = 0; b < w.effects.length; b += 1) {
  var M = w.effects[b];
  M.effectCaller = "SubEffect spellLevelId: " + v + " effect#" + b, M.effectCaller += " from parent: " + e.getCaller(), y.push(M);
}
if (t) {
  return a(t);
}
for (var n = [], o = 0; o < i.length; o++) {
  if (i[o].description && !i[o].hidden) {
    n.push(i[o].description);
    var s = i[o].getDurationString();
    s && (n[n.length - 1] += " (" + s + ")");
  }
}
if (i[o].description && !i[o].hidden) {
  n.push(i[o].description);
  var s = i[o].getDurationString();
  s && (n[n.length - 1] += " (" + s + ")");
}
if (i) {
  return t(i);
}
for (var o = 0; o < e.length; o++) {
  var a = e[o],
    s = n && n[a.effectId];
  s ? a.effect = s : e[o] = null;
}
for (var a in n) {
  o[a] = e[a];
}
if ("l" === n.zoneShape) {
  return n;
}
if ("X" === n.zoneShape) {
  return t.parseZone("X1");
}
if ("U" === n.zoneShape) {
  return t.parseZone("U1");
}
if ("T" === n.zoneShape) {
  return t.parseZone("T1");
}
if ("C" === n.zoneShape) {
  return t.parseZone("C1");
}
if ("G" === n.zoneShape) {
  return t.parseZone("G1");
}
if ("+" === n.zoneShape) {
  return t.parseZone("+1");
}
if (!e) {
  return "";
}
if (this.description = "", this.subEffectDescription = "", this.effect = null, this._retrieveInstanceType(), this.hasOwnProperty("actionId")) {
  if (this.duration = 0, this.effectId = this.actionId, "EffectInstanceDice" === this._type && this.effectId === T.ACTION_INCARNATION) {
    this._type = "EffectInstanceDate", this.year = this.diceNum;
    var e = g.getIncarnationExpDetails(this.diceSide, this.diceNum, this.diceConst);
    this.month = e.currentExp, this.day = e.level, this.hour = 0, this.minute = 0;
  } else {
    switch (this._type) {
      case "EffectInstanceString":
        this.text = this.value, delete this.value;
        break;
      case "EffectInstanceDice":
        this.value = this.diceConst, delete this.diceConst;
        break;
      case "EffectInstanceDate":
        this.month += 1;
    }
  }
}
if (this.duration = 0, this.effectId = this.actionId, "EffectInstanceDice" === this._type && this.effectId === T.ACTION_INCARNATION) {
  this._type = "EffectInstanceDate", this.year = this.diceNum;
  var e = g.getIncarnationExpDetails(this.diceSide, this.diceNum, this.diceConst);
  this.month = e.currentExp, this.day = e.level, this.hour = 0, this.minute = 0;
} else {
  switch (this._type) {
    case "EffectInstanceString":
      this.text = this.value, delete this.value;
      break;
    case "EffectInstanceDice":
      this.value = this.diceConst, delete this.diceConst;
      break;
    case "EffectInstanceDate":
      this.month += 1;
  }
}
if (this.effect.hasOwnProperty("descriptionId")) {
  var t = "";
  if (this.effect.descriptionId) {
    for (var i = [], n = 0; n < e.length; n += 1) {
      var o = e[n];
      if (0 === n && Number.isInteger(o) && Number.isInteger(this.baseValue)) {
        var a = o - this.baseValue;
        i.push(this.baseValue + " (+" + a + ")");
      } else {
        i.push(o);
      }
    }
    t = v(this.effect.descriptionId, i, this.describe(), {
      isPreview: Boolean(this.isPreview)
    });
  }
  this.description = t;
  var s = this.getValue("modificator");
  0 !== s && (this.description += " " + f("ui.effect.boosted.spell.complement", [s], "%"));
  var r = this.getValue("random");
  r > 0 && (this.getValue("group") > 0 ? this.description += " (" + f("ui.common.random") + ")" : this.description += " " + f("ui.effect.randomProbability", [r], "%")), this.trigger && (this.description = f("ui.spell.trigger", this.description));
}
if (this.effect.descriptionId) {
  for (var i = [], n = 0; n < e.length; n += 1) {
    var o = e[n];
    if (0 === n && Number.isInteger(o) && Number.isInteger(this.baseValue)) {
      var a = o - this.baseValue;
      i.push(this.baseValue + " (+" + a + ")");
    } else {
      i.push(o);
    }
  }
  t = v(this.effect.descriptionId, i, this.describe(), {
    isPreview: Boolean(this.isPreview)
  });
}
for (var i = [], n = 0; n < e.length; n += 1) {
  var o = e[n];
  if (0 === n && Number.isInteger(o) && Number.isInteger(this.baseValue)) {
    var a = o - this.baseValue;
    i.push(this.baseValue + " (+" + a + ")");
  } else {
    i.push(o);
  }
}
if (0 === n && Number.isInteger(o) && Number.isInteger(this.baseValue)) {
  var a = o - this.baseValue;
  i.push(this.baseValue + " (+" + a + ")");
} else {
  i.push(o);
}
for (var i = [], n = 0; n < e.length; n++) {
  i.push(new o(e[n]));
}
for (var o in e) {
  e.hasOwnProperty(o) && (n.push(e[o]), e[o] = n.length - 1);
}
if (t) {
  return i(t);
}
for (var o in e) {
  e.hasOwnProperty(o) && (e[o] = n[e[o]]);
}
if (t) {
  for (; i.length < t;) {
    i = "0" + i;
  }
}
for (; i.length < t;) {
  i = "0" + i;
}
for (var t = [], i = 0; i < e.length; i++) {
  t.push(r(e[i], i + 1));
}
if ("string" == typeof e) {
  if (0 === e.indexOf("#")) {
    return o(e);
  }
  if (0 === e.indexOf("rgba(")) {
    return a(e);
  }
}
if (0 === e.indexOf("#")) {
  return o(e);
}
if (0 === e.indexOf("rgba(")) {
  return a(e);
}
if (e && e.length > 0) {
  t = [null, null, null, null, null, null];
  for (var i = 0; i < e.length; i++) {
    var n = s(e[i]);
    t[n.index] = n.color;
  }
}
for (var i = 0; i < e.length; i++) {
  var n = s(e[i]);
  t[n.index] = n.color;
}
if (6 === e.length) {
  return {
    r: (16711680 & t) >> 16,
    g: (65280 & t) >> 8,
    b: 255 & t
  };
}
if (3 === e.length) {
  var i = (3840 & t) >> 8,
    n = (240 & t) >> 4,
    o = 15 & t;
  return {
    r: i + (i << 4),
    g: n + (n << 4),
    b: o + (o << 4)
  };
}
if (this.targetId === window.gui.playerData.characters.controlledCharacterId) {
  this.modifType = s(this.actionId), this.actionId === a.ACTION_DEBOOST_SPELL_RANGE && (this._delta *= -1);
  for (var e = !1, t = window.gui.playerData.characters.mainCharacter.characteristics.spellModifications, i = 0; i < t.length; i++) {
    var n = t[i];
    if (this.spellId === n.spellId && n.modificationType === this.modifType) {
      e = !0;
      var r = n.value.getContextModif();
      n.value.setPts({
        contextModif: r + this._delta
      });
    }
  }
  if (!e) {
    var c = new l({
      spellId: this.spellId,
      modificationType: this.modifType,
      value: {
        contextModif: this._delta
      }
    });
    t.push(c);
  }
  this.actionId === a.ACTION_BOOST_SPELL_AP_COST && window.gui.fightManager.correctActionPoint(this.spellId, this._delta);
}
for (var e = !1, t = window.gui.playerData.characters.mainCharacter.characteristics.spellModifications, i = 0; i < t.length; i++) {
  var n = t[i];
  if (this.spellId === n.spellId && n.modificationType === this.modifType) {
    e = !0;
    var r = n.value.getContextModif();
    n.value.setPts({
      contextModif: r + this._delta
    });
  }
}
if (this.spellId === n.spellId && n.modificationType === this.modifType) {
  e = !0;
  var r = n.value.getContextModif();
  n.value.setPts({
    contextModif: r + this._delta
  });
}
if (!e) {
  var c = new l({
    spellId: this.spellId,
    modificationType: this.modifType,
    value: {
      contextModif: this._delta
    }
  });
  t.push(c);
}
if (!this._removed && this.targetId === window.gui.playerData.characters.controlledCharacterId) {
  for (var e = window.gui.playerData.characters.mainCharacter.characteristics.spellModifications, t = 0; t < e.length; t++) {
    var i = e[t];
    if (this.spellId === i.spellId && i.modificationType === this.modifType) {
      var n = i.value.getContextModif();
      i.value.setPts({
        contextModif: n - this._delta
      });
    }
  }
}
for (var e = window.gui.playerData.characters.mainCharacter.characteristics.spellModifications, t = 0; t < e.length; t++) {
  var i = e[t];
  if (this.spellId === i.spellId && i.modificationType === this.modifType) {
    var n = i.value.getContextModif();
    i.value.setPts({
      contextModif: n - this._delta
    });
  }
}
if (this.spellId === i.spellId && i.modificationType === this.modifType) {
  var n = i.value.getContextModif();
  i.value.setPts({
    contextModif: n - this._delta
  });
}
if (!this._removed && !this.effect.effect.active) {
  var e = this.getDelta();
  this.decrementStats(e);
}
if (!this._removed) {
  var t = this.getDelta();
  this.decrementStats(t);
}
if (!this._disabled && this.effect.effect.active) {
  var e = this.getDelta();
  this.decrementStats(e);
}
if (e) {
  var t = r(),
    i = t.gui,
    n = i.fightManager.getFighter(this.targetId);
  if (!n) {
    return void console.error("Trying to apply a stats buff on non-existing fighter " + this.targetId);
  }
  var o = n.data.stats;
  switch (this.statName) {
    case "vitality":
      o.lifePoints += e, o.maxLifePoints += e;
      break;
    case "lifePointsMalus":
      o.lifePoints = Math.min(o.lifePoints + e, o.maxLifePoints);
      break;
    case "lifePoints":
    case "shieldPoints":
    case "dodgePALostProbability":
    case "dodgePMLostProbability":
      o[this.statName] = Math.max(o[this.statName] + e, 0);
      break;
    case "agility":
      o.tackleEvade += ~~(e / 10), o.tackleBlock += ~~(e / 10);
      break;
    case "globalResistPercentMalus":
    case "globalResistPercentBonus":
      var a = "globalResistPercentBonus" === this.statName ? 1 : -1;
      o.neutralElementResistPercent += e * a, o.airElementResistPercent += e * a, o.waterElementResistPercent += e * a, o.earthElementResistPercent += e * a, o.fireElementResistPercent += e * a;
      break;
    case "actionPoints":
      o.actionPoints += e, o.maxActionPoints += e;
      break;
    case "movementPoints":
      o.movementPoints += e, o.maxMovementPoints += e;
      break;
    default:
      o.hasOwnProperty(this.statName) && (o[this.statName] += e);
  }
  var s = i.playerData.characters;
  if (s.mainCharacterId === this.targetId || s.controlledCharacterId === this.targetId) {
    var l;
    if (l = s.mainCharacterId === this.targetId ? s.mainCharacter : s.getControlledCharacter(), l.timeStatsSynchronized - this.timeCreationStarted > 0) {
      return void ("summonableCreaturesBoost" === this.statName ? i.fightManager.emit("updateSpellsAvailability") : "range" === this.statName && t.foreground.refreshSpellRange());
    }
    var c = l.characteristics;
    if (c && c.hasOwnProperty(this.statName) && c[this.statName]) {
      if ("CharacterBaseCharacteristic" === c[this.statName]._type) {
        var d = c[this.statName],
          u = d.getContextModif();
        d.setPts({
          contextModif: u + e
        });
      } else {
        var h = "StatBuff: Try to update an unknown type " + c[this.statName]._type;
        h += " for " + this.statName, console.error(new Error(h));
      }
    }
    switch (this.statName) {
      case "vitality":
        s.setCharacteristic(l, "maxLifePoints", Math.max(0, c.maxLifePoints + e)), s.setCharacteristic(l, "lifePoints", Math.max(0, c.lifePoints + e));
        break;
      case "lifePoints":
      case "lifePointsMalus":
        s.setCharacteristic(l, "lifePoints", Math.max(0, c.lifePoints + e));
        break;
      case "movementPoints":
        s.setCharacteristic(l, "movementPointsCurrent", c.movementPointsCurrent + e);
        break;
      case "actionPoints":
        s.setCharacteristic(l, "actionPointsCurrent", c.actionPointsCurrent + e);
        break;
      case "summonableCreaturesBoost":
        i.fightManager.emit("updateSpellsAvailability");
        break;
      case "range":
        t.foreground.refreshSpellRange();
    }
  }
}
if (!n) {
  return void console.error("Trying to apply a stats buff on non-existing fighter " + this.targetId);
}
if (s.mainCharacterId === this.targetId || s.controlledCharacterId === this.targetId) {
  var l;
  if (l = s.mainCharacterId === this.targetId ? s.mainCharacter : s.getControlledCharacter(), l.timeStatsSynchronized - this.timeCreationStarted > 0) {
    return void ("summonableCreaturesBoost" === this.statName ? i.fightManager.emit("updateSpellsAvailability") : "range" === this.statName && t.foreground.refreshSpellRange());
  }
  var c = l.characteristics;
  if (c && c.hasOwnProperty(this.statName) && c[this.statName]) {
    if ("CharacterBaseCharacteristic" === c[this.statName]._type) {
      var d = c[this.statName],
        u = d.getContextModif();
      d.setPts({
        contextModif: u + e
      });
    } else {
      var h = "StatBuff: Try to update an unknown type " + c[this.statName]._type;
      h += " for " + this.statName, console.error(new Error(h));
    }
  }
  switch (this.statName) {
    case "vitality":
      s.setCharacteristic(l, "maxLifePoints", Math.max(0, c.maxLifePoints + e)), s.setCharacteristic(l, "lifePoints", Math.max(0, c.lifePoints + e));
      break;
    case "lifePoints":
    case "lifePointsMalus":
      s.setCharacteristic(l, "lifePoints", Math.max(0, c.lifePoints + e));
      break;
    case "movementPoints":
      s.setCharacteristic(l, "movementPointsCurrent", c.movementPointsCurrent + e);
      break;
    case "actionPoints":
      s.setCharacteristic(l, "actionPointsCurrent", c.actionPointsCurrent + e);
      break;
    case "summonableCreaturesBoost":
      i.fightManager.emit("updateSpellsAvailability");
      break;
    case "range":
      t.foreground.refreshSpellRange();
  }
}
if (l = s.mainCharacterId === this.targetId ? s.mainCharacter : s.getControlledCharacter(), l.timeStatsSynchronized - this.timeCreationStarted > 0) {
  return void ("summonableCreaturesBoost" === this.statName ? i.fightManager.emit("updateSpellsAvailability") : "range" === this.statName && t.foreground.refreshSpellRange());
}
if (c && c.hasOwnProperty(this.statName) && c[this.statName]) {
  if ("CharacterBaseCharacteristic" === c[this.statName]._type) {
    var d = c[this.statName],
      u = d.getContextModif();
    d.setPts({
      contextModif: u + e
    });
  } else {
    var h = "StatBuff: Try to update an unknown type " + c[this.statName]._type;
    h += " for " + this.statName, console.error(new Error(h));
  }
}
if ("CharacterBaseCharacteristic" === c[this.statName]._type) {
  var d = c[this.statName],
    u = d.getContextModif();
  d.setPts({
    contextModif: u + e
  });
} else {
  var h = "StatBuff: Try to update an unknown type " + c[this.statName]._type;
  h += " for " + this.statName, console.error(new Error(h));
}
if (!this._removed) {
  var e = window.gui.fightManager.getFighter(this.targetId);
  if (!e) {
    return console.error("Removing state buff failed, fighter does not exist.");
  }
  e.removeState(this.stateId), window.gui.shortcutBar.updateSpellsAvailability();
  var t = this.targetId,
    i = this.visibleInFightLog;
  window.gui.fightManager.deadTurnsList.indexOf(t) === -1 && (952 === this.actionId ? r.push(l.FIGHTER_ENTERING_STATE, [t, this.stateId], t, -1, -1, !1, 2, i) : r.push(l.FIGHTER_LEAVING_STATE, [t, this.stateId], t, -1, -1, !1, 2, i));
}
if (!e) {
  return console.error("Removing state buff failed, fighter does not exist.");
}
if (e) {
  return console.error("fightEvents#default", e);
}
for (var i = null, n = 0; n < t.length; n++) {
  var o = y().gui.databases.TypeActions[t[n]],
    a = o ? o.elementId : -1;
  if (t[n] === b.ACTION_CHARACTER_LIFE_POINTS_LOST_FROM_PUSH && (a = M.PUSH), null !== i && i !== a) {
    i = -1;
    break;
  }
  i = a;
}
if (t[n] === b.ACTION_CHARACTER_LIFE_POINTS_LOST_FROM_PUSH && (a = M.PUSH), null !== i && i !== a) {
  i = -1;
  break;
}
if (e.name === h.FIGHT_END) {
  return i(null, C("ui.fight.fightEnd"));
}
if (!d) {
  return i(new Error("Fighter does not exist."));
}
if (e.name === h.FIGHTER_DEATH) {
  n = I(C("ui.fight.isDead"), 0, d.name);
} else {
  if (e.name === h.FIGHTER_TRIGGERED_GLYPH) {
    return u = l.getFighter(c[1]), u ? l.getFighterSpell(c[2], c[1], function (e, t) {
      return e ? i(e) : (n = C("ui.fight.startTrap", d.name, t.getName(), u.name), i(null, n));
    }) : i(new Error("Second fighter does not exist."));
  }
  if (e.name === h.FIGHTER_ENTERING_STATE) {
    var g = c[2] ? "</b> (" + c[2] + ")<b>" : "";
    o = y().gui.databases.SpellStates[c[1]], n = C("ui.fight.enterState", d.name, o.nameId + g);
  } else if (e.name === h.FIGHTER_LEAVING_STATE) {
    o = y().gui.databases.SpellStates[c[1]], n = C("ui.fight.exitState", d.name, o.nameId);
  } else {
    if (e.name === h.FIGHTER_SPELL_DISPELLED) {
      return l.getFighterSpell(c[1], c[0], function (e, t) {
        return e ? i(e) : (n = C("ui.fight.dispellSpell", d.name, t.getName()), i(null, n));
      });
    }
    if (e.name === h.FIGHTER_CASTED_SPELL) {
      return l.getFighterSpell(c[1], c[0], function (e, t) {
        if (e) {
          return i(e);
        }
        var n = t.getName();
        return n ? c[1] !== w.WEAPON_SPELL_ID ? i(null, s("ui.fight.launchSpell", d.name, n, c[2])) : void a(function (e, t) {
          return e ? i(e) : i(null, s("ui.fight.launchSpell", d.name, t, c[2]));
        }) : i(null, "");
      });
    }
    if (e.name === h.FIGHTER_CLOSE_COMBAT) {
      return f.getData("Items", [c[1]], function (e, t) {
        return e ? i(e) : i(null, s("ui.fight.closeCombat", d.name, t[0].nameId, c[2]));
      });
    }
    if (e.name === h.FIGHTER_LIFE_LOSS_AND_DEATH) {
      T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2]), m.lostHP.dead = !0) : n = C("ui.fight.lifeLossAndDeath", d.name, r(c[1], [c[2]]));
    } else if (e.name === h.FIGHTER_LIFE_LOSS) {
      T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2])) : n = C("ui.fight.lifeLoss", d.name, r(c[1], [c[2]]));
    } else if (e.name === h.FIGHTER_SHIELD_LOSS) {
      T.regroupDamages ? (m.lostSP.values.push(c[1]), m.lostSP.actionIds.push(c[2])) : n = C("ui.fight.lostShieldPoints", d.name, r(c[1], [c[2]]));
    } else if (e.name === h.FIGHTER_REDUCED_DAMAGES) {
      n = C("ui.fight.reduceDamages", d.name, c[1]);
    } else if (e.name === h.FIGHTER_LIFE_GAIN) {
      T.regroupDamages ? m.gainHP.values.push(c[1]) : n = C("ui.fight.lifeGain", d.name, c[1]);
    } else if (e.name === h.FIGHTER_AP_LOST) {
      n = C("ui.fight.lostAP", d.name, c[1]);
    } else if (e.name === h.FIGHTER_AP_GAINED) {
      n = C("ui.fight.winAP", d.name, c[1]);
    } else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
      n = C("ui.fight.dodgeAP", d.name, c[1]);
    } else if (e.name === h.FIGHTER_MP_LOST) {
      n = C("ui.fight.lostMP", d.name, c[1]);
    } else if (e.name === h.FIGHTER_MP_GAINED) {
      n = C("ui.fight.winMP", d.name, c[1]);
    } else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
      n = C("ui.fight.dodgeMP", d.name, c[1]);
    } else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
      var _ = ~~c[2];
      n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
    } else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
      n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
    } else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
      n = C("ui.fight.noChange", d.name);
    } else if (e.name === h.FIGHTER_NO_CHANGE) {
      n = C("ui.fight.noChange", d.name);
    } else if (e.name === h.FIGHTER_LEAVE) {
      n = C("ui.fight.leave", d.name);
    } else if (e.name === h.FIGHTER_GOT_DISPELLED) {
      n = C("ui.fight.dispell", d.name);
    } else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
      n = C("ui.fight.reflectSpell", d.name);
    } else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
      n = C("ui.fight.reflectDamages", d.name);
    } else if (e.name === h.FIGHTER_GOT_TACKLED) {
      n = C("ui.fight.dodgeFailed");
    } else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
      var v = c[1] === p.INVISIBLE;
      n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
    } else if (e.name === h.FIGHTER_GOT_KILLED) {
      if (u = l.getFighter(c[1]), !u) {
        return i(new Error("Second fighter does not exist."));
      }
      if (c[0] === c[1]) {
        return i();
      }
      n = C("ui.fight.killed", d.name, u.name);
    }
  }
}
if (e.name === h.FIGHTER_TRIGGERED_GLYPH) {
  return u = l.getFighter(c[1]), u ? l.getFighterSpell(c[2], c[1], function (e, t) {
    return e ? i(e) : (n = C("ui.fight.startTrap", d.name, t.getName(), u.name), i(null, n));
  }) : i(new Error("Second fighter does not exist."));
}
if (e.name === h.FIGHTER_ENTERING_STATE) {
  var g = c[2] ? "</b> (" + c[2] + ")<b>" : "";
  o = y().gui.databases.SpellStates[c[1]], n = C("ui.fight.enterState", d.name, o.nameId + g);
} else if (e.name === h.FIGHTER_LEAVING_STATE) {
  o = y().gui.databases.SpellStates[c[1]], n = C("ui.fight.exitState", d.name, o.nameId);
} else {
  if (e.name === h.FIGHTER_SPELL_DISPELLED) {
    return l.getFighterSpell(c[1], c[0], function (e, t) {
      return e ? i(e) : (n = C("ui.fight.dispellSpell", d.name, t.getName()), i(null, n));
    });
  }
  if (e.name === h.FIGHTER_CASTED_SPELL) {
    return l.getFighterSpell(c[1], c[0], function (e, t) {
      if (e) {
        return i(e);
      }
      var n = t.getName();
      return n ? c[1] !== w.WEAPON_SPELL_ID ? i(null, s("ui.fight.launchSpell", d.name, n, c[2])) : void a(function (e, t) {
        return e ? i(e) : i(null, s("ui.fight.launchSpell", d.name, t, c[2]));
      }) : i(null, "");
    });
  }
  if (e.name === h.FIGHTER_CLOSE_COMBAT) {
    return f.getData("Items", [c[1]], function (e, t) {
      return e ? i(e) : i(null, s("ui.fight.closeCombat", d.name, t[0].nameId, c[2]));
    });
  }
  if (e.name === h.FIGHTER_LIFE_LOSS_AND_DEATH) {
    T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2]), m.lostHP.dead = !0) : n = C("ui.fight.lifeLossAndDeath", d.name, r(c[1], [c[2]]));
  } else if (e.name === h.FIGHTER_LIFE_LOSS) {
    T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2])) : n = C("ui.fight.lifeLoss", d.name, r(c[1], [c[2]]));
  } else if (e.name === h.FIGHTER_SHIELD_LOSS) {
    T.regroupDamages ? (m.lostSP.values.push(c[1]), m.lostSP.actionIds.push(c[2])) : n = C("ui.fight.lostShieldPoints", d.name, r(c[1], [c[2]]));
  } else if (e.name === h.FIGHTER_REDUCED_DAMAGES) {
    n = C("ui.fight.reduceDamages", d.name, c[1]);
  } else if (e.name === h.FIGHTER_LIFE_GAIN) {
    T.regroupDamages ? m.gainHP.values.push(c[1]) : n = C("ui.fight.lifeGain", d.name, c[1]);
  } else if (e.name === h.FIGHTER_AP_LOST) {
    n = C("ui.fight.lostAP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_AP_GAINED) {
    n = C("ui.fight.winAP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
    n = C("ui.fight.dodgeAP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_MP_LOST) {
    n = C("ui.fight.lostMP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_MP_GAINED) {
    n = C("ui.fight.winMP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
    n = C("ui.fight.dodgeMP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
    var _ = ~~c[2];
    n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
  } else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
    n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
  } else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
    n = C("ui.fight.noChange", d.name);
  } else if (e.name === h.FIGHTER_NO_CHANGE) {
    n = C("ui.fight.noChange", d.name);
  } else if (e.name === h.FIGHTER_LEAVE) {
    n = C("ui.fight.leave", d.name);
  } else if (e.name === h.FIGHTER_GOT_DISPELLED) {
    n = C("ui.fight.dispell", d.name);
  } else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
    n = C("ui.fight.reflectSpell", d.name);
  } else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
    n = C("ui.fight.reflectDamages", d.name);
  } else if (e.name === h.FIGHTER_GOT_TACKLED) {
    n = C("ui.fight.dodgeFailed");
  } else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
    var v = c[1] === p.INVISIBLE;
    n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
  } else if (e.name === h.FIGHTER_GOT_KILLED) {
    if (u = l.getFighter(c[1]), !u) {
      return i(new Error("Second fighter does not exist."));
    }
    if (c[0] === c[1]) {
      return i();
    }
    n = C("ui.fight.killed", d.name, u.name);
  }
}
if (e.name === h.FIGHTER_LEAVING_STATE) {
  o = y().gui.databases.SpellStates[c[1]], n = C("ui.fight.exitState", d.name, o.nameId);
} else {
  if (e.name === h.FIGHTER_SPELL_DISPELLED) {
    return l.getFighterSpell(c[1], c[0], function (e, t) {
      return e ? i(e) : (n = C("ui.fight.dispellSpell", d.name, t.getName()), i(null, n));
    });
  }
  if (e.name === h.FIGHTER_CASTED_SPELL) {
    return l.getFighterSpell(c[1], c[0], function (e, t) {
      if (e) {
        return i(e);
      }
      var n = t.getName();
      return n ? c[1] !== w.WEAPON_SPELL_ID ? i(null, s("ui.fight.launchSpell", d.name, n, c[2])) : void a(function (e, t) {
        return e ? i(e) : i(null, s("ui.fight.launchSpell", d.name, t, c[2]));
      }) : i(null, "");
    });
  }
  if (e.name === h.FIGHTER_CLOSE_COMBAT) {
    return f.getData("Items", [c[1]], function (e, t) {
      return e ? i(e) : i(null, s("ui.fight.closeCombat", d.name, t[0].nameId, c[2]));
    });
  }
  if (e.name === h.FIGHTER_LIFE_LOSS_AND_DEATH) {
    T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2]), m.lostHP.dead = !0) : n = C("ui.fight.lifeLossAndDeath", d.name, r(c[1], [c[2]]));
  } else if (e.name === h.FIGHTER_LIFE_LOSS) {
    T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2])) : n = C("ui.fight.lifeLoss", d.name, r(c[1], [c[2]]));
  } else if (e.name === h.FIGHTER_SHIELD_LOSS) {
    T.regroupDamages ? (m.lostSP.values.push(c[1]), m.lostSP.actionIds.push(c[2])) : n = C("ui.fight.lostShieldPoints", d.name, r(c[1], [c[2]]));
  } else if (e.name === h.FIGHTER_REDUCED_DAMAGES) {
    n = C("ui.fight.reduceDamages", d.name, c[1]);
  } else if (e.name === h.FIGHTER_LIFE_GAIN) {
    T.regroupDamages ? m.gainHP.values.push(c[1]) : n = C("ui.fight.lifeGain", d.name, c[1]);
  } else if (e.name === h.FIGHTER_AP_LOST) {
    n = C("ui.fight.lostAP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_AP_GAINED) {
    n = C("ui.fight.winAP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
    n = C("ui.fight.dodgeAP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_MP_LOST) {
    n = C("ui.fight.lostMP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_MP_GAINED) {
    n = C("ui.fight.winMP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
    n = C("ui.fight.dodgeMP", d.name, c[1]);
  } else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
    var _ = ~~c[2];
    n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
  } else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
    n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
  } else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
    n = C("ui.fight.noChange", d.name);
  } else if (e.name === h.FIGHTER_NO_CHANGE) {
    n = C("ui.fight.noChange", d.name);
  } else if (e.name === h.FIGHTER_LEAVE) {
    n = C("ui.fight.leave", d.name);
  } else if (e.name === h.FIGHTER_GOT_DISPELLED) {
    n = C("ui.fight.dispell", d.name);
  } else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
    n = C("ui.fight.reflectSpell", d.name);
  } else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
    n = C("ui.fight.reflectDamages", d.name);
  } else if (e.name === h.FIGHTER_GOT_TACKLED) {
    n = C("ui.fight.dodgeFailed");
  } else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
    var v = c[1] === p.INVISIBLE;
    n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
  } else if (e.name === h.FIGHTER_GOT_KILLED) {
    if (u = l.getFighter(c[1]), !u) {
      return i(new Error("Second fighter does not exist."));
    }
    if (c[0] === c[1]) {
      return i();
    }
    n = C("ui.fight.killed", d.name, u.name);
  }
}
if (e.name === h.FIGHTER_SPELL_DISPELLED) {
  return l.getFighterSpell(c[1], c[0], function (e, t) {
    return e ? i(e) : (n = C("ui.fight.dispellSpell", d.name, t.getName()), i(null, n));
  });
}
if (e.name === h.FIGHTER_CASTED_SPELL) {
  return l.getFighterSpell(c[1], c[0], function (e, t) {
    if (e) {
      return i(e);
    }
    var n = t.getName();
    return n ? c[1] !== w.WEAPON_SPELL_ID ? i(null, s("ui.fight.launchSpell", d.name, n, c[2])) : void a(function (e, t) {
      return e ? i(e) : i(null, s("ui.fight.launchSpell", d.name, t, c[2]));
    }) : i(null, "");
  });
}
if (e) {
  return i(e);
}
if (e.name === h.FIGHTER_CLOSE_COMBAT) {
  return f.getData("Items", [c[1]], function (e, t) {
    return e ? i(e) : i(null, s("ui.fight.closeCombat", d.name, t[0].nameId, c[2]));
  });
}
if (e.name === h.FIGHTER_LIFE_LOSS_AND_DEATH) {
  T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2]), m.lostHP.dead = !0) : n = C("ui.fight.lifeLossAndDeath", d.name, r(c[1], [c[2]]));
} else if (e.name === h.FIGHTER_LIFE_LOSS) {
  T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2])) : n = C("ui.fight.lifeLoss", d.name, r(c[1], [c[2]]));
} else if (e.name === h.FIGHTER_SHIELD_LOSS) {
  T.regroupDamages ? (m.lostSP.values.push(c[1]), m.lostSP.actionIds.push(c[2])) : n = C("ui.fight.lostShieldPoints", d.name, r(c[1], [c[2]]));
} else if (e.name === h.FIGHTER_REDUCED_DAMAGES) {
  n = C("ui.fight.reduceDamages", d.name, c[1]);
} else if (e.name === h.FIGHTER_LIFE_GAIN) {
  T.regroupDamages ? m.gainHP.values.push(c[1]) : n = C("ui.fight.lifeGain", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOST) {
  n = C("ui.fight.lostAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_GAINED) {
  n = C("ui.fight.winAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
  n = C("ui.fight.dodgeAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_LIFE_LOSS) {
  T.regroupDamages ? (m.lostHP.values.push(c[1]), m.lostHP.actionIds.push(c[2])) : n = C("ui.fight.lifeLoss", d.name, r(c[1], [c[2]]));
} else if (e.name === h.FIGHTER_SHIELD_LOSS) {
  T.regroupDamages ? (m.lostSP.values.push(c[1]), m.lostSP.actionIds.push(c[2])) : n = C("ui.fight.lostShieldPoints", d.name, r(c[1], [c[2]]));
} else if (e.name === h.FIGHTER_REDUCED_DAMAGES) {
  n = C("ui.fight.reduceDamages", d.name, c[1]);
} else if (e.name === h.FIGHTER_LIFE_GAIN) {
  T.regroupDamages ? m.gainHP.values.push(c[1]) : n = C("ui.fight.lifeGain", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOST) {
  n = C("ui.fight.lostAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_GAINED) {
  n = C("ui.fight.winAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
  n = C("ui.fight.dodgeAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_SHIELD_LOSS) {
  T.regroupDamages ? (m.lostSP.values.push(c[1]), m.lostSP.actionIds.push(c[2])) : n = C("ui.fight.lostShieldPoints", d.name, r(c[1], [c[2]]));
} else if (e.name === h.FIGHTER_REDUCED_DAMAGES) {
  n = C("ui.fight.reduceDamages", d.name, c[1]);
} else if (e.name === h.FIGHTER_LIFE_GAIN) {
  T.regroupDamages ? m.gainHP.values.push(c[1]) : n = C("ui.fight.lifeGain", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOST) {
  n = C("ui.fight.lostAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_GAINED) {
  n = C("ui.fight.winAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
  n = C("ui.fight.dodgeAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_REDUCED_DAMAGES) {
  n = C("ui.fight.reduceDamages", d.name, c[1]);
} else if (e.name === h.FIGHTER_LIFE_GAIN) {
  T.regroupDamages ? m.gainHP.values.push(c[1]) : n = C("ui.fight.lifeGain", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOST) {
  n = C("ui.fight.lostAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_GAINED) {
  n = C("ui.fight.winAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
  n = C("ui.fight.dodgeAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_LIFE_GAIN) {
  T.regroupDamages ? m.gainHP.values.push(c[1]) : n = C("ui.fight.lifeGain", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOST) {
  n = C("ui.fight.lostAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_GAINED) {
  n = C("ui.fight.winAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
  n = C("ui.fight.dodgeAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_AP_LOST) {
  n = C("ui.fight.lostAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_GAINED) {
  n = C("ui.fight.winAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
  n = C("ui.fight.dodgeAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_AP_GAINED) {
  n = C("ui.fight.winAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
  n = C("ui.fight.dodgeAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_AP_LOSS_DODGED) {
  n = C("ui.fight.dodgeAP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_MP_LOST) {
  n = C("ui.fight.lostMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_MP_GAINED) {
  n = C("ui.fight.winMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_MP_LOSS_DODGED) {
  n = C("ui.fight.dodgeMP", d.name, c[1]);
} else if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_TEMPORARY_BOOSTED) {
  var _ = ~~c[2];
  n = C("ui.fight.effect", d.name, _ ? c[1] + " (" + c[3] + ")" : c[1]);
} else if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_EFFECTS_MODIFY_DURATION) {
  n = C("ui.fight.effectsModifyDuration", d.name, c[2]);
} else if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_SPELL_IMMUNITY) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_NO_CHANGE) {
  n = C("ui.fight.noChange", d.name);
} else if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_LEAVE) {
  n = C("ui.fight.leave", d.name);
} else if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_GOT_DISPELLED) {
  n = C("ui.fight.dispell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_REFLECTED_SPELL) {
  n = C("ui.fight.reflectSpell", d.name);
} else if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_REFLECTED_DAMAGES) {
  n = C("ui.fight.reflectDamages", d.name);
} else if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_GOT_TACKLED) {
  n = C("ui.fight.dodgeFailed");
} else if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_VISIBILITY_CHANGED) {
  var v = c[1] === p.INVISIBLE;
  n = v ? C("ui.fight.invisibility", d.name) : C("ui.fight.visibility", d.name);
} else if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (e.name === h.FIGHTER_GOT_KILLED) {
  if (u = l.getFighter(c[1]), !u) {
    return i(new Error("Second fighter does not exist."));
  }
  if (c[0] === c[1]) {
    return i();
  }
  n = C("ui.fight.killed", d.name, u.name);
}
if (u = l.getFighter(c[1]), !u) {
  return i(new Error("Second fighter does not exist."));
}
if (c[0] === c[1]) {
  return i();
}
if (y().gui.fightManager.emit(e.name, e.params), e.name === h.FIGHTER_LIFE_LOSS && S[e.params[0]]) {
  e.name = h.FIGHTER_LIFE_LOSS_AND_DEATH;
} else if (e.name === h.FIGHTER_DEATH && E[e.params[0]]) {
  return i();
}
if (e.name === h.FIGHTER_DEATH && E[e.params[0]]) {
  return i();
}
if (N = !1, S = {}, E = {}, e) {
  return t(e);
}
if ("" !== n && "" !== a ? n += "\n" + a : "" === n && (n += a), "" !== n && y().gui.chat.logMsg(n, v.PSEUDO_CHANNEL_FIGHT_LOG), x.length) {
  var s = x.shift();
  d(s[0], s[1]);
}
for (var i in e) {
  if (e.hasOwnProperty(i)) {
    var n,
      o,
      a,
      s,
      l,
      c,
      d = e[i],
      u = d.name,
      h = d.lostSP,
      p = d.lostHP,
      m = d.gainHP;
    if (h.values.length) {
      for (a = 0, s = "", o = 0; o < h.values.length; o++) {
        l = h.values[o], c = h.actionIds[o], s += o > 0 ? " + " : "", s += r(Math.abs(l), [c]), a += l;
      }
      n = C("ui.fight.lostShieldPoints", u, r(a, h.actionIds)), h.values.length > 1 && (n += " (" + s + ")"), t = t + ("" !== t ? "\n" : "") + n;
    }
    if (p.values.length || m.values.length) {
      for (a = 0, s = "", o = 0; o < m.values.length; o++) {
        l = m.values[o], s += o > 0 ? " + " + l : l, a += l;
      }
      for (o = 0; o < p.values.length; o++) {
        l = p.values[o], c = p.actionIds[o];
        var f = m.values.length ? " - " : " + ";
        s += m.values.length + o > 0 ? f : "", s += r(Math.abs(l), [c]), a += l;
      }
      if (a >= 0) {
        n = C("ui.fight.lifeGain", u, a);
      } else {
        var g = p.dead ? "ui.fight.lifeLossAndDeath" : "ui.fight.lifeLoss";
        n = C(g, u, r(a, p.actionIds));
      }
      p.values.length + m.values.length > 1 && (n += " (" + s + ")"), t = t + ("" !== t ? "\n" : "") + n;
    }
  }
}
if (e.hasOwnProperty(i)) {
  var n,
    o,
    a,
    s,
    l,
    c,
    d = e[i],
    u = d.name,
    h = d.lostSP,
    p = d.lostHP,
    m = d.gainHP;
  if (h.values.length) {
    for (a = 0, s = "", o = 0; o < h.values.length; o++) {
      l = h.values[o], c = h.actionIds[o], s += o > 0 ? " + " : "", s += r(Math.abs(l), [c]), a += l;
    }
    n = C("ui.fight.lostShieldPoints", u, r(a, h.actionIds)), h.values.length > 1 && (n += " (" + s + ")"), t = t + ("" !== t ? "\n" : "") + n;
  }
  if (p.values.length || m.values.length) {
    for (a = 0, s = "", o = 0; o < m.values.length; o++) {
      l = m.values[o], s += o > 0 ? " + " + l : l, a += l;
    }
    for (o = 0; o < p.values.length; o++) {
      l = p.values[o], c = p.actionIds[o];
      var f = m.values.length ? " - " : " + ";
      s += m.values.length + o > 0 ? f : "", s += r(Math.abs(l), [c]), a += l;
    }
    if (a >= 0) {
      n = C("ui.fight.lifeGain", u, a);
    } else {
      var g = p.dead ? "ui.fight.lifeLossAndDeath" : "ui.fight.lifeLoss";
      n = C(g, u, r(a, p.actionIds));
    }
    p.values.length + m.values.length > 1 && (n += " (" + s + ")"), t = t + ("" !== t ? "\n" : "") + n;
  }
}
if (h.values.length) {
  for (a = 0, s = "", o = 0; o < h.values.length; o++) {
    l = h.values[o], c = h.actionIds[o], s += o > 0 ? " + " : "", s += r(Math.abs(l), [c]), a += l;
  }
  n = C("ui.fight.lostShieldPoints", u, r(a, h.actionIds)), h.values.length > 1 && (n += " (" + s + ")"), t = t + ("" !== t ? "\n" : "") + n;
}
for (a = 0, s = "", o = 0; o < h.values.length; o++) {
  l = h.values[o], c = h.actionIds[o], s += o > 0 ? " + " : "", s += r(Math.abs(l), [c]), a += l;
}
if (p.values.length || m.values.length) {
  for (a = 0, s = "", o = 0; o < m.values.length; o++) {
    l = m.values[o], s += o > 0 ? " + " + l : l, a += l;
  }
  for (o = 0; o < p.values.length; o++) {
    l = p.values[o], c = p.actionIds[o];
    var f = m.values.length ? " - " : " + ";
    s += m.values.length + o > 0 ? f : "", s += r(Math.abs(l), [c]), a += l;
  }
  if (a >= 0) {
    n = C("ui.fight.lifeGain", u, a);
  } else {
    var g = p.dead ? "ui.fight.lifeLossAndDeath" : "ui.fight.lifeLoss";
    n = C(g, u, r(a, p.actionIds));
  }
  p.values.length + m.values.length > 1 && (n += " (" + s + ")"), t = t + ("" !== t ? "\n" : "") + n;
}
for (a = 0, s = "", o = 0; o < m.values.length; o++) {
  l = m.values[o], s += o > 0 ? " + " + l : l, a += l;
}
for (o = 0; o < p.values.length; o++) {
  l = p.values[o], c = p.actionIds[o];
  var f = m.values.length ? " - " : " + ";
  s += m.values.length + o > 0 ? f : "", s += r(Math.abs(l), [c]), a += l;
}
if (a >= 0) {
  n = C("ui.fight.lifeGain", u, a);
} else {
  var g = p.dead ? "ui.fight.lifeLossAndDeath" : "ui.fight.lifeLoss";
  n = C(g, u, r(a, p.actionIds));
}
if (e) {
  return console.error("fightEvents#send", e);
}
if (a) {
  return o && o(a);
}
if (u.forceMinMax) {
  var h = t && t.spellRank && t.spellRank.id,
    p = t && t.spell && t.spell.id;
  n(i, h, p) && (s._forceMinMax(r, l, c), s._effectEnrichment());
}
if (0 !== t.length) {
  for (var i = 0; i < t.length; i++) {
    for (var n = t[i], o = n.statName, a = 0; a < this.buffs.length; a++) {
      var s = this.buffs[a];
      s.id === n.id && o && e.stats.hasOwnProperty(o) && s.effect.effect.active && ("actionPoints" === o && (e.stats.maxActionPoints -= n.getDelta()), e.stats[o] -= n.getDelta());
    }
  }
}
for (var i = 0; i < t.length; i++) {
  for (var n = t[i], o = n.statName, a = 0; a < this.buffs.length; a++) {
    var s = this.buffs[a];
    s.id === n.id && o && e.stats.hasOwnProperty(o) && s.effect.effect.active && ("actionPoints" === o && (e.stats.maxActionPoints -= n.getDelta()), e.stats[o] -= n.getDelta());
  }
}
for (var n = t[i], o = n.statName, a = 0; a < this.buffs.length; a++) {
  var s = this.buffs[a];
  s.id === n.id && o && e.stats.hasOwnProperty(o) && s.effect.effect.active && ("actionPoints" === o && (e.stats.maxActionPoints -= n.getDelta()), e.stats[o] -= n.getDelta());
}
if (this.picto) {
  var e = this.getAvailableWidth();
  this.picto.fighterTimeBar.setStyles({
    width: e + "px"
  }), this.picto.fighterIllus.setStyles({
    width: e + "px"
  }), this.picto.fighterIllus.resize(), this.isBoss && (this.picto.fighterTimeBar.addClassNames("boss"), this.picto.fighterIcon.addClassNames("bossIcon"));
}
if (this.data.stats) {
  e = Math.max(0, e);
  var i = this.data.stats;
  i.lifePoints = e;
  var n = this.id === t.controlledCharacterId;
  if (n) {
    var o = t.getControlledCharacter();
    t.setCharacteristic(o, "lifePoints", i.lifePoints), t.setCharacteristic(o, "maxLifePoints", i.maxLifePoints);
  }
  this.picto && this.picto.fighterHPValue.setStyle("height", Math.min(e / i.maxLifePoints * 100, 100) + "%");
}
if (n) {
  var o = t.getControlledCharacter();
  t.setCharacteristic(o, "lifePoints", i.lifePoints), t.setCharacteristic(o, "maxLifePoints", i.maxLifePoints);
}
if (this.data.stats) {
  e = Math.max(0, e);
  var t = this.data.stats;
  if (t.shieldPoints = e, this.picto) {
    var i = 0 !== t.shieldPoints;
    if (i) {
      var n = Math.max(t.maxLifePoints, e);
      this.picto.fighterShieldValue.setStyle("height", e / n * 100 + "%");
    }
    this.isShieldBarVisible !== i && (this.isShieldBarVisible = i, this.picto.fighterShieldBar.toggleDisplay(i), this.resizeFighterIllustration());
  }
  window.gui.fightManager.emit("shieldPointsUpdated", this.id, e);
}
if (t.shieldPoints = e, this.picto) {
  var i = 0 !== t.shieldPoints;
  if (i) {
    var n = Math.max(t.maxLifePoints, e);
    this.picto.fighterShieldValue.setStyle("height", e / n * 100 + "%");
  }
  this.isShieldBarVisible !== i && (this.isShieldBarVisible = i, this.picto.fighterShieldBar.toggleDisplay(i), this.resizeFighterIllustration());
}
if (i) {
  var n = Math.max(t.maxLifePoints, e);
  this.picto.fighterShieldValue.setStyle("height", e / n * 100 + "%");
}
if (this.picto) {
  var t = e || "";
  this.picto.fighterNumber.setText(t), r.orderFighters && window.actorManager.turnNumberOn(this.id, t);
}
for (var i, n = 0, o = this.buffs.length; n < o; n++) {
  if (e.equals(this.buffs[n])) {
    i = this.buffs[n];
    break;
  }
}
if (e.equals(this.buffs[n])) {
  i = this.buffs[n];
  break;
}
if (t === -1) {
  return !1;
}
for (var t = 0; t < this.buffs.length; t++) {
  var i = this.buffs[t];
  if (e === i.id) {
    return i;
  }
}
if (e === i.id) {
  return i;
}
for (var t = 0; t < this.buffs.length; t++) {
  var i = this.buffs[t];
  if (e === i.id) {
    return t;
  }
  if (i.stack) {
    for (var n = 0; n < i.stack.length; n++) {
      if (e === i.stack[n].id) {
        return t;
      }
    }
  }
}
if (e === i.id) {
  return t;
}
if (i.stack) {
  for (var n = 0; n < i.stack.length; n++) {
    if (e === i.stack[n].id) {
      return t;
    }
  }
}
for (var n = 0; n < i.stack.length; n++) {
  if (e === i.stack[n].id) {
    return t;
  }
}
if (e === i.stack[n].id) {
  return t;
}
for (var n = [], o = 0; o < this.buffs.length; o++) {
  var a = this.buffs[o];
  a.canBeDispell(e, Number.MIN_VALUE, i) ? (window.gui.fightManager.emit("BuffRemove", a, this), a.remove()) : n.push(a);
}
for (o = 0; o < this.buffs.length; o++) {
  var r = this.buffs[o];
  e === r.castingSpell.spell.id && r.canBeDispell(t, Number.MIN_VALUE, n) ? (r.remove(), a.push(r)) : s.push(r);
}
for (this.buffs = s, o = 0; o < a.length; o++) {
  window.gui.fightManager.emit("BuffRemove", a[o], this);
}
if (o === -1) {
  return console.warn("Buff id", e, "does not exist");
}
for (var t in this.buffs) {
  var i = this.buffs[t];
  if (1 === i.duration) {
    for (var n = !1, o = 0, a = !1, s = 0; s < e.turnsList.length; s++) {
      var r = e.turnsList[s];
      r === i.aliveSource && (a = !0), r === e.currentFighterId && (o = 1), 1 === o && (a && r !== e.currentFighterId ? (o = 2, n = !0) : r === this.id && r !== e.currentFighterId && (o = 2, n = !1));
    }
    if (n) {
      if (i instanceof c.StatBuff && this.id !== window.gui.playerData.characters.mainCharacterId && i.statName) {
        var l = e.getFighter(i.targetId);
        if (!l) {
          return console.error("Mark finishing buffs failed, fighter does not exist");
        }
        l._finishingBuffs.push(i);
      }
      i.disable();
    }
  }
}
if (1 === i.duration) {
  for (var n = !1, o = 0, a = !1, s = 0; s < e.turnsList.length; s++) {
    var r = e.turnsList[s];
    r === i.aliveSource && (a = !0), r === e.currentFighterId && (o = 1), 1 === o && (a && r !== e.currentFighterId ? (o = 2, n = !0) : r === this.id && r !== e.currentFighterId && (o = 2, n = !1));
  }
  if (n) {
    if (i instanceof c.StatBuff && this.id !== window.gui.playerData.characters.mainCharacterId && i.statName) {
      var l = e.getFighter(i.targetId);
      if (!l) {
        return console.error("Mark finishing buffs failed, fighter does not exist");
      }
      l._finishingBuffs.push(i);
    }
    i.disable();
  }
}
for (var n = !1, o = 0, a = !1, s = 0; s < e.turnsList.length; s++) {
  var r = e.turnsList[s];
  r === i.aliveSource && (a = !0), r === e.currentFighterId && (o = 1), 1 === o && (a && r !== e.currentFighterId ? (o = 2, n = !0) : r === this.id && r !== e.currentFighterId && (o = 2, n = !1));
}
if (n) {
  if (i instanceof c.StatBuff && this.id !== window.gui.playerData.characters.mainCharacterId && i.statName) {
    var l = e.getFighter(i.targetId);
    if (!l) {
      return console.error("Mark finishing buffs failed, fighter does not exist");
    }
    l._finishingBuffs.push(i);
  }
  i.disable();
}
if (i instanceof c.StatBuff && this.id !== window.gui.playerData.characters.mainCharacterId && i.statName) {
  var l = e.getFighter(i.targetId);
  if (!l) {
    return console.error("Mark finishing buffs failed, fighter does not exist");
  }
  l._finishingBuffs.push(i);
}
if (!l) {
  return console.error("Mark finishing buffs failed, fighter does not exist");
}
for (var e in this.buffs) {
  this.buffs[e].enable();
}
if (t = t || {}, null === this.entity) {
  this.entity = new c({
    scene: g || o()
  });
  var a = t.showSubentities;
  this.entity.showSubentities = null === a || void 0 === a || a;
}
if (this.canvasInitialized && this.entity) {
  var t = this.entity.direction;
  return this.only4Directions ? (0 === (1 & t) && (t += 1), t += e ? 2 : -2, t > 7 && (t = 1), t < 0 && (t = 7)) : (t += e ? 1 : -1, t > 7 && (t = 0), t < 0 && (t = 7)), this.entity.direction = t, this._render(), t;
}
if (this.rootElement && p(this)) {
  var e = this.canvas,
    t = parseInt(this.getComputedStyle("width"), 10),
    i = parseInt(this.getComputedStyle("height"), 10),
    n = e.width,
    o = e.height,
    a = t * d.PIXEL_RATIO,
    s = i * d.PIXEL_RATIO;
  0 !== a && 0 !== s && (this.renderingRequired || a !== n || s !== o) && (e.width = a, e.height = s, e.style.width = t + "px", e.style.height = i + "px", this._render());
}
if ("cover" === e) {
  s = this._scale = Math.min(this._scale, n / Math.abs(a[0]), n / Math.abs(a[1]), o / Math.abs(a[2]), o / Math.abs(a[3]));
} else if ("width" === e) {
  s = this._scale = Math.min(this._scale, t / (a[1] - a[0]));
} else if ("height" === e) {
  s = this._scale = Math.min(this._scale, i / (a[2] - a[3]));
} else if ("fitin" === e) {
  s = this._scale = Math.min(this._scale, t / (a[1] - a[0]), i / (a[2] - a[3])), s = Math.min(s, y);
} else if ("%" === e[e.length - 1]) {
  var r = parseFloat(e);
  isNaN(r) ? r = this._scale : r *= .01;
  var l = t / (a[1] - a[0]),
    c = i / (a[2] - a[3]),
    d = l > c ? c : l;
  s = this._scale = r * d, s = Math.min(s, y);
}
if ("width" === e) {
  s = this._scale = Math.min(this._scale, t / (a[1] - a[0]));
} else if ("height" === e) {
  s = this._scale = Math.min(this._scale, i / (a[2] - a[3]));
} else if ("fitin" === e) {
  s = this._scale = Math.min(this._scale, t / (a[1] - a[0]), i / (a[2] - a[3])), s = Math.min(s, y);
} else if ("%" === e[e.length - 1]) {
  var r = parseFloat(e);
  isNaN(r) ? r = this._scale : r *= .01;
  var l = t / (a[1] - a[0]),
    c = i / (a[2] - a[3]),
    d = l > c ? c : l;
  s = this._scale = r * d, s = Math.min(s, y);
}
if ("height" === e) {
  s = this._scale = Math.min(this._scale, i / (a[2] - a[3]));
} else if ("fitin" === e) {
  s = this._scale = Math.min(this._scale, t / (a[1] - a[0]), i / (a[2] - a[3])), s = Math.min(s, y);
} else if ("%" === e[e.length - 1]) {
  var r = parseFloat(e);
  isNaN(r) ? r = this._scale : r *= .01;
  var l = t / (a[1] - a[0]),
    c = i / (a[2] - a[3]),
    d = l > c ? c : l;
  s = this._scale = r * d, s = Math.min(s, y);
}
if ("fitin" === e) {
  s = this._scale = Math.min(this._scale, t / (a[1] - a[0]), i / (a[2] - a[3])), s = Math.min(s, y);
} else if ("%" === e[e.length - 1]) {
  var r = parseFloat(e);
  isNaN(r) ? r = this._scale : r *= .01;
  var l = t / (a[1] - a[0]),
    c = i / (a[2] - a[3]),
    d = l > c ? c : l;
  s = this._scale = r * d, s = Math.min(s, y);
}
if ("%" === e[e.length - 1]) {
  var r = parseFloat(e);
  isNaN(r) ? r = this._scale : r *= .01;
  var l = t / (a[1] - a[0]),
    c = i / (a[2] - a[3]),
    d = l > c ? c : l;
  s = this._scale = r * d, s = Math.min(s, y);
}
if (!this.canvasInitialized) {
  return void (this.renderingRequired = !0);
}
if (f && this.entity) {
  var e = this.canvas,
    t = e.width,
    i = e.height,
    n = f.gl,
    o = this.entity,
    a = this.scale;
  if (0 === t || 0 === i) {
    var s = this;
    return void window.setTimeout(function () {
      if (s.resize(), !e.rootElement || 0 === e.width || 0 === e.height) {
        return console.warn("[CharacterDisplay._render] Character display size must be greater than zero.");
      }
    }, 0);
  }
  f.clear(), o.x = 0, o.y = 0, o.scaleX = d.PIXEL_RATIO, o.scaleY = -d.PIXEL_RATIO, o.updateAnimation(), o.refreshAnimation();
  var r = o.bbox;
  if (r[1] < r[0] || r[2] < r[3]) {
    var l = o.animManager.template.id,
      c = o.animSymbol.base;
    if ("761/motion" === l) {
      return;
    }
    return void console.error(new Error("Entity animation frame is empty, template:" + l + ", animation:" + c));
  }
  var u = .5 * t,
    h = .85 * i;
  "string" == typeof a && (a = this._computeScale(a, t, i, u, h, r)), o.scaleX *= a, o.scaleY *= a;
  var p = Math.floor(r[0] * a),
    m = Math.ceil(r[1] * a),
    g = -Math.floor(r[2] * a),
    _ = -Math.ceil(r[3] * a),
    y = m - p,
    w = _ - g;
  if (0 === y || 0 === w) {
    return console.warn("[CharacterDisplay._render] Character to render is of size 0.");
  }
  o.x = -p, o.y = _, o.render(), o.animManager.releaseBuffer();
  var b = new window.Uint8Array(y * w * 4);
  n.readPixels(0, v - w, y, w, n.RGBA, n.UNSIGNED_BYTE, b);
  for (var M = this.ctx.createImageData(y, w), T = M.data, C = 0; C < b.length; C++) {
    T[C] = b[C];
  }
  var I, A;
  switch (this.horizontalAlign) {
    case "left":
      I = 0;
      break;
    case "center":
      I = (t - y) / 2;
      break;
    case "right":
      I = t - y;
      break;
    default:
      I = u + p;
  }
  switch (this.verticalAlign) {
    case "top":
      A = 0;
      break;
    case "center":
      A = (i - w) / 2;
      break;
    case "bottom":
      A = i - w;
      break;
    default:
      A = h + g;
  }
  this.ctx.clearRect(0, 0, t, i), this.ctx.putImageData(M, I, A);
}
if (0 === t || 0 === i) {
  var s = this;
  return void window.setTimeout(function () {
    if (s.resize(), !e.rootElement || 0 === e.width || 0 === e.height) {
      return console.warn("[CharacterDisplay._render] Character display size must be greater than zero.");
    }
  }, 0);
}
if (s.resize(), !e.rootElement || 0 === e.width || 0 === e.height) {
  return console.warn("[CharacterDisplay._render] Character display size must be greater than zero.");
}
if (r[1] < r[0] || r[2] < r[3]) {
  var l = o.animManager.template.id,
    c = o.animSymbol.base;
  if ("761/motion" === l) {
    return;
  }
  return void console.error(new Error("Entity animation frame is empty, template:" + l + ", animation:" + c));
}
if ("761/motion" === l) {
  return;
}
if (0 === y || 0 === w) {
  return console.warn("[CharacterDisplay._render] Character to render is of size 0.");
}
for (var M = this.ctx.createImageData(y, w), T = M.data, C = 0; C < b.length; C++) {
  T[C] = b[C];
}
if (!this.showSubentities) {
  return i && i();
}
if (!n) {
  return console.error(new Error("Sub-entity has no look: " + Object.keys(e).join(";"))), i && i();
}
if (a += 1, a === o) {
  return i && i();
}
if (!e) {
  return i && i();
}
for (var o = e.length + 1, a = 0, s = 0; s < e.length; s += 1) {
  this.addSubentity(e[s], t, n);
}
if (!e) {
  return console.error(o), c();
}
for (var h = e.scales[0], p = e.skins, m = u && n.look.bonesId === e.bonesId && n.look.skins.length === p.length && n.look.scales[0] === h, f = 0; m && f < p.length; f += 1) {
  m = m && p[f] === n.look.skins[f];
}
if (m) {
  return n.animManager.setTints(g), n.animManager.cleanupAnimationsAndRemoveSubentities(), void n.addSubentities(e.subentities, t, c);
}
if (u && n.isDisplayed && !t.noSmokeAnimation) {
  var _ = new r({
    x: n.x,
    y: n.y,
    position: n.position + 1,
    scene: n.scene
  });
  l.loadAnimationManager(_, "bone", "1165/FX", function (e) {
    e.assignSymbol({
      base: "FX",
      direction: 0
    }, !1, function () {
      _.remove();
    });
  });
}
if (!e) {
  return console.error(new Error("look is missing")), null;
}
if (!t) {
  return e;
}
for (var i = p[t.bonesId] || t.bonesId, o = 0; o < t.skins.length; o++) {
  var a = t.skins[o];
  if (m[a]) {
    i = m[a];
    break;
  }
}
if (m[a]) {
  i = m[a];
  break;
}
if (!e) {
  return console.error(new Error("look is missing")), null;
}
for (var t = e.subentities || [], i = 0; i < t.length; i += 1) {
  var n = t[i];
  if (n.bindingPointCategory === h && 0 === n.bindingPointIndex) {
    return n.subEntityLook;
  }
}
if (n.bindingPointCategory === h && 0 === n.bindingPointIndex) {
  return n.subEntityLook;
}
if (this.isOutdated = !1, this.isDisplayed === !1) {
  return void 0 !== e && e.push(this.bbox), void (this.bbox = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)]);
}
if (0 === this._rotation) {
  this.bbox = [this._x + this._scaleX * (this._scaleX > 0 ? i[0] : i[1]), this._x + this._scaleX * (this._scaleX > 0 ? i[1] : i[0]), this._y + this._scaleY * i[2], this._y + this._scaleY * i[3]];
} else {
  var n = Math.cos(this._rotation),
    o = Math.sin(this._rotation),
    a = this._scaleX * i[0],
    s = this._scaleX * i[1],
    r = this._scaleY * i[2],
    l = this._scaleY * i[3],
    c = n * a - o * r,
    d = o * a + n * r,
    u = n * s - o * r,
    h = o * s + n * r,
    p = n * a - o * l,
    m = o * a + n * l,
    f = n * s - o * l,
    g = o * s + n * l;
  this.bbox = [this._x + Math.min(c, u, p, f), this._x + Math.max(c, u, p, f), this._y + Math.min(d, h, m, g), this._y + Math.max(d, h, m, g)];
}
if (this.hide(), this.isWhiteListed === !1) {
  if (this._cleared === !0) {
    return;
  }
  this._cleared = !0, this.clear();
}
if (this._cleared === !0) {
  return;
}
if (this.isOutdated = !1, this.isDisplayed === !1) {
  return void 0 !== e && e.push(this.bbox), void (this.bbox = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)]);
}
if (0 === this._rotation) {
  this.bbox = [this._x + this._scaleX * (this._scaleX > 0 ? i[0] : i[1]), this._x + this._scaleX * (this._scaleX > 0 ? i[1] : i[0]), this._y + this._scaleY * i[2], this._y + this._scaleY * i[3]];
} else {
  var n = Math.cos(this._rotation),
    o = Math.sin(this._rotation),
    a = this._scaleX * i[0],
    s = this._scaleX * i[1],
    r = this._scaleY * i[2],
    l = this._scaleY * i[3],
    c = n * a - o * r,
    d = o * a + n * r,
    u = n * s - o * r,
    h = o * s + n * r,
    p = n * a - o * l,
    m = o * a + n * l,
    f = n * s - o * l,
    g = o * s + n * l;
  this.bbox = [this._x + Math.min(c, u, p, f), this._x + Math.max(c, u, p, f), this._y + Math.min(d, h, m, g), this._y + Math.max(d, h, m, g)];
}
for (var e = 0; e < this.subentities.length; e++) {
  this.subentities[e].animManager.cleanupAnimations();
}
for (var e = 0; e < this.subentities.length; e++) {
  this.subentities[e].animManager.cleanupAnimations();
}
for (var l = n.length - 1, d = 2; d <= l; d += 1) {
  var u = n[d];
  u ? s.merge(u, !0) : console.error("onTemplatesLoaded: skinTemplate is missing on index", d, "of", n.length, "for skinIds", i, "and boneId", t, "stack:", g);
}
for (var h = i.length, p = 0; p < h; p += 1) {
  u.push(new n("skin", i[p], l.skinType));
}
if (m += 1, m === f) {
  for (var e = 0; e < h; e += 1) {
    var t = u[e],
      i = d[e];
    p && i.addSubentity(p), c.addSubentity({
      animManager: i,
      bindingPoint: "carried_" + t.bindingPointCategory + "_" + t.bindingPointIndex,
      symbolModifier: l[t.bindingPointCategory],
      bindingPointCategory: t.bindingPointCategory
    });
  }
  return s & s(c);
}
for (var e = 0; e < h; e += 1) {
  var t = u[e],
    i = d[e];
  p && i.addSubentity(p), c.addSubentity({
    animManager: i,
    bindingPoint: "carried_" + t.bindingPointCategory + "_" + t.bindingPointIndex,
    symbolModifier: l[t.bindingPointCategory],
    bindingPointCategory: t.bindingPointCategory
  });
}
for (var w = 0; w < h; w += 1) {
  o(e, u[w], w, d, n, r);
}
if (t === s.EMPTY_JSON) {
  return w;
}
for (var p = Object.keys(o), m = 0; m < p.length; m += 1) {
  var g = p[m],
    _ = o[g];
  _.isGraphic && (c[g] = new d(_, a, i)), _.isAnim && (c[g] = new r(_, a, i));
}
if (m = i, T += 1, T === C) {
  I = o(M, m, p);
  var s = a(e, t, p, I);
  return n && n(s);
}
if (p = i, T += 1, T === C) {
  void 0 === I && (I = o(M, m, p));
  var s = a(e, t, p, I);
  return n && n(s);
}
if (g.isMissingTemplates(t)) {
  var h = s.getEmptyTexture();
  return n && n(a(e, t, h, w));
}
if (void 0 === r) {
  h[s] = i;
} else {
  var l = f[s],
    c = o(l, i, r);
  u[s] = c;
  var m = e[s];
  p[s] = a(m.type, m.id, r, c);
}
if (C += 1, C === I) {
  return t && t(p);
}
if (void 0 === l) {
  s = u[n], void 0 !== s && (r = e[n], p[n] = a(r.type, r.id, i, s));
} else {
  var c = f[n];
  s = o(c, l, i), r = e[n], p[n] = a(r.type, r.id, i, s);
}
if (C += 1, C === I) {
  return t && t(p);
}
for (var d = [], u = [], h = [], p = [], m = [], f = [], b = [], M = [], T = e.length, C = 0, I = 0, A = 0; A < T; A += 1) {
  var S = e[A],
    E = S.type,
    N = S.id;
  if (g.isMissingTemplates(N)) {
    var x = i.getEmptyTexture();
    p[A] = a(E, N, x, w);
  } else {
    var L = _[E] + S.usage + N,
      O = L + ".png",
      R = L + ".json";
    m.push(O), f.push(R), I += 1;
    var D = y.holdElement(R);
    void 0 === D ? (b.push(R), M.push(A), I += 1) : u[A] = D;
  }
}
if (g.isMissingTemplates(N)) {
  var x = i.getEmptyTexture();
  p[A] = a(E, N, x, w);
} else {
  var L = _[E] + S.usage + N,
    O = L + ".png",
    R = L + ".json";
  m.push(O), f.push(R), I += 1;
  var D = y.holdElement(R);
  void 0 === D ? (b.push(R), M.push(A), I += 1) : u[A] = D;
}
for (var e = this.archives.first; null !== e && this.memoryUsed > this.memoryAllocated;) {
  var t = e.object;
  e = e.next, t.nLocks <= 0 && this._removeElement(t);
}
if (void 0 !== l) {
  if (!a) {
    return l.type !== s[o] && console.warn("[Cache3State.addElement] Trying to change type of an exisiting element", i), l._hold();
  }
  if (l.isFree() === !1) {
    return console.warn("[Cache3State.addElement] Trying to replace a locked element", i), l._hold();
  }
  this._removeElement(l);
}
if (!a) {
  return l.type !== s[o] && console.warn("[Cache3State.addElement] Trying to change type of an exisiting element", i), l._hold();
}
if (l.isFree() === !1) {
  return console.warn("[Cache3State.addElement] Trying to replace a locked element", i), l._hold();
}
if (void 0 !== t) {
  return t._hold();
}
if (void 0 !== t) {
  return t;
}
for (var t = this.first; null !== t; t = t.next) {
  if (t.object === e) {
    return this.removeByReference(t), !0;
  }
}
if (t.object === e) {
  return this.removeByReference(t), !0;
}
for (var e = this.first; null !== e; e = e.next) {
  e.container = null;
}
for (var i = this.first; i; i = i.next) {
  e(i.object, t);
}
for (var e = [], t = this.first; null !== t; t = t.next) {
  e.push(t.object);
}
for (var l = [], c = [], d = e.length, u = 0; u < d; u += 1) {
  var h = e[u],
    p = a.holdTexture(h);
  p ? t(p, u) : (l.push(h), c.push(u));
}
for (var o = 0, a = 0; a < n.length; a += 1) {
  var s = n[a];
  this.children.push(new i(s)), o < s.frames[1] && (o = s.frames[1]);
}
for (var a = 0; a < n.length; a += 1) {
  this.frames.push(new o(n[a].position, t, i));
}
for (var e = Object.keys(this.mergedTemplates), t = 0; t < e.length; t += 1) {
  this.id += "#" + this.mergedTemplates[e[t]].id;
}
for (e = Object.keys(this.parentTemplates), t = 0; t < e.length; t += 1) {
  this.parentTemplates[e[t]]._updateId();
}
for (var e = Object.keys(this.mergedTemplates), t = 0; t < e.length; t += 1) {
  this.mergedTemplates[e[t]].clear();
}
for (var a in o) {
  var s = o[a],
    r = this.externalSymbols[s.className];
  r || (r = new l(), this.externalSymbols[s.className] = r), n[s.className] = t ? r.addBack(s) : r.addFront(s);
}
if (i) {
  for (var n in i) {
    var o = this.externalSymbols[n];
    o.removeByReference(i[n]), 0 === o.length && delete this.externalSymbols[n];
  }
  delete e.parentTemplates[this.name], delete this.mergedTemplates[t], delete this.mergedSymbols[t], e.clear(), this._updateId();
}
for (var n in i) {
  var o = this.externalSymbols[n];
  o.removeByReference(i[n]), 0 === o.length && delete this.externalSymbols[n];
}
for (var n = Object.keys(this.symbols), o = 0; o < n.length; o += 1) {
  var a = this.symbols[n[o]];
  a.className && (this.exposedSymbols[a.className] = a);
}
if (void 0 === i) {
  return [];
}
if (i.className) {
  if (d[i.className]) {
    var W = d[i.className];
    W.mirrored && (S = -S, E = -E), f = W.prepareCurrentAnimationFrame();
    var G = [],
      U = f.length;
    for (p = 0; p < U; p += 1) {
      m = f[p], G.push(m), m.isMaskTag || (h = m.color, m.color = [h[0] * R, h[1] * D, h[2] * P, h[3] * B, h[4] * R + k, h[5] * D + F, h[6] * P + H, h[7] * B + z], u = m.vertexPos, g = u[0], _ = u[1], v = u[2], y = u[3], w = u[4], b = u[5], M = u[6], T = u[7], m.vertexPos = [S * g + N * _ + L, E * g + x * _ + O, S * v + N * y + L, E * v + x * y + O, S * w + N * b + L, E * w + x * b + O, S * M + N * T + L, E * M + x * T + O]);
    }
    return G;
  }
  var q = this.externalSymbols[i.className];
  q && q.length > 0 && (i = q.last.object, C = i.animationData);
}
if (d[i.className]) {
  var W = d[i.className];
  W.mirrored && (S = -S, E = -E), f = W.prepareCurrentAnimationFrame();
  var G = [],
    U = f.length;
  for (p = 0; p < U; p += 1) {
    m = f[p], G.push(m), m.isMaskTag || (h = m.color, m.color = [h[0] * R, h[1] * D, h[2] * P, h[3] * B, h[4] * R + k, h[5] * D + F, h[6] * P + H, h[7] * B + z], u = m.vertexPos, g = u[0], _ = u[1], v = u[2], y = u[3], w = u[4], b = u[5], M = u[6], T = u[7], m.vertexPos = [S * g + N * _ + L, E * g + x * _ + O, S * v + N * y + L, E * v + x * y + O, S * w + N * b + L, E * w + x * b + O, S * M + N * T + L, E * M + x * T + O]);
  }
  return G;
}
for (p = 0; p < U; p += 1) {
  m = f[p], G.push(m), m.isMaskTag || (h = m.color, m.color = [h[0] * R, h[1] * D, h[2] * P, h[3] * B, h[4] * R + k, h[5] * D + F, h[6] * P + H, h[7] * B + z], u = m.vertexPos, g = u[0], _ = u[1], v = u[2], y = u[3], w = u[4], b = u[5], M = u[6], T = u[7], m.vertexPos = [S * g + N * _ + L, E * g + x * _ + O, S * v + N * y + L, E * v + x * y + O, S * w + N * b + L, E * w + x * b + O, S * M + N * T + L, E * M + x * T + O]);
}
if (S *= l, E *= c, N *= l, x *= c, i.isGraphic) {
  if (h = [R, D, P, B, k, F, H, z], void 0 !== i.tint) {
    var Y = n[i.tint] || {
      r: 1,
      g: 1,
      b: 1
    };
    h[0] *= Y.r, h[1] *= Y.g, h[2] *= Y.b;
  }
  var j = i.vertexPos;
  return g = j[0], _ = j[1], v = j[2], y = j[3], u = [S * g + N * _ + L, E * g + x * _ + O, S * v + N * _ + L, E * v + x * _ + O, S * g + N * y + L, E * g + x * y + O, S * v + N * y + L, E * v + x * y + O], [new o(i.texture, u, i.textureCoord, h)];
}
if (h = [R, D, P, B, k, F, H, z], void 0 !== i.tint) {
  var Y = n[i.tint] || {
    r: 1,
    g: 1,
    b: 1
  };
  h[0] *= Y.r, h[1] *= Y.g, h[2] *= Y.b;
}
if (i.isAnim) {
  t %= i.nbFrames;
  for (var V, X, Q, K, J, Z, $, ee, te = [], ie = i.children, ne = ie.length - 1; ne >= 0; ne -= 1) {
    var oe = ie[ne];
    if (!(t < oe.frames[0] || t > oe.frames[1])) {
      if (oe.maskEnd) {
        te.push(new r(oe.id));
      } else {
        for (oe.maskStart && te.push(new a(oe.id)), f = this.createSprites(oe, t - oe.frames[0], C.symbols[oe.id], n, 1, 1, d), p = 0; p < f.length; p += 1) {
          m = f[p], te.push(m), m.isMaskTag || (u = m.vertexPos, V = u[0], X = u[1], Q = u[2], K = u[3], J = u[4], Z = u[5], $ = u[6], ee = u[7], u[0] = S * V + N * X + L, u[1] = E * V + x * X + O, u[2] = S * Q + N * K + L, u[3] = E * Q + x * K + O, u[4] = S * J + N * Z + L, u[5] = E * J + x * Z + O, u[6] = S * $ + N * ee + L, u[7] = E * $ + x * ee + O, h = m.color, h[0] *= R, h[1] *= D, h[2] *= P, h[3] *= B, h[4] = h[4] * R + k, h[5] = h[5] * D + F, h[6] = h[6] * P + H, h[7] = h[7] * B + z);
        }
        oe.maskStart && te.push(new s(oe.id));
      }
    }
  }
  return te;
}
for (var V, X, Q, K, J, Z, $, ee, te = [], ie = i.children, ne = ie.length - 1; ne >= 0; ne -= 1) {
  var oe = ie[ne];
  if (!(t < oe.frames[0] || t > oe.frames[1])) {
    if (oe.maskEnd) {
      te.push(new r(oe.id));
    } else {
      for (oe.maskStart && te.push(new a(oe.id)), f = this.createSprites(oe, t - oe.frames[0], C.symbols[oe.id], n, 1, 1, d), p = 0; p < f.length; p += 1) {
        m = f[p], te.push(m), m.isMaskTag || (u = m.vertexPos, V = u[0], X = u[1], Q = u[2], K = u[3], J = u[4], Z = u[5], $ = u[6], ee = u[7], u[0] = S * V + N * X + L, u[1] = E * V + x * X + O, u[2] = S * Q + N * K + L, u[3] = E * Q + x * K + O, u[4] = S * J + N * Z + L, u[5] = E * J + x * Z + O, u[6] = S * $ + N * ee + L, u[7] = E * $ + x * ee + O, h = m.color, h[0] *= R, h[1] *= D, h[2] *= P, h[3] *= B, h[4] = h[4] * R + k, h[5] = h[5] * D + F, h[6] = h[6] * P + H, h[7] = h[7] * B + z);
      }
      oe.maskStart && te.push(new s(oe.id));
    }
  }
}
if (!(t < oe.frames[0] || t > oe.frames[1])) {
  if (oe.maskEnd) {
    te.push(new r(oe.id));
  } else {
    for (oe.maskStart && te.push(new a(oe.id)), f = this.createSprites(oe, t - oe.frames[0], C.symbols[oe.id], n, 1, 1, d), p = 0; p < f.length; p += 1) {
      m = f[p], te.push(m), m.isMaskTag || (u = m.vertexPos, V = u[0], X = u[1], Q = u[2], K = u[3], J = u[4], Z = u[5], $ = u[6], ee = u[7], u[0] = S * V + N * X + L, u[1] = E * V + x * X + O, u[2] = S * Q + N * K + L, u[3] = E * Q + x * K + O, u[4] = S * J + N * Z + L, u[5] = E * J + x * Z + O, u[6] = S * $ + N * ee + L, u[7] = E * $ + x * ee + O, h = m.color, h[0] *= R, h[1] *= D, h[2] *= P, h[3] *= B, h[4] = h[4] * R + k, h[5] = h[5] * D + F, h[6] = h[6] * P + H, h[7] = h[7] * B + z);
    }
    oe.maskStart && te.push(new s(oe.id));
  }
}
if (oe.maskEnd) {
  te.push(new r(oe.id));
} else {
  for (oe.maskStart && te.push(new a(oe.id)), f = this.createSprites(oe, t - oe.frames[0], C.symbols[oe.id], n, 1, 1, d), p = 0; p < f.length; p += 1) {
    m = f[p], te.push(m), m.isMaskTag || (u = m.vertexPos, V = u[0], X = u[1], Q = u[2], K = u[3], J = u[4], Z = u[5], $ = u[6], ee = u[7], u[0] = S * V + N * X + L, u[1] = E * V + x * X + O, u[2] = S * Q + N * K + L, u[3] = E * Q + x * K + O, u[4] = S * J + N * Z + L, u[5] = E * J + x * Z + O, u[6] = S * $ + N * ee + L, u[7] = E * $ + x * ee + O, h = m.color, h[0] *= R, h[1] *= D, h[2] *= P, h[3] *= B, h[4] = h[4] * R + k, h[5] = h[5] * D + F, h[6] = h[6] * P + H, h[7] = h[7] * B + z);
  }
  oe.maskStart && te.push(new s(oe.id));
}
for (oe.maskStart && te.push(new a(oe.id)), f = this.createSprites(oe, t - oe.frames[0], C.symbols[oe.id], n, 1, 1, d), p = 0; p < f.length; p += 1) {
  m = f[p], te.push(m), m.isMaskTag || (u = m.vertexPos, V = u[0], X = u[1], Q = u[2], K = u[3], J = u[4], Z = u[5], $ = u[6], ee = u[7], u[0] = S * V + N * X + L, u[1] = E * V + x * X + O, u[2] = S * Q + N * K + L, u[3] = E * Q + x * K + O, u[4] = S * J + N * Z + L, u[5] = E * J + x * Z + O, u[6] = S * $ + N * ee + L, u[7] = E * $ + x * ee + O, h = m.color, h[0] *= R, h[1] *= D, h[2] *= P, h[3] *= B, h[4] = h[4] * R + k, h[5] = h[5] * D + F, h[6] = h[6] * P + H, h[7] = h[7] * B + z);
}
if (!d) {
  return console.warn("Symbol " + e + " not registered in character's template"), [];
}
if (d.isGraphic) {
  var h = d.vertexPos,
    p = [1, 1, 1, 1, 0, 0, 0, 0],
    m = h[0] * n,
    f = h[1] * l,
    g = h[2] * n,
    _ = h[3] * l,
    v = [m, f, g, f, m, _, g, _];
  return [new o(d.texture, v, d.textureCoord, p)];
}
for (var y = [], w = d.children, b = w.length - 1; b >= 0; b -= 1) {
  var M = w[b];
  if (M.frames[0] <= t && t <= M.frames[1]) {
    if (M.maskEnd) {
      y.push(new r(M.id));
      continue;
    }
    var T = this.createSprites(M, t - M.frames[0], u.symbols[M.id], i, n, l, c);
    M.maskStart ? (y.push(new a(M.id)), Array.prototype.push.apply(y, T), y.push(new s(M.id))) : Array.prototype.push.apply(y, T);
  }
}
if (M.frames[0] <= t && t <= M.frames[1]) {
  if (M.maskEnd) {
    y.push(new r(M.id));
    continue;
  }
  var T = this.createSprites(M, t - M.frames[0], u.symbols[M.id], i, n, l, c);
  M.maskStart ? (y.push(new a(M.id)), Array.prototype.push.apply(y, T), y.push(new s(M.id))) : Array.prototype.push.apply(y, T);
}
if (M.maskEnd) {
  y.push(new r(M.id));
  continue;
}
for (var i = Object.keys(this.symbols), n = 0; n < i.length; n += 1) {
  var o = this.symbols[i[n]];
  o.className && (this.exposedSymbols[o.className] = o);
}
if (!s) {
  return console.warn("Symbol " + e + " not registered in character's template"), [];
}
if (s.isAnim) {
  var r = s.frames;
  t >= 0 && t <= r.length && (s = r[t]);
}
for (var t = 0; t < e.length; t++) {
  a[e[t]] = !0;
}
for (var t = 0, i = [], n = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)], o = 0; o < e.length; o += 1) {
  var a = e[o];
  if (a.isMaskTag) {
    if (a.isMaskDef && (i.push(n), n = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)]), a.isMaskUse && (i.push(n), n = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)]), a.isMaskStop) {
      var s = n,
        r = i.pop();
      n = i.pop(), n[0] = Math.min(n[0], Math.max(s[0], r[0])), n[1] = Math.max(n[1], Math.min(s[1], r[1])), n[2] = Math.min(n[2], Math.max(s[2], r[2])), n[3] = Math.max(n[3], Math.min(s[3], r[3]));
    }
  } else {
    var l = a.vertexPos;
    n[0] = Math.min(n[0], l[0], l[2], l[4], l[6]), n[1] = Math.max(n[1], l[0], l[2], l[4], l[6]), n[2] = Math.min(n[2], l[1], l[3], l[5], l[7]), n[3] = Math.max(n[3], l[1], l[3], l[5], l[7]), t += 1;
  }
}
if (a.isMaskTag) {
  if (a.isMaskDef && (i.push(n), n = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)]), a.isMaskUse && (i.push(n), n = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)]), a.isMaskStop) {
    var s = n,
      r = i.pop();
    n = i.pop(), n[0] = Math.min(n[0], Math.max(s[0], r[0])), n[1] = Math.max(n[1], Math.min(s[1], r[1])), n[2] = Math.min(n[2], Math.max(s[2], r[2])), n[3] = Math.max(n[3], Math.min(s[3], r[3]));
  }
} else {
  var l = a.vertexPos;
  n[0] = Math.min(n[0], l[0], l[2], l[4], l[6]), n[1] = Math.max(n[1], l[0], l[2], l[4], l[6]), n[2] = Math.min(n[2], l[1], l[3], l[5], l[7]), n[3] = Math.max(n[3], l[1], l[3], l[5], l[7]), t += 1;
}
if (a.isMaskDef && (i.push(n), n = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)]), a.isMaskUse && (i.push(n), n = [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)]), a.isMaskStop) {
  var s = n,
    r = i.pop();
  n = i.pop(), n[0] = Math.min(n[0], Math.max(s[0], r[0])), n[1] = Math.max(n[1], Math.min(s[1], r[1])), n[2] = Math.min(n[2], Math.max(s[2], r[2])), n[3] = Math.max(n[3], Math.min(s[3], r[3]));
}
if (!(e.length <= 0)) {
  for (var i = Math.max(-1, Math.min(1, t / w - 1)), n = 0; n < e.length; n++) {
    d.playSoundGroup("sfx", e[n], 0, i);
  }
}
for (var i = Math.max(-1, Math.min(1, t / w - 1)), n = 0; n < e.length; n++) {
  d.playSoundGroup("sfx", e[n], 0, i);
}
if (n += 1, n === o) {
  return t && t();
}
if (!this.hasSubentities) {
  return this._addAnimation(this._getSymbolModelId(e), i);
}
for (var a = this.subentities, s = !0, r = 0; r < a.length; r++) {
  var l = a[r],
    c = l.symbolModifier(e);
  if (c.parent) {
    var d = c.parent;
    o += 1, s = s && this._addAnimation(this._getSymbolModelId(d), i);
  }
  c.child && (o += 1, s = s && l.animManager.addAnimation(c.child, i));
}
if (c.parent) {
  var d = c.parent;
  o += 1, s = s && this._addAnimation(this._getSymbolModelId(d), i);
}
if (!this.bonesId) {
  return console.warn("Incorrect bones id:", this.bonesId), t(), !1;
}
if (this.loadedAnimations[e]) {
  return t(), !0;
}
if (!t) {
  return e;
}
for (var t in this.loadedAnimations) {
  var i = this.loadedAnimations[t];
  e.unmerge(i);
}
for (var n = 0; n < this.subentities.length; n++) {
  this.subentities[n].animManager.stop(), this.subentities[n].animManager.cleanupAnimations();
}
for (var t, i = [], n = this.tints.length !== e.length, o = 0; o < e.length; o += 1) {
  var a = e[o];
  if (t = a ? {
    r: a.r / 128,
    g: a.g / 128,
    b: a.b / 128
  } : {
    r: 1,
    g: 1,
    b: 1
  }, i[o] = t, !n) {
    var s = this.tints[o];
    n = s.r !== t.r || s.g !== t.g || s.b !== t.b;
  }
}
if (t = a ? {
  r: a.r / 128,
  g: a.g / 128,
  b: a.b / 128
} : {
  r: 1,
  g: 1,
  b: 1
}, i[o] = t, !n) {
  var s = this.tints[o];
  n = s.r !== t.r || s.g !== t.g || s.b !== t.b;
}
if (this.tints = i, n) {
  for (this.tintsString = "#", o = 0; o < i.length; o += 1) {
    t = i[o], this.tintsString += Math.round(255 * t.r).toString(16) + Math.round(255 * t.g).toString(16) + Math.round(255 * t.b).toString(16);
  }
}
for (this.tintsString = "#", o = 0; o < i.length; o += 1) {
  t = i[o], this.tintsString += Math.round(255 * t.r).toString(16) + Math.round(255 * t.g).toString(16) + Math.round(255 * t.b).toString(16);
}
if (null === this.animationId) {
  return [1 / 0, -(1 / 0), 1 / 0, -(1 / 0)];
}
for (var i = 0; i < this.subentities.length; i += 1) {
  this.subentities[i].animManager._generateCurrentFrameId(e);
}
if (this.subentityRefs = {}, this.hasSubentities) {
  for (var n = null, o = {
      base: "AnimStatique",
      direction: e.direction
    }, a = 0; a < this.subentities.length; a++) {
    var r = this.subentities[a],
      l = r.animManager,
      c = r.symbolModifier(e);
    n = c.parent || n, c.child ? (l.assignSymbol(c.child, t, i), i = null) : l.assignSymbol(o, !1), this.subentityRefs[r.bindingPoint] = l, l.mirrored = !1;
  }
  e = n || o;
}
for (var n = null, o = {
    base: "AnimStatique",
    direction: e.direction
  }, a = 0; a < this.subentities.length; a++) {
  var r = this.subentities[a],
    l = r.animManager,
    c = r.symbolModifier(e);
  n = c.parent || n, c.child ? (l.assignSymbol(c.child, t, i), i = null) : l.assignSymbol(o, !1), this.subentityRefs[r.bindingPoint] = l, l.mirrored = !1;
}
if (this.template.hasAnimation(d)) {
  this._setMirroring(u);
} else {
  e = this.applyAnimationModifier(e);
  var h = e.type || 0 === e.type ? e.type : "",
    p = e.param || 0 === e.param ? "_" + e.param : "";
  if (d = e.base + h + p + "_" + b[u], this.template.hasAnimation(d)) {
    this._setMirroring(u, !0);
  } else {
    for (var f = !1, g = 0; g < 8; g++) {
      if (d = e.base + h + p + "_" + g, this.template.hasAnimation(d)) {
        this._setMirroring(g), f = !0;
        break;
      }
    }
    if (!f) {
      return console.warn("Could not find any Animation " + e.base + " in template", this.template.id), i && i();
    }
  }
}
if (d = e.base + h + p + "_" + b[u], this.template.hasAnimation(d)) {
  this._setMirroring(u, !0);
} else {
  for (var f = !1, g = 0; g < 8; g++) {
    if (d = e.base + h + p + "_" + g, this.template.hasAnimation(d)) {
      this._setMirroring(g), f = !0;
      break;
    }
  }
  if (!f) {
    return console.warn("Could not find any Animation " + e.base + " in template", this.template.id), i && i();
  }
}
for (var f = !1, g = 0; g < 8; g++) {
  if (d = e.base + h + p + "_" + g, this.template.hasAnimation(d)) {
    this._setMirroring(g), f = !0;
    break;
  }
}
if (d = e.base + h + p + "_" + g, this.template.hasAnimation(d)) {
  this._setMirroring(g), f = !0;
  break;
}
if (!f) {
  return console.warn("Could not find any Animation " + e.base + " in template", this.template.id), i && i();
}
if (v._stopped) {
  return i && i();
}
if (v.tween.onUpdate(function () {
  if (v._stopped) {
    return v.tween.stop();
  }
  if (o !== v._frame) {
    var e = null;
    n && n.isSoundAnimationsPerFrame && (e = n, e.hasSoundForFrame(v.frame) && s(e.getIds(v.frame), v.sprite._x)), o = v._frame;
  }
}), i) {
  if (t) {
    return i();
  }
  v.tween.onceFinish(i);
}
if (v._stopped) {
  return v.tween.stop();
}
if (o !== v._frame) {
  var e = null;
  n && n.isSoundAnimationsPerFrame && (e = n, e.hasSoundForFrame(v.frame) && s(e.getIds(v.frame), v.sprite._x)), o = v._frame;
}
if (t) {
  return i();
}
if (this instanceof r == !1) {
  return new r(e, t);
}
for (var i = 0; i < this._properties.length; i += 1) {
  this._previousValues[this._properties[i]] = 0;
}
for (this._previousTime = e; this._addList.length > 0;) {
  var i = this._addList.pop();
  i.reference = this._playables.add(i);
}
for (var n = this._playables.first; null !== n; n = n.next) {
  n.object.update(t);
}
for (; this._removeList.length > 0;) {
  this._playables.removeByReference(this._removeList.pop().reference);
}
for (var e = this._playables.first; null !== e; e = e.next) {
  e.object._stopped();
}
if (this.playing = !1, p._remove(this), null !== this._onceFinish) {
  var e = this._onceFinish.slice();
  this._onceFinish = null;
  for (var t = 0; t < e.length; t += 1) {
    e[t]();
  }
}
for (var t = 0; t < e.length; t += 1) {
  e[t]();
}
if (!this.stopping || (this._stopped(), this.starting)) {
  if (this.starting) {
    this._time = 0, this._update(), this._started();
  } else {
    var t = this._time + e;
    t >= this._duration ? 1 === this._iterations ? (this._time = this._duration, this._update(), null !== this._onUpdate && this._onUpdate(), this._finished()) : (this._time = t % this._duration, this._update(), null !== this._onUpdate && this._onUpdate(), this._iterations -= 1) : (this._time = t, this._update(), null !== this._onUpdate && this._onUpdate());
  }
}
if (this.starting) {
  this._time = 0, this._update(), this._started();
} else {
  var t = this._time + e;
  t >= this._duration ? 1 === this._iterations ? (this._time = this._duration, this._update(), null !== this._onUpdate && this._onUpdate(), this._finished()) : (this._time = t % this._duration, this._update(), null !== this._onUpdate && this._onUpdate(), this._iterations -= 1) : (this._time = t, this._update(), null !== this._onUpdate && this._onUpdate());
}
for (var e = 0; e < this._properties.length; e += 1) {
  var t = this._properties[e];
  this._from[t] = this._element[t];
}
if (0 === e) {
  return this;
}
for (; this._time < this._transitions[this._currentTransitionIndex].start;) {
  this._currentTransitionIndex--;
}
for (; this._time > this._transitions[this._currentTransitionIndex].end;) {
  this._currentTransitionIndex++, this._transitions[this._currentTransitionIndex].callback && this._transitions[this._currentTransitionIndex].callback();
}
for (var e = this._transitions[this._currentTransitionIndex], t = e.easing((this._time - e.start) / e.duration, e.easingParam), i = e.fromObject, n = e.toObject, o = 0; o < this._properties.length; o++) {
  var a = this._properties[o];
  this._element[a] = i[a] * (1 - t) + n[a] * t;
}
for (var e = 0; e < this._properties.length; e += 1) {
  this._previousValues[this._properties[e]] = 0;
}
for (var e = 0; e < this._properties.length; e += 1) {
  this._from[this._properties[e]] = 0;
}
if (0 === e) {
  return this;
}
for (; this._time < this._transitions[this._currentTransitionIndex].start;) {
  this._currentTransitionIndex--;
}
for (; this._time > this._transitions[this._currentTransitionIndex].end;) {
  this._currentTransitionIndex++;
}
for (var e = this._transitions[this._currentTransitionIndex], t = e.easing((this._time - e.start) / e.duration, e.easingParam), i = e.fromObject, n = e.toObject, o = 0; o < this._properties.length; o++) {
  var a = this._properties[o],
    s = i[a] * (1 - t) + n[a] * t;
  this._element[a] += s - this._previousValues[a], this._previousValues[a] = s;
}
if (1 === e) {
  return 1;
}
if (e < .5) {
  return 8 * e * e * e * e;
}
if (0 === e) {
  return 0;
}
if (1 === e) {
  return 1;
}
if (0 === e) {
  return 0;
}
if (1 === e) {
  return 1;
}
if (!e) {
  throw new Error("Need the logger!");
}
for (var o = 0; o < n.length; o += 1) {
  n[o](e, i);
}
if (isNaN(e) || !e) {
  return t();
}
if (null === o) {
  return t();
}
if (t) {
  return i(t, e, null);
}
if (!r) {
  return i(t, e, null);
}
if (!r.keys) {
  return n(a._logger, "No keys soundBonesData for bonesId: " + e), i(t, e, null);
}
if (!r.values) {
  return n(a._logger, "No values soundBonesData for bonesId: " + e), i(t, e, null);
}
if (isNaN(e) || !e) {
  return i();
}
if (n) {
  return o(this._audioManager, n, t, i);
}
for (var n = 0; n < t.length; n += 1) {
  for (var s = t[n], r = i[n], l = 0; l < r.length; l += 1) {
    var c = r[l],
      d = new o(c),
      u = d.startFrame;
    this._values[s] || (this._values[s] = new a(this._id, s)), this._values[s].addSoundAnimation(u, new o(c));
  }
}
for (var s = t[n], r = i[n], l = 0; l < r.length; l += 1) {
  var c = r[l],
    d = new o(c),
    u = d.startFrame;
  this._values[s] || (this._values[s] = new a(this._id, s)), this._values[s].addSoundAnimation(u, new o(c));
}
for (var e in this._values) {
  if (this._values.hasOwnProperty(e)) {
    var t = this._values[e],
      i = t.getSoundGroupDefs();
    for (var n in i) {
      i.hasOwnProperty(n) && (this._soundGroupDefs[n] = i[n]);
    }
  }
}
if (this._values.hasOwnProperty(e)) {
  var t = this._values[e],
    i = t.getSoundGroupDefs();
  for (var n in i) {
    i.hasOwnProperty(n) && (this._soundGroupDefs[n] = i[n]);
  }
}
for (var n in i) {
  i.hasOwnProperty(n) && (this._soundGroupDefs[n] = i[n]);
}
if (!e) {
  return this._soundGroupDefs;
}
for (var i in this._soundGroupDefs) {
  if (this._soundGroupDefs.hasOwnProperty(i)) {
    var n = this._soundGroupDefs[i];
    n.animName === e && (t[i] = n);
  }
}
if (this._soundGroupDefs.hasOwnProperty(i)) {
  var n = this._soundGroupDefs[i];
  n.animName === e && (t[i] = n);
}
for (var t in this._data) {
  if (this._data.hasOwnProperty(t)) {
    for (var i = parseInt(t, 10), n = this.getSoundAnimation(i), o = {}, a = 0; a < n.length; a += 1) {
      var s = n[a],
        r = this.getId(i, s.label);
      e[r] = e[r] || {
        animName: this._animName,
        id: [],
        vol: []
      }, e[r].id.push(s.filename), e[r].vol.push(s.volume), o[r] = !0;
    }
    this._cacheIds[i] = Object.keys(o);
  }
}
if (this._data.hasOwnProperty(t)) {
  for (var i = parseInt(t, 10), n = this.getSoundAnimation(i), o = {}, a = 0; a < n.length; a += 1) {
    var s = n[a],
      r = this.getId(i, s.label);
    e[r] = e[r] || {
      animName: this._animName,
      id: [],
      vol: []
    }, e[r].id.push(s.filename), e[r].vol.push(s.volume), o[r] = !0;
  }
  this._cacheIds[i] = Object.keys(o);
}
for (var i = parseInt(t, 10), n = this.getSoundAnimation(i), o = {}, a = 0; a < n.length; a += 1) {
  var s = n[a],
    r = this.getId(i, s.label);
  e[r] = e[r] || {
    animName: this._animName,
    id: [],
    vol: []
  }, e[r].id.push(s.filename), e[r].vol.push(s.volume), o[r] = !0;
}
if (!i) {
  return console.error("No modifier for symbol base " + t), {
    parent: null,
    child: null
  };
}
if ("function" == typeof i) {
  return i(e);
}
for (var a = i / this._width, s = n / this._height, r = o.matrixStack, l = 0; l < r.length; l += 1) {
  var c = r[l];
  c[0] *= a, c[1] *= a, c[2] = (c[2] + 1) * a - 1, c[4] *= s, c[5] *= s, c[6] = (c[6] - 1) * s + 1;
}
if (e) {
  var a = this._matrixStack[0],
    s = a[0],
    r = a[4],
    l = a[1],
    c = a[5],
    d = a[2],
    u = a[6];
  a[2] += s * t + l * i, a[6] += r * t + c * i, a[0] *= n, a[4] *= n, a[1] *= o, a[5] *= o, this.gl.uniformMatrix4fv(this._currentProgram.uniforms.uMatrix, !1, a);
  var h = this.textureCache.useElement(e.id).element.binder;
  this.gl.bindTexture(this.gl.TEXTURE_2D, h), this.gl.drawArrays(this.gl.TRIANGLES, 0, 6), a[0] = s, a[4] = r, a[1] = l, a[5] = c, a[2] = d, a[6] = u;
}
if (null !== r) {
  return r;
}
if (n = e.getContext("webgl", o) || e.getContext("experimental-webgl", o), !l) {
  l = {
    textureSize: n.getParameter(n.MAX_TEXTURE_SIZE),
    rendererBufferSize: n.getParameter(n.MAX_RENDERBUFFER_SIZE),
    vendor: n.getParameter(n.VENDOR),
    version: n.getParameter(n.VERSION)
  };
  var a = n.getExtension("WEBGL_debug_renderer_info");
  a && (l.unmaskedVendor = n.getParameter(a.UNMASKED_VENDOR_WEBGL), l.unmaskedRenderer = n.getParameter(a.UNMASKED_RENDERER_WEBGL));
}
if (!t) {
  throw new Error("Could not initialise WebGL (" + s.message + ")");
}
if (!n) {
  if (!t) {
    throw new Error("Could not initialise WebGL, sorry :-(");
  }
  return null;
}
if (!t) {
  throw new Error("Could not initialise WebGL, sorry :-(");
}
if (void 0 !== t) {
  return 0 === t.nLocks && (t.update = this.update++, this.memoryChunksUsed.moveToTheEnd(t.ref)), t.obj;
}
if (void 0 !== t) {
  return 0 === t.nLocks && (this.memoryChunksUsed.removeByRef(t.ref) || console.warn("[SuperFastMemoryPartitioner.lock] Trying to lock an already locked chunk", e), t.ref = this.memoryChunksLocked.add(t), t.update = 1 / 0), t.nLocks += 1, t.obj;
}
if (void 0 !== t) {
  if (t.ref.container === this.memoryChunksLocked ? this.memoryChunksLocked.removeByRef(t.ref) : this.memoryChunksUsed.removeByRef(t.ref), t.prevChunk && t.prevChunk.ref.container === this.memoryChunksFree) {
    var i = t.prevChunk;
    t.start = i.start, t.nBytes += i.nBytes, t.prevChunk = i.prevChunk, i.prevChunk && (i.prevChunk.nextChunk = t), this.memoryChunksFree.removeByReference(i.ref);
  }
  if (t.nextChunk && t.nextChunk.ref.container === this.memoryChunksFree) {
    var n = t.nextChunk;
    t.nBytes += n.nBytes, t.nextChunk = n.nextChunk, n.nextChunk && (n.nextChunk.prevChunk = t), this.memoryChunksFree.removeByReference(n.ref);
  }
  t.ref = this.memoryChunksFree.add(t), t.nLocks = 0, t.update = 0, delete this.chunksById[e];
}
if (t.ref.container === this.memoryChunksLocked ? this.memoryChunksLocked.removeByRef(t.ref) : this.memoryChunksUsed.removeByRef(t.ref), t.prevChunk && t.prevChunk.ref.container === this.memoryChunksFree) {
  var i = t.prevChunk;
  t.start = i.start, t.nBytes += i.nBytes, t.prevChunk = i.prevChunk, i.prevChunk && (i.prevChunk.nextChunk = t), this.memoryChunksFree.removeByReference(i.ref);
}
if (t.nextChunk && t.nextChunk.ref.container === this.memoryChunksFree) {
  var n = t.nextChunk;
  t.nBytes += n.nBytes, t.nextChunk = n.nextChunk, n.nextChunk && (n.nextChunk.prevChunk = t), this.memoryChunksFree.removeByReference(n.ref);
}
if (t) {
  return [t];
}
if (0 === this.memoryChunksUsed.count) {
  throw new Error("No available chunk can hold " + e + " Bytes.Make sure that enough space is allocated (currently " + this.nBytes + ") or that locked chunks are correctly unlocked.");
}
if (i.object.nBytes >= e) {
  return [i.object];
}
for (var n, o = 0, a = 7, s = 1 / 0; (o < a || s === 1 / 0) && null !== i;) {
  for (var r = i.object, l = [r], c = r.nBytes, d = r.prevChunk, u = r.nextChunk, h = r.update; c < e;) {
    null === d || null !== u && u.update <= d.update ? (h < u.update && (h = u.update), l.push(u), c += u.nBytes, u = u.nextChunk) : (h < d.update && (h = d.update), l.unshift(d), c += d.nBytes, d = d.prevChunk);
  }
  h < s && (s = h, n = l), i = i.next, o += 1;
}
for (var r = i.object, l = [r], c = r.nBytes, d = r.prevChunk, u = r.nextChunk, h = r.update; c < e;) {
  null === d || null !== u && u.update <= d.update ? (h < u.update && (h = u.update), l.push(u), c += u.nBytes, u = u.nextChunk) : (h < d.update && (h = d.update), l.unshift(d), c += d.nBytes, d = d.prevChunk);
}
if (s === 1 / 0) {
  throw new Error("No available chunk can hold " + e + " Bytes.Make sure that enough space is allocated (currently " + this.nBytes + ") or that locked chunks are correctly unlocked.");
}
for (var i = this._selectChunks(t), o = 0; o < i.length; o += 1) {
  var a = i[o];
  a.ref.container === this.memoryChunksUsed ? (this.memoryChunksUsed.removeByRef(a.ref), delete this.chunksById[a.id]) : this.memoryChunksFree.removeByReference(a.ref);
}
if (d === t) {
  s.nextChunk = r.nextChunk, null !== s.nextChunk && (s.nextChunk.prevChunk = s);
} else {
  var u;
  if (s === r ? (u = new n(l + t, d - t), u.nextChunk = r.nextChunk, null !== u.nextChunk && (u.nextChunk.prevChunk = u)) : (u = r, u.set(l + t, d - t, 0)), u.prevChunk = s, s.nextChunk = u, u.nextChunk && u.nextChunk.ref.container === this.memoryChunksFree) {
    var h = u.nextChunk;
    u.nBytes += h.nBytes, u.nextChunk = h.nextChunk, h.nextChunk && (h.nextChunk.prevChunk = u), this.memoryChunksFree.removeByReference(h.ref);
  }
  u.ref = this.memoryChunksFree.add(u);
}
if (s === r ? (u = new n(l + t, d - t), u.nextChunk = r.nextChunk, null !== u.nextChunk && (u.nextChunk.prevChunk = u)) : (u = r, u.set(l + t, d - t, 0)), u.prevChunk = s, s.nextChunk = u, u.nextChunk && u.nextChunk.ref.container === this.memoryChunksFree) {
  var h = u.nextChunk;
  u.nBytes += h.nBytes, u.nextChunk = h.nextChunk, h.nextChunk && (h.nextChunk.prevChunk = u), this.memoryChunksFree.removeByReference(h.ref);
}
for (var e = this.root; null !== e.left;) {
  e = e.left;
}
for (var e = this.root; null !== e.right;) {
  e = e.right;
}
if (null === this.root) {
  return this.root = t, t;
}
for (var n = this.root;;) {
  var o = this.cmpFunc(e, n.object);
  if (o < 0) {
    if (null === n.left) {
      this._addLeft(t, n);
      break;
    }
    n = n.left;
  } else if (o > 0) {
    if (null === n.right) {
      this._addRight(t, n);
      break;
    }
    n = n.right;
  } else {
    if (null === n.left) {
      this._addLeft(t, n);
      break;
    }
    if (null === n.right) {
      this._addRight(t, n);
      break;
    }
    n = n.right.height < n.left.height ? n.right : n.left;
  }
}
if (o < 0) {
  if (null === n.left) {
    this._addLeft(t, n);
    break;
  }
  n = n.left;
} else if (o > 0) {
  if (null === n.right) {
    this._addRight(t, n);
    break;
  }
  n = n.right;
} else {
  if (null === n.left) {
    this._addLeft(t, n);
    break;
  }
  if (null === n.right) {
    this._addRight(t, n);
    break;
  }
  n = n.right.height < n.left.height ? n.right : n.left;
}
if (null === n.left) {
  this._addLeft(t, n);
  break;
}
if (o > 0) {
  if (null === n.right) {
    this._addRight(t, n);
    break;
  }
  n = n.right;
} else {
  if (null === n.left) {
    this._addLeft(t, n);
    break;
  }
  if (null === n.right) {
    this._addRight(t, n);
    break;
  }
  n = n.right.height < n.left.height ? n.right : n.left;
}
if (null === n.right) {
  this._addRight(t, n);
  break;
}
if (null === n.left) {
  this._addLeft(t, n);
  break;
}
if (null === n.right) {
  this._addRight(t, n);
  break;
}
for (var i = e; null !== i;) {
  var n = i.left,
    o = i.right,
    a = null === n ? 0 : n.height,
    s = null === o ? 0 : o.height;
  if (a - s > 1) {
    null !== n.right && (null === n.left || n.left.height < n.right.height) && this._balanceLeftRight(i), this._balanceLeftLeft(i);
  } else if (s - a > 1) {
    null !== o.left && (null === o.right || o.right.height < o.left.height) && this._balanceRightLeft(i), this._balanceRightRight(i);
  } else {
    var r = (a > s ? a : s) + 1;
    if (!t && r === i.height) {
      break;
    }
    i.height = r;
  }
  i = i.parent;
}
if (a - s > 1) {
  null !== n.right && (null === n.left || n.left.height < n.right.height) && this._balanceLeftRight(i), this._balanceLeftLeft(i);
} else if (s - a > 1) {
  null !== o.left && (null === o.right || o.right.height < o.left.height) && this._balanceRightLeft(i), this._balanceRightRight(i);
} else {
  var r = (a > s ? a : s) + 1;
  if (!t && r === i.height) {
    break;
  }
  i.height = r;
}
if (s - a > 1) {
  null !== o.left && (null === o.right || o.right.height < o.left.height) && this._balanceRightLeft(i), this._balanceRightRight(i);
} else {
  var r = (a > s ? a : s) + 1;
  if (!t && r === i.height) {
    break;
  }
  i.height = r;
}
if (!t && r === i.height) {
  break;
}
if (e.container !== this) {
  return e;
}
if (null === e.right) {
  return null !== i && (i.parent = t), null === t ? this.root = i : (t.right === e ? t.right = i : t.left = i, null === i ? this._balance(t, !0) : i.height + 3 <= t.height && this._balance(t, !0)), !0;
}
if (null === o.left) {
  return null !== i && (i.parent = o), o.left = i, null === t ? this.root = o : t.right === e ? t.right = o : t.left = o, o.parent = t, this._balance(o, !0), !0;
}
for (o = o.left; null !== o.left;) {
  o = o.left;
}
if (null === this.root) {
  return null;
}
for (var t = null, i = this.root; null !== i;) {
  var n = this.cmpFunc(e, i.object);
  if (n < 0) {
    t = i.object, i = i.left;
  } else {
    if (!(n > 0)) {
      return i.object;
    }
    i = i.right;
  }
}
if (n < 0) {
  t = i.object, i = i.left;
} else {
  if (!(n > 0)) {
    return i.object;
  }
  i = i.right;
}
if (!(n > 0)) {
  return i.object;
}
if (null === this.root) {
  return null;
}
for (var t = null, i = this.root; null !== i;) {
  var n = this.cmpFunc(e, i.object);
  if (n < 0) {
    i = i.left;
  } else {
    if (!(n > 0)) {
      return i.object;
    }
    t = i.object, i = i.right;
  }
}
if (n < 0) {
  i = i.left;
} else {
  if (!(n > 0)) {
    return i.object;
  }
  t = i.object, i = i.right;
}
if (!(n > 0)) {
  return i.object;
}
if (this._shaders[e]) {
  return this._shaders[e];
}
if ("fragment" === n.type) {
  t = i.createShader(i.FRAGMENT_SHADER);
} else {
  if ("vertex" !== n.type) {
    return null;
  }
  t = i.createShader(i.VERTEX_SHADER);
}
if ("vertex" !== n.type) {
  return null;
}
if (i.shaderSource(t, n.script), i.compileShader(t), !i.getShaderParameter(t, i.COMPILE_STATUS)) {
  throw new Error(i.getShaderInfoLog(t));
}
if (t.attachShader(i, this._getShader(e.vertexShaderId)), t.attachShader(i, this._getShader(e.fragmentShaderId)), t.linkProgram(i), !t.getProgramParameter(i, t.LINK_STATUS)) {
  var n = t.getProgramInfoLog(i);
  throw t.deleteProgram(i), new Error("Error linking the program:" + n);
}
for (var o = e.attributeIds, a = e.attributes, s = 0; s < o.length; s += 1) {
  var l = o[s];
  a[l] = t.getAttribLocation(i, l);
}
for (var c = e.uniformIds, d = e.uniforms, u = 0; u < c.length; u += 1) {
  var h = c[u],
    p = t.getUniformLocation(i, h);
  r[h] && t.uniform1i(p, r[h]), d[h] = p;
}
if (t !== this._currentProgram) {
  var i,
    n = this._currentProgram.lastAttributeIndex,
    o = t.lastAttributeIndex;
  if (n > o) {
    for (i = n; i > o; i -= 1) {
      this.gl.disableVertexAttribArray(i);
    }
  } else if (n < o) {
    for (i = n + 1; i <= o; i += 1) {
      this.gl.enableVertexAttribArray(i);
    }
  }
  var a = t.binder;
  null === a ? this._buildProgram(t) : this.gl.useProgram(t.binder), t.setAttributes(), this._currentProgram = t;
}
if (n > o) {
  for (i = n; i > o; i -= 1) {
    this.gl.disableVertexAttribArray(i);
  }
} else if (n < o) {
  for (i = n + 1; i <= o; i += 1) {
    this.gl.enableVertexAttribArray(i);
  }
}
for (i = n; i > o; i -= 1) {
  this.gl.disableVertexAttribArray(i);
}
if (n < o) {
  for (i = n + 1; i <= o; i += 1) {
    this.gl.enableVertexAttribArray(i);
  }
}
for (i = n + 1; i <= o; i += 1) {
  this.gl.enableVertexAttribArray(i);
}
if (null !== s) {
  var r = this.gl;
  void 0 !== s.mask && (r.activeTexture(r.TEXTURE1), r.bindTexture(r.TEXTURE_2D, s.mask), r.activeTexture(r.TEXTURE0)), void 0 !== s.ratio && r.uniform1f(this._currentProgram.uniforms.uRatio, s.ratio), void 0 !== s.resolution && r.uniform1f(this._currentProgram.uniforms.uResolution, s.resolution);
}
for (var l = r.getImageData(0, 0, t, i), c = l.data, d = 3; d < a; d += 4) {
  c[d - 3] = o[d - 3], c[d - 2] = o[d - 2], c[d - 1] = o[d - 1], c[d] = o[d];
}
if (o) {
  return o;
}
if (0 !== e) {
  var t = this._matrixStack[0],
    i = Math.cos(e),
    n = Math.sin(e),
    o = t[0],
    a = t[4],
    s = t[1],
    r = t[5];
  t[0] = o * i + s * n, t[4] = a * i + r * n, t[1] = s * i - o * n, t[5] = r * i - a * n;
}
for (var s = t.spriteBatch, r = s.length - 1, l = t.nbSprites * this._spriteSize, c = this.sFMPartitioner.reserve(e, l), d = c.start, u = d, h = d, p = new window.ArrayBuffer(l), m = new window.Float32Array(p), f = new window.Uint32Array(p), g = this._spriteSize / 4, _ = 0, v = [], y = 0; y <= r; y += 1) {
  var w = s[y];
  if (w.isMaskTag) {
    i = !0, v.push(w);
  } else {
    n(m, f, _ * g, w), h += this._spriteSize, _ += 1;
    var b = s[y + 1];
    (y === r || w.texture !== b.texture || b.isMaskTag) && (v.push(new o(u, h - u, this._drawModes.triangles, w.texture)), u = h);
  }
}
if (w.isMaskTag) {
  i = !0, v.push(w);
} else {
  n(m, f, _ * g, w), h += this._spriteSize, _ += 1;
  var b = s[y + 1];
  (y === r || w.texture !== b.texture || b.isMaskTag) && (v.push(new o(u, h - u, this._drawModes.triangles, w.texture)), u = h);
}
if (void 0 === o) {
  return void console.warn("[WebGLRenderer.updateVertexBuffer] No buffer loaded for", e);
}
if (void 0 === t) {
  return void console.warn("[WebGLRenderer.drawSpriteBatch] No buffer loaded for", e);
}
if (t.prerender) {
  var i = this.textureCache.holdElement(e),
    n = t.bbox;
  if (void 0 === i) {
    var o = n[0],
      a = n[1],
      s = n[2],
      r = n[3],
      l = this._matrixStack[0],
      c = this._renderTarget.width * l[0] / 2,
      d = this._renderTarget.width * l[4] / 2,
      u = this._renderTarget.height * l[1] / 2,
      h = this._renderTarget.height * l[5] / 2,
      p = Math.sqrt(Math.max(c * c + d * d, u * u + h * h)) * this.prerenderRatio,
      m = this.startTextureUsage(a - o, r - s, p, e, "nearest");
    this.startTextureRendering(m, o, a, s, r), this._drawBatch(t), this.stopTextureRendering(!0, !0), i = m.texture;
  }
  this.drawImage(i, n[0], n[2], n[1] - n[0], n[3] - n[2]), i.release();
} else {
  this._drawBatch(t);
}
if (void 0 === i) {
  var o = n[0],
    a = n[1],
    s = n[2],
    r = n[3],
    l = this._matrixStack[0],
    c = this._renderTarget.width * l[0] / 2,
    d = this._renderTarget.width * l[4] / 2,
    u = this._renderTarget.height * l[1] / 2,
    h = this._renderTarget.height * l[5] / 2,
    p = Math.sqrt(Math.max(c * c + d * d, u * u + h * h)) * this.prerenderRatio,
    m = this.startTextureUsage(a - o, r - s, p, e, "nearest");
  this.startTextureRendering(m, o, a, s, r), this._drawBatch(t), this.stopTextureRendering(!0, !0), i = m.texture;
}
if (e.isMaskDef) {
  var n = t[0],
    o = t[1],
    a = t[2],
    s = t[3],
    r = this.startTextureUsage(o - n, s - a, this.maskQuality);
  return this.startTextureRendering(r, n, o, a, s), void i.push(r);
}
for (var t = e.spriteBatches, i = null, n = 0; n < t.length; n += 1) {
  var o = t[n];
  if (o.isMaskTag) {
    null === i && (i = []), this.handleMaskTag(o, e.bbox, i);
  } else {
    var a = o.startingByte / this._vertexSize,
      s = o.nBytes / this._vertexSize;
    this._drawSubBatch(a, s, o.texture, o.drawMode);
  }
}
if (o.isMaskTag) {
  null === i && (i = []), this.handleMaskTag(o, e.bbox, i);
} else {
  var a = o.startingByte / this._vertexSize,
    s = o.nBytes / this._vertexSize;
  this._drawSubBatch(a, s, o.texture, o.drawMode);
}
if (void 0 === n) {
  return void console.warn("[WebGLRenderer.drawSpriteSubBatch] No buffer loaded for", e);
}
if (!(t <= 0)) {
  var o = this.gl;
  if (null !== i) {
    var a = this.textureCache.useElement(i.id);
    if (void 0 === a) {
      return void console.warn("[WebGLRenderer._drawSubBatch] Texture not loaded:", i.id);
    }
    o.bindTexture(o.TEXTURE_2D, a.element.binder);
  }
  o.uniformMatrix4fv(this._currentProgram.uniforms.uMatrix, !1, this._matrixStack[0]), o.drawArrays(n, e, t);
}
if (null !== i) {
  var a = this.textureCache.useElement(i.id);
  if (void 0 === a) {
    return void console.warn("[WebGLRenderer._drawSubBatch] Texture not loaded:", i.id);
  }
  o.bindTexture(o.TEXTURE_2D, a.element.binder);
}
if (void 0 === a) {
  return void console.warn("[WebGLRenderer._drawSubBatch] Texture not loaded:", i.id);
}
for (var i in e) {
  void 0 !== t[i] && (e[i] = t[i]);
}
for (var i = 0; i < this._item.effects.length; i++) {
  this.effectInstances[this.getSpellLevelId() + "-effects-" + i] = this._item.effects[i];
}
if (!e.isInitialised) {
  var n = this;
  return e.once("initialised", function () {
    l.call(n, e, t);
  });
}
if (this.isLoaded = !0, window.gui.shortcutBar.updateSpellAvailability(this.id), t) {
  return t();
}
if (i = o(this.ownerId, this.id, C.CAST_INTERVAL), !i) {
  return n[e];
}
if (i = o(this.ownerId, this.id, C.AP_COST), !i) {
  return n[e];
}
if (!t) {
  return console.error(new Error("SpellFactory getPropertyFromItem: item is not ready yet")), null;
}
if (i) {
  return t(i);
}
if (o[e] = new s(), ~~e === O) {
  var i = window.gui.playerData.inventory.getCurrentWeapon();
  if (i) {
    return l.call(o[e], i, t);
  }
}
if (i) {
  return l.call(o[e], i, t);
}
for (var o in e.spells) {
  for (var a = e.spells[o], s = 0; s < a.spellLevels.length; s++) {
    n[a.spellLevels[s]] = !0;
  }
}
for (var a = e.spells[o], s = 0; s < a.spellLevels.length; s++) {
  n[a.spellLevels[s]] = !0;
}
for (var o in e.spellLevels) {
  var a,
    s = e.spellLevels[o];
  for (a = 0; a < s.statesRequired.length; a++) {
    n[s.statesRequired[a]] = !0;
  }
  for (a = 0; a < s.statesForbidden.length; a++) {
    n[s.statesForbidden[a]] = !0;
  }
}
for (a = 0; a < s.statesRequired.length; a++) {
  n[s.statesRequired[a]] = !0;
}
for (a = 0; a < s.statesForbidden.length; a++) {
  n[s.statesForbidden[a]] = !0;
}
for (var l in e.spellLevels) {
  if (e.spellLevels.hasOwnProperty(l)) {
    for (var c = e.spellLevels[l], d = 0; d < r.length; d++) {
      var u = r[d];
      for (o = 0; o < c[u].length; o++) {
        if (n = l + "-" + u + "-" + o, t && t.effectInstances && t.effectInstances[n]) {
          s[n] = t.effectInstances[n];
        } else {
          var h = c[u][o];
          h.effectCaller = "SpellFactory spellLevelId: " + n, a[n] = c[u][o];
        }
      }
    }
  }
}
if (e.spellLevels.hasOwnProperty(l)) {
  for (var c = e.spellLevels[l], d = 0; d < r.length; d++) {
    var u = r[d];
    for (o = 0; o < c[u].length; o++) {
      if (n = l + "-" + u + "-" + o, t && t.effectInstances && t.effectInstances[n]) {
        s[n] = t.effectInstances[n];
      } else {
        var h = c[u][o];
        h.effectCaller = "SpellFactory spellLevelId: " + n, a[n] = c[u][o];
      }
    }
  }
}
for (var c = e.spellLevels[l], d = 0; d < r.length; d++) {
  var u = r[d];
  for (o = 0; o < c[u].length; o++) {
    if (n = l + "-" + u + "-" + o, t && t.effectInstances && t.effectInstances[n]) {
      s[n] = t.effectInstances[n];
    } else {
      var h = c[u][o];
      h.effectCaller = "SpellFactory spellLevelId: " + n, a[n] = c[u][o];
    }
  }
}
for (o = 0; o < c[u].length; o++) {
  if (n = l + "-" + u + "-" + o, t && t.effectInstances && t.effectInstances[n]) {
    s[n] = t.effectInstances[n];
  } else {
    var h = c[u][o];
    h.effectCaller = "SpellFactory spellLevelId: " + n, a[n] = c[u][o];
  }
}
if (n = l + "-" + u + "-" + o, t && t.effectInstances && t.effectInstances[n]) {
  s[n] = t.effectInstances[n];
} else {
  var h = c[u][o];
  h.effectCaller = "SpellFactory spellLevelId: " + n, a[n] = c[u][o];
}
if (e) {
  return i(e);
}
if (0 === Object.keys(s).length) {
  return i(null, t);
}
for (var n in s) {
  s.hasOwnProperty(n) && (t[n] = s[n]);
}
if ("function" != typeof t || i || (i = t, t = null), i = i || o, e instanceof Array || (e = [e]), e = e.filter(function (e) {
  return !isNaN(e);
}), 0 === e.length) {
  return i(new Error("No valid spell id"));
}
if (!o.length) {
  for (var a in e) {
    o.push(e[a]);
  }
}
for (var a in e) {
  o.push(e[a]);
}
for (var i in t) {
  if (t.hasOwnProperty(i)) {
    e[i] || (e[i] = {});
    for (var n in t[i]) {
      t[i].hasOwnProperty(n) && (e[i][n] = t[i][n]);
    }
  }
}
if (t.hasOwnProperty(i)) {
  e[i] || (e[i] = {});
  for (var n in t[i]) {
    t[i].hasOwnProperty(n) && (e[i][n] = t[i][n]);
  }
}
for (var n in t[i]) {
  t[i].hasOwnProperty(n) && (e[i][n] = t[i][n]);
}
for (var e, t = 63, i = this.isWeapon() ? this._item.effects : this.spellLevel.effects, n = 0; n < i.length; n++) {
  var o = this.effectInstances[this.getSpellLevelId() + "-effects-" + n],
    a = o.getZoneEffect();
  if ((o.isPreview || a.zoneShape && a.zoneSize > 0 && a.zoneSize < t) && (t = a.zoneSize, e = a), o.isPreview) {
    break;
  }
}
if ((o.isPreview || a.zoneShape && a.zoneSize > 0 && a.zoneSize < t) && (t = a.zoneSize, e = a), o.isPreview) {
  break;
}
for (var e, t = this.isWeapon() ? this._item.effects : this.spellLevel.effects, i = 0; i < t.length; i++) {
  var n = this.effectInstances[this.getSpellLevelId() + "-effects-" + i],
    o = n.getZoneEffect();
  if ((n.isPreview || o.zoneShape && o.zoneSize > 0) && (e = o), n.isPreview) {
    break;
  }
}
if ((n.isPreview || o.zoneShape && o.zoneSize > 0) && (e = o), n.isPreview) {
  break;
}
if (this.isItem) {
  return null;
}
for (var i = 0, n = 0, o = 1; o <= e; o += 1) {
  n += o - 1, i += o - 1;
}
for (; o <= t; o += 1) {
  i += o - 1;
}
if ("range" === e) {
  var n = window.gui.playerData.characters.getControlledCharacter().characteristics;
  if (!n) {
    return i;
  }
  var o = n.range,
    a = this.isItem ? d.call(this, "rangeCanBeBoosted") : c.call(this, "rangeCanBeBoosted", t);
  if (a) {
    var s = this.isItem ? d.call(this, "minRange") : c.call(this, "minRange", t),
      r = o.getTotalStat();
    i + r < s ? i = s : i += r;
  }
}
if (!n) {
  return i;
}
if (a) {
  var s = this.isItem ? d.call(this, "minRange") : c.call(this, "minRange", t),
    r = o.getTotalStat();
  i + r < s ? i = s : i += r;
}
if (this.id !== O) {
  return e();
}
for (var t in this) {
  this.hasOwnProperty(t) && "_uid" !== t && "castingData" !== t && (e[t] = this[t]);
}
for (var n = 0; n < t.length; n++) {
  var o = t[n];
  this.castingData.targetsThisTurn[o] || (this.castingData.targetsThisTurn[o] = 0), this.castingData.targetsThisTurn[o]++;
}
if (this.isItem) {
  return 0;
}
for (var e = new N(), t = window.gui.playerData.characters.mainCharacter.characteristics.spellModifications, i = 0; i < t.length; i++) {
  var n = t[i];
  if (n.spellId === this.id) {
    var o = n.modificationType;
    o === C.CAST_INTERVAL ? e.castInterval.setPts(n.value.getAllValues()) : o === C.CAST_INTERVAL_SET && e.castIntervalSet.setPts(n.value.getAllValues());
  }
}
if (n.spellId === this.id) {
  var o = n.modificationType;
  o === C.CAST_INTERVAL ? e.castInterval.setPts(n.value.getAllValues()) : o === C.CAST_INTERVAL_SET && e.castIntervalSet.setPts(n.value.getAllValues());
}
for (i = 0; i < l.effects.length; i++) {
  n = this.effectInstances[this.getSpellLevelId() + "-effects-" + i], o = n.rawZone, o && c[o] ? n.cellZoneEffect = c[o] : (a = n.getZoneEffect(), n.cellZoneEffect = x.getSpellEffectZone(s, e, t, a), o && (c[o] = n.cellZoneEffect));
}
if (!this.isWeapon()) {
  for (i = 0; i < l.criticalEffect.length; i++) {
    n = this.effectInstances[this.getSpellLevelId() + "-criticalEffect-" + i], o = n.rawZone, o && c[o] ? n.cellZoneEffect = c[o] : (a = n.getZoneEffect(), n.cellZoneEffect = x.getSpellEffectZone(s, e, t, a), o && (c[o] = n.cellZoneEffect));
  }
}
for (i = 0; i < l.criticalEffect.length; i++) {
  n = this.effectInstances[this.getSpellLevelId() + "-criticalEffect-" + i], o = n.rawZone, o && c[o] ? n.cellZoneEffect = c[o] : (a = n.getZoneEffect(), n.cellZoneEffect = x.getSpellEffectZone(s, e, t, a), o && (c[o] = n.cellZoneEffect));
}
for (var e in this.effectInstances) {
  this.effectInstances.hasOwnProperty(e) && (this.effectInstances[e].cellZoneEffect = {});
}
for (e = 0; e < o.effects.length; e++) {
  t = this.effectInstances[this.getSpellLevelId() + "-effects-" + e], t.isPreview || (i.effects.push(t), n && o.item && o.item.criticalHitBonus && i.criticalEffects.push(t));
}
if (!n) {
  for (e = 0; e < o.criticalEffect.length; e++) {
    t = this.effectInstances[this.getSpellLevelId() + "-criticalEffect-" + e], t.isPreview || i.criticalEffects.push(t);
  }
}
for (e = 0; e < o.criticalEffect.length; e++) {
  t = this.effectInstances[this.getSpellLevelId() + "-criticalEffect-" + e], t.isPreview || i.criticalEffects.push(t);
}
for (var i = window.isoEngine.mapRenderer.map.cells, n = x.getSpellRange(i, e, {
    castInDiagonal: this.getProperty("castInDiagonal"),
    castInLine: this.getProperty("castInLine"),
    minRange: this.getProperty("minRange"),
    range: this.getProperty("range")
  }), o = 0; o < n.length; o++) {
  var a = L.getCellIdFromMapPoint(n[o][0], n[o][1]);
  if (a === t) {
    return !0;
  }
}
if (a === t) {
  return !0;
}
if (!e || !this.castingData || this.isItem) {
  return 0;
}
if (0 === this.spellLevel.initialCooldown || this.castingData.lastCastTurn >= this.castingData.lastInitialCooldownReset + this.spellLevel.initialCooldown) {
  if (63 === i) {
    return 63;
  }
  t = i + this.castingData.lastCastTurn - n;
} else {
  t = this.castingData.lastInitialCooldownReset + this.spellLevel.initialCooldown - n;
}
if (63 === i) {
  return 63;
}
for (var a = i || 1; a <= n; a++) {
  for (var s = 0; s < a; s++) {
    var r = a - s;
    o.push([e + s, t - r, a]), o.push([e + r, t + s, a]), o.push([e - s, t + r, a]), o.push([e - r, t - s, a]);
  }
}
for (var s = 0; s < a; s++) {
  var r = a - s;
  o.push([e + s, t - r, a]), o.push([e + r, t + s, a]), o.push([e - s, t + r, a]), o.push([e - r, t - s, a]);
}
for (var a = i || 1; a <= n; a++) {
  o.push([e - a, t, a]), o.push([e + a, t, a]), o.push([e, t - a, a]), o.push([e, t + a, a]);
}
for (var a = i || 1; a <= n; a++) {
  o.push([e - a, t - a, a]), o.push([e - a, t + a, a]), o.push([e + a, t - a, a]), o.push([e + a, t + a, a]);
}
for (var a = i || 1; a <= n; a++) {
  o.push([e - a, t, a]), o.push([e + a, t, a]), o.push([e, t - a, a]), o.push([e, t + a, a]), o.push([e - a, t - a, a]), o.push([e - a, t + a, a]), o.push([e + a, t - a, a]), o.push([e + a, t + a, a]);
}
for (var a = i || 1; a <= n; a++) {
  o.push([e - a, t, a]), o.push([e + a, t, a]), o.push([e, t - a, a]), o.push([e, t + a, a]), o.push([e - a, t - a, a]), o.push([e - a, t + a, a]), o.push([e + a, t - a, a]), o.push([e + a, t + a, a]);
  for (var s = 1; s < a; s++) {
    o.push([e + a, t + s, a]), o.push([e + a, t - s, a]), o.push([e - a, t + s, a]), o.push([e - a, t - s, a]), o.push([e + s, t + a, a]), o.push([e - s, t + a, a]), o.push([e + s, t - a, a]), o.push([e - s, t - a, a]);
  }
}
for (var s = 1; s < a; s++) {
  o.push([e + a, t + s, a]), o.push([e + a, t - s, a]), o.push([e - a, t + s, a]), o.push([e - a, t - s, a]), o.push([e + s, t + a, a]), o.push([e - s, t + a, a]), o.push([e + s, t - a, a]), o.push([e - s, t - a, a]);
}
for (var s = [], r = i; r <= n; r++) {
  var l = e + r * o,
    c = t + r * a;
  s.push([l, c, r]);
  for (var d = 1; d <= r; d++) {
    s.push([l + d * a, c - d * o, r]), s.push([l - d * a, c + d * o, r]);
  }
}
for (var d = 1; d <= r; d++) {
  s.push([l + d * a, c - d * o, r]), s.push([l - d * a, c + d * o, r]);
}
for (var r = i || 1; r <= n; r++) {
  var l = e - r * o,
    c = t - r * a;
  s.push([l + r * a, c - r * o, r]), s.push([l - r * a, c + r * o, r]);
}
for (var o = [], a = i || 1; a <= n; a++) {
  o.push([e - a, t, a]), o.push([e + a, t, a]), o.push([e, t - a, a]), o.push([e, t + a, a]);
  for (var s = 1; s < a; s++) {
    o.push([e + a, t + s, a]), o.push([e + a, t - s, a]), o.push([e - a, t + s, a]), o.push([e - a, t - s, a]), o.push([e + s, t + a, a]), o.push([e - s, t + a, a]), o.push([e + s, t - a, a]), o.push([e - s, t - a, a]);
  }
}
for (var s = 1; s < a; s++) {
  o.push([e + a, t + s, a]), o.push([e + a, t - s, a]), o.push([e - a, t + s, a]), o.push([e - a, t - s, a]), o.push([e + s, t + a, a]), o.push([e - s, t + a, a]), o.push([e + s, t - a, a]), o.push([e - s, t - a, a]);
}
for (var s = [], r = i; r <= n; r++) {
  s.push([e + o * r, t + a * r, r]);
}
for (var r = i || 1; r <= n; r++) {
  s.push([e + a * r, t - o * r, r]), s.push([e - a * r, t + o * r, r]);
}
for (var o = _.getMapPointFromCellId(t), a = n(o.x, o.y, 0, i), s = [], r = 0; r < a.length; r++) {
  var l = _.getCellIdFromMapPoint(a[r][0], a[r][1]);
  if (void 0 !== l) {
    var c = e[l].l || 0;
    1 === (5 & c) && s.push(l);
  }
}
if (void 0 !== l) {
  var c = e[l].l || 0;
  1 === (5 & c) && s.push(l);
}
if (a) {
  var s,
    r,
    l = _.getMapPointFromCellId(i);
  if (a.hasDirection) {
    var c = _.getMapPointFromCellId(t);
    s = l.x === c.x ? 0 : l.x > c.x ? 1 : -1, r = l.y === c.y ? 0 : l.y > c.y ? 1 : -1;
  }
  for (var d = a.withoutCenter ? n.zoneMinSize || 1 : n.zoneMinSize, u = a.fn(l.x, l.y, d, n.zoneSize, s, r), h = 0; h < u.length; h++) {
    var p = _.getCellIdFromMapPoint(u[h][0], u[h][1]);
    if (void 0 !== p) {
      var m = e[p].l || 0;
      if (1 === (5 & m)) {
        var f;
        f = window.foreground.fightIsUserTurn ? v.areaOfEffect : v.areaOfEffectEnemyTurn, o[p] = new g(p, u[h][2], f);
      }
    }
  }
} else {
  void 0 === a && console.error("Incorrect Effect shape id: " + n.zoneShape), o[i] = new g(i, 0, window.foreground.fightIsUserTurn ? v.areaOfEffect : v.areaOfEffectEnemyTurn);
}
if (a.hasDirection) {
  var c = _.getMapPointFromCellId(t);
  s = l.x === c.x ? 0 : l.x > c.x ? 1 : -1, r = l.y === c.y ? 0 : l.y > c.y ? 1 : -1;
}
for (var d = a.withoutCenter ? n.zoneMinSize || 1 : n.zoneMinSize, u = a.fn(l.x, l.y, d, n.zoneSize, s, r), h = 0; h < u.length; h++) {
  var p = _.getCellIdFromMapPoint(u[h][0], u[h][1]);
  if (void 0 !== p) {
    var m = e[p].l || 0;
    if (1 === (5 & m)) {
      var f;
      f = window.foreground.fightIsUserTurn ? v.areaOfEffect : v.areaOfEffectEnemyTurn, o[p] = new g(p, u[h][2], f);
    }
  }
}
if (void 0 !== p) {
  var m = e[p].l || 0;
  if (1 === (5 & m)) {
    var f;
    f = window.foreground.fightIsUserTurn ? v.areaOfEffect : v.areaOfEffectEnemyTurn, o[p] = new g(p, u[h][2], f);
  }
}
if (1 === (5 & m)) {
  var f;
  f = window.foreground.fightIsUserTurn ? v.areaOfEffect : v.areaOfEffectEnemyTurn, o[p] = new g(p, u[h][2], f);
}
for (var e = 0; e < 560; e++) {
  var t = o(e);
  T[t.x + "_" + t.y] = e;
}
if (!r) {
  return console.error("Movement points variation step failed, fighter does not exist");
}
if (o && (r.data.stats.movementPoints += i, s.controlledCharacterId === t)) {
  var l = s.getControlledCharacter();
  s.setCharacteristic(l, "movementPointsCurrent", r.data.stats.movementPoints);
}
if (!r) {
  return console.error("Action points variation step failed, fighter does not exist");
}
if (o && (r.data.stats.actionPoints += i, s.controlledCharacterId === t && !n)) {
  var l = s.getControlledCharacter();
  s.setCharacteristic(l, "actionPointsCurrent", l.characteristics.actionPointsCurrent + i);
}
if (o === s.id) {
  var r = s.characters.mainCharacter;
  n.prepareSpellsWithInitialCooldown(r), s.characters.setCharacteristic(r, "lifePoints", i.stats.lifePoints);
}
if (e) {
  return console.error(e);
}
if (n !== -1) {
  var a = o.getFighter(i);
  if (!a) {
    return console.error("Throw character step failed, fighter does not exist");
  }
  a.data.disposition.cellId = n;
}
if (!a) {
  return console.error("Throw character step failed, fighter does not exist");
}
if (!l) {
  return console.error("Fighter " + t + " does not exist.");
}
if (!o) {
  return console.error("Fighter " + t + " does not exist.");
}
for (var t = 0; t < e.length; t++) {
  this.spellShortcuts.push(e[t]);
}
for (var t = 0; t < this.spellShortcuts.length; t++) {
  if (this.spellShortcuts[t].slotIndex === e.slotIndex) {
    return void (this.spellShortcuts[t] = e);
  }
}
if (this.spellShortcuts[t].slotIndex === e.slotIndex) {
  return void (this.spellShortcuts[t] = e);
}
if (e) {
  return console.error(e);
}
for (var i in this.spells) {
  var n = this._spellsStatus[i] || 0;
  n >= e && (t[i] = this.spells[i]);
}
if (i) {
  return e(i);
}
for (var o in n) {
  var a = t.spells[o];
  a && (t.spells[o] = n[o], t.spells[o].ownerId = a.ownerId, t.spells[o].setLevel(a.level), t.spells[o].setPosition(a.position));
}
if (e) {
  return console.error(e);
}
for (var a in o) {
  o[a].ownerId = n.characterId, n.spells[a] = o[a];
  var s = t[a];
  s && (void 0 !== s.level && o[a].setLevel(s.level), void 0 !== s.position && o[a].setPosition(s.position));
}
for (var o in e) {
  var a = e[o];
  this._spellsStatus[o] = a.spellStatus, this.spells[o] ? void 0 !== a.spellLevel && void 0 !== a.position && (this.spells[o].setLevel(a.spellLevel), this.spells[o].setPosition(a.position)) : (n[o] = {
    level: a.spellLevel,
    position: a.position
  }, i.push(o));
}
if (o = o || n, r && s === d.USABLE && (a = r.level), l.log("character_progression.spell_level_change", {
  spell_level_before: a,
  spell_level_after: t,
  spell_id: e
}), this._spellsStatus[e] = i, r) {
  return r.setLevel(t), o();
}
for (var t in this.spells) {
  var i = this.spells[t];
  if (!i.isItem && i.spellLevel.id === e) {
    return i;
  }
}
if (!i.isItem && i.spellLevel.id === e) {
  return i;
}
if (window.gui.pingSystem.isActive()) {
  return !1;
}
if (!e) {
  return !1;
}
if (!w) {
  var o = i(e, n),
    a = Date.now() - g;
  if (o / l + a / c >= b) {
    return !0;
  }
}
if (o / l + a / c >= b) {
  return !0;
}
if (!t) {
  return !1;
}
if (!r) {
  return void console.error(new Error("touch1 is null, touchCount: " + s.touchCount + " x: " + s.x + " y: " + s.y));
}
if (!y) {
  if (!n(r, l)) {
    return;
  }
  return void (a.requestInteractionHandle("TRANSFORM", e) ? (y = !0, e.isTransforming = !0, e.emit("transformStart", s, f)) : e.cancelTransform());
}
if (!n(r, l)) {
  return;
}
if (l) {
  c = {
    x: (r.x + l.x) / 2,
    y: (r.y + l.y) / 2
  };
  var u = i(r, l);
  m && (d = u / m), m = u;
}
if (!e._transformBehavior) {
  e._transformBehavior = !0, e.allowDomEvents();
  var h,
    p,
    m,
    f,
    g,
    _ = !1,
    v = !1,
    y = !1;
  e.on("dom.wheel", function (t) {
    if (a.requestInteractionHandle("TRANSFORM", e)) {
      h = s(e.rootElement);
      var i = t.wheelDeltaY > 0 ? r : 1 / r;
      e.emit("transform", t.x - h.left, t.y - h.top, 0, 0, i);
    }
  }), e.isTransforming = !1;
  var w = !1;
  e.setTranslationEnable = function (e) {
    w = !e;
  };
  var b = 2 / ("HIGH" === t ? 3 : 1);
  e.cancelTransform = function () {
    v && (_ = !0, p = m = null, v = !1, e.removeListener("dom.touchmove", u), e.isTransforming = !1, y && e.emit("transformEnd"));
  }, e.on("dom.touchstart", function (t) {
    if (p = m = null, !v && !_) {
      var i = o(t);
      w && 2 !== i.touchCount || i.touchCount > 2 || (h = s(e.rootElement), v = !0, y = !1, f = i.touches, g = Date.now(), e.on("dom.touchmove", u));
    }
  }), e.on("dom.touchend", function (t) {
    p = m = null;
    var i = o(t);
    return _ || 0 !== i.touchCount ? void (_ = !1) : (e.removeListener("dom.touchmove", u), v = !1, void (y && (e.isTransforming = !1, e.emit("transformEnd", i))));
  });
}
if (a.requestInteractionHandle("TRANSFORM", e)) {
  h = s(e.rootElement);
  var i = t.wheelDeltaY > 0 ? r : 1 / r;
  e.emit("transform", t.x - h.left, t.y - h.top, 0, 0, i);
}
if (p = m = null, !v && !_) {
  var i = o(t);
  w && 2 !== i.touchCount || i.touchCount > 2 || (h = s(e.rootElement), v = !0, y = !1, f = i.touches, g = Date.now(), e.on("dom.touchmove", u));
}
for (var t in e) {
  this.hasOwnProperty("_" + t) && (this["_" + t] = e[t]);
}
if (e.font = w, this._nameWidth = e.measureText(this._charName).width, t.push(this._nameWidth), n = _, this._guild) {
  var o = this._guild.guildName;
  e.font = y, this._guildNameWidth = e.measureText(o).width, t.push(this._guildNameWidth + 2 * A), t.push(this._nameWidth + 2 * A), n += T + g;
}
if (this._title) {
  e.font = b;
  var a = this._title,
    s = e.measureText(a).width;
  t.push(s), n += T + v;
}
if (this._guild) {
  var d = this._guild.guildName;
  t.font = y, t.fillStyle = "#ffffff", c += g, t.fillText(d, l + r, c), c += T;
}
if (this._charName && (t.font = w, t.fillStyle = "#ffffff", c += _, t.fillText(this._charName, l + r, c), c += T), this._title) {
  t.font = b, t.fillStyle = "#00B346";
  var p = this._title;
  c += v, t.fillText(p, Math.round(i / 2), c);
}
if (this._guild && (t.drawImage(this._guildEmblem.getContext().canvas, l - A, M, 40, 40), t.drawImage(this._allianceEmblem.getContext().canvas, l + a + I, M, 40, 40)), this._alignment && this._alignment.alignmentSide !== u.ALIGNMENT_NEUTRAL && 0 !== this._alignment.alignmentGrade) {
  var m = window.gui.playerData.alignment,
    f = 20,
    C = this._levelDiff === -1 ? .6 : 1,
    S = 1 === this._levelDiff ? f : 0,
    E = this._alignment.alignmentSide === u.ALIGNMENT_ANGEL ? "#ffffff" : "#ff0018",
    N = function (e, t, i, n, o) {
      var a = t.width + 2 * f,
        s = t.height + 2 * f,
        r = t.left - f,
        l = t.top;
      l += o ? -f : f, i.width = a, i.height = s, i.setStyles({
        left: r + "px",
        top: l + "px",
        width: a + "px",
        height: s + "px",
        opacity: C
      }), n.shadowBlur = S, n.shadowColor = E, n.drawImage(e, f, f);
    };
  m.getTopWings(this._alignment, function (t) {
    h.loadImage(t.imagePath, function (i) {
      N(i, t, e._wingsTopCanvas, e._wingsTopCtx, !0), e._wingsTopCanvas.show();
    });
  }), m.getBottomWings(this._alignment, function (t) {
    t ? h.loadImage(t.imagePath, function (i) {
      N(i, t, e._wingsBottomCanvas, e._wingsBottomCtx, !1), e._wingsBottomCanvas.show();
    }) : e._wingsBottomCanvas.hide();
  });
} else {
  e._wingsTopCanvas.hide(), e._wingsBottomCanvas.hide();
}
for (var r in n.symbols) {
  var l = n.symbols[r];
  if (l.className && l.className.indexOf("ornament_") !== -1) {
    this._resizeOrnament(l);
    for (var c = l.children.length - 1; c >= 0; c--) {
      var d = l.children[c],
        u = d.id,
        h = n.symbols[u],
        p = d.matrices[0],
        g = n.matrices[p],
        _ = g[0],
        v = g[1],
        y = g[2],
        w = g[3],
        b = g[4],
        M = g[5];
      switch (d.name) {
        case "left":
          M += s;
          break;
        case "right":
          b += t, M += s;
          break;
        case "picto":
          b += a;
          break;
        case "top":
          b += a;
          break;
        case "bottom":
          b += a, M += i;
      }
      e.save(), e.transform(_, v, y, w, b, M);
      var T = isNaN(parseInt(h.sx, 10)) || isNaN(parseInt(h.sy, 10)) || isNaN(parseInt(h.sw, 10)) || isNaN(parseInt(h.sh, 10)) || isNaN(parseInt(h.x, 10)) || isNaN(parseInt(h.y, 10)) || isNaN(parseInt(h.w, 10)) || isNaN(parseInt(h.h, 10));
      if (T) {
        ;
      } else if ("bg" === d.name) {
        this._displayText();
        var C = h.sw / h.w,
          I = h.sh / h.h,
          A = .5 * m - h.x,
          S = .5 * f - h.y,
          E = h.w + h.x - .5 * m,
          N = h.h + h.y - .5 * f;
        e.drawImage(o, h.sx, h.sy, A * C, S * I, h.x, h.y, A, S), e.drawImage(o, h.sx + A * C, h.sy, E * C, S * I, h.x + A + t, h.y, E, S), e.drawImage(o, h.sx, h.sy + S * I, A * C, N * I, h.x, h.y + S + i, A, N), e.drawImage(o, h.sx + A * C, h.sy + S * I, E * C, N * I, h.x + A + t, h.y + S + i, E, N), e.drawImage(o, h.sx + A * C, h.sy, 1 * C, S * I, h.x + A, h.y, t, S), e.drawImage(o, h.sx + A * C, h.sy + S * I, 1 * C, N * I, h.x + A, h.y + S + i, t, N), e.drawImage(o, h.sx, h.sy + S * I, A * C, 1 * I, h.x, h.y + S, A, i), e.drawImage(o, h.sx + A * C, h.sy + S * I, A * C, 1 * I, h.x + A + t, h.y + S, A, i);
      } else {
        e.drawImage(o, h.sx, h.sy, h.sw, h.sh, h.x, h.y, h.w, h.h);
      }
      e.restore();
    }
  }
}
if (l.className && l.className.indexOf("ornament_") !== -1) {
  this._resizeOrnament(l);
  for (var c = l.children.length - 1; c >= 0; c--) {
    var d = l.children[c],
      u = d.id,
      h = n.symbols[u],
      p = d.matrices[0],
      g = n.matrices[p],
      _ = g[0],
      v = g[1],
      y = g[2],
      w = g[3],
      b = g[4],
      M = g[5];
    switch (d.name) {
      case "left":
        M += s;
        break;
      case "right":
        b += t, M += s;
        break;
      case "picto":
        b += a;
        break;
      case "top":
        b += a;
        break;
      case "bottom":
        b += a, M += i;
    }
    e.save(), e.transform(_, v, y, w, b, M);
    var T = isNaN(parseInt(h.sx, 10)) || isNaN(parseInt(h.sy, 10)) || isNaN(parseInt(h.sw, 10)) || isNaN(parseInt(h.sh, 10)) || isNaN(parseInt(h.x, 10)) || isNaN(parseInt(h.y, 10)) || isNaN(parseInt(h.w, 10)) || isNaN(parseInt(h.h, 10));
    if (T) {
      ;
    } else if ("bg" === d.name) {
      this._displayText();
      var C = h.sw / h.w,
        I = h.sh / h.h,
        A = .5 * m - h.x,
        S = .5 * f - h.y,
        E = h.w + h.x - .5 * m,
        N = h.h + h.y - .5 * f;
      e.drawImage(o, h.sx, h.sy, A * C, S * I, h.x, h.y, A, S), e.drawImage(o, h.sx + A * C, h.sy, E * C, S * I, h.x + A + t, h.y, E, S), e.drawImage(o, h.sx, h.sy + S * I, A * C, N * I, h.x, h.y + S + i, A, N), e.drawImage(o, h.sx + A * C, h.sy + S * I, E * C, N * I, h.x + A + t, h.y + S + i, E, N), e.drawImage(o, h.sx + A * C, h.sy, 1 * C, S * I, h.x + A, h.y, t, S), e.drawImage(o, h.sx + A * C, h.sy + S * I, 1 * C, N * I, h.x + A, h.y + S + i, t, N), e.drawImage(o, h.sx, h.sy + S * I, A * C, 1 * I, h.x, h.y + S, A, i), e.drawImage(o, h.sx + A * C, h.sy + S * I, A * C, 1 * I, h.x + A + t, h.y + S, A, i);
    } else {
      e.drawImage(o, h.sx, h.sy, h.sw, h.sh, h.x, h.y, h.w, h.h);
    }
    e.restore();
  }
}
for (var c = l.children.length - 1; c >= 0; c--) {
  var d = l.children[c],
    u = d.id,
    h = n.symbols[u],
    p = d.matrices[0],
    g = n.matrices[p],
    _ = g[0],
    v = g[1],
    y = g[2],
    w = g[3],
    b = g[4],
    M = g[5];
  switch (d.name) {
    case "left":
      M += s;
      break;
    case "right":
      b += t, M += s;
      break;
    case "picto":
      b += a;
      break;
    case "top":
      b += a;
      break;
    case "bottom":
      b += a, M += i;
  }
  e.save(), e.transform(_, v, y, w, b, M);
  var T = isNaN(parseInt(h.sx, 10)) || isNaN(parseInt(h.sy, 10)) || isNaN(parseInt(h.sw, 10)) || isNaN(parseInt(h.sh, 10)) || isNaN(parseInt(h.x, 10)) || isNaN(parseInt(h.y, 10)) || isNaN(parseInt(h.w, 10)) || isNaN(parseInt(h.h, 10));
  if (T) {
    ;
  } else if ("bg" === d.name) {
    this._displayText();
    var C = h.sw / h.w,
      I = h.sh / h.h,
      A = .5 * m - h.x,
      S = .5 * f - h.y,
      E = h.w + h.x - .5 * m,
      N = h.h + h.y - .5 * f;
    e.drawImage(o, h.sx, h.sy, A * C, S * I, h.x, h.y, A, S), e.drawImage(o, h.sx + A * C, h.sy, E * C, S * I, h.x + A + t, h.y, E, S), e.drawImage(o, h.sx, h.sy + S * I, A * C, N * I, h.x, h.y + S + i, A, N), e.drawImage(o, h.sx + A * C, h.sy + S * I, E * C, N * I, h.x + A + t, h.y + S + i, E, N), e.drawImage(o, h.sx + A * C, h.sy, 1 * C, S * I, h.x + A, h.y, t, S), e.drawImage(o, h.sx + A * C, h.sy + S * I, 1 * C, N * I, h.x + A, h.y + S + i, t, N), e.drawImage(o, h.sx, h.sy + S * I, A * C, 1 * I, h.x, h.y + S, A, i), e.drawImage(o, h.sx + A * C, h.sy + S * I, A * C, 1 * I, h.x + A + t, h.y + S, A, i);
  } else {
    e.drawImage(o, h.sx, h.sy, h.sw, h.sh, h.x, h.y, h.w, h.h);
  }
  e.restore();
}
if (T) {
  ;
} else if ("bg" === d.name) {
  this._displayText();
  var C = h.sw / h.w,
    I = h.sh / h.h,
    A = .5 * m - h.x,
    S = .5 * f - h.y,
    E = h.w + h.x - .5 * m,
    N = h.h + h.y - .5 * f;
  e.drawImage(o, h.sx, h.sy, A * C, S * I, h.x, h.y, A, S), e.drawImage(o, h.sx + A * C, h.sy, E * C, S * I, h.x + A + t, h.y, E, S), e.drawImage(o, h.sx, h.sy + S * I, A * C, N * I, h.x, h.y + S + i, A, N), e.drawImage(o, h.sx + A * C, h.sy + S * I, E * C, N * I, h.x + A + t, h.y + S + i, E, N), e.drawImage(o, h.sx + A * C, h.sy, 1 * C, S * I, h.x + A, h.y, t, S), e.drawImage(o, h.sx + A * C, h.sy + S * I, 1 * C, N * I, h.x + A, h.y + S + i, t, N), e.drawImage(o, h.sx, h.sy + S * I, A * C, 1 * I, h.x, h.y + S, A, i), e.drawImage(o, h.sx + A * C, h.sy + S * I, A * C, 1 * I, h.x + A + t, h.y + S, A, i);
} else {
  e.drawImage(o, h.sx, h.sy, h.sw, h.sh, h.x, h.y, h.w, h.h);
}
if ("bg" === d.name) {
  this._displayText();
  var C = h.sw / h.w,
    I = h.sh / h.h,
    A = .5 * m - h.x,
    S = .5 * f - h.y,
    E = h.w + h.x - .5 * m,
    N = h.h + h.y - .5 * f;
  e.drawImage(o, h.sx, h.sy, A * C, S * I, h.x, h.y, A, S), e.drawImage(o, h.sx + A * C, h.sy, E * C, S * I, h.x + A + t, h.y, E, S), e.drawImage(o, h.sx, h.sy + S * I, A * C, N * I, h.x, h.y + S + i, A, N), e.drawImage(o, h.sx + A * C, h.sy + S * I, E * C, N * I, h.x + A + t, h.y + S + i, E, N), e.drawImage(o, h.sx + A * C, h.sy, 1 * C, S * I, h.x + A, h.y, t, S), e.drawImage(o, h.sx + A * C, h.sy + S * I, 1 * C, N * I, h.x + A, h.y + S + i, t, N), e.drawImage(o, h.sx, h.sy + S * I, A * C, 1 * I, h.x, h.y + S, A, i), e.drawImage(o, h.sx + A * C, h.sy + S * I, A * C, 1 * I, h.x + A + t, h.y + S, A, i);
} else {
  e.drawImage(o, h.sx, h.sy, h.sw, h.sh, h.x, h.y, h.w, h.h);
}
if (e.children.length) {
  for (var a = e.children.length - 1; a >= 0; a--) {
    var s = e.children[a],
      r = s.id,
      l = this._jsonObj.symbols[r];
    if (l.isGraphic) {
      var c = s.matrices[0],
        d = this._jsonObj.matrices[c],
        u = d[4] + l.x || 0,
        h = d[5] + l.y || 0;
      t = Math.min(t, h), i = Math.min(i, u), n = Math.max(n, u + l.w), o = Math.max(o, h + l.h);
    }
  }
  var p = Math.round(n - i + this._diffWidth),
    m = Math.round(o - t + this._diffHeight);
  this._resizeCanvas(p, m, -i, -t);
}
for (var a = e.children.length - 1; a >= 0; a--) {
  var s = e.children[a],
    r = s.id,
    l = this._jsonObj.symbols[r];
  if (l.isGraphic) {
    var c = s.matrices[0],
      d = this._jsonObj.matrices[c],
      u = d[4] + l.x || 0,
      h = d[5] + l.y || 0;
    t = Math.min(t, h), i = Math.min(i, u), n = Math.max(n, u + l.w), o = Math.max(o, h + l.h);
  }
}
if (l.isGraphic) {
  var c = s.matrices[0],
    d = this._jsonObj.matrices[c],
    u = d[4] + l.x || 0,
    h = d[5] + l.y || 0;
  t = Math.min(t, h), i = Math.min(i, u), n = Math.max(n, u + l.w), o = Math.max(o, h + l.h);
}
if (t.isLeader) {
  return r("ui.guild.right.leader");
}
if (e.backgroundShape && e.symbolShape) {
  var t = this.getContext(),
    i = this.tempCtx;
  t.clearRect(0, 0, this.width, this.height), t.drawImage(e.backgroundShape, 0, 0, this.width, this.height);
  var n,
    o = this.backgroundColor;
  if (o) {
    var a = t.getImageData(0, 0, this.width, this.height),
      s = a.data,
      r = o[0] / d,
      l = o[1] / u,
      c = o[2] / h;
    for (n = 0; n < s.length; n += 4) {
      s[n] *= r, s[n + 1] *= l, s[n + 2] *= c;
    }
    t.putImageData(a, 0, 0);
  }
  i.clearRect(0, 0, this.width, this.height), i.drawImage(e.symbolShape, this.symbolPosX, this.symbolPosY, this.symbolWidth, this.symbolHeight);
  var p = this.symbolColor;
  if (p && !this._isAnkamaSymbol) {
    var m = i.getImageData(0, 0, this.width, this.height),
      f = m.data;
    for (n = 0; n < f.length; n += 4) {
      0 !== f[n + 3] && (f[n] = p[0], f[n + 1] = p[1], f[n + 2] = p[2]);
    }
    i.putImageData(m, 0, 0);
  }
  t.drawImage(i.canvas, 0, 0, this.width, this.height), this.isLeader && t.drawImage(e.crownImage, this.crownPosX, this.crownPosY, this.crownWidth, this.crownHeight);
}
if (o) {
  var a = t.getImageData(0, 0, this.width, this.height),
    s = a.data,
    r = o[0] / d,
    l = o[1] / u,
    c = o[2] / h;
  for (n = 0; n < s.length; n += 4) {
    s[n] *= r, s[n + 1] *= l, s[n + 2] *= c;
  }
  t.putImageData(a, 0, 0);
}
for (n = 0; n < s.length; n += 4) {
  s[n] *= r, s[n + 1] *= l, s[n + 2] *= c;
}
if (p && !this._isAnkamaSymbol) {
  var m = i.getImageData(0, 0, this.width, this.height),
    f = m.data;
  for (n = 0; n < f.length; n += 4) {
    0 !== f[n + 3] && (f[n] = p[0], f[n + 1] = p[1], f[n + 2] = p[2]);
  }
  i.putImageData(m, 0, 0);
}
for (n = 0; n < f.length; n += 4) {
  0 !== f[n + 3] && (f[n] = p[0], f[n + 1] = p[1], f[n + 2] = p[2]);
}
if (t = t || e.dec2rgb, e.hasOwnProperty("guild") && (t = !0, this.isLeader = e.guild.allianceLeader, e = e.guild.guildEmblem), e.hasOwnProperty("backgroundColor") && (t ? this.backgroundColor = l.hexToRgb((+e.backgroundColor).toString(16)) : this.backgroundColor = e.backgroundColor), e.hasOwnProperty("backgroundShape")) {
  var r = "gfx/emblems/icons/" + (e.isAlliance ? "backalliance" : "back") + "/" + e.backgroundShape + ".png";
  o.push(r), s.push("backgroundShape");
}
if (e.hasOwnProperty("symbolShape")) {
  this._isAnkamaSymbol = e.symbolShape === f;
  var c = "gfx/emblems/icons/up/" + e.symbolShape + ".png";
  o.push(c), s.push("symbolShape");
}
if (n && n.rootElement) {
  for (var t = 0; t < s.length; t += 1) {
    n.images[s[t]] = e[t];
  }
  if (n._generateEmblem(), "function" == typeof i) {
    return i();
  }
} else if ("function" == typeof i) {
  return i();
}
for (var t = 0; t < s.length; t += 1) {
  n.images[s[t]] = e[t];
}
if (n._generateEmblem(), "function" == typeof i) {
  return i();
}
if ("function" == typeof i) {
  return i();
}
if (h = e, a.jeffVersionDowngrader(h), _ += 1, _ === v) {
  return i && i(h, u);
}
if (u = n ? n.createTexture(e, f, r, l) : e, _ += 1, _ === v) {
  return i && i(h, u);
}
for (var n in t) {
  if (t.hasOwnProperty(n)) {
    var s = t[n];
    if (Number.isInteger(s.actorId) && s.actorId < 0 && "GameRolePlayGroupMonsterInformations" === t[n].data.type) {
      var r = new o("div", {
          className: "sceneTooltip"
        }),
        l = e.appendChild(new a({
          content: r
        }));
      e._constructMonsterTooltip(r, s.data, s);
      var d = s.bbox,
        u = i.convertSceneToCanvasCoordinate(d[0], d[2]),
        h = i.convertSceneToCanvasCoordinate(d[1], d[3]),
        p = h.x - u.x,
        m = h.y - u.y,
        f = (u.x + h.x) / 2,
        g = (u.y + h.y) / 2;
      l.openTooltipAt(f, g, p, m + 2 * c, r), e._monsterTooltips.push(l);
    }
  }
}
if (t.hasOwnProperty(n)) {
  var s = t[n];
  if (Number.isInteger(s.actorId) && s.actorId < 0 && "GameRolePlayGroupMonsterInformations" === t[n].data.type) {
    var r = new o("div", {
        className: "sceneTooltip"
      }),
      l = e.appendChild(new a({
        content: r
      }));
    e._constructMonsterTooltip(r, s.data, s);
    var d = s.bbox,
      u = i.convertSceneToCanvasCoordinate(d[0], d[2]),
      h = i.convertSceneToCanvasCoordinate(d[1], d[3]),
      p = h.x - u.x,
      m = h.y - u.y,
      f = (u.x + h.x) / 2,
      g = (u.y + h.y) / 2;
    l.openTooltipAt(f, g, p, m + 2 * c, r), e._monsterTooltips.push(l);
  }
}
if (Number.isInteger(s.actorId) && s.actorId < 0 && "GameRolePlayGroupMonsterInformations" === t[n].data.type) {
  var r = new o("div", {
      className: "sceneTooltip"
    }),
    l = e.appendChild(new a({
      content: r
    }));
  e._constructMonsterTooltip(r, s.data, s);
  var d = s.bbox,
    u = i.convertSceneToCanvasCoordinate(d[0], d[2]),
    h = i.convertSceneToCanvasCoordinate(d[1], d[3]),
    p = h.x - u.x,
    m = h.y - u.y,
    f = (u.x + h.x) / 2,
    g = (u.y + h.y) / 2;
  l.openTooltipAt(f, g, p, m + 2 * c, r), e._monsterTooltips.push(l);
}
if (this._monsterTooltips && !(this._monsterTooltips.length <= 0)) {
  for (var t = this._monsterTooltips.length, i = 0; i < t; i++) {
    for (var n = this._monsterTooltips[i], o = n.getComputedPosition(), a = o.TL.x, s = o.TL.y, r = o.BR.x - o.TL.x, l = o.BR.y - o.TL.y, c = {}, d = 0, u = null, h = 0; h < t; h++) {
      if (h !== i && d < t) {
        var p = this._monsterTooltips[h].getComputedPosition(),
          m = o.TL.x < p.BR.x,
          f = o.BR.x > p.TL.x,
          g = o.TL.y < p.BR.y,
          _ = o.BR.y > p.TL.y;
        if (m && f && g && _) {
          var v = [],
            y = null;
          switch (c.left || "right" === u || v.push({
            name: "left",
            value: o.BR.x - p.TL.x
          }), c.right || "left" === u || v.push({
            name: "right",
            value: p.BR.x - o.TL.x
          }), c.bottom || "top" === u || v.push({
            name: "bottom",
            value: p.BR.y - o.TL.y
          }), c.top || "bottom" === u || v.push({
            name: "top",
            value: o.BR.y - p.TL.y
          }), v.length > 0 && (y = v.reduce(function (e, t) {
            return e.value < t.value ? e : t;
          })), y.name) {
            case "left":
              o.BR.x = p.TL.x, o.TL.x = o.BR.x - r;
              break;
            case "right":
              o.TL.x = p.BR.x, o.BR.x = o.TL.x + r;
              break;
            case "bottom":
              o.TL.y = p.BR.y, o.BR.y = o.TL.y + l;
              break;
            case "top":
              o.BR.y = p.TL.y, o.TL.y = o.BR.y - l;
          }
          var w = o.TL.x < 0 || o.BR.x > e.viewWidth,
            b = o.TL.y < 0 || o.BR.y > e.viewHeight;
          w || b ? (c[y.name] = !0, o.BR.x = a + r, o.BR.y = s + l, o.TL.x = a, o.TL.y = s, h--) : (u = y.name, a = o.TL.x, s = o.TL.y, c = {}, d++, h = -1);
        }
      }
    }
    n.setStyles({
      webkitTransform: "translate3d(" + o.TL.x + "px," + o.TL.y + "px,0)"
    });
  }
}
for (var t = this._monsterTooltips.length, i = 0; i < t; i++) {
  for (var n = this._monsterTooltips[i], o = n.getComputedPosition(), a = o.TL.x, s = o.TL.y, r = o.BR.x - o.TL.x, l = o.BR.y - o.TL.y, c = {}, d = 0, u = null, h = 0; h < t; h++) {
    if (h !== i && d < t) {
      var p = this._monsterTooltips[h].getComputedPosition(),
        m = o.TL.x < p.BR.x,
        f = o.BR.x > p.TL.x,
        g = o.TL.y < p.BR.y,
        _ = o.BR.y > p.TL.y;
      if (m && f && g && _) {
        var v = [],
          y = null;
        switch (c.left || "right" === u || v.push({
          name: "left",
          value: o.BR.x - p.TL.x
        }), c.right || "left" === u || v.push({
          name: "right",
          value: p.BR.x - o.TL.x
        }), c.bottom || "top" === u || v.push({
          name: "bottom",
          value: p.BR.y - o.TL.y
        }), c.top || "bottom" === u || v.push({
          name: "top",
          value: o.BR.y - p.TL.y
        }), v.length > 0 && (y = v.reduce(function (e, t) {
          return e.value < t.value ? e : t;
        })), y.name) {
          case "left":
            o.BR.x = p.TL.x, o.TL.x = o.BR.x - r;
            break;
          case "right":
            o.TL.x = p.BR.x, o.BR.x = o.TL.x + r;
            break;
          case "bottom":
            o.TL.y = p.BR.y, o.BR.y = o.TL.y + l;
            break;
          case "top":
            o.BR.y = p.TL.y, o.TL.y = o.BR.y - l;
        }
        var w = o.TL.x < 0 || o.BR.x > e.viewWidth,
          b = o.TL.y < 0 || o.BR.y > e.viewHeight;
        w || b ? (c[y.name] = !0, o.BR.x = a + r, o.BR.y = s + l, o.TL.x = a, o.TL.y = s, h--) : (u = y.name, a = o.TL.x, s = o.TL.y, c = {}, d++, h = -1);
      }
    }
  }
  n.setStyles({
    webkitTransform: "translate3d(" + o.TL.x + "px," + o.TL.y + "px,0)"
  });
}
for (var n = this._monsterTooltips[i], o = n.getComputedPosition(), a = o.TL.x, s = o.TL.y, r = o.BR.x - o.TL.x, l = o.BR.y - o.TL.y, c = {}, d = 0, u = null, h = 0; h < t; h++) {
  if (h !== i && d < t) {
    var p = this._monsterTooltips[h].getComputedPosition(),
      m = o.TL.x < p.BR.x,
      f = o.BR.x > p.TL.x,
      g = o.TL.y < p.BR.y,
      _ = o.BR.y > p.TL.y;
    if (m && f && g && _) {
      var v = [],
        y = null;
      switch (c.left || "right" === u || v.push({
        name: "left",
        value: o.BR.x - p.TL.x
      }), c.right || "left" === u || v.push({
        name: "right",
        value: p.BR.x - o.TL.x
      }), c.bottom || "top" === u || v.push({
        name: "bottom",
        value: p.BR.y - o.TL.y
      }), c.top || "bottom" === u || v.push({
        name: "top",
        value: o.BR.y - p.TL.y
      }), v.length > 0 && (y = v.reduce(function (e, t) {
        return e.value < t.value ? e : t;
      })), y.name) {
        case "left":
          o.BR.x = p.TL.x, o.TL.x = o.BR.x - r;
          break;
        case "right":
          o.TL.x = p.BR.x, o.BR.x = o.TL.x + r;
          break;
        case "bottom":
          o.TL.y = p.BR.y, o.BR.y = o.TL.y + l;
          break;
        case "top":
          o.BR.y = p.TL.y, o.TL.y = o.BR.y - l;
      }
      var w = o.TL.x < 0 || o.BR.x > e.viewWidth,
        b = o.TL.y < 0 || o.BR.y > e.viewHeight;
      w || b ? (c[y.name] = !0, o.BR.x = a + r, o.BR.y = s + l, o.TL.x = a, o.TL.y = s, h--) : (u = y.name, a = o.TL.x, s = o.TL.y, c = {}, d++, h = -1);
    }
  }
}
if (h !== i && d < t) {
  var p = this._monsterTooltips[h].getComputedPosition(),
    m = o.TL.x < p.BR.x,
    f = o.BR.x > p.TL.x,
    g = o.TL.y < p.BR.y,
    _ = o.BR.y > p.TL.y;
  if (m && f && g && _) {
    var v = [],
      y = null;
    switch (c.left || "right" === u || v.push({
      name: "left",
      value: o.BR.x - p.TL.x
    }), c.right || "left" === u || v.push({
      name: "right",
      value: p.BR.x - o.TL.x
    }), c.bottom || "top" === u || v.push({
      name: "bottom",
      value: p.BR.y - o.TL.y
    }), c.top || "bottom" === u || v.push({
      name: "top",
      value: o.BR.y - p.TL.y
    }), v.length > 0 && (y = v.reduce(function (e, t) {
      return e.value < t.value ? e : t;
    })), y.name) {
      case "left":
        o.BR.x = p.TL.x, o.TL.x = o.BR.x - r;
        break;
      case "right":
        o.TL.x = p.BR.x, o.BR.x = o.TL.x + r;
        break;
      case "bottom":
        o.TL.y = p.BR.y, o.BR.y = o.TL.y + l;
        break;
      case "top":
        o.BR.y = p.TL.y, o.TL.y = o.BR.y - l;
    }
    var w = o.TL.x < 0 || o.BR.x > e.viewWidth,
      b = o.TL.y < 0 || o.BR.y > e.viewHeight;
    w || b ? (c[y.name] = !0, o.BR.x = a + r, o.BR.y = s + l, o.TL.x = a, o.TL.y = s, h--) : (u = y.name, a = o.TL.x, s = o.TL.y, c = {}, d++, h = -1);
  }
}
if (m && f && g && _) {
  var v = [],
    y = null;
  switch (c.left || "right" === u || v.push({
    name: "left",
    value: o.BR.x - p.TL.x
  }), c.right || "left" === u || v.push({
    name: "right",
    value: p.BR.x - o.TL.x
  }), c.bottom || "top" === u || v.push({
    name: "bottom",
    value: p.BR.y - o.TL.y
  }), c.top || "bottom" === u || v.push({
    name: "top",
    value: o.BR.y - p.TL.y
  }), v.length > 0 && (y = v.reduce(function (e, t) {
    return e.value < t.value ? e : t;
  })), y.name) {
    case "left":
      o.BR.x = p.TL.x, o.TL.x = o.BR.x - r;
      break;
    case "right":
      o.TL.x = p.BR.x, o.BR.x = o.TL.x + r;
      break;
    case "bottom":
      o.TL.y = p.BR.y, o.BR.y = o.TL.y + l;
      break;
    case "top":
      o.BR.y = p.TL.y, o.TL.y = o.BR.y - l;
  }
  var w = o.TL.x < 0 || o.BR.x > e.viewWidth,
    b = o.TL.y < 0 || o.BR.y > e.viewHeight;
  w || b ? (c[y.name] = !0, o.BR.x = a + r, o.BR.y = s + l, o.TL.x = a, o.TL.y = s, h--) : (u = y.name, a = o.TL.x, s = o.TL.y, c = {}, d++, h = -1);
}
if (d) {
  var u = window.gui.playerData.ToaData.getMonsterLevelScaled(d);
  for (v = 0; v < c.length; v += 1) {
    c[v].staticInfos.level = u;
  }
}
for (v = 0; v < c.length; v += 1) {
  c[v].staticInfos.level = u;
}
if (p) {
  for (var f, g = 0; p[g] && p[g].playerCount <= o;) {
    f = p[g], g += 1;
  }
  for (v = 0; v < f.monsters.length; v++) {
    m.push(f.monsters[v].creatureGenericId);
  }
}
for (var f, g = 0; p[g] && p[g].playerCount <= o;) {
  f = p[g], g += 1;
}
for (v = 0; v < f.monsters.length; v++) {
  m.push(f.monsters[v].creatureGenericId);
}
for (var _ = 0, v = 0, y = h.length; v < y; v += 1) {
  var w = h[v],
    b = w.staticInfos;
  if (w) {
    _ += b.level;
    var M = m.indexOf(w.creatureGenericId);
    M !== -1 && m.splice(M, 1), p && M === -1 || a.push({
      id: w.creatureGenericId,
      xp: b.xp,
      level: b.level
    });
  }
}
if (w) {
  _ += b.level;
  var M = m.indexOf(w.creatureGenericId);
  M !== -1 && m.splice(M, 1), p && M === -1 || a.push({
    id: w.creatureGenericId,
    xp: b.xp,
    level: b.level
  });
}
for (var A = 0, S = h.length; A < S; A += 1) {
  w = h[A].staticInfos, w && e.createChild("div", {
    text: w.nameId + " (" + w.level + ")"
  });
}
if (this.initialized) {
  return e();
}
if (i.isCanvasCoordinate) {
  var a = window.foreground.convertCanvasToScreenCoordinate(n, o);
  n = a.x, o = a.y;
}
for (var i in h) {
  var a = h[i],
    r = h[i] = e.appendChild(new a());
  r.allowDomEvents(), r.on("dom.touchstart", n), r.on("close", o);
}
if (e.status < 400 || e.status > 599) {
  return e;
}
if (t._statusCode || e.status > 599) {
  throw t;
}
for (var s = 0; s < a.length; s += 1) {
  switch (t = i.replaceSymbols(a[s].command), a[s].type) {
    case "sendChat":
      o.sendChatCommand(t);
      break;
    default:
      n.runCommand(t);
  }
}
for (var i, n = 0; n < e.length; n += 1) {
  i = e[n], this._addItem(i);
}
if (!i || null === a) {
  return this.close(), e();
}
if (a === d) {
  var u = l.G2_MODERATOR[l.G2_MODERATOR.length - 1];
  s = i + d + ".json", r = i + u + ".json";
}
if (void 0 !== e) {
  if (this.requestedHeight = e, !this.isOpen && !this.isOpening) {
    return;
  }
  if (this.requestedHeight === this.currentHeight) {
    return;
  }
}
if (this.requestedHeight = e, !this.isOpen && !this.isOpening) {
  return;
}
if (this.requestedHeight === this.currentHeight) {
  return;
}
if (!this.isOpening) {
  if (this.isOpen) {
    return this.close(), void (this.next = {
      positioningMethod: e,
      params: t
    });
  }
  if (e()) {
    this.isOpening = !0, this._tween1 && this._tween1.cancel(), this._tween2 && this._tween2.cancel(), this.show(), this.contextContent.setStyle("overflow", "visible"), this.entryList.setStyle("webkitTransform", "translate3d(0,-100%,0)");
    var n = this;
    this.emit("open", t, function () {
      n._refreshScroller();
      var t = e();
      n._setPosition(t.x, t.y), n.contextContent.setStyle("overflow", "hidden"), window.setTimeout(i, 0);
    });
  }
}
if (this.isOpen) {
  return this.close(), void (this.next = {
    positioningMethod: e,
    params: t
  });
}
if (e()) {
  this.isOpening = !0, this._tween1 && this._tween1.cancel(), this._tween2 && this._tween2.cancel(), this.show(), this.contextContent.setStyle("overflow", "visible"), this.entryList.setStyle("webkitTransform", "translate3d(0,-100%,0)");
  var n = this;
  this.emit("open", t, function () {
    n._refreshScroller();
    var t = e();
    n._setPosition(t.x, t.y), n.contextContent.setStyle("overflow", "hidden"), window.setTimeout(i, 0);
  });
}
if (this.isOpening) {
  return void (this.closeRequest = !0);
}
if (!this.isClosing && this.isOpen) {
  this.isClosing = !0, this._tween1 && this._tween1.cancel(), this._tween2 && this._tween2.cancel();
  var t = this;
  this.emit("close", e), this._tween1 = h.tween(this.entryList, {
    webkitTransform: "translate3d(0,-100%,0)"
  }, {
    time: 200,
    easing: "ease-out"
  }, function () {
    t._tween1 = null, t.isClosing = !1, t.isOpen = !1, t.next && (t._openingAnimation(t.next.positioningMethod, t.next.params), t.next = null);
  }), this._tween2 = h.tween(this, {
    webkitTransform: "translate3d(0,0,0)",
    opacity: 0
  }, {
    delay: 100,
    time: 100,
    easing: "ease-out"
  }, function () {
    t.hide(), t._tween2 = null;
  });
}
if (d.show = function () {
  o.isPhoneGap && s.plugins.Keyboard.show();
}, d.hide = function () {
  "INPUT" === document.activeElement.tagName && document.activeElement.blur(), o.isPhoneGap && (s.plugins.Keyboard.close(), o.isAndroid && m.setStyle("height", "")), n();
}, d.disableScroll = function (e) {
  o.isPhoneGap && (p = e);
}, d.pauseScrollAndroid = function (e) {
  o.isPhoneGap && o.isAndroid && m.setStyle("overflowY", e ? "hidden" : "auto");
}, d.resetScrollAndroid = function () {
  o.isPhoneGap && o.isAndroid && (m.rootElement.scrollLeft = 0, m.rootElement.scrollTop = 0);
}, d.hideKeyboardAccessoryBar = function (e) {
  o.isPhoneGap && s.plugins.Keyboard.hideKeyboardAccessoryBar(e);
}, d.setAutomaticHide = function (e) {
  u = !!e;
}, document.body.addEventListener(l.end, function (e) {
  "INPUT" === document.activeElement.tagName && "INPUT" !== e.target.tagName && u && d.hide();
}, !1), o.isPhoneGap) {
  var f = new c(document.getElementById("dofusBody"));
  window.addEventListener("native.keyboardshow", function (e) {
    if (o.isAndroid && !h) {
      var t = parseInt(f.getStyle("height"), 10),
        i = screen.availHeight * devicePixelRatio,
        n = i - e.keyboardHeight * devicePixelRatio,
        a = n / (i / t);
      m.setStyle("height", a + "px");
      var s = document.activeElement;
      "INPUT" !== s.tagName || p || (m.rootElement.scrollLeft = 0, m.rootElement.scrollTop = s.getBoundingClientRect().top);
    }
    d.emit("show", e.keyboardHeight);
  }), window.addEventListener("native.keyboardhide", function () {
    o.isAndroid && m.setStyle("height", "");
    var e = "INPUT" === document.activeElement.tagName && document.activeElement;
    setTimeout(function () {
      n();
      var t = "INPUT" === document.activeElement.tagName;
      t && e !== document.activeElement || (h = !1, d.emit("hide"), e && document.activeElement.blur());
    }, 0);
  });
}
if (o.isAndroid && !h) {
  var t = parseInt(f.getStyle("height"), 10),
    i = screen.availHeight * devicePixelRatio,
    n = i - e.keyboardHeight * devicePixelRatio,
    a = n / (i / t);
  m.setStyle("height", a + "px");
  var s = document.activeElement;
  "INPUT" !== s.tagName || p || (m.rootElement.scrollLeft = 0, m.rootElement.scrollTop = s.getBoundingClientRect().top);
}
if (this.rootElement) {
  if (!e && 0 === this.rootElement.clientHeight) {
    return void (this.requestRefresh = !0);
  }
  this.iScroll.refresh(), this.toggleClassName("scrollBgVisible", this.iScroll.hasVerticalScroll || this.iScroll.hasHorizontalScroll), this._refreshHints(), this.requestRefresh = !1;
}
if (!e && 0 === this.rootElement.clientHeight) {
  return void (this.requestRefresh = !0);
}
if (this.scrollUpHint && this.canScrollDown() && (this.notifyCount = y, !this.notifyInterval)) {
  var e = this;
  this.notifyInterval = window.setInterval(function () {
    e.scrollDownHint.toggleDisplay(), e.notifyCount--, e.notifyCount > 0 || (window.clearInterval(e.notifyInterval), e.notifyInterval = null, e._refreshHints());
  }, v);
}
for (var n in t) {
  this.options[n] = t[n];
}
for (var o in n) {
  this.options[o] = n[o];
}
for (var e, t = ["t", "webkitT", "MozT", "msT", "OT"], i = 0, n = t.length; i < n; i++) {
  if (e = t[i] + "ransform", e in a) {
    return t[i].substr(0, t[i].length - 1);
  }
}
if (e = t[i] + "ransform", e in a) {
  return t[i].substr(0, t[i].length - 1);
}
for (var i in t) {
  e[i] = t[i];
}
if (!o.hasClass(e, t)) {
  var i = e.className.split(" ");
  i.push(t), e.className = i.join(" ");
}
if (o.hasClass(e, t)) {
  var i = new RegExp("(^|\\s)" + t + "(\\s|$)", "g");
  e.className = e.className.replace(i, " ");
}
for (var t = -e.offsetLeft, i = -e.offsetTop; e = e.offsetParent;) {
  t -= e.offsetLeft, i -= e.offsetTop;
}
for (var i in t) {
  if (t[i].test(e[i])) {
    return !0;
  }
}
if (t[i].test(e[i])) {
  return !0;
}
if ((1 == l.eventType[e.type] || 0 === e.button) && this.enabled && (!this.initiated || l.eventType[e.type] === this.initiated)) {
  !this.options.preventDefault || l.isBadAndroid || l.preventDefaultException(e.target, this.options.preventDefaultException) || e.preventDefault();
  var t,
    i = e.touches ? e.touches[0] : e;
  this.initiated = l.eventType[e.type], this.moved = !1, this.distX = 0, this.distY = 0, this.directionX = 0, this.directionY = 0, this.directionLocked = 0, this._transitionTime(), this.startTime = l.getTime(), this.options.useTransition && this.isInTransition ? (this.isInTransition = !1, t = this.getComputedPosition(), this._translate(n.round(t.x), n.round(t.y)), this._execEvent("scrollEnd")) : !this.options.useTransition && this.isAnimating && (this.isAnimating = !1, this._execEvent("scrollEnd")), this.startX = this.x, this.startY = this.y, this.absStartX = this.x, this.absStartY = this.y, this.pointX = i.pageX, this.pointY = i.pageY, this._execEvent("beforeScrollStart");
}
if (this.enabled && l.eventType[e.type] === this.initiated) {
  this.options.preventDefault && e.preventDefault();
  var t,
    i,
    o,
    a,
    s = e.touches ? e.touches[0] : e,
    r = s.pageX - this.pointX,
    c = s.pageY - this.pointY,
    d = l.getTime();
  if (this.pointX = s.pageX, this.pointY = s.pageY, this.distX += r, this.distY += c, o = n.abs(this.distX), a = n.abs(this.distY), !(d - this.endTime > 300 && o < 10 && a < 10)) {
    if (this.directionLocked || this.options.freeScroll || (o > a + this.options.directionLockThreshold ? this.directionLocked = "h" : a >= o + this.options.directionLockThreshold ? this.directionLocked = "v" : this.directionLocked = "n"), "h" == this.directionLocked) {
      if ("vertical" == this.options.eventPassthrough) {
        e.preventDefault();
      } else if ("horizontal" == this.options.eventPassthrough) {
        return void (this.initiated = !1);
      }
      c = 0;
    } else if ("v" == this.directionLocked) {
      if ("horizontal" == this.options.eventPassthrough) {
        e.preventDefault();
      } else if ("vertical" == this.options.eventPassthrough) {
        return void (this.initiated = !1);
      }
      r = 0;
    }
    r = this.hasHorizontalScroll ? r : 0, c = this.hasVerticalScroll ? c : 0, t = this.x + r, i = this.y + c, (t > 0 || t < this.maxScrollX) && (t = this.options.bounce ? this.x + r / 3 : t > 0 ? 0 : this.maxScrollX), (i > 0 || i < this.maxScrollY) && (i = this.options.bounce ? this.y + c / 3 : i > 0 ? 0 : this.maxScrollY), this.directionX = r > 0 ? -1 : r < 0 ? 1 : 0, this.directionY = c > 0 ? -1 : c < 0 ? 1 : 0, this.moved || this._execEvent("scrollStart"), this.moved = !0, this._translate(t, i), d - this.startTime > 300 && (this.startTime = d, this.startX = this.x, this.startY = this.y);
  }
}
if (this.pointX = s.pageX, this.pointY = s.pageY, this.distX += r, this.distY += c, o = n.abs(this.distX), a = n.abs(this.distY), !(d - this.endTime > 300 && o < 10 && a < 10)) {
  if (this.directionLocked || this.options.freeScroll || (o > a + this.options.directionLockThreshold ? this.directionLocked = "h" : a >= o + this.options.directionLockThreshold ? this.directionLocked = "v" : this.directionLocked = "n"), "h" == this.directionLocked) {
    if ("vertical" == this.options.eventPassthrough) {
      e.preventDefault();
    } else if ("horizontal" == this.options.eventPassthrough) {
      return void (this.initiated = !1);
    }
    c = 0;
  } else if ("v" == this.directionLocked) {
    if ("horizontal" == this.options.eventPassthrough) {
      e.preventDefault();
    } else if ("vertical" == this.options.eventPassthrough) {
      return void (this.initiated = !1);
    }
    r = 0;
  }
  r = this.hasHorizontalScroll ? r : 0, c = this.hasVerticalScroll ? c : 0, t = this.x + r, i = this.y + c, (t > 0 || t < this.maxScrollX) && (t = this.options.bounce ? this.x + r / 3 : t > 0 ? 0 : this.maxScrollX), (i > 0 || i < this.maxScrollY) && (i = this.options.bounce ? this.y + c / 3 : i > 0 ? 0 : this.maxScrollY), this.directionX = r > 0 ? -1 : r < 0 ? 1 : 0, this.directionY = c > 0 ? -1 : c < 0 ? 1 : 0, this.moved || this._execEvent("scrollStart"), this.moved = !0, this._translate(t, i), d - this.startTime > 300 && (this.startTime = d, this.startX = this.x, this.startY = this.y);
}
if (this.directionLocked || this.options.freeScroll || (o > a + this.options.directionLockThreshold ? this.directionLocked = "h" : a >= o + this.options.directionLockThreshold ? this.directionLocked = "v" : this.directionLocked = "n"), "h" == this.directionLocked) {
  if ("vertical" == this.options.eventPassthrough) {
    e.preventDefault();
  } else if ("horizontal" == this.options.eventPassthrough) {
    return void (this.initiated = !1);
  }
  c = 0;
} else if ("v" == this.directionLocked) {
  if ("horizontal" == this.options.eventPassthrough) {
    e.preventDefault();
  } else if ("vertical" == this.options.eventPassthrough) {
    return void (this.initiated = !1);
  }
  r = 0;
}
if ("vertical" == this.options.eventPassthrough) {
  e.preventDefault();
} else if ("horizontal" == this.options.eventPassthrough) {
  return void (this.initiated = !1);
}
if ("horizontal" == this.options.eventPassthrough) {
  return void (this.initiated = !1);
}
if ("v" == this.directionLocked) {
  if ("horizontal" == this.options.eventPassthrough) {
    e.preventDefault();
  } else if ("vertical" == this.options.eventPassthrough) {
    return void (this.initiated = !1);
  }
  r = 0;
}
if ("horizontal" == this.options.eventPassthrough) {
  e.preventDefault();
} else if ("vertical" == this.options.eventPassthrough) {
  return void (this.initiated = !1);
}
if ("vertical" == this.options.eventPassthrough) {
  return void (this.initiated = !1);
}
if (this.enabled && l.eventType[e.type] === this.initiated) {
  this.options.preventDefault && !l.preventDefaultException(e.target, this.options.preventDefaultException) && e.preventDefault();
  var t,
    i,
    o = (e.changedTouches ? e.changedTouches[0] : e, l.getTime() - this.startTime),
    a = n.round(this.x),
    s = n.round(this.y),
    r = n.abs(a - this.startX),
    c = n.abs(s - this.startY),
    d = 0,
    u = "";
  if (this.isInTransition = 0, this.initiated = 0, this.endTime = l.getTime(), !this.resetPosition(this.options.bounceTime)) {
    if (this.scrollTo(a, s), !this.moved) {
      return this.options.tap && l.tap(e, this.options.tap), this.options.click && l.click(e), void this._execEvent("scrollCancel");
    }
    if (this._events.flick && o < 200 && r < 100 && c < 100) {
      return void this._execEvent("flick");
    }
    if (this.options.momentum && o < 300 && (t = this.hasHorizontalScroll ? l.momentum(this.x, this.startX, o, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration, this.options.maxSpeed) : {
      destination: a,
      duration: 0
    }, i = this.hasVerticalScroll ? l.momentum(this.y, this.startY, o, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration, this.options.maxSpeed) : {
      destination: s,
      duration: 0
    }, a = t.destination, s = i.destination, d = n.max(t.duration, i.duration), this.isInTransition = 1), this.options.snap) {
      var h = this._nearestSnap(a, s);
      this.currentPage = h, d = this.options.snapSpeed || n.max(n.max(n.min(n.abs(a - h.x), 1e3), n.min(n.abs(s - h.y), 1e3)), 300), a = h.x, s = h.y, this.directionX = 0, this.directionY = 0, u = this.options.bounceEasing;
    }
    return a != this.x || s != this.y ? ((a > 0 || a < this.maxScrollX || s > 0 || s < this.maxScrollY) && (u = l.ease.quadratic), void this.scrollTo(a, s, d, u)) : void this._execEvent("scrollEnd");
  }
}
if (this.isInTransition = 0, this.initiated = 0, this.endTime = l.getTime(), !this.resetPosition(this.options.bounceTime)) {
  if (this.scrollTo(a, s), !this.moved) {
    return this.options.tap && l.tap(e, this.options.tap), this.options.click && l.click(e), void this._execEvent("scrollCancel");
  }
  if (this._events.flick && o < 200 && r < 100 && c < 100) {
    return void this._execEvent("flick");
  }
  if (this.options.momentum && o < 300 && (t = this.hasHorizontalScroll ? l.momentum(this.x, this.startX, o, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration, this.options.maxSpeed) : {
    destination: a,
    duration: 0
  }, i = this.hasVerticalScroll ? l.momentum(this.y, this.startY, o, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration, this.options.maxSpeed) : {
    destination: s,
    duration: 0
  }, a = t.destination, s = i.destination, d = n.max(t.duration, i.duration), this.isInTransition = 1), this.options.snap) {
    var h = this._nearestSnap(a, s);
    this.currentPage = h, d = this.options.snapSpeed || n.max(n.max(n.min(n.abs(a - h.x), 1e3), n.min(n.abs(s - h.y), 1e3)), 300), a = h.x, s = h.y, this.directionX = 0, this.directionY = 0, u = this.options.bounceEasing;
  }
  return a != this.x || s != this.y ? ((a > 0 || a < this.maxScrollX || s > 0 || s < this.maxScrollY) && (u = l.ease.quadratic), void this.scrollTo(a, s, d, u)) : void this._execEvent("scrollEnd");
}
if (this.scrollTo(a, s), !this.moved) {
  return this.options.tap && l.tap(e, this.options.tap), this.options.click && l.click(e), void this._execEvent("scrollCancel");
}
if (this._events.flick && o < 200 && r < 100 && c < 100) {
  return void this._execEvent("flick");
}
if (this.options.momentum && o < 300 && (t = this.hasHorizontalScroll ? l.momentum(this.x, this.startX, o, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration, this.options.maxSpeed) : {
  destination: a,
  duration: 0
}, i = this.hasVerticalScroll ? l.momentum(this.y, this.startY, o, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration, this.options.maxSpeed) : {
  destination: s,
  duration: 0
}, a = t.destination, s = i.destination, d = n.max(t.duration, i.duration), this.isInTransition = 1), this.options.snap) {
  var h = this._nearestSnap(a, s);
  this.currentPage = h, d = this.options.snapSpeed || n.max(n.max(n.min(n.abs(a - h.x), 1e3), n.min(n.abs(s - h.y), 1e3)), 300), a = h.x, s = h.y, this.directionX = 0, this.directionY = 0, u = this.options.bounceEasing;
}
if (this._events[e]) {
  var i = this._events[e].indexOf(t);
  i > -1 && this._events[e].splice(i, 1);
}
if (this._events[e]) {
  var t = 0,
    i = this._events[e].length;
  if (i) {
    for (; t < i; t++) {
      this._events[e][t].apply(this, [].slice.call(arguments, 1));
    }
  }
}
if (i) {
  for (; t < i; t++) {
    this._events[e][t].apply(this, [].slice.call(arguments, 1));
  }
}
for (; t < i; t++) {
  this._events[e][t].apply(this, [].slice.call(arguments, 1));
}
if (e = e.nodeType ? e : this.scroller.querySelector(e)) {
  var s = l.offset(e);
  s.left -= this.wrapperOffset.left, s.top -= this.wrapperOffset.top, i === !0 && (i = n.round(e.offsetWidth / 2 - this.wrapper.offsetWidth / 2)), o === !0 && (o = n.round(e.offsetHeight / 2 - this.wrapper.offsetHeight / 2)), s.left -= i || 0, s.top -= o || 0, s.left = s.left > 0 ? 0 : s.left < this.maxScrollX ? this.maxScrollX : s.left, s.top = s.top > 0 ? 0 : s.top < this.maxScrollY ? this.maxScrollY : s.top, t = void 0 === t || null === t || "auto" === t ? n.max(n.abs(this.x - s.left), n.abs(this.y - s.top)) : t, this.scrollTo(s.left, s.top, t, a);
}
if (e = e || 0, this.scrollerStyle[l.style.transitionDuration] = e + "ms", !e && l.isBadAndroid && (this.scrollerStyle[l.style.transitionDuration] = "0.001s"), this.indicators) {
  for (var t = this.indicators.length; t--;) {
    this.indicators[t].transitionTime(e);
  }
}
for (var t = this.indicators.length; t--;) {
  this.indicators[t].transitionTime(e);
}
if (this.scrollerStyle[l.style.transitionTimingFunction] = e, this.indicators) {
  for (var t = this.indicators.length; t--;) {
    this.indicators[t].transitionTimingFunction(e);
  }
}
for (var t = this.indicators.length; t--;) {
  this.indicators[t].transitionTimingFunction(e);
}
if (this.options.useTransform ? this.scrollerStyle[l.style.transform] = "translate(" + e + "px," + t + "px)" + this.translateZ : (e = n.round(e), t = n.round(t), this.scrollerStyle.left = e + "px", this.scrollerStyle.top = t + "px"), this.x = e, this.y = t, this.indicators) {
  for (var i = this.indicators.length; i--;) {
    this.indicators[i].updatePosition();
  }
}
for (var i = this.indicators.length; i--;) {
  this.indicators[i].updatePosition();
}
if (r.indicators) {
  for (var t = r.indicators.length; t--;) {
    e.call(r.indicators[t]);
  }
}
for (var t = r.indicators.length; t--;) {
  e.call(r.indicators[t]);
}
for (var l = o.length; l--;) {
  this.indicators.push(new s(this, o[l]));
}
if (this.enabled) {
  e.preventDefault(), e.stopPropagation();
  var t,
    i,
    o,
    a,
    s = this;
  if (void 0 === this.wheelTimeout && s._execEvent("scrollStart"), clearTimeout(this.wheelTimeout), this.wheelTimeout = setTimeout(function () {
    s._execEvent("scrollEnd"), s.wheelTimeout = void 0;
  }, 400), "deltaX" in e) {
    1 === e.deltaMode ? (t = -e.deltaX * this.options.mouseWheelSpeed, i = -e.deltaY * this.options.mouseWheelSpeed) : (t = -e.deltaX, i = -e.deltaY);
  } else if ("wheelDeltaX" in e) {
    t = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed, i = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;
  } else if ("wheelDelta" in e) {
    t = i = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
  } else {
    if (!("detail" in e)) {
      return;
    }
    t = i = -e.detail / 3 * this.options.mouseWheelSpeed;
  }
  if (t *= this.options.invertWheelDirection, i *= this.options.invertWheelDirection, this.hasVerticalScroll || (t = i, i = 0), this.options.snap) {
    return o = this.currentPage.pageX, a = this.currentPage.pageY, t > 0 ? o-- : t < 0 && o++, i > 0 ? a-- : i < 0 && a++, void this.goToPage(o, a);
  }
  o = this.x + n.round(this.hasHorizontalScroll ? t : 0), a = this.y + n.round(this.hasVerticalScroll ? i : 0), o > 0 ? o = 0 : o < this.maxScrollX && (o = this.maxScrollX), a > 0 ? a = 0 : a < this.maxScrollY && (a = this.maxScrollY), this.scrollTo(o, a, 0);
}
if (void 0 === this.wheelTimeout && s._execEvent("scrollStart"), clearTimeout(this.wheelTimeout), this.wheelTimeout = setTimeout(function () {
  s._execEvent("scrollEnd"), s.wheelTimeout = void 0;
}, 400), "deltaX" in e) {
  1 === e.deltaMode ? (t = -e.deltaX * this.options.mouseWheelSpeed, i = -e.deltaY * this.options.mouseWheelSpeed) : (t = -e.deltaX, i = -e.deltaY);
} else if ("wheelDeltaX" in e) {
  t = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed, i = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;
} else if ("wheelDelta" in e) {
  t = i = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
} else {
  if (!("detail" in e)) {
    return;
  }
  t = i = -e.detail / 3 * this.options.mouseWheelSpeed;
}
if ("wheelDeltaX" in e) {
  t = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed, i = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;
} else if ("wheelDelta" in e) {
  t = i = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
} else {
  if (!("detail" in e)) {
    return;
  }
  t = i = -e.detail / 3 * this.options.mouseWheelSpeed;
}
if ("wheelDelta" in e) {
  t = i = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
} else {
  if (!("detail" in e)) {
    return;
  }
  t = i = -e.detail / 3 * this.options.mouseWheelSpeed;
}
if (!("detail" in e)) {
  return;
}
if (t *= this.options.invertWheelDirection, i *= this.options.invertWheelDirection, this.hasVerticalScroll || (t = i, i = 0), this.options.snap) {
  return o = this.currentPage.pageX, a = this.currentPage.pageY, t > 0 ? o-- : t < 0 && o++, i > 0 ? a-- : i < 0 && a++, void this.goToPage(o, a);
}
if (this.pages = [], this.wrapperWidth && this.wrapperHeight && this.scrollerWidth && this.scrollerHeight) {
  if (this.options.snap === !0) {
    for (i = n.round(d / 2), o = n.round(u / 2); c > -this.scrollerWidth;) {
      for (this.pages[r] = [], e = 0, a = 0; a > -this.scrollerHeight;) {
        this.pages[r][e] = {
          x: n.max(c, this.maxScrollX),
          y: n.max(a, this.maxScrollY),
          width: d,
          height: u,
          cx: c - i,
          cy: a - o
        }, a -= u, e++;
      }
      c -= d, r++;
    }
  } else {
    for (s = this.options.snap, e = s.length, t = -1; r < e; r++) {
      (0 === r || s[r].offsetLeft <= s[r - 1].offsetLeft) && (l = 0, t++), this.pages[l] || (this.pages[l] = []), c = n.max(-s[r].offsetLeft, this.maxScrollX), a = n.max(-s[r].offsetTop, this.maxScrollY), i = c - n.round(s[r].offsetWidth / 2), o = a - n.round(s[r].offsetHeight / 2), this.pages[l][t] = {
        x: c,
        y: a,
        width: s[r].offsetWidth,
        height: s[r].offsetHeight,
        cx: i,
        cy: o
      }, c > this.maxScrollX && l++;
    }
  }
  this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0), this.options.snapThreshold % 1 === 0 ? (this.snapThresholdX = this.options.snapThreshold, this.snapThresholdY = this.options.snapThreshold) : (this.snapThresholdX = n.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold), this.snapThresholdY = n.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold));
}
if (this.options.snap === !0) {
  for (i = n.round(d / 2), o = n.round(u / 2); c > -this.scrollerWidth;) {
    for (this.pages[r] = [], e = 0, a = 0; a > -this.scrollerHeight;) {
      this.pages[r][e] = {
        x: n.max(c, this.maxScrollX),
        y: n.max(a, this.maxScrollY),
        width: d,
        height: u,
        cx: c - i,
        cy: a - o
      }, a -= u, e++;
    }
    c -= d, r++;
  }
} else {
  for (s = this.options.snap, e = s.length, t = -1; r < e; r++) {
    (0 === r || s[r].offsetLeft <= s[r - 1].offsetLeft) && (l = 0, t++), this.pages[l] || (this.pages[l] = []), c = n.max(-s[r].offsetLeft, this.maxScrollX), a = n.max(-s[r].offsetTop, this.maxScrollY), i = c - n.round(s[r].offsetWidth / 2), o = a - n.round(s[r].offsetHeight / 2), this.pages[l][t] = {
      x: c,
      y: a,
      width: s[r].offsetWidth,
      height: s[r].offsetHeight,
      cx: i,
      cy: o
    }, c > this.maxScrollX && l++;
  }
}
for (i = n.round(d / 2), o = n.round(u / 2); c > -this.scrollerWidth;) {
  for (this.pages[r] = [], e = 0, a = 0; a > -this.scrollerHeight;) {
    this.pages[r][e] = {
      x: n.max(c, this.maxScrollX),
      y: n.max(a, this.maxScrollY),
      width: d,
      height: u,
      cx: c - i,
      cy: a - o
    }, a -= u, e++;
  }
  c -= d, r++;
}
for (this.pages[r] = [], e = 0, a = 0; a > -this.scrollerHeight;) {
  this.pages[r][e] = {
    x: n.max(c, this.maxScrollX),
    y: n.max(a, this.maxScrollY),
    width: d,
    height: u,
    cx: c - i,
    cy: a - o
  }, a -= u, e++;
}
for (s = this.options.snap, e = s.length, t = -1; r < e; r++) {
  (0 === r || s[r].offsetLeft <= s[r - 1].offsetLeft) && (l = 0, t++), this.pages[l] || (this.pages[l] = []), c = n.max(-s[r].offsetLeft, this.maxScrollX), a = n.max(-s[r].offsetTop, this.maxScrollY), i = c - n.round(s[r].offsetWidth / 2), o = a - n.round(s[r].offsetHeight / 2), this.pages[l][t] = {
    x: c,
    y: a,
    width: s[r].offsetWidth,
    height: s[r].offsetHeight,
    cx: i,
    cy: o
  }, c > this.maxScrollX && l++;
}
if (!this.pages.length) {
  return {
    x: 0,
    y: 0,
    pageX: 0,
    pageY: 0
  };
}
if (n.abs(e - this.absStartX) < this.snapThresholdX && n.abs(t - this.absStartY) < this.snapThresholdY) {
  return this.currentPage;
}
for (e > 0 ? e = 0 : e < this.maxScrollX && (e = this.maxScrollX), t > 0 ? t = 0 : t < this.maxScrollY && (t = this.maxScrollY); i < o; i++) {
  if (e >= this.pages[i][0].cx) {
    e = this.pages[i][0].x;
    break;
  }
}
if (e >= this.pages[i][0].cx) {
  e = this.pages[i][0].x;
  break;
}
for (o = this.pages[i].length; a < o; a++) {
  if (t >= this.pages[0][a].cy) {
    t = this.pages[0][a].y;
    break;
  }
}
if (t >= this.pages[0][a].cy) {
  t = this.pages[0][a].y;
  break;
}
if ("object" == typeof this.options.keyBindings) {
  for (i in this.options.keyBindings) {
    "string" == typeof this.options.keyBindings[i] && (this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0));
  }
} else {
  this.options.keyBindings = {};
}
for (i in this.options.keyBindings) {
  "string" == typeof this.options.keyBindings[i] && (this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0));
}
for (i in n) {
  this.options.keyBindings[i] = this.options.keyBindings[i] || n[i];
}
if (this.enabled) {
  var t,
    i = this.options.snap,
    o = i ? this.currentPage.pageX : this.x,
    a = i ? this.currentPage.pageY : this.y,
    s = l.getTime(),
    r = this.keyTime || 0,
    c = .25;
  switch (this.options.useTransition && this.isInTransition && (t = this.getComputedPosition(), this._translate(n.round(t.x), n.round(t.y)), this.isInTransition = !1), this.keyAcceleration = s - r < 200 ? n.min(this.keyAcceleration + c, 50) : 0, e.keyCode) {
    case this.options.keyBindings.pageUp:
      this.hasHorizontalScroll && !this.hasVerticalScroll ? o += i ? 1 : this.wrapperWidth : a += i ? 1 : this.wrapperHeight;
      break;
    case this.options.keyBindings.pageDown:
      this.hasHorizontalScroll && !this.hasVerticalScroll ? o -= i ? 1 : this.wrapperWidth : a -= i ? 1 : this.wrapperHeight;
      break;
    case this.options.keyBindings.end:
      o = i ? this.pages.length - 1 : this.maxScrollX, a = i ? this.pages[0].length - 1 : this.maxScrollY;
      break;
    case this.options.keyBindings.home:
      o = 0, a = 0;
      break;
    case this.options.keyBindings.left:
      o += i ? -1 : 5 + this.keyAcceleration >> 0;
      break;
    case this.options.keyBindings.up:
      a += i ? 1 : 5 + this.keyAcceleration >> 0;
      break;
    case this.options.keyBindings.right:
      o -= i ? -1 : 5 + this.keyAcceleration >> 0;
      break;
    case this.options.keyBindings.down:
      a -= i ? 1 : 5 + this.keyAcceleration >> 0;
      break;
    default:
      return;
  }
  if (i) {
    return void this.goToPage(o, a);
  }
  o > 0 ? (o = 0, this.keyAcceleration = 0) : o < this.maxScrollX && (o = this.maxScrollX, this.keyAcceleration = 0), a > 0 ? (a = 0, this.keyAcceleration = 0) : a < this.maxScrollY && (a = this.maxScrollY, this.keyAcceleration = 0), this.scrollTo(o, a, 0), this.keyTime = s;
}
if (i) {
  return void this.goToPage(o, a);
}
if (this.initiated) {
  if (this.initiated = !1, e.preventDefault(), e.stopPropagation(), l.removeEvent(t, "touchmove", this), l.removeEvent(t, l.prefixPointerEvent("pointermove"), this), l.removeEvent(t, "mousemove", this), this.scroller.options.snap) {
    var i = this.scroller._nearestSnap(this.scroller.x, this.scroller.y),
      o = this.options.snapSpeed || n.max(n.max(n.min(n.abs(this.scroller.x - i.x), 1e3), n.min(n.abs(this.scroller.y - i.y), 1e3)), 300);
    this.scroller.x == i.x && this.scroller.y == i.y || (this.scroller.directionX = 0, this.scroller.directionY = 0, this.scroller.currentPage = i, this.scroller.scrollTo(i.x, i.y, o, this.scroller.options.bounceEasing));
  }
  this.moved && this.scroller._execEvent("scrollEnd");
}
if (this.initiated = !1, e.preventDefault(), e.stopPropagation(), l.removeEvent(t, "touchmove", this), l.removeEvent(t, l.prefixPointerEvent("pointermove"), this), l.removeEvent(t, "mousemove", this), this.scroller.options.snap) {
  var i = this.scroller._nearestSnap(this.scroller.x, this.scroller.y),
    o = this.options.snapSpeed || n.max(n.max(n.min(n.abs(this.scroller.x - i.x), 1e3), n.min(n.abs(this.scroller.y - i.y), 1e3)), 300);
  this.scroller.x == i.x && this.scroller.y == i.y || (this.scroller.directionX = 0, this.scroller.directionY = 0, this.scroller.currentPage = i, this.scroller.scrollTo(i.x, i.y, o, this.scroller.options.bounceEasing));
}
if (!t || this.visible) {
  clearTimeout(this.fadeTimeout), this.fadeTimeout = null;
  var i = e ? 250 : 500,
    n = e ? 0 : 300;
  e = e ? "1" : "0", this.wrapperStyle[l.style.transitionDuration] = i + "ms", this.fadeTimeout = setTimeout(function (e) {
    this.wrapperStyle.opacity = e, this.visible = +e;
  }.bind(this, e), n);
}
for (var n = e.teamMembers, o = [], a = 0; a < n.length; a++) {
  var l = n[a];
  switch (l._type) {
    case "FightTeamMemberMonsterInformations":
      o.push(l.monsterId);
      break;
    case "FightTeamMemberCharacterInformations":
    case "FightTeamMemberWithAllianceCharacterInformations":
    case "FightTeamMemberTaxCollectorInformations":
  }
}
if (e) {
  return console.error(e);
}
for (var a = 0, s = r("ui.common.short.level") + " ", l = 0; l < n.length; l++) {
  var c = n[l],
    d = i.teamMemberList.createChild("div", {
      className: "teamMember"
    });
  switch (c._type) {
    case "FightTeamMemberMonsterInformations":
      var u = c.grade,
        h = o[c.monsterId],
        p = h.grades[u - 1].level;
      a += p, d.setText(h.nameId + " (" + s + p + ")"), 3451 === h.id && (i.isAlliancePrismFight = !0);
      break;
    case "FightTeamMemberCharacterInformations":
    case "FightTeamMemberWithAllianceCharacterInformations":
      a += c.level, d.setText(c.name + " (" + s + c.level + ")");
      break;
    case "FightTeamMemberTaxCollectorInformations":
      i.isTaxCollectorFight = !0;
  }
}
for (var o = 0, a = n.length; o < a; o++) {
  var r = n[o];
  if (!r.hidden) {
    var l = this.buttonsContainer.appendChild(new s({
      className: "cmButton"
    }, t));
    if (r.caption && l.setText(r.caption), r.wuiDomChild && l.appendChild(r.wuiDomChild), r.line) {
      l.addClassNames("line");
    } else {
      var c = "";
      r.isTitle && (c = "title"), r.disabled ? l.addClassNames(c, "disabled") : (r.ticked && l.addClassNames(c, "ticked"), r.addClassNames && l.addClassNames(r.addClassNames), l.addClassNames(c), l.action = r);
    }
  }
}
if (!r.hidden) {
  var l = this.buttonsContainer.appendChild(new s({
    className: "cmButton"
  }, t));
  if (r.caption && l.setText(r.caption), r.wuiDomChild && l.appendChild(r.wuiDomChild), r.line) {
    l.addClassNames("line");
  } else {
    var c = "";
    r.isTitle && (c = "title"), r.disabled ? l.addClassNames(c, "disabled") : (r.ticked && l.addClassNames(c, "ticked"), r.addClassNames && l.addClassNames(r.addClassNames), l.addClassNames(c), l.action = r);
  }
}
if (r.caption && l.setText(r.caption), r.wuiDomChild && l.appendChild(r.wuiDomChild), r.line) {
  l.addClassNames("line");
} else {
  var c = "";
  r.isTitle && (c = "title"), r.disabled ? l.addClassNames(c, "disabled") : (r.ticked && l.addClassNames(c, "ticked"), r.addClassNames && l.addClassNames(r.addClassNames), l.addClassNames(c), l.action = r);
}
if (r.ageBonus ? (this.starCounter.setValue(r.ageBonus), this.starCounter.show()) : this.starCounter.hide(), r._houseData) {
  var d = r._houseData.houseId;
  if (a = window.gui.playerData.position.getHousePropertiesById(d)) {
    var m = u.getWindow("houseBuySell");
    m.prepareDialog(a.modelId, a.ownerName, a._displayedName);
    var f = a.ownerName;
    f = "?" === f || "" === f ? l("ui.common.houseWithNoOwner") : f === window.gui.playerData.identification.uniqueNickname.toString() ? l("ui.common.myHouse") : l("ui.house.homeOf", a._displayedName), this.banner.setContent({
      house: {
        houseOwner: f,
        houseName: a._name,
        houseId: a.houseId,
        forSale: a.isOnSale,
        isClosed: a.isClosed
      },
      guild: a.guildInfo
    }), this._displayHeader(!0);
  } else {
    this._displayHeader(!1);
  }
} else {
  r._name ? (this.banner.setContent({
    name: r._name
  }), this._displayHeader(!0)) : this._displayHeader(!1);
}
if (a = window.gui.playerData.position.getHousePropertiesById(d)) {
  var m = u.getWindow("houseBuySell");
  m.prepareDialog(a.modelId, a.ownerName, a._displayedName);
  var f = a.ownerName;
  f = "?" === f || "" === f ? l("ui.common.houseWithNoOwner") : f === window.gui.playerData.identification.uniqueNickname.toString() ? l("ui.common.myHouse") : l("ui.house.homeOf", a._displayedName), this.banner.setContent({
    house: {
      houseOwner: f,
      houseName: a._name,
      houseId: a.houseId,
      forSale: a.isOnSale,
      isClosed: a.isClosed
    },
    guild: a.guildInfo
  }), this._displayHeader(!0);
} else {
  this._displayHeader(!1);
}
if (this.actionsContainer.clearContent(), r.elementTypeId === o.ELEMENT_TYPE_ID.PADDOCK) {
  var g = window.isoEngine.mapRenderer.getPaddockProperties();
  if (g.locked) {
    return this.actionsContainer.createChild("div", {
      className: "cmButton",
      text: l("ui.social.paddockWithNoOwner")
    }), i();
  }
}
if (g.locked) {
  return this.actionsContainer.createChild("div", {
    className: "cmButton",
    text: l("ui.social.paddockWithNoOwner")
  }), i();
}
for (_ = 0, v = r.enabledSkills.length; _ < v; _++) {
  n(r.enabledSkills[_]);
}
for (_ = 0, v = r.disabledSkills.length; _ < v; _++) {
  n(r.disabledSkills[_], !0);
}
for (var t = "", i = 0; i < e.length; i += 1) {
  i > 0 && (t += ", "), t += e[i];
}
for (var a = 0; a < t.length; a += 1) {
  o.push(h("ui.skill.levelLowJob", t[a], n[a], i[a]));
}
for (var i in e) {
  var n = e[i],
    o = b[n.type](n);
  t.push(o);
}
if (!e) {
  return "jobNotKnown";
}
if (e.experience.jobLevel < t._levelMin) {
  return "levelLow";
}
if (t._parentJobId !== y) {
  return "resourceAlreadyHarvested";
}
if (!i.item || e.info.toolIds.indexOf(i.item.id) === -1) {
  return "toolNeeded";
}
for (var t = window.gui.playerData.jobs.list, i = {}, n = [], o = 0; o < e.length; o += 1) {
  var a = e[o],
    s = a._parentJobId,
    r = s === _ ? v : t[s],
    l = d(r, a),
    c = l.type;
  if (c && n.indexOf(s) === -1) {
    if (i[c]) {
      var u = i[c];
      u.jobNameList = u.jobNameList.concat(l.jobNameList), u.jobLevelList = u.jobLevelList.concat(l.jobLevelList), u.levelMinList = u.levelMinList.concat(l.levelMinList);
    } else {
      i[c] = l;
    }
    n.push(s);
  }
}
if (c && n.indexOf(s) === -1) {
  if (i[c]) {
    var u = i[c];
    u.jobNameList = u.jobNameList.concat(l.jobNameList), u.jobLevelList = u.jobLevelList.concat(l.jobLevelList), u.levelMinList = u.levelMinList.concat(l.levelMinList);
  } else {
    i[c] = l;
  }
  n.push(s);
}
if (i[c]) {
  var u = i[c];
  u.jobNameList = u.jobNameList.concat(l.jobNameList), u.jobLevelList = u.jobLevelList.concat(l.jobLevelList), u.levelMinList = u.levelMinList.concat(l.levelMinList);
} else {
  i[c] = l;
}
if (0 !== s) {
  s > 1 && a.jobNotKnown && delete a.jobNotKnown;
  var r = [];
  r = l(a);
  for (var c = 0; c < r.length; c++) {
    for (var d = 0; d < r[c].length; d++) {
      window.gui.chat.logError(r[c][d]);
    }
  }
}
for (var c = 0; c < r.length; c++) {
  for (var d = 0; d < r[c].length; d++) {
    window.gui.chat.logError(r[c][d]);
  }
}
for (var d = 0; d < r[c].length; d++) {
  window.gui.chat.logError(r[c][d]);
}
for (var c in t) {
  t[c].hide();
}
if (t.itemSet.toggleDisplay(d && "ItemSetsWindow" !== n.location && !!l.itemSetId && l.itemSetId !== -1), t.recipes.toggleDisplay(p && y), t.insertItemStats.toggleDisplay(f && y), t.insertRecipe.toggleDisplay(f && y), t.findInBestiary.toggleDisplay(u && !!a.getProperty("dropMonsterIds").length), t.bidHouseSell.toggleDisplay(!!s && _), t.remove.toggleDisplay(!!n.remove), t.mount.toggleDisplay(v && w), s && n.enableActions) {
  t.feed.toggleDisplay(!!l.foodTypes), t.multiUse.toggleDisplay(!!l.usable && a.quantity > 1 && !l.multiUseUnabled), t.use.toggleDisplay(!!l.usable), t.target.toggleDisplay(m.isRoleplayMode && !!l.targetable && !l.nonUsableOnAnother);
  var b = l.isEquippable();
  t.equip.toggleDisplay(b && !r(a.position)), t.unequip.toggleDisplay(b && r(a.position)), t.mount.toggleDisplay(w), t.manage.toggleDisplay(!!a.livingObjectCategory), t.freeMimicry.toggleDisplay(s.isMimicryHost()), t.manageShield.toggleDisplay(s.isShieldManageable());
}
for (var t = e.myDrilldownList.myWindow, i = t._sortAllowedTypes(e.info), n = 0; n < i.length; n++) {
  if (t.currentSearchItemTypeMap[i[n].id]) {
    return !0;
  }
}
if (t.currentSearchItemTypeMap[i[n].id]) {
  return !0;
}
if (n !== R || a !== R) {
  if (n === P) {
    return;
  }
  if (a === P) {
    return;
  }
  if (e && n) {
    return;
  }
  if (!e && a) {
    return;
  }
}
if (n === P) {
  return;
}
if (a === P) {
  return;
}
if (e && n) {
  return;
}
if (!e && a) {
  return;
}
if (!i) {
  var a = o.getCurrentItem();
  a && (i = a.getItemInstance() ? a : a.getProperty("id"));
}
if (this.sortedAllowedTypes[e]) {
  return this.sortedAllowedTypes[e];
}
for (var t = window.gui.databases.BidHouseCategories[e].allowedTypes, i = window.gui.databases.ItemTypes, n = [], o = 0; o < t.length; o++) {
  var a = t[o];
  n.push({
    text: i[a].nameId,
    id: a
  });
}
if (!this.backBtn) {
  var e = this.backBtn = new m({
    className: "backButton",
    hidden: !0
  }, a);
  e.insertBefore(this.windowTitle), e.myWindow = this;
}
for (var n in t) {
  i.push({
    text: t[~~n].description,
    id: ~~n
  });
}
for (var o = 0; o < i.length; o++) {
  e.addItem(i[o].text, i[o].id);
}
if (!e) {
  return this.backBtn.hide(), this._showBlankUi();
}
if (null === e || "" === e) {
  return this._cancelSearch(t);
}
if (e.length && this.currentSearchText) {
  for (var i = [], n = 0; n < e.length; n++) {
    var o = e[n];
    this._shouldItemBeDisplayed(o) && i.push(o);
  }
  e = i;
}
for (var i = [], n = 0; n < e.length; n++) {
  var o = e[n];
  this._shouldItemBeDisplayed(o) && i.push(o);
}
if (e.length > 0 && this.bidHouseCatList.toggleBreadcrumb(!0), t && this.currentSearchText) {
  var a = v("tablet.common.filterHeader", this._categoryToDisplayItems.length - e.length);
  this._setShopViewerHeader(a, this.currentSearchText);
} else {
  this._resetShopViewerHeader();
}
if (!e.length) {
  this.shopViewer.clearContent();
  var s;
  if (this._categoryToDisplayItems) {
    var r = window.gui.databases.ItemTypes[this._categoryToDisplay].nameId;
    s = t ? v("tablet.bidHouse.noMatchInCat", this.currentSearchText, r) : v("tablet.bidHouse.nothingInCat", r);
  } else {
    s = v("tablet.bidHouse.searchOrSelect");
  }
  this.shopViewer.setPlaceholder(s);
}
if (this._categoryToDisplayItems) {
  var r = window.gui.databases.ItemTypes[this._categoryToDisplay].nameId;
  s = t ? v("tablet.bidHouse.noMatchInCat", this.currentSearchText, r) : v("tablet.bidHouse.nothingInCat", r);
} else {
  s = v("tablet.bidHouse.searchOrSelect");
}
if (t) {
  return console.error(t), e.shopViewer.setPlaceholder(v("tablet.searchError"));
}
for (var o in i) {
  var a = i[~~o];
  n[a.typeId] = !0;
}
if (e) {
  return console.error(e);
}
if (o.openState && (t || o.liveItems)) {
  o.shopViewer.table.placeholder.frame.delClassNames("spinner");
  var n = o._categoryToDisplayItems === o.liveItems;
  o.liveItems = t ? i : o.liveItems.concat(i), (n || t) && (o._categoryToDisplayItems = o.liveItems, o._refreshDisplayedItems());
}
if (this.openState && this.liveItems) {
  for (var t = this.liveItems.length - 1; t >= 0; t--) {
    if (this.liveItems[t].id === e) {
      this.liveItems.splice(t, 1);
      break;
    }
  }
  var i = this._categoryToDisplayItems === this.liveItems;
  i && this.shopViewer.removeItems([e]);
}
for (var t = this.liveItems.length - 1; t >= 0; t--) {
  if (this.liveItems[t].id === e) {
    this.liveItems.splice(t, 1);
    break;
  }
}
if (this.liveItems[t].id === e) {
  this.liveItems.splice(t, 1);
  break;
}
if (this.elt) {
  var e = this.currentDeployedItem;
  e && this.deployItem(e, !1), this.refresh(!0), this._selectSubitem(null), this.removeFilter();
}
for (var e = !0, t = 0; t < this.items.length; t++) {
  var i = this.list.getItem(t);
  i.isVisible() && (i.toggleClassName("odd", e), e = !e);
}
if (this.elt) {
  return this.elt;
}
if (!this.items.length) {
  return console.warn("Empty DrillDownList");
}
for (var n = 0; n < this.items.length; n++) {
  var a = new h("div", {
    className: "sublistHeader"
  });
  a.createChild("div", {
    className: "arrow"
  }), a.createChild("div", {
    className: "text",
    text: this.items[n]
  });
  var r = this.list.addItem({
    id: n,
    element: a
  }, {
    noRefresh: !0
  });
  r.info = this.infos[n], r.myDrilldownList = this;
}
for (var t = this.getSubitemsFunc(e), i = e.subitemList = e.appendChild(new h("div", {
    className: "subitemList",
    hidden: !0
  })), n = 0; n < t.length; n++) {
  var o = t[n],
    s = void 0 !== o.id ? o.id : n,
    r = i.appendChild(new l({
      text: o.text,
      className: "subitem",
      name: s
    }, a));
  r.data = o, r.myTopItem = e;
}
if (!e) {
  return null;
}
if (!this.isFilterOn) {
  return this._resetFilterOnSubitems(e);
}
for (var t, i = 0, n = e.subitemList.getChildren(), o = 0; o < n.length; o++) {
  var a = n[o];
  this.subitemFilterFunc(e, o, a) ? (i++, 1 === i && (t = a), a.show()) : a.hide();
}
if (t === this.isItemDeployed(e)) {
  return 0;
}
for (var e, t = 0, i = this.list.getItems(), n = i.length - 1; n >= 0; n--) {
  var o = i[n];
  this.itemFilterFunc(o) ? (t++, 1 === t && (e = o), this.isItemDeployed(o) && this.subitemFilterFunc && this._filterOneItemSubitems(o), o.show()) : o.hide();
}
if (e.subitemList) {
  for (var t = e.subitemList.getChildren(), i = 0; i < t.length; i++) {
    t[i].show();
  }
}
for (var t = e.subitemList.getChildren(), i = 0; i < t.length; i++) {
  t[i].show();
}
if (this.isFilterOn) {
  this.isFilterOn = !1;
  for (var e = this.list.getItems(), t = e.length - 1; t >= 0; t--) {
    var i = e[t];
    i.show(), this._resetFilterOnSubitems(i);
  }
  this.refresh(), this.currentSubitem && (this.list.showElement(this.currentSubitem), this.emit("subitemSelected", this.currentSubitem, !0));
}
for (var e = this.list.getItems(), t = e.length - 1; t >= 0; t--) {
  var i = e[t];
  i.show(), this._resetFilterOnSubitems(i);
}
if (!t && 0 !== t) {
  return console.error("List: Invalid Id");
}
for (var i, n = 0; n < e.length; n += 1) {
  i = e[n], this._createItem(i);
}
for (var e = this.getItems(), t = 0; t < e.length; t += 1) {
  var i = e[t];
  i.isSelected && this.deselectItem(i.getWuiName(), {
    noSound: !0
  });
}
if (this.empty) {
  this.buf[this.last] = e, this.empty = !1;
} else {
  var i = (this.last + 1) % this.maxSize;
  i === this.first && (t = this.buf[i], this.first = (i + 1) % this.maxSize), this.buf[i] = e, this.last = i;
}
if (!this.empty) {
  var e = this.buf[this.last];
  return this.buf[this.last] = void 0, this.first === this.last ? this.empty = !0 : this.last = (this.last + this.maxSize - 1) % this.maxSize, e;
}
if (!this.empty) {
  return this.buf[this.first];
}
if (!this.empty) {
  return this.buf[this.last];
}
for (var t = [], i = 0, n = e.length; i < n; i++) {
  var o = T[e[i]];
  o && t.push(o);
}
if (t) {
  return e(t);
}
for (var n = 0, o = r.length; n < o; n++) {
  var a = r[n],
    s = i[a];
  if (s) {
    c.push(new f(s)), l.push("gfx/items/" + s.iconId + ".png");
  } else {
    var d = I[a];
    delete I[a], d.emit("loaded");
  }
}
if (s) {
  c.push(new f(s)), l.push("gfx/items/" + s.iconId + ".png");
} else {
  var d = I[a];
  delete I[a], d.emit("loaded");
}
for (var i = 0, n = t.length; i < n; i++) {
  var o = c[i];
  T[o.id] = o, o.image = t[i];
  var a = I[o.id];
  delete I[o.id], a.loaded = !0, a.emit("loaded");
}
for (var r = [], l = [], c = [], d = [], h = 0, p = e.length; h < p; h++) {
  var m = e[h];
  if (!T[m]) {
    if (I[m]) {
      d.push(I[m]);
    } else {
      r.push(m);
      var g = I[m] = new y();
      g.loaded = !1;
    }
  }
}
if (!T[m]) {
  if (I[m]) {
    d.push(I[m]);
  } else {
    r.push(m);
    var g = I[m] = new y();
    g.loaded = !1;
  }
}
if (I[m]) {
  d.push(I[m]);
} else {
  r.push(m);
  var g = I[m] = new y();
  g.loaded = !1;
}
for (n = 0, o = e.length; n < o; n += 1) {
  var r = e[n];
  a[r.objectGID] = !0, s.push(new g(r));
}
if (e) {
  return console.warn(e), i(e);
}
for (n = 0, o = s.length; n < o; n += 1) {
  var r = s[n],
    l = T[r.objectGID];
  l || (l = T[S], console.error('ItemManager: Player got a "Picfail Puree" instead of the itemId', r.objectGID)), r.setItem(l), a[r.objectUID] = r;
}
for (var i in C) {
  var n = C[i];
  n.category = p.getCategory(n.superTypeId), n.possiblePositions = p.getTypePositions(n.superTypeId);
}
for (var t = 0, i = e.ids.length; t < i; t += 1) {
  s(e.ids[t], e.avgPrices[t]);
}
for (var t in e) {
  e[t] !== _[t] && null !== e[t] && (this[t] = e[t]);
}
if (!e || !e.criterions.length) {
  return i;
}
for (var n = e.criterions, o = "", a = !0, s = e.operator && "|" === e.operator.token, l = 0; l < n.length; l++) {
  s || (a = !0);
  var c = n[l];
  if (c.criterions) {
    var d = c.criterions;
    o = [];
    for (var u = d.length, h = 0; h < u; h++) {
      var p = d[h],
        m = t + (0 === h ? "(" : c.getOperatorText() + " ") + p.getText() + (h === u - 1 ? ")" : "");
      o.push(m);
    }
  } else {
    var f = "";
    s && 0 !== l && (f += " " + e.operator.text + " "), f += t, 0 !== l && c.operator === r.groupOperators.or && (f += c.getOperatorText() + " "), f += c.getText(), s ? o += f : o = f;
  }
  "" !== o && (a = !c.isRespected() && a, s || i.push({
    text: o,
    isMalus: a
  }));
}
if (c.criterions) {
  var d = c.criterions;
  o = [];
  for (var u = d.length, h = 0; h < u; h++) {
    var p = d[h],
      m = t + (0 === h ? "(" : c.getOperatorText() + " ") + p.getText() + (h === u - 1 ? ")" : "");
    o.push(m);
  }
} else {
  var f = "";
  s && 0 !== l && (f += " " + e.operator.text + " "), f += t, 0 !== l && c.operator === r.groupOperators.or && (f += c.getOperatorText() + " "), f += c.getText(), s ? o += f : o = f;
}
for (var u = d.length, h = 0; h < u; h++) {
  var p = d[h],
    m = t + (0 === h ? "(" : c.getOperatorText() + " ") + p.getText() + (h === u - 1 ? ")" : "");
  o.push(m);
}
for (var i = [], n = 0; n < e.length; n += 1) {
  var o = e[n];
  if (o.possibleEffects) {
    var a,
      s = {};
    for (a = 0; a < o.upgradeEffects.length; a += 1) {
      var r = o.upgradeEffects[a];
      s[r.typeActionId] = !0;
    }
    for (a = 0; a < o.possibleEffects.length; a += 1) {
      var c = o.possibleEffects[a];
      o.isShield && c.effectId === g.ACTION_ID_SHIELD_LEVEL && (c.diceNum = 1), s[c.effectId] && (c.baseValue = c.diceNum), c.effectCaller = "Item id " + o.id, i.push(c);
    }
  }
}
if (o.possibleEffects) {
  var a,
    s = {};
  for (a = 0; a < o.upgradeEffects.length; a += 1) {
    var r = o.upgradeEffects[a];
    s[r.typeActionId] = !0;
  }
  for (a = 0; a < o.possibleEffects.length; a += 1) {
    var c = o.possibleEffects[a];
    o.isShield && c.effectId === g.ACTION_ID_SHIELD_LEVEL && (c.diceNum = 1), s[c.effectId] && (c.baseValue = c.diceNum), c.effectCaller = "Item id " + o.id, i.push(c);
  }
}
for (a = 0; a < o.upgradeEffects.length; a += 1) {
  var r = o.upgradeEffects[a];
  s[r.typeActionId] = !0;
}
for (a = 0; a < o.possibleEffects.length; a += 1) {
  var c = o.possibleEffects[a];
  o.isShield && c.effectId === g.ACTION_ID_SHIELD_LEVEL && (c.diceNum = 1), s[c.effectId] && (c.baseValue = c.diceNum), c.effectCaller = "Item id " + o.id, i.push(c);
}
if (i) {
  return t(i);
}
for (var o = 0; o < e.length; o++) {
  var a = e[o];
  if (a.possibleEffects) {
    var s = a.possibleEffects.length,
      r = s > 0 ? n.splice(0, s) : [];
    r = r.filter(function (e) {
      return e && e.effect;
    }), a.possibleEffectsMap = {}, a.possibleEffects = r;
    for (var l = 0; l < r.length; l++) {
      a.possibleEffectsMap[r[l].effectId] = r[l];
    }
  }
}
if (a.possibleEffects) {
  var s = a.possibleEffects.length,
    r = s > 0 ? n.splice(0, s) : [];
  r = r.filter(function (e) {
    return e && e.effect;
  }), a.possibleEffectsMap = {}, a.possibleEffects = r;
  for (var l = 0; l < r.length; l++) {
    a.possibleEffectsMap[r[l].effectId] = r[l];
  }
}
for (var l = 0; l < r.length; l++) {
  a.possibleEffectsMap[r[l].effectId] = r[l];
}
for (var i = [], n = [], o = 0; o < e.length; o++) {
  var a = e[o],
    s = a.itemSetId;
  s && (i.push(s), n.push(a));
}
if (e) {
  return t(e);
}
for (var o = 0; o < n.length; o++) {
  var a = n[o],
    s = i[a.itemSetId];
  s ? a.itemSetName = s.nameId : (m.error(new Error("ItemSet id " + a.itemSetId + " for item id " + a.id + " does not exist.")), a.itemSetName = null);
}
if (!this.isWeapon) {
  return m.error(new Error("getProperty(statsFormatted) should never be called on non-weapon Item")), e;
}
if (i += this.range === this.minRange ? this.range : this.minRange + " - " + this.range, e.push(i), this.criticalFailureProbability || this.criticalHitProbability) {
  var n = "";
  if (this.criticalHitProbability) {
    0 !== this.criticalHitBonus && e.push(c("ui.item.critical.bonus", this.criticalHitBonus)), n += c("ui.common.short.CriticalHit") + c("ui.common.colon") + "1/" + this.criticalHitProbability;
    var o = window.gui.playerData.characters.mainCharacter.characteristics;
    if (o) {
      var a = d.totalCriticalHitRate(this.criticalHitProbability, o);
      e.push(c("ui.itemtooltip.itemCriticalReal", "1/" + a));
    }
  }
  this.criticalFailureProbability && (n += (this.criticalHitProbability ? " - " : "") + c("ui.common.short.CriticalFailure") + c("ui.common.colon") + "1/" + this.criticalFailureProbability), e.push(n);
}
if (this.criticalHitProbability) {
  0 !== this.criticalHitBonus && e.push(c("ui.item.critical.bonus", this.criticalHitBonus)), n += c("ui.common.short.CriticalHit") + c("ui.common.colon") + "1/" + this.criticalHitProbability;
  var o = window.gui.playerData.characters.mainCharacter.characteristics;
  if (o) {
    var a = d.totalCriticalHitRate(this.criticalHitProbability, o);
    e.push(c("ui.itemtooltip.itemCriticalReal", "1/" + a));
  }
}
if (o) {
  var a = d.totalCriticalHitRate(this.criticalHitProbability, o);
  e.push(c("ui.itemtooltip.itemCriticalReal", "1/" + a));
}
for (var i = 0; i < t.length; i += 1) {
  if (t[i] < e) {
    return i;
  }
}
if (t[i] < e) {
  return i;
}
for (var i = 0, n = e.length; i < n; i += 1) {
  if (e[i].isRespected(t)) {
    return !0;
  }
}
if (e[i].isRespected(t)) {
  return !0;
}
for (var i = 0, n = e.length; i < n; i += 1) {
  if (!e[i].isRespected(t)) {
    return !1;
  }
}
if (!e[i].isRespected(t)) {
  return !1;
}
for (var o = "", s = !1, r = -1, l = !1, d = 0, u = e.length; d < u; d += 1) {
  var h = e[d];
  d === u - 1 ? (o += h, a(this.criterions, l, o, t, i)) : s ? ")" === h ? 0 === r ? s = !1 : (r -= 1, o += h) : o += h : "(" === h ? (r += 1, s = !0, l = !0) : "&" === h || "|" === h ? (a(this.criterions, l, o, t, i), r = -1, l = !1, this.operator = "&" === h ? c.and : c.or, o = "") : o += h;
}
if (t) {
  e.push(new o(i, n, a));
} else {
  var s = n.createCriterion(i, a);
  s && e.push(s);
}
for (var e = [], t = 0, i = this.criterions.length; t < i; t += 1) {
  var n = this.criterions[t];
  n.criterions ? e.push("(" + n.getText() + ")") : e.push(n.getText());
}
for (var t in n) {
  var i = n[t].token;
  if (e.indexOf(i) !== -1) {
    this.operator = n[t];
    var o = e.split(i);
    return this.key = o[0], this.rawValue = o[1], void (this.value = parseInt(this.rawValue, 10));
  }
}
if (e.indexOf(i) !== -1) {
  this.operator = n[t];
  var o = e.split(i);
  return this.key = o[0], this.rawValue = o[1], void (this.value = parseInt(this.rawValue, 10));
}
if (!this.operator) {
  return !0;
}
if (this.operator !== s.operators.equal) {
  return !1;
}
if (t !== o.AvA_ENABLED_AGGRESSABLE && t !== o.AvA_PREQUALIFIED_AGGRESSABLE) {
  return !1;
}
if (!g[e]) {
  return console.log("unknown entity type", e);
}
for (var n in i) {
  var o = i[n];
  if (o.state === m.waitingForHelp && h.isPlayerFightingFor(t, e, n, f.allies)) {
    return parseInt(n, 10);
  }
}
if (o.state === m.waitingForHelp && h.isPlayerFightingFor(t, e, n, f.allies)) {
  return parseInt(n, 10);
}
if (!g[t]) {
  return console.log("unknown entity type", t);
}
if (!a) {
  return !1;
}
for (var s = a.fighters[n], r = 0, l = s.length; r < l; r += 1) {
  if (s[r].id === e) {
    return !0;
  }
}
if (s[r].id === e) {
  return !0;
}
if (!g[e]) {
  return console.log("unknown entity type", e);
}
if (a) {
  var s = a.fighters[i];
  s.push(n), h.emit("fighterJoined", e, t, i, n, s.length - 1);
}
if (a) {
  for (var s = a.fighters[i], r = 0, l = s.length; r < l; r += 1) {
    var c = s[r].id;
    if (c === n) {
      return s.splice(r, 1), void h.emit("fighterLeft", e, t, i, n, r);
    }
  }
  return console.error("unknown fighter id", n);
}
for (var s = a.fighters[i], r = 0, l = s.length; r < l; r += 1) {
  var c = s[r].id;
  if (c === n) {
    return s.splice(r, 1), void h.emit("fighterLeft", e, t, i, n, r);
  }
}
if (c === n) {
  return s.splice(r, 1), void h.emit("fighterLeft", e, t, i, n, r);
}
for (t = 0; t < i.length; t += 1) {
  var s = new c(i[t]);
  o[s.id] = s;
}
for (t = 0; t < r.length; t += 1) {
  var l = r[t];
  n(g.taxCollector, l.collectorId, l);
}
if (s[i.id] = i, r) {
  return void h.emit("entityAdded", g.taxCollector, i);
}
if (h.emit("entityUpdated", g.taxCollector, i), i.fightState === m.noFight) {
  t(g.taxCollector, i.id);
} else {
  var l = o[g.taxCollector][i.id];
  if (!l) {
    return n(g.taxCollector, i.id);
  }
  l.state = i.fightState, l.waitingForHelpInfo = i.waitingForHelpInfo, l.state === m.fighting && h.emit("fighting", g.taxCollector, l);
}
if (!l) {
  return n(g.taxCollector, i.id);
}
for (var t = a.prism, i = e.prisms, n = 0, o = i.length; n < o; n += 1) {
  var s = new u(i[n]);
  t[s.id] = s;
}
for (var t = a.prism, i = e.prisms, n = 0, o = i.length; n < o; n += 1) {
  var s = i[n],
    r = t[s.subAreaId];
  r ? (r.updateInfo(s), h.emit("entityUpdated", g.prism, r)) : (r = new u(s), t[r.id] = r, h.emit("entityAdded", g.prism, r));
}
for (var t = e.fights, i = a.prism, o = 0, s = t.length; o < s; o += 1) {
  var r = t[o],
    l = i[r.subAreaId];
  if (l) {
    var c = r.allyCharactersInformations[0];
    c && "3451" === c.name && (l.look = c.entityLook, l.level = c.level, r.allyCharactersInformations.splice(0, 1)), l.fightState = m.waitingForHelp, n(g.prism, r.subAreaId, r);
  } else {
    console.warn("unknown prism", r.subAreaId);
  }
}
if (l) {
  var c = r.allyCharactersInformations[0];
  c && "3451" === c.name && (l.look = c.entityLook, l.level = c.level, r.allyCharactersInformations.splice(0, 1)), l.fightState = m.waitingForHelp, n(g.prism, r.subAreaId, r);
} else {
  console.warn("unknown prism", r.subAreaId);
}
if ("3451" === t.name) {
  var n = a.prism[e.subAreaId];
  n.look = t.entityLook, n.level = t.level, h.emit("fightTarget", g.prism, e.subAreaId, n);
} else {
  i(g.prism, e.subAreaId, f.allies, t);
}
for (var t in e) {
  this[t] = e[t];
}
if (t) {
  var i = window.gui.chat;
  i.logError(t);
}
for (var t = e.objectsInfos || [], i = "", n = 0; n < t.length; n += 1) {
  i && (i += ", ");
  var o = t[n],
    a = o.enrichData || {};
  i += o.quantity + "x" + a.itemName;
}
for (var t in e) {
  o(this, t, e);
}
if (!this.lastActivity) {
  return 0;
}
for (var n in t) {
  var o = t[n];
  o.rankOrder = e[o.rank].order, i.push(o);
}
for (var t in e) {
  this[t] = e[t];
}
for (var t in e) {
  this[t] = e[t];
}
if (!e.prism) {
  return void delete this.prism;
}
if (i === s.waitingForHelp && this.fightState !== s.waitingForHelp) {
  var o = e.enrichData.subAreaName + " (" + e.enrichData.areaName + ")";
  window.gui.chat.logMsg(r("ui.prism.attacked", o, this.getPosition()), c.CHANNEL_ALLIANCE);
}
if (this.prism) {
  return "AllianceInsiderPrismInformation" === this.prism._type ? window.gui.playerData.alliance.current : this.prism.alliance;
}
if (!e.hasAlliance()) {
  return this.operator === a.operators.equal;
}
if (i) {
  return this._emoticonData = i, e();
}
if (i = window.gui.playerData.emoteData.list[t]) {
  return this._emoticonData = i, e();
}
if (!t || !t.gifts) {
  return !1;
}
for (var i = 0, n = t.gifts.length; i < n; i += 1) {
  if (t.gifts[i] === this._giftId) {
    return !this._giftLevel || t.levels[i] > this._giftLevel;
  }
}
if (t.gifts[i] === this._giftId) {
  return !this._giftLevel || t.levels[i] > this._giftLevel;
}
if (!e.hasGuild()) {
  return this.operator === o.operators.different;
}
if (!this._jobName) {
  return "";
}
if (this._jobLevel === -1) {
  return e.hasOwnProperty(this._jobId);
}
if (!t || !t.experience) {
  return !1;
}
if (!t && 0 !== t) {
  return e();
}
if (n) {
  return e(n);
}
for (var i in e) {
  var n = e[i];
  if (n.objectGID === this.value) {
    return t;
  }
}
if (n.objectGID === this.value) {
  return t;
}
for (n = 0; n < s; n += 1) {
  a = a.split(t[n]).join(f + t[n] + f);
}
for (n = 0; n < s; n += 1) {
  a = a.split(f + t[n] + f).join(i[n % o]);
}
if (!this._quest) {
  return "";
}
if (!this._stepId) {
  return t;
}
for (var i in e.all) {
  var n = e.all[i];
  if (n.dbObjectives && n.dbObjectives[this.value]) {
    if (n.finishedCount >= 1) {
      t = this.value + 1;
      break;
    }
    for (var o = 0; o < n.objectives.length; o++) {
      var a = n.objectives[o];
      if (a.objectiveId === this.value) {
        t = a.objectiveStatus ? this.value : this.value + 1;
        break;
      }
    }
    break;
  }
  if (n.dbQuest && n.dbQuest.stepIds && n.dbQuest.stepIds.indexOf(this._stepId) !== -1) {
    t = this.value + 1;
    break;
  }
}
if (n.dbObjectives && n.dbObjectives[this.value]) {
  if (n.finishedCount >= 1) {
    t = this.value + 1;
    break;
  }
  for (var o = 0; o < n.objectives.length; o++) {
    var a = n.objectives[o];
    if (a.objectiveId === this.value) {
      t = a.objectiveStatus ? this.value : this.value + 1;
      break;
    }
  }
  break;
}
if (n.finishedCount >= 1) {
  t = this.value + 1;
  break;
}
for (var o = 0; o < n.objectives.length; o++) {
  var a = n.objectives[o];
  if (a.objectiveId === this.value) {
    t = a.objectiveStatus ? this.value : this.value + 1;
    break;
  }
}
if (a.objectiveId === this.value) {
  t = a.objectiveStatus ? this.value : this.value + 1;
  break;
}
if (n.dbQuest && n.dbQuest.stepIds && n.dbQuest.stepIds.indexOf(this._stepId) !== -1) {
  t = this.value + 1;
  break;
}
for (var i in e.all) {
  var n = e.all[i],
    o = n.dbQuest.stepIds.indexOf(this.value);
  if (o !== -1) {
    if (n.finishedCount >= 1) {
      t = this.value + 1;
    } else {
      var a = n.dbQuest.stepIds.indexOf(n.stepId);
      t = this.value + (a - o);
    }
    break;
  }
}
if (o !== -1) {
  if (n.finishedCount >= 1) {
    t = this.value + 1;
  } else {
    var a = n.dbQuest.stepIds.indexOf(n.stepId);
    t = this.value + (a - o);
  }
  break;
}
if (n.finishedCount >= 1) {
  t = this.value + 1;
} else {
  var a = n.dbQuest.stepIds.indexOf(n.stepId);
  t = this.value + (a - o);
}
for (var e = window.gui.playerData.inventory, t = 0; t < l.length; t += 1) {
  if (e.quantityList[[l]]) {
    return !0;
  }
}
if (e.quantityList[[l]]) {
  return !0;
}
if (!e) {
  return "";
}
if (!this._name) {
  return "";
}
for (var t = window.gui.databases.ItemTypes[this.value].possiblePositions, i = 0; i < t.length; i++) {
  if (e[t[i]]) {
    if (e[t[i]].item) {
      return e[t[i]].item.typeId;
    }
    console.error("Equipped items not initialized yet to set criterion `" + this.key + "`");
  }
}
if (e[t[i]]) {
  if (e[t[i]].item) {
    return e[t[i]].item.typeId;
  }
  console.error("Equipped items not initialized yet to set criterion `" + this.key + "`");
}
if (e[t[i]].item) {
  return e[t[i]].item.typeId;
}
if (!this._spellId) {
  return "";
}
if (!t) {
  return !1;
}
for (var t in e) {
  e.hasOwnProperty(t) && (this[t] = e[t]);
}
for (var t = 0; t < w.length; t += 1) {
  if (w[t] > e) {
    return t;
  }
}
if (w[t] > e) {
  return t;
}
for (var t = 0; t < e.length; t += 1) {
  var i = e[t],
    n = i.effects;
  if (n.length) {
    var a = 0,
      s = 0,
      r = i.item;
    if (r && r.isWeapon) {
      switch (r.typeId) {
        case 7:
          a = "X", s = 1;
          break;
        case 4:
          a = "T", s = 1;
          break;
        case 8:
          a = "L", s = 1;
      }
    }
    for (var l = 0; l < n.length; l += 1) {
      var c = n[l];
      if (c && c.effect) {
        switch (i.effectsMap[c.effectId] = c, a && c.isDamageEffect() && (c.zoneShape = a, c.zoneSize = s), c.effectId) {
          case g.ACTION_PETS_LAST_MEAL:
            i.livingObjectFoodDate = c.description;
            break;
          case b:
            i.livingObjectId = c.value, c.isLivingProperty = !0;
            break;
          case g.ACTION_ID_LIVING_OBJECT_MOOD:
            i.livingObjectMood = c.value, c.isLivingProperty = !0;
            break;
          case g.ACTION_ID_LIVING_OBJECT_SKIN:
            i.livingObjectSkin = c.value, c.isLivingProperty = !0;
            break;
          case g.ACTION_ID_LIVING_OBJECT_CATEGORY:
            i.livingObjectCategory = c.value, c.isLivingProperty = !0;
            break;
          case g.ACTION_ID_LIVING_OBJECT_LEVEL:
            var d = o(c.value),
              u = c.value - w[d - 1],
              h = w[d] - w[d - 1] || 0;
            i.livingObjectLevel = d, i.livingObjectXp = u, i.livingObjectMaxXp = h, c.isLivingProperty = !0;
            break;
          case g.ACTION_SHIELD_EXPERIENCE:
            var p = i.item.shieldModelId,
              m = 1e4 * c.diceSide + c.value,
              f = window.gui.databases.ShieldModelsLevels || {},
              _ = f[p];
            _ || (console.warn(new Error("shieldModelId " + p + " unknown from DB for item " + i.id)), _ = {});
            for (var v = _.requiredXpLevels || [], y = 100, M = 0; M < v.length; M++) {
              if (m < v[M]) {
                y = M;
                break;
              }
            }
            c.diceNum = y, c.forceDescriptionRefresh();
        }
        983 === c.effectId && (i.exchangeAllowed = !1), c.effectId !== I && c.effectId !== A || (i.exchangeable = !1);
      }
    }
  }
}
if (n.length) {
  var a = 0,
    s = 0,
    r = i.item;
  if (r && r.isWeapon) {
    switch (r.typeId) {
      case 7:
        a = "X", s = 1;
        break;
      case 4:
        a = "T", s = 1;
        break;
      case 8:
        a = "L", s = 1;
    }
  }
  for (var l = 0; l < n.length; l += 1) {
    var c = n[l];
    if (c && c.effect) {
      switch (i.effectsMap[c.effectId] = c, a && c.isDamageEffect() && (c.zoneShape = a, c.zoneSize = s), c.effectId) {
        case g.ACTION_PETS_LAST_MEAL:
          i.livingObjectFoodDate = c.description;
          break;
        case b:
          i.livingObjectId = c.value, c.isLivingProperty = !0;
          break;
        case g.ACTION_ID_LIVING_OBJECT_MOOD:
          i.livingObjectMood = c.value, c.isLivingProperty = !0;
          break;
        case g.ACTION_ID_LIVING_OBJECT_SKIN:
          i.livingObjectSkin = c.value, c.isLivingProperty = !0;
          break;
        case g.ACTION_ID_LIVING_OBJECT_CATEGORY:
          i.livingObjectCategory = c.value, c.isLivingProperty = !0;
          break;
        case g.ACTION_ID_LIVING_OBJECT_LEVEL:
          var d = o(c.value),
            u = c.value - w[d - 1],
            h = w[d] - w[d - 1] || 0;
          i.livingObjectLevel = d, i.livingObjectXp = u, i.livingObjectMaxXp = h, c.isLivingProperty = !0;
          break;
        case g.ACTION_SHIELD_EXPERIENCE:
          var p = i.item.shieldModelId,
            m = 1e4 * c.diceSide + c.value,
            f = window.gui.databases.ShieldModelsLevels || {},
            _ = f[p];
          _ || (console.warn(new Error("shieldModelId " + p + " unknown from DB for item " + i.id)), _ = {});
          for (var v = _.requiredXpLevels || [], y = 100, M = 0; M < v.length; M++) {
            if (m < v[M]) {
              y = M;
              break;
            }
          }
          c.diceNum = y, c.forceDescriptionRefresh();
      }
      983 === c.effectId && (i.exchangeAllowed = !1), c.effectId !== I && c.effectId !== A || (i.exchangeable = !1);
    }
  }
}
if (r && r.isWeapon) {
  switch (r.typeId) {
    case 7:
      a = "X", s = 1;
      break;
    case 4:
      a = "T", s = 1;
      break;
    case 8:
      a = "L", s = 1;
  }
}
for (var l = 0; l < n.length; l += 1) {
  var c = n[l];
  if (c && c.effect) {
    switch (i.effectsMap[c.effectId] = c, a && c.isDamageEffect() && (c.zoneShape = a, c.zoneSize = s), c.effectId) {
      case g.ACTION_PETS_LAST_MEAL:
        i.livingObjectFoodDate = c.description;
        break;
      case b:
        i.livingObjectId = c.value, c.isLivingProperty = !0;
        break;
      case g.ACTION_ID_LIVING_OBJECT_MOOD:
        i.livingObjectMood = c.value, c.isLivingProperty = !0;
        break;
      case g.ACTION_ID_LIVING_OBJECT_SKIN:
        i.livingObjectSkin = c.value, c.isLivingProperty = !0;
        break;
      case g.ACTION_ID_LIVING_OBJECT_CATEGORY:
        i.livingObjectCategory = c.value, c.isLivingProperty = !0;
        break;
      case g.ACTION_ID_LIVING_OBJECT_LEVEL:
        var d = o(c.value),
          u = c.value - w[d - 1],
          h = w[d] - w[d - 1] || 0;
        i.livingObjectLevel = d, i.livingObjectXp = u, i.livingObjectMaxXp = h, c.isLivingProperty = !0;
        break;
      case g.ACTION_SHIELD_EXPERIENCE:
        var p = i.item.shieldModelId,
          m = 1e4 * c.diceSide + c.value,
          f = window.gui.databases.ShieldModelsLevels || {},
          _ = f[p];
        _ || (console.warn(new Error("shieldModelId " + p + " unknown from DB for item " + i.id)), _ = {});
        for (var v = _.requiredXpLevels || [], y = 100, M = 0; M < v.length; M++) {
          if (m < v[M]) {
            y = M;
            break;
          }
        }
        c.diceNum = y, c.forceDescriptionRefresh();
    }
    983 === c.effectId && (i.exchangeAllowed = !1), c.effectId !== I && c.effectId !== A || (i.exchangeable = !1);
  }
}
if (c && c.effect) {
  switch (i.effectsMap[c.effectId] = c, a && c.isDamageEffect() && (c.zoneShape = a, c.zoneSize = s), c.effectId) {
    case g.ACTION_PETS_LAST_MEAL:
      i.livingObjectFoodDate = c.description;
      break;
    case b:
      i.livingObjectId = c.value, c.isLivingProperty = !0;
      break;
    case g.ACTION_ID_LIVING_OBJECT_MOOD:
      i.livingObjectMood = c.value, c.isLivingProperty = !0;
      break;
    case g.ACTION_ID_LIVING_OBJECT_SKIN:
      i.livingObjectSkin = c.value, c.isLivingProperty = !0;
      break;
    case g.ACTION_ID_LIVING_OBJECT_CATEGORY:
      i.livingObjectCategory = c.value, c.isLivingProperty = !0;
      break;
    case g.ACTION_ID_LIVING_OBJECT_LEVEL:
      var d = o(c.value),
        u = c.value - w[d - 1],
        h = w[d] - w[d - 1] || 0;
      i.livingObjectLevel = d, i.livingObjectXp = u, i.livingObjectMaxXp = h, c.isLivingProperty = !0;
      break;
    case g.ACTION_SHIELD_EXPERIENCE:
      var p = i.item.shieldModelId,
        m = 1e4 * c.diceSide + c.value,
        f = window.gui.databases.ShieldModelsLevels || {},
        _ = f[p];
      _ || (console.warn(new Error("shieldModelId " + p + " unknown from DB for item " + i.id)), _ = {});
      for (var v = _.requiredXpLevels || [], y = 100, M = 0; M < v.length; M++) {
        if (m < v[M]) {
          y = M;
          break;
        }
      }
      c.diceNum = y, c.forceDescriptionRefresh();
  }
  983 === c.effectId && (i.exchangeAllowed = !1), c.effectId !== I && c.effectId !== A || (i.exchangeable = !1);
}
for (var v = _.requiredXpLevels || [], y = 100, M = 0; M < v.length; M++) {
  if (m < v[M]) {
    y = M;
    break;
  }
}
if (m < v[M]) {
  y = M;
  break;
}
for (var n = [], o = {}, a = 0; a < e.length; a++) {
  var s = e[a];
  if (s.livingObjectCategory) {
    var r = s.livingObjectId || s.objectGID;
    n.push(r), o[a] = r;
  }
}
if (s.livingObjectCategory) {
  var r = s.livingObjectId || s.objectGID;
  n.push(r), o[a] = r;
}
if (n) {
  return t(n);
}
for (var s = 0; s < e.length; s++) {
  if (void 0 !== o[s]) {
    var r = e[s];
    if (void 0 !== a[o[s]]) {
      var l = a[o[s]].moods;
      r.iconId = l[r.livingObjectMood][r.livingObjectSkin - 1], i.push(r);
    } else {
      console.error("Cannot find the moods for " + r.objectGID);
    }
  }
}
if (void 0 !== o[s]) {
  var r = e[s];
  if (void 0 !== a[o[s]]) {
    var l = a[o[s]].moods;
    r.iconId = l[r.livingObjectMood][r.livingObjectSkin - 1], i.push(r);
  } else {
    console.error("Cannot find the moods for " + r.objectGID);
  }
}
if (void 0 !== a[o[s]]) {
  var l = a[o[s]].moods;
  r.iconId = l[r.livingObjectMood][r.livingObjectSkin - 1], i.push(r);
} else {
  console.error("Cannot find the moods for " + r.objectGID);
}
for (var n = 0; n < e.length; n++) {
  var o = e[n];
  o.effectsMap[g.ACTION_ITEM_MIMICRY_OBJ_GID] && (o.iconId = o.effectsMap[g.ACTION_ITEM_MIMICRY_OBJ_GID].iconId, i.push(o));
}
if (!i.length) {
  return e();
}
for (var n = t && t.monstersCache, o = {}, a = {}, s = !1, r = 0; r < e.length; r++) {
  var l = e[r];
  switch (l.effectsMap && l.effectsMap[1081] && (l.weight += l.effectsMap[1081].getParams()[0]), l.item.id) {
    case M:
    case C:
    case T:
      l.shortName = "";
      break;
    default:
      l.shortName = l.item.getRawName(), l._initializationDone();
      continue;
  }
  for (var c = [], d = 0; d < l.effects.length; d += 1) {
    var u = l.effects[d].getParams(),
      h = u[2];
    h && (c.push({
      monsterId: h,
      monsterGrade: u[0] - 1
    }), n && n[h] || (o[h] = !0));
  }
  a[r] = c, s = !0;
}
for (var c = [], d = 0; d < l.effects.length; d += 1) {
  var u = l.effects[d].getParams(),
    h = u[2];
  h && (c.push({
    monsterId: h,
    monsterGrade: u[0] - 1
  }), n && n[h] || (o[h] = !0));
}
if (t) {
  return i(t);
}
for (var s, r, l = "", c = {
    regularSoulStone: function (e, t) {
      var i = e.grades[t];
      i && i.level > s && (s = i.level, l = e.nameId);
    },
    bossAndMiniBoss: function (e) {
      (e.isBoss || e.isMiniBoss) && (l ? l += ", " + e.nameId : l = e.nameId);
    }
  }, d = 0; d < e.length; d++) {
  if (a[d]) {
    var u = e[d];
    switch (s = 0, l = "", r = null, u.item.id) {
      case M:
        r = c.regularSoulStone;
        break;
      case C:
      case T:
        r = c.bossAndMiniBoss;
    }
    for (var h = 0; h < a[d].length; h++) {
      var p,
        m = a[d][h].monsterId,
        f = a[d][h].monsterGrade;
      if (n) {
        if (p = n[m], !p) {
          if (!o[m]) {
            continue;
          }
          p = o[m], n[m] = o[m];
        }
      } else {
        if (!o[m]) {
          continue;
        }
        p = o[m];
      }
      r(p, f);
    }
    u.shortName = l, u._initializationDone();
  }
}
if (a[d]) {
  var u = e[d];
  switch (s = 0, l = "", r = null, u.item.id) {
    case M:
      r = c.regularSoulStone;
      break;
    case C:
    case T:
      r = c.bossAndMiniBoss;
  }
  for (var h = 0; h < a[d].length; h++) {
    var p,
      m = a[d][h].monsterId,
      f = a[d][h].monsterGrade;
    if (n) {
      if (p = n[m], !p) {
        if (!o[m]) {
          continue;
        }
        p = o[m], n[m] = o[m];
      }
    } else {
      if (!o[m]) {
        continue;
      }
      p = o[m];
    }
    r(p, f);
  }
  u.shortName = l, u._initializationDone();
}
for (var h = 0; h < a[d].length; h++) {
  var p,
    m = a[d][h].monsterId,
    f = a[d][h].monsterGrade;
  if (n) {
    if (p = n[m], !p) {
      if (!o[m]) {
        continue;
      }
      p = o[m], n[m] = o[m];
    }
  } else {
    if (!o[m]) {
      continue;
    }
    p = o[m];
  }
  r(p, f);
}
if (n) {
  if (p = n[m], !p) {
    if (!o[m]) {
      continue;
    }
    p = o[m], n[m] = o[m];
  }
} else {
  if (!o[m]) {
    continue;
  }
  p = o[m];
}
if (p = n[m], !p) {
  if (!o[m]) {
    continue;
  }
  p = o[m], n[m] = o[m];
}
if (!o[m]) {
  continue;
}
if (!o[m]) {
  continue;
}
for (var e = 1, t = 0; t < this.effects.length; t++) {
  var i = this.effects[t];
  if (i.effectId === g.ACTION_GRIND_LEVEL) {
    e = i.value;
    break;
  }
}
if (i.effectId === g.ACTION_GRIND_LEVEL) {
  e = i.value;
  break;
}
for (var n = [], o = 0; o < e.length; o += 1) {
  var l,
    c = e[o],
    d = {};
  if (c.item) {
    for (l = 0; l < c.item.upgradeEffects.length; l += 1) {
      for (var h = c.item.upgradeEffects[l], p = 0; p < c.item.possibleEffects.length; p += 1) {
        var m = c.item.possibleEffects[p];
        if (m.effectId === h.typeActionId) {
          d[h.typeActionId] = m.diceNum;
          break;
        }
      }
    }
  }
  for (l = 0; l < c.effects.length; l += 1) {
    var f = c.effects[l];
    void 0 !== d[f.actionId] && (f.baseValue = d[f.actionId]), f.effectCaller = "ItemInstance id " + c.id, n.push(f);
  }
}
if (c.item) {
  for (l = 0; l < c.item.upgradeEffects.length; l += 1) {
    for (var h = c.item.upgradeEffects[l], p = 0; p < c.item.possibleEffects.length; p += 1) {
      var m = c.item.possibleEffects[p];
      if (m.effectId === h.typeActionId) {
        d[h.typeActionId] = m.diceNum;
        break;
      }
    }
  }
}
for (l = 0; l < c.item.upgradeEffects.length; l += 1) {
  for (var h = c.item.upgradeEffects[l], p = 0; p < c.item.possibleEffects.length; p += 1) {
    var m = c.item.possibleEffects[p];
    if (m.effectId === h.typeActionId) {
      d[h.typeActionId] = m.diceNum;
      break;
    }
  }
}
for (var h = c.item.upgradeEffects[l], p = 0; p < c.item.possibleEffects.length; p += 1) {
  var m = c.item.possibleEffects[p];
  if (m.effectId === h.typeActionId) {
    d[h.typeActionId] = m.diceNum;
    break;
  }
}
if (m.effectId === h.typeActionId) {
  d[h.typeActionId] = m.diceNum;
  break;
}
for (l = 0; l < c.effects.length; l += 1) {
  var f = c.effects[l];
  void 0 !== d[f.actionId] && (f.baseValue = d[f.actionId]), f.effectCaller = "ItemInstance id " + c.id, n.push(f);
}
if (n) {
  return i(n);
}
for (var l = 0; l < e.length; l++) {
  var c = e[l],
    d = c.effects.length;
  c.effects = d > 0 ? o.splice(0, d) : [];
}
if (!this.isInitialised) {
  return "";
}
if (this.isInitialised) {
  var e = this.getProperty("objectUID");
  if (this.getProperty("usable")) {
    if (!this.getProperty("type").needUseConfirm) {
      return void y.useObject(e);
    }
    window.gui.openConfirmPopup({
      title: f("ui.common.confirm"),
      message: f("ui.common.confirmationUseItem", this.getProperty("nameId")),
      cb: function (t) {
        t && y.useObject(e);
      }
    });
  } else {
    this.item.isEquippable() && window.gui.playerData.inventory.equipItem(e);
  }
}
if (this.getProperty("usable")) {
  if (!this.getProperty("type").needUseConfirm) {
    return void y.useObject(e);
  }
  window.gui.openConfirmPopup({
    title: f("ui.common.confirm"),
    message: f("ui.common.confirmationUseItem", this.getProperty("nameId")),
    cb: function (t) {
      t && y.useObject(e);
    }
  });
} else {
  this.item.isEquippable() && window.gui.playerData.inventory.equipItem(e);
}
if (!this.getProperty("type").needUseConfirm) {
  return void y.useObject(e);
}
if (!this.isInitialised) {
  return "";
}
if (!this.isInitialised) {
  return null;
}
if (t && c !== e) {
  return !1;
}
if (n && l.typeId !== i) {
  return !1;
}
if (o && s.isFullSoulStone()) {
  for (var d = 0; d < s.effects.length; d++) {
    if (s.effects[d] && r.simplifyString(s.effects[d].description).indexOf(o) !== -1) {
      return !0;
    }
  }
}
for (var d = 0; d < s.effects.length; d++) {
  if (s.effects[d] && r.simplifyString(s.effects[d].description).indexOf(o) !== -1) {
    return !0;
  }
}
if (s.effects[d] && r.simplifyString(s.effects[d].description).indexOf(o) !== -1) {
  return !0;
}
if (t) {
  var i = t.rowContent,
    n = i.getItem().typeId;
  this.itemTypes[n] && (this.itemTypes[n]--, 0 === this.itemTypes[n] && delete this.itemTypes[n]);
}
if (this.itemFilter) {
  for (var i = !1, n = 0; n < e.length; n++) {
    t && this._incrementTotalPrice(e[n].objectPrice);
    var o = this.table.getIdFn(e[n]);
    this.table.hasRow(o) || (i |= this._registerItemType(e[n]));
  }
  t && this.emit("totalPriceUpdated", this._totalPrice), i && this.itemFilter.updateSubFilters(Object.keys(this.itemTypes));
}
for (var i = !1, n = 0; n < e.length; n++) {
  t && this._incrementTotalPrice(e[n].objectPrice);
  var o = this.table.getIdFn(e[n]);
  this.table.hasRow(o) || (i |= this._registerItemType(e[n]));
}
for (var i = 0; i < e.length; i++) {
  t && this._decrementTotalPrice(this.getItem(e[i]).objectPrice), this._unregisterItemType(e[i]);
}
for (var b in d.categories) {
  w[b] = d.categories[b];
}
for (var t = e.createChild("div", {
    className: "content"
  }), i = this._itemTypeChangeHandler.bind(this), n = 0, a = A.length; n < a; n++) {
  var r = A[n],
    c = ["filter", d.getCategoryName(r) || "all"],
    h = t.appendChild(new u({
      className: c
    }, o));
  this._filterButtonList[r] = h, this._filterBtnMap[r] = h, s(h, M[n]), h.filter = r, h.myItemFilters = this, h.createChild("div", {
    className: "icon"
  });
  var f = this._categoryBox.appendChild(new m({
    className: "subFilterSelect"
  }));
  this._subFiltersSelect.push(f), f.on("change", i), f.hide(), this._selectList[r] = {
    wdSelect: f
  };
}
if (this._searchBox = this._subFiltersBox.appendChild(new p({
  isLiveSearch: !0
})), this._searchBox.on("search", this._textChangedHandler.bind(this)), this._searchBox.setPlaceholder(l("tablet.common.filter")), this._sortBox = this._subFiltersBox.createChild("div", {
  className: "sortBox"
}), this._sortSelector = this._sortBox.appendChild(this._createSortSelector()), this._sortSelector.on("change", this._sortChangeHandler.bind(this)), this._sortOrderBtn = new u({
  className: "sortOrderBtn",
  addIcon: !0
}, this._switchSortOrder.bind(this)), this._sortBox.appendChild(this._sortOrderBtn), this._withTagBar) {
  var g = this.createChild("div", {
    className: "tagZone"
  });
  this._tagBar = g.createChild("div", {
    className: "tagBar"
  }), this._tagButtons = [];
}
if (this._withTagBar) {
  this._delFilterButton("SORTING");
  var e = this._sortOrderMap[this._currentSorting];
  if (this._currentSorting !== g || e !== _) {
    var t = T[C[this._currentSorting]].labels,
      i = t["ASC" === e ? 0 : 1];
    this._addFilterButton("SORTING", i).addClassNames("sorting");
  }
}
if (this._currentSorting !== g || e !== _) {
  var t = T[C[this._currentSorting]].labels,
    i = t["ASC" === e ? 0 : 1];
  this._addFilterButton("SORTING", i).addClassNames("sorting");
}
for (var d = 0; d < T.length; d++) {
  var u = T[d];
  c.addOption(u.text, u.value), this._sortOrderMap[u.value] = u.defOrder, C[u.value] = d;
}
if ("NEXT" === e) {
  var i = S.indexOf(this._filterDisplayed),
    n = this._withSorting ? S.length : S.length - 1;
  i = (i + 1) % n, this._filterDisplayed = S[i];
} else {
  this._filterDisplayed = e;
}
if (e !== this._selectedFilter) {
  if (this._filterButtonList[this._selectedFilter] && (this._filterButtonList[this._selectedFilter].delClassNames("selected"), this._selectList[this._selectedFilter].wdSelect.hide()), this._selectedFilter = e, this._filterButtonList[e].addClassNames("selected"), e === w.preset) {
    return this._subFiltersBox.hide(), this._withTagBar && this._tagBar.hide(), !0;
  }
  this._subFiltersBox.show(), this._withTagBar && (this._tagBar.show(), this._delFilterButton("CAT"), e !== y && this._addFilterButton("CAT", M[e + 1]));
  var n = this._selectList[e].wdSelect;
  n.show(), i = !0;
}
if (this._filterButtonList[this._selectedFilter] && (this._filterButtonList[this._selectedFilter].delClassNames("selected"), this._selectList[this._selectedFilter].wdSelect.hide()), this._selectedFilter = e, this._filterButtonList[e].addClassNames("selected"), e === w.preset) {
  return this._subFiltersBox.hide(), this._withTagBar && this._tagBar.hide(), !0;
}
for (var n in this._selectList) {
  this._selectList[n].wdSelect.clearContent(), this._withAllCategoriesBtn && this._selectList[n].wdSelect.addOption(l("ui.common.allTypesForObject"), I.all);
}
for (var o = this._selectList[w.all], a = 0, s = i.length; a < s; a += 1) {
  var r = t[i[a]],
    c = this._selectList[r.category];
  c.wdSelect.addOption(r.nameId, r.id), o.wdSelect.addOption(r.nameId, r.id);
}
for (var t in d.categories) {
  var i = !(!e || !e[t]) || N[t];
  this.toggleCategoryDisplay(d.categories[t], i), this._selectedFilter !== d.categories[t] || i || this.selectCategory(y);
}
for (var t = 0; t < this._tagButtons.length; t++) {
  var i = this._tagButtons[t];
  if (i.filterName === e) {
    return this._tagBar.removeChild(i), void this._tagButtons.splice(t, 1);
  }
}
if (i.filterName === e) {
  return this._tagBar.removeChild(i), void this._tagButtons.splice(t, 1);
}
if (e.isLiveSearch) {
  var t = e.searchInput.getValue();
  e.emit("search", t), e.cancelBtn.toggleDisplay(!!t);
} else {
  e.cancelBtn.show();
}
if (n.mySearchBox = this, !this.isLiveSearch) {
  var l = this.appendChild(new r({
    className: "searchBtn",
    addIcon: !0
  }, a));
  l.mySearchBox = this;
}
for (var o in e.attr) {
  n[o] = e.attr[o];
}
if (null !== i._currentValue) {
  var e = i._getValueIndex(i._currentValue);
  window.gui.dropDown.setupDropDown(this, i._valuePairs, e, t);
}
for (var t = this._valuePairs, i = 0; i < t.length; i++) {
  if (t[i].value === e) {
    return i;
  }
}
if (t[i].value === e) {
  return i;
}
for (var t = 0; t < Math.min(e.length, this._valuePairs.length); t++) {
  this._valuePairs[t].text = e[t];
}
if (this._valuePairs.length) {
  var t = this._valuePairs[0].value;
  return this._setValue(t, e), t;
}
if (i === -1) {
  return console.error(new Error("Selecting invalid value: " + e));
}
if (this._dropDownSelector._tooltipText = e, this.removeWords && 0 !== t) {
  for (var i = 0; i < this.removeWords.length; i++) {
    e = e.replace(this.removeWords[i], "");
  }
  e = e[0].toLocaleUpperCase() + e.substr(1);
}
for (var i = 0; i < this.removeWords.length; i++) {
  e = e.replace(this.removeWords[i], "");
}
if (e || 0 === e) {
  var i = this._valuePairs[e];
  i && (t = void 0 === t ? i.disabled : t, i.disabled = !t);
}
if (!t.getProperty("exchangeable")) {
  return !1;
}
if (null !== i) {
  var o = t + M("ui.common.colon") + i;
  n && (o += " (" + M("tablet.estimation") + ")"), e.createChild("div", {
    text: o
  });
} else {
  var a = e.createChild("div");
  a.createChild("span", {
    text: t + M("ui.common.colon")
  }), a.createChild("span", {
    text: "?",
    className: "unknown"
  });
}
for (var i = 0; i < e.length; i++) {
  var n = e[i],
    o = n.text,
    a = t.createChild("div", {
      className: "singleTab"
    });
  if ("string" == typeof o) {
    a.setHtml(A + " " + o);
  } else {
    for (var s = 0; s < o.length; s++) {
      var r = o[s];
      a.createChild("div", {
        text: r
      });
    }
  }
  n.isMalus && a.addClassNames("malus");
}
if ("string" == typeof o) {
  a.setHtml(A + " " + o);
} else {
  for (var s = 0; s < o.length; s++) {
    var r = o[s];
    a.createChild("div", {
      text: r
    });
  }
}
for (var s = 0; s < o.length; s++) {
  var r = o[s];
  a.createChild("div", {
    text: r
  });
}
if (t) {
  var n = t.criticalMiss;
  i += n.getTotalStat();
}
if (i) {
  var n = i.effectsMap[S];
  n && e.createChild("div", {
    className: "extra",
    text: n.description
  });
}
if (e.name.setText(t.getProperty("nameId")), e.name.toggleClassName("etheral", !!t.getProperty("etheral")), i.showCategory === !1) {
  e.category.hide();
} else {
  var n = t.getProperty("typeId"),
    o = y.getItemTypeMap();
  e.category.setText(M("ui.common.category") + M("ui.common.colon") + o[n].nameId), e.category.show();
}
if (t.getProperty("isWeapon")) {
  e.points.ap.setText(M("ui.common.ap") + " : " + t.getProperty("apCost"));
  var r = t.getProperty("range"),
    l = t.getProperty("minRange");
  e.points.ra.setText(M("ui.common.ra") + " : " + l), e.points.range.setText(r !== l ? " - " + r : ""), e.points.show(), s && s !== -1 && h(a.createChild("div", {
    className: "extra"
  }), t), t.getProperty("twoHanded") && a.createChild("div", {
    className: "extra",
    text: M("ui.common.twoHandsWeapon")
  });
  var c = t.getProperty("maxCastPerTurn");
  if (c) {
    var m = M("ui.item.maxUsePerTurn") + M("ui.common.colon") + c;
    a.createChild("div", {
      className: "extra",
      text: m
    });
  }
  t.getProperty("castInLine") && r > 1 && !t.getProperty("castInDiagonal") && a.createChild("div", {
    className: "extra",
    text: M("ui.spellInfo.castInLine")
  }), !t.getProperty("castTestLos") && r > 1 && a.createChild("div", {
    className: "extra",
    text: M("ui.spellInfo.castWithoutLos")
  }), p(a, t);
  var f = t.getProperty("criticalFailureProbability"),
    g = t.getProperty("criticalHitProbability");
  if (i.showCritical && (f || g)) {
    var _ = "",
      v = window.gui.playerData.characters.mainCharacter.characteristics;
    g && (_ += d(t, v)), f && (_ += u(t, v)), a.createChild("div", {
      className: "extra",
      text: _
    });
  }
} else {
  e.points.hide(), s && s !== -1 && h(a.createChild("div", {
    className: "extra"
  }), t), p(a, t);
}
if (c) {
  var m = M("ui.item.maxUsePerTurn") + M("ui.common.colon") + c;
  a.createChild("div", {
    className: "extra",
    text: m
  });
}
if (i.showCritical && (f || g)) {
  var _ = "",
    v = window.gui.playerData.characters.mainCharacter.characteristics;
  g && (_ += d(t, v)), f && (_ += u(t, v)), a.createChild("div", {
    className: "extra",
    text: _
  });
}
if (!(e instanceof w || e instanceof b)) {
  return console.error(new Error("ItemDescription: item is not Item nor ItemInstance"));
}
if (this.currentItem = e, e.isItemInstance && !e.isInitialised) {
  var i = this;
  return e.once("initialised", function () {
    i.currentItem === e && i.updateUI(e, t);
  });
}
for (var n in E) {
  var o = this._domElements[n];
  t[n] !== !1 && E[n](o, e, t) ? o.show() : o.hide();
}
if (!e.requiresInvocationDescription() || !e.subEffectDescription) {
  return null;
}
for (var t, i, n = new u("div"), o = Math.ceil(e.subEffectDescription.length / 2), a = 0; a < o; a++) {
  t = n.createChild("div", {
    className: "monsterLine"
  }), i = t.createChild("div", {
    className: "column1"
  }), i.setHtml(h + " " + e.subEffectDescription[a]), e.subEffectDescription[o + a] && (i = t.createChild("div", {
    className: "column2"
  }), i.setHtml(h + " " + e.subEffectDescription[o + a]));
}
if (!o(e) || !e.subEffectDescription) {
  return null;
}
for (var t = new u("div"), i = 0; i < e.subEffectDescription.length; i++) {
  var n = t.createChild("div", {
    className: "singleTab"
  });
  n.setHtml(h + " " + e.subEffectDescription[i]);
}
for (var i = 0; i < t.length; i++) {
  var n = t[i],
    o = e.createChild("div", {
      className: "singleTab"
    });
  n.dbEffect.bonusType === -1 ? o.addClassNames("malus") : 1 === n.dbEffect.bonusType && o.addClassNames("bonus"), n.isExotic && o.addClassNames("exotic"), "string" == typeof n.description ? o.setHtml(h + " " + n.description) : o.appendChild(n.description);
}
for (var i = [], n = [], l = 0, d = e.length; l < d; l++) {
  var u = e[l];
  if (u) {
    var h = u.description;
    if (h && (this.alwaysVisible || !u.hidden)) {
      var p = u.getDurationString();
      p && (h += " (" + p + ")");
      var m = u.isDamageEffect() ? i : n;
      m.push({
        dbEffect: u.effect,
        description: h,
        isExotic: u.isExotic
      }), u.requiresInvocationDescription() && u.subEffectDescription && m.push({
        dbEffect: u.effect,
        description: a(u)
      }), o(u) && u.subEffectDescription && m.push({
        dbEffect: u.effect,
        description: s(u)
      });
    }
  }
}
if (u) {
  var h = u.description;
  if (h && (this.alwaysVisible || !u.hidden)) {
    var p = u.getDurationString();
    p && (h += " (" + p + ")");
    var m = u.isDamageEffect() ? i : n;
    m.push({
      dbEffect: u.effect,
      description: h,
      isExotic: u.isExotic
    }), u.requiresInvocationDescription() && u.subEffectDescription && m.push({
      dbEffect: u.effect,
      description: a(u)
    }), o(u) && u.subEffectDescription && m.push({
      dbEffect: u.effect,
      description: s(u)
    });
  }
}
if (h && (this.alwaysVisible || !u.hidden)) {
  var p = u.getDurationString();
  p && (h += " (" + p + ")");
  var m = u.isDamageEffect() ? i : n;
  m.push({
    dbEffect: u.effect,
    description: h,
    isExotic: u.isExotic
  }), u.requiresInvocationDescription() && u.subEffectDescription && m.push({
    dbEffect: u.effect,
    description: a(u)
  }), o(u) && u.subEffectDescription && m.push({
    dbEffect: u.effect,
    description: s(u)
  });
}
for (i = [], n = 0, o = e.getEffectsIds(t).length; n < o; n++) {
  i.push(e.effectInstances[a + "-effects-" + n]);
}
for (this._renderDamageAndEffects(i), i = [], n = 0, o = e.getCriticalEffectsIds(t).length; n < o; n++) {
  i.push(e.effectInstances[a + "-criticalEffect-" + n]);
}
if (r.indexOf(l) === -1) {
  return s;
}
for (var d = 0; d < c.length; d += 1) {
  i = c[d], n = i.effect.bonusType, 1 === n && (o = Math.floor(i.value * e.favoriteSubAreasBonus / 100), o && (a = i.clone(), a.setParameter(2, o), a.forceDescriptionRefresh(), s.push(a)));
}
if (a || s) {
  var r, l;
  if (t) {
    r = i.concat(o(e, t)), l = !t.objectUID;
  } else {
    if (!s) {
      return;
    }
    r = n, l = !0;
  }
  if (r = r.filter(function (e) {
    return e && e.effect && !e.isLivingProperty;
  }), this.exoticEffects = {}, !l && !e.hideEffects && e.enhanceable) {
    for (var c = 0; c < r.length; c += 1) {
      var d = r[c].effect;
      if (d && d.showInSet && n) {
        for (var u = !0, h = 0; h < n.length; h += 1) {
          if (d.id === n[h].effectId) {
            u = !1;
            break;
          }
        }
        this.exoticEffects[d.id] = u;
      }
    }
  }
  return r;
}
if (t) {
  r = i.concat(o(e, t)), l = !t.objectUID;
} else {
  if (!s) {
    return;
  }
  r = n, l = !0;
}
if (!s) {
  return;
}
if (r = r.filter(function (e) {
  return e && e.effect && !e.isLivingProperty;
}), this.exoticEffects = {}, !l && !e.hideEffects && e.enhanceable) {
  for (var c = 0; c < r.length; c += 1) {
    var d = r[c].effect;
    if (d && d.showInSet && n) {
      for (var u = !0, h = 0; h < n.length; h += 1) {
        if (d.id === n[h].effectId) {
          u = !1;
          break;
        }
      }
      this.exoticEffects[d.id] = u;
    }
  }
}
for (var c = 0; c < r.length; c += 1) {
  var d = r[c].effect;
  if (d && d.showInSet && n) {
    for (var u = !0, h = 0; h < n.length; h += 1) {
      if (d.id === n[h].effectId) {
        u = !1;
        break;
      }
    }
    this.exoticEffects[d.id] = u;
  }
}
if (d && d.showInSet && n) {
  for (var u = !0, h = 0; h < n.length; h += 1) {
    if (d.id === n[h].effectId) {
      u = !1;
      break;
    }
  }
  this.exoticEffects[d.id] = u;
}
for (var u = !0, h = 0; h < n.length; h += 1) {
  if (d.id === n[h].effectId) {
    u = !1;
    break;
  }
}
if (d.id === n[h].effectId) {
  u = !1;
  break;
}
for (i = 0; i < r.length; i += 1) {
  if (o = r[i].effect, o.category !== s.undefined && 812 !== o.id) {
    a.exoticEffects[o.id] && (r[i].isExotic = !0);
    var d = o.showInSet ? o.category : s.special;
    c[d] || (c[d] = []), c[d].push(r[i]);
  }
}
if (o = r[i].effect, o.category !== s.undefined && 812 !== o.id) {
  a.exoticEffects[o.id] && (r[i].isExotic = !0);
  var d = o.showInSet ? o.category : s.special;
  c[d] || (c[d] = []), c[d].push(r[i]);
}
for (i = 0; i < l.length; i += 1) {
  var h = c[l[i]];
  if (h) {
    for (n = 0; n < h.length; n += 1) {
      var p = h[n];
      u.push(p);
    }
  }
}
if (h) {
  for (n = 0; n < h.length; n += 1) {
    var p = h[n];
    u.push(p);
  }
}
for (n = 0; n < h.length; n += 1) {
  var p = h[n];
  u.push(p);
}
if (m.call(this, "div", {
  className: "TableV2"
}), i = i || {}, t) {
  "function" == typeof t ? this.getIdFn = t : this.getIdFn = function (e) {
    return e[t];
  };
} else {
  var s = 0;
  this.getIdFn = function () {
    return s++;
  };
}
for (var r = 0, l = e.length; r < l; r += 1) {
  var c = e[r];
  this.colIndex[c.id] = r, c.format = c.format || c.getContent || o, c.sort && ("function" == typeof c.sort ? c.getContent = c.getContent || a : (c.sort = n, c.getContent = c.getContent || o), c.order = c.order || "ascending", c.defaultSorter && (this.defaultSorter = c, this.defaultOrder = c.order, this.sortBy = c));
}
for (var e = this.header.row = this.header.createChild("div", {
    className: "row"
  }), t = 0, i = this.cols.length; t < i; t += 1) {
  var n,
    o = this.cols[t];
  o.sort ? (n = e.appendChild(new h({
    className: ["col", o.id],
    name: o.id
  }, r)), n.myTable = this) : n = e.createChild("div", {
    className: ["col", o.id]
  }), u(n, o.tooltip ? o.tooltip : l), e[o.id] = n, (o.header || o.sort) && (n.content = n.createChild("div", {
    className: "headerContent"
  }), o.header instanceof m ? n.content.appendChild(o.header) : n.content.setText(o.header || ""), o.sort && (n.addClassNames(o.order), n.sorter = n.createChild("div", {
    className: "sortBtn"
  }), this._toggleTriangle(n, !!o.defaultSorter), n.sortBy = o, o.header || n.sorter.addClassNames("noText")));
}
if (!this.placeholder) {
  if (!e) {
    return;
  }
  this.placeholder = new p(this, {
    headerElement: this.header
  });
}
if (!e) {
  return;
}
if (!this.isSorting) {
  this.isSorting = !0;
  var t;
  t = e.sortBy === this.sortBy ? "ascending" === e.sortBy.order ? "descending" : "ascending" : e.sortBy.order, this.spinner.addSpinner("sorting"), this._updateSortButton(e, t), window.setTimeout(this._sortByColumn.bind(this, e, t));
}
if (this.defaultSorter) {
  var e = this.header.row[this.defaultSorter.id];
  this._updateSortButton(e, this.defaultOrder), this._sortByColumn(e, this.defaultOrder);
}
if (e && this.setSorter(e, t), this.sortBy) {
  var i = this.sortBy,
    n = "ascending" === i.order ? 1 : -1;
  e = function (e, t) {
    return i.sort(i.getContent(e.rowContent), i.getContent(t.rowContent)) * n;
  };
}
for (var a = !0, s = 0, r = o.length; s < r; s += 1) {
  var l = o[s];
  e && this.rows.appendChild(l), l.isVisible() && (l.toggleClassName("odd", a), a = !a);
}
for (var a = !1, s = !1, r = !0, l = this.rows.getChildren(), c = 0, d = l.length; c < d; c += 1) {
  var u = l[c];
  if (u === e) {
    if (t) {
      continue;
    }
    a = !0;
  }
  !s && t && t(n, o.getContent(u.rowContent)) * i < 0 && (e.insertBefore(u), s = !0, e.isVisible() && (e.toggleClassName("odd", r), r = !r)), u.isVisible() && (u.toggleClassName("odd", r), r = !r);
}
if (u === e) {
  if (t) {
    continue;
  }
  a = !0;
}
if (t) {
  continue;
}
for (var i = this.rows.getChildren(), n = 0, o = i.length; n < o; n += 1) {
  var a = i[n];
  if (e.call(this, a.rowContent, t)) {
    return a.rowId;
  }
}
if (e.call(this, a.rowContent, t)) {
  return a.rowId;
}
for (var n = 0, o = t.length; n < o; n += 1) {
  var a = t[n],
    s = e.call(this, a.rowContent);
  a.toggleDisplay(s), s && (w.cancelTween(a) && a.setStyle("webkitTransform", null), a.toggleClassName("odd", i), i = !i);
}
for (var t = 0, i = this.filters.length; t < i; t += 1) {
  if (!this.filters[t].call(this, e)) {
    return !1;
  }
}
if (!this.filters[t].call(this, e)) {
  return !1;
}
if (a.setStyle("opacity", 0), a.delClassNames("spinner", a.side), t) {
  return t();
}
if (this.rows.getChild(t)) {
  throw new Error('THROW createRow: Already have a child named "' + t + '"');
}
for (var a = 0, s = this.cols.length; a < s; a += 1) {
  var r = this.cols[a];
  o[r.id] = o.createChild("div", {
    className: ["col", r.id]
  }), d(o, r);
}
for (var t, i = this.rows.getChildren(), n = 0, o = b / 2, a = 0; a < i.length; a++) {
  var s = i[a];
  if (e[s.rowId]) {
    if (n >= b || !s.isVisible()) {
      s.setStyle("webkitTransform", null);
    } else {
      0 === n && (t = s);
      var r = (o - Math.abs(n - o)) * M;
      n++, w.tween(s, {
        webkitTransform: "translate3d(0,0,0)"
      }, {
        time: T,
        easing: "ease-out",
        delay: r
      });
    }
  }
}
if (e[s.rowId]) {
  if (n >= b || !s.isVisible()) {
    s.setStyle("webkitTransform", null);
  } else {
    0 === n && (t = s);
    var r = (o - Math.abs(n - o)) * M;
    n++, w.tween(s, {
      webkitTransform: "translate3d(0,0,0)"
    }, {
      time: T,
      easing: "ease-out",
      delay: r
    });
  }
}
if (n >= b || !s.isVisible()) {
  s.setStyle("webkitTransform", null);
} else {
  0 === n && (t = s);
  var r = (o - Math.abs(n - o)) * M;
  n++, w.tween(s, {
    webkitTransform: "translate3d(0,0,0)"
  }, {
    time: T,
    easing: "ease-out",
    delay: r
  });
}
if (this.scroller.removeChild(this.rows), e.length && this.setPlaceholderText(""), i) {
  for (var n = 0; n < e.length; n++) {
    var o = this.getIdFn(e[n]);
    this.hasRow(o) && this.delRow(o, !1);
  }
}
for (var n = 0; n < e.length; n++) {
  var o = this.getIdFn(e[n]);
  this.hasRow(o) && this.delRow(o, !1);
}
for (s = 0, r = e.length; s < r; s += 1) {
  a = this._createRow(e[s], void 0, t), t && (l[a.rowId] = a);
}
for (var n in e) {
  var o = this._createRow(e[n], n, t);
  i[o.rowId] = o;
}
if (!i) {
  return this.addRow(e, t);
}
for (var n = 0, o = this.cols.length; n < o; n += 1) {
  d(i, this.cols[n]);
}
for (var e = this.rows.getChildren(), t = 0; t < e.length; t++) {
  var i = e[t];
  this._updateRow(i.rowContent, i.rowId);
}
for (var t = 0, i = e.length; t < i; t += 1) {
  this._updateRow(e[t]);
}
if (!n) {
  return console.error(new Error("Row id unknown: " + e));
}
if (!o) {
  return console.error(new Error("Column id unknown: " + t));
}
if (!i) {
  return console.error(new Error("Row id unknown " + e));
}
if (n) {
  var o = this;
  return t ? void w.tween(n, {
    webkitTransform: "translate3d(-100%,0,0)"
  }, {
    time: T,
    easing: "ease-out"
  }, i) : i();
}
for (var t = 0, n = e.length; t < n; t += 1) {
  o._delRow(e[t]);
}
if (!e.length || !t) {
  return n();
}
for (var a = 0, s = e.length; a < s; a += 1) {
  var r = this.rows.getChild(e[a]);
  if (r) {
    var l = a === s - 1 ? n : null;
    w.tween(r, {
      webkitTransform: "translate3d(-100%,0,0)"
    }, {
      time: T,
      easing: "ease-out",
      delay: a * M
    }, l);
  }
}
if (r) {
  var l = a === s - 1 ? n : null;
  w.tween(r, {
    webkitTransform: "translate3d(-100%,0,0)"
  }, {
    time: T,
    easing: "ease-out",
    delay: a * M
  }, l);
}
for (var e = !0, t = this.rows.getChildren(), i = 0, n = t.length; i < n; i += 1) {
  var o = t[i];
  o.isVisible() && (o.toggleClassName("odd", e), e = !e);
}
if (t) {
  this.locks[e] = !1, this.isAddingClasses && this.element.delClassNames(e);
  for (var i in this.locks) {
    if (this.locks[i]) {
      return;
    }
  }
  this.element.delClassNames("spinner");
}
for (var i in this.locks) {
  if (this.locks[i]) {
    return;
  }
}
if (this.locks[i]) {
  return;
}
for (var e in this.locks) {
  this.locks[e] && this.removeSpinner(e);
}
for (var e in this.locks) {
  if (this.locks[e]) {
    return !0;
  }
}
if (this.locks[e]) {
  return !0;
}
if (!t) {
  return console.error(new Error("Invalid action " + e));
}
for (var u = 0; u < I; u++) {
  var h = this.abilities[u] = c.createChild("div", {
    className: "ability"
  });
  y.addTooltip(h, o, {
    longTapExplanation: !0
  });
}
if (!e.feedingBox.possessFeedItemForMount()) {
  return window.gui.openSimplePopup(d("ui.item.errorNoFoodMount"));
}
for (var t = this.mountData, i = 0; i < e.length; i += 1) {
  var n = e[i],
    o = this.boostMap[n.type].property;
  t[o] = n.value, this.boostMap[n.type].update.call(this, n.value);
}
if (this.abilityDiv.toggleClassName("withoutAbilities", 0 === e.length), e.length) {
  for (var t = window.gui.databases.MountBehaviors, i = 0; i < this.abilities.length; i++) {
    var n = this.abilities[i],
      o = e[i];
    o && (n.setText(t[o].nameId), n.tooltipText = t[o].descriptionId), n.toggleDisplay(!!o);
  }
}
for (var t = window.gui.databases.MountBehaviors, i = 0; i < this.abilities.length; i++) {
  var n = this.abilities[i],
    o = e[i];
  o && (n.setText(t[o].nameId), n.tooltipText = t[o].descriptionId), n.toggleDisplay(!!o);
}
for (var c = 0, u = e.effectList.length; c < u; c += 1) {
  var h = e.effectList[c];
  h.effectCaller || (h.effectCaller = "mount " + e.model + " from location " + e.mountLocation);
}
if (e) {
  return n += o + "</ul>", i._effectsContent.setHtml(o), console.error(e);
}
if (t.length <= 0) {
  return n += o + "</ul>", i._effectsContent.setHtml(o);
}
for (var a = 0, s = t.length; a < s; a += 1) {
  var r = t[a];
  n += "<li>" + r.description + "</li>";
}
if (e === n.ARMOURED_MOUNT_ID) {
  return c;
}
if (e === n.BARBARIAN_MOUNT_ID) {
  return d;
}
if (e === n.ROYAL_MOUNT_ID) {
  return u;
}
if (e === n.NOWEL_MOUNT_ID) {
  return h;
}
if (!i) {
  return c;
}
for (var o = i.split(","), a = [], s = 0; s < 3; s++) {
  var r = o[s].split("="),
    l = parseInt(r[0], 10) - 1,
    p = parseInt(r[1], 10);
  isNaN(p) ? console.error("MountType: Color is not a number for mountId: " + e + ", index: " + l) : a[l] = "#" + p.toString(16);
}
if (i) {
  return console.error("Failed loading Mounts with id=", e, "error:", i);
}
if (!t._hasBeenDestroyed) {
  var a = n.parseColorsFromLook(e, o.look);
  t.color1.setStyle("backgroundColor", a[0]), t.color2.setStyle("backgroundColor", a[1]), t.color2.toggleDisplay(!n.isSingleColor(a)), t.tooltipText = o.nameId;
}
for (var e = u - l, t = this._serenityBar.maturity, i = (t.max - t.min) / e * this.serenityBarWidth / 2, n = 0, o = this.zones, a = 0; a < o.length; a++) {
  var s = o[a],
    r = (s.max - s.min) / e,
    c = r * this.serenityBarWidth;
  "maturity" !== s.name && (c += i), "stamina" !== s.name && (n -= i), s.setStyle("left", n + "px"), s.setStyle("width", c + "px"), n += c;
}
if (this._currentSerenity = e, this.serenityBarWidth) {
  this.isMini || this._serenityValue.setText(e);
  var t = (e - l) / (u - l),
    i = t * this.serenityBarWidth + this.serenityCursorOffset;
  this._serenityBarCursor.setStyle("left", i + "px"), this._serenityBar.stamina.toggleClassName("disabled", e > 0), this._serenityBar.maturity.toggleClassName("disabled", e < c || e > d), this._serenityBar.love.toggleClassName("disabled", e < 0);
}
if (e.isNewborn) {
  this.replaceClassNames(["disabled", "fertile", "pregnant", "sterile"], ["newborn"]), this.tooltipText = a("ui.mount.filterBorn");
} else if (e.fecondationTime >= 0) {
  this.replaceClassNames(["disabled", "fertile", "neutered", "newborn", "sterile"], ["pregnant"]), this.tooltipText = a("ui.mount.pregnantSince", e.fecondationTime);
} else if (e.canReproduce) {
  if (!e.isFecondationReady && !t) {
    return void this.hide();
  }
  this.replaceClassNames(["pregnant", "neutered", "newborn", "sterile"], ["fertile"]), i = !!t && !e.isFecondationReady, this.toggleClassName("disabled", i), this.tooltipText = a("ui.mount.fecondable");
} else {
  this.replaceClassNames(["disabled", "fertile", "pregnant", "newborn"], ["sterile"]);
  var n = e.isNeutered;
  this.toggleClassName("neutered", n), this.tooltipText = a(n ? "ui.mount.castrated" : "ui.mount.sterilized");
}
if (e.fecondationTime >= 0) {
  this.replaceClassNames(["disabled", "fertile", "neutered", "newborn", "sterile"], ["pregnant"]), this.tooltipText = a("ui.mount.pregnantSince", e.fecondationTime);
} else if (e.canReproduce) {
  if (!e.isFecondationReady && !t) {
    return void this.hide();
  }
  this.replaceClassNames(["pregnant", "neutered", "newborn", "sterile"], ["fertile"]), i = !!t && !e.isFecondationReady, this.toggleClassName("disabled", i), this.tooltipText = a("ui.mount.fecondable");
} else {
  this.replaceClassNames(["disabled", "fertile", "pregnant", "newborn"], ["sterile"]);
  var n = e.isNeutered;
  this.toggleClassName("neutered", n), this.tooltipText = a(n ? "ui.mount.castrated" : "ui.mount.sterilized");
}
if (e.canReproduce) {
  if (!e.isFecondationReady && !t) {
    return void this.hide();
  }
  this.replaceClassNames(["pregnant", "neutered", "newborn", "sterile"], ["fertile"]), i = !!t && !e.isFecondationReady, this.toggleClassName("disabled", i), this.tooltipText = a("ui.mount.fecondable");
} else {
  this.replaceClassNames(["disabled", "fertile", "pregnant", "newborn"], ["sterile"]);
  var n = e.isNeutered;
  this.toggleClassName("neutered", n), this.tooltipText = a(n ? "ui.mount.castrated" : "ui.mount.sterilized");
}
if (!e.isFecondationReady && !t) {
  return void this.hide();
}
if (n.currentTab.content.emit("slideEnd"), n.emit("slideEnd"), e) {
  var i = n.index;
  t > 0 && n._canRightSlide && (i = n.rightTab.index), t < 0 && n._canLeftSlide && (i = n.leftTab.index), n._openTabWithTransition(i);
} else {
  n.tabContainer.setStyles({
    webkitTransform: "translate" + n._axis + "(0)",
    webkitTransition: "-webkit-transform 200ms ease-out"
  });
}
for (var t = this._getNextAvailableRightTab(), i = this._getNextAvailableLeftTab(), n = 0; n < this.tabList.length; n++) {
  var o = this.tabList[n],
    a = o === e || o === i || o === t;
  o.content.toggleDisplay(a);
}
if (n && (i.forceOpen || this.index !== n.index)) {
  if (null !== this.index) {
    if (n === this.leftTab || n === this.rightTab) {
      return this._openTabWithTransition(n.index, t);
    }
    var o = this.tabList[this.index];
    this.header && o.tabBtn.delClassNames("on"), o.content.emit("close"), o.content.hide();
  }
  n.content.emit("open", t), this.index = n.index, this.header && n.tabBtn.addClassNames("on"), n.content.show(), this._positionTabs(), n.content.emit("opened", t), this.emit("openTab", n.id);
}
if (null !== this.index) {
  if (n === this.leftTab || n === this.rightTab) {
    return this._openTabWithTransition(n.index, t);
  }
  var o = this.tabList[this.index];
  this.header && o.tabBtn.delClassNames("on"), o.content.emit("close"), o.content.hide();
}
if (n === this.leftTab || n === this.rightTab) {
  return this._openTabWithTransition(n.index, t);
}
for (e = this.index + 1, t = this.tabList.length; e < t; e += 1) {
  if (i = this.tabList[e], i.enable) {
    return i;
  }
}
if (i = this.tabList[e], i.enable) {
  return i;
}
if (!this.isCyclingAllowed) {
  return null;
}
for (e = 0, t = this.index; e < t; e += 1) {
  if (i = this.tabList[e], i.enable) {
    return i;
  }
}
if (i = this.tabList[e], i.enable) {
  return i;
}
for (e = this.index - 1; e >= 0; e -= 1) {
  if (t = this.tabList[e], t.enable) {
    return t;
  }
}
if (t = this.tabList[e], t.enable) {
  return t;
}
if (!this.isCyclingAllowed) {
  return null;
}
for (e = this.tabList.length - 1; e > this.index; e -= 1) {
  if (t = this.tabList[e], t.enable) {
    return t;
  }
}
if (t = this.tabList[e], t.enable) {
  return t;
}
if (t) {
  for (var i = 0, n = t.length; i < n; i += 1) {
    var o = t[i];
    o.infoData.isHintFromDB && (e += o.infoData.nameIdOverRideFunc ? o.infoData.nameIdOverRideFunc() : o.infoData.nameId.replace("\\n ", "\n"), e += "\n");
  }
  "" !== e && (e += "\n");
}
for (var i = 0, n = t.length; i < n; i += 1) {
  var o = t[i];
  o.infoData.isHintFromDB && (e += o.infoData.nameIdOverRideFunc ? o.infoData.nameIdOverRideFunc() : o.infoData.nameId.replace("\\n ", "\n"), e += "\n");
}
if (r) {
  for (var l = 0, p = r.length; l < p; l += 1) {
    var m = r[l];
    "customFlag" === m.categoryId ? (d.show(), o.hide()) : "questObjective" === m.categoryId ? (i.flagId = m.id, i.show()) : "zaap" === m.categoryId ? (t.flagId = m.id, t.show()) : "hint" === m.categoryId ? (n.flagId = m.id, n.show()) : "estate" === m.categoryId && (u.flagId = m.id, u.show());
  }
}
for (var l = 0, p = r.length; l < p; l += 1) {
  var m = r[l];
  "customFlag" === m.categoryId ? (d.show(), o.hide()) : "questObjective" === m.categoryId ? (i.flagId = m.id, i.show()) : "zaap" === m.categoryId ? (t.flagId = m.id, t.show()) : "hint" === m.categoryId ? (n.flagId = m.id, n.show()) : "estate" === m.categoryId && (u.flagId = m.id, u.show());
}
if (s.drawImage(t, i.sx, i.sy, i.sw, i.sh, 0, 0, o, n), e.infoData.nameIdOverRideFunc) {
  this.createChild("div", {
    className: "description",
    text: e.infoData.nameIdOverRideFunc()
  });
} else {
  var r = this.createChild("div", {
      className: "description"
    }),
    c = d.process(e.infoData.nameId.replace("\\n ", "\n"));
  r.appendChild(c);
}
for (var e = this.icons.getChildren(), t = !0, i = 0; i < e.length; i++) {
  var n = e[i],
    o = !n.iconData.infoData.groupCriterion || n.iconData.visible;
  n.toggleDisplay(o), o && (t = !1);
}
for (var i = 0, o = e.length; i < o; i += 1) {
  this.icons.appendChild(new n(e[i], t));
}
if (t) {
  return e(t);
}
for (var o = 0; o < n.length; o++) {
  var d = n[o],
    u = i[d.id].drops;
  if (d.typeId === s.types.cosmeticLegendaryWeapon) {
    for (var h = 0; h < u.length; h++) {
      var p = u[h],
        m = a.createGroupCriterion(p.criterion);
      c.push({
        itemName: d.nameId,
        criterions: m
      });
    }
  }
}
if (d.typeId === s.types.cosmeticLegendaryWeapon) {
  for (var h = 0; h < u.length; h++) {
    var p = u[h],
      m = a.createGroupCriterion(p.criterion);
    c.push({
      itemName: d.nameId,
      criterions: m
    });
  }
}
for (var h = 0; h < u.length; h++) {
  var p = u[h],
    m = a.createGroupCriterion(p.criterion);
  c.push({
    itemName: d.nameId,
    criterions: m
  });
}
if (t) {
  return i(t);
}
for (var o = "", a = 0; a < n.length; a++) {
  var s = n[a];
  if (s.criterions.isRespected({
    subAreaId: e
  })) {
    o = s.itemName;
    break;
  }
}
if (s.criterions.isRespected({
  subAreaId: e
})) {
  o = s.itemName;
  break;
}
for (var t = "", i = 0; i < e.length; i += 1) {
  var n = Number(e.charCodeAt(i)).toString(16);
  t += n.length < 2 ? "0" + n : n;
}
if (!n) {
  return R.error(new Error("Config is missing.")), "";
}
if (i.isMsgSafe) {
  N.openUrlInAppBrowser(e);
} else {
  var t = s(e, n, o);
  t && N.openUrlInAppBrowser(t);
}
if (!i) {
  return t = t || e, void 0 === i && console.warn("Skipped not handled hyperlink: " + e), new A("span", {
    text: t,
    className: "deadLink"
  });
}
if (n.linkType >= B.AUTO && i(), n.linkType === B.AUTO_AND_HIDDEN) {
  return u();
}
if (a.rootElement) {
  if (s) {
    return a.replaceClassNames([o], ["deadLink"]), a.setText("[???]"), console.error("Failed getting link data: " + e + " #" + t, s);
  }
  var l = i(r);
  if (a.setText(l[0]), n && n.tooltip) {
    return l.length < 3 ? (a.replaceClassNames([o], ["deadLink"]), console.error("To have a content on the tooltip, res[2] is required")) : O(a, l[2], {
      openOnTap: !0
    });
  }
  if (!l[1]) {
    return void a.replaceClassNames([o], ["deadLink"]);
  }
  S(a), a.on("tap", l[1]);
}
if (s) {
  return a.replaceClassNames([o], ["deadLink"]), a.setText("[???]"), console.error("Failed getting link data: " + e + " #" + t, s);
}
if (a.setText(l[0]), n && n.tooltip) {
  return l.length < 3 ? (a.replaceClassNames([o], ["deadLink"]), console.error("To have a content on the tooltip, res[2] is required")) : O(a, l[2], {
    openOnTap: !0
  });
}
if (!l[1]) {
  return void a.replaceClassNames([o], ["deadLink"]);
}
for (var i = 0; i < e.length; i++) {
  var n = e[i];
  if (n.objectUID === t) {
    return n;
  }
}
if (n.objectUID === t) {
  return n;
}
for (s.parentClassName && r.setClassNames(s.parentClassName);;) {
  var l = j.exec(e);
  if (!l) {
    break;
  }
  for (var c = l[0], d = e.indexOf(c), u = e.substr(0, d), h = e.substr(d + c.length), p = null, m = null, f = 0; f < G.length; f++) {
    if ((o || U[f].isAuthorizedInChat) && (m = W[f].exec(c))) {
      p = G[f](m, s);
      break;
    }
  }
  p || (p = _(c)), u && (n && (u = y.decode(u, a)), r.createChild("span").setHtml(u)), r.appendChild(p), e = h;
}
if (!l) {
  break;
}
for (var c = l[0], d = e.indexOf(c), u = e.substr(0, d), h = e.substr(d + c.length), p = null, m = null, f = 0; f < G.length; f++) {
  if ((o || U[f].isAuthorizedInChat) && (m = W[f].exec(c))) {
    p = G[f](m, s);
    break;
  }
}
if ((o || U[f].isAuthorizedInChat) && (m = W[f].exec(c))) {
  p = G[f](m, s);
  break;
}
for (var n = t; n <= i; n++) {
  e[n] = !0;
}
if (h && e > 255) {
  return !0;
}
if (void 0 === t) {
  return !1;
}
if (i === !0) {
  return !0;
}
if (void 0 === i) {
  return !1;
}
for (var n = 0; n < i.length; n++) {
  var o = i[n];
  if (e < o[0]) {
    break;
  }
  if (e <= o[1]) {
    return !0;
  }
}
if (e < o[0]) {
  break;
}
if (e <= o[1]) {
  return !0;
}
if (t < 3 || e[0] !== l || e[t - 1] !== l) {
  return e;
}
if (i.toString(16) !== e.substr(1, t - 2)) {
  return e;
}
for (var i = [], n = 0; n < e.length; n++) {
  var a = e.codePointAt(n);
  a > 65535 && n++, o(a) || i.push(String.fromCodePoint(a));
}
for (var i = "", n = 0; n < e.length; n++) {
  var o = e[n];
  if (o.charCodeAt() > 255) {
    var r = e.substr(n, 2),
      c = r.codePointAt();
    c > 65535 && n++, i += a(c) ? l + c.toString(16) + l : o;
  } else {
    i += s(o) ? l + o.charCodeAt().toString(16) + l : o;
  }
}
if (o.charCodeAt() > 255) {
  var r = e.substr(n, 2),
    c = r.codePointAt();
  c > 65535 && n++, i += a(c) ? l + c.toString(16) + l : o;
} else {
  i += s(o) ? l + o.charCodeAt().toString(16) + l : o;
}
for (var i = "", a = 0; a < e.length; a++) {
  var s = e[a];
  if (s !== l) {
    var c = s.charCodeAt();
    i += o(c) ? s : "�";
  } else {
    var d = n(e, a);
    a += d.length - 1, i += r(d);
  }
}
if (s !== l) {
  var c = s.charCodeAt();
  i += o(c) ? s : "�";
} else {
  var d = n(e, a);
  a += d.length - 1, i += r(d);
}
if (!e) {
  return console.error(new Error("Tutorial hint: no wuidom"));
}
if (!o) {
  return console.error(new Error("Tutorial hint issue"));
}
if (e) {
  var t = e.tabs.tabsMap.spells;
  t && window.gui.hintAnimationManager.playUITap(t.target.confirmButton, {
    animationPath: window.gui.hintAnimationManager.ANIMATION_PATH.LEFT_TOP_POINT_TO_RIGHT,
    doubleTap: !1
  });
}
if (t.openState) {
  var i = t.getEquipmentSlotsForTuto();
  n(i[e], "upLeft");
}
if (e.openState) {
  var t = e.tabs.getFirstTab();
  if (t) {
    var i = t.target.getFirstArticle();
    if (i) {
      var n = i.getButtons();
      window.gui.hintAnimationManager.playUITap(n.hardButton, {
        animationPath: window.gui.hintAnimationManager.ANIMATION_PATH.LEFT_TOP_POINT_TO_RIGHT,
        doubleTap: !1
      });
    }
  }
}
if (t) {
  var i = t.target.getFirstArticle();
  if (i) {
    var n = i.getButtons();
    window.gui.hintAnimationManager.playUITap(n.hardButton, {
      animationPath: window.gui.hintAnimationManager.ANIMATION_PATH.LEFT_TOP_POINT_TO_RIGHT,
      doubleTap: !1
    });
  }
}
if (i) {
  var n = i.getButtons();
  window.gui.hintAnimationManager.playUITap(n.hardButton, {
    animationPath: window.gui.hintAnimationManager.ANIMATION_PATH.LEFT_TOP_POINT_TO_RIGHT,
    doubleTap: !1
  });
}
if (!e) {
  return console.warn("We can not point to a null link");
}
for (var t = e.split(","), i = window, a = 0; a < t.length; a++) {
  var s = i[t[a]];
  if (!s) {
    i = null;
    break;
  }
  i = s;
}
if (!s) {
  i = null;
  break;
}
for (var i in e) {
  t(e[i], i);
}
if (!i || !i.call) {
  return new e(a(t));
}
if (a() < i) {
  throw new RangeError("Invalid typed array length");
}
if (!(e.TYPED_ARRAY_SUPPORT || this instanceof e)) {
  return new e(t, i, n);
}
if ("number" == typeof t) {
  if ("string" == typeof i) {
    throw new Error("If encoding is specified then the first argument must be a string");
  }
  return d(this, t);
}
if ("string" == typeof i) {
  throw new Error("If encoding is specified then the first argument must be a string");
}
if ("number" == typeof t) {
  throw new TypeError('"value" argument must not be a number');
}
if ("number" != typeof e) {
  throw new TypeError('"size" argument must be a number');
}
if (e < 0) {
  throw new RangeError('"size" argument must not be negative');
}
if (l(i), t = s(t, i < 0 ? 0 : 0 | f(i)), !e.TYPED_ARRAY_SUPPORT) {
  for (var n = 0; n < i; ++n) {
    t[n] = 0;
  }
}
for (var n = 0; n < i; ++n) {
  t[n] = 0;
}
if ("string" == typeof n && "" !== n || (n = "utf8"), !e.isEncoding(n)) {
  throw new TypeError('"encoding" must be a valid string encoding');
}
for (var n = 0; n < i; n += 1) {
  e[n] = 255 & t[n];
}
if (i.byteLength, n < 0 || i.byteLength < n) {
  throw new RangeError("'offset' is out of bounds");
}
if (i.byteLength < n + (o || 0)) {
  throw new RangeError("'length' is out of bounds");
}
if (e.isBuffer(i)) {
  var n = 0 | f(i.length);
  return t = s(t, n), 0 === t.length ? t : (i.copy(t, 0, 0, n), t);
}
if (i) {
  if ("undefined" != typeof ArrayBuffer && i.buffer instanceof ArrayBuffer || "length" in i) {
    return "number" != typeof i.length || K(i.length) ? s(t, 0) : h(t, i);
  }
  if ("Buffer" === i.type && $(i.data)) {
    return h(t, i.data);
  }
}
if ("undefined" != typeof ArrayBuffer && i.buffer instanceof ArrayBuffer || "length" in i) {
  return "number" != typeof i.length || K(i.length) ? s(t, 0) : h(t, i);
}
if ("Buffer" === i.type && $(i.data)) {
  return h(t, i.data);
}
if (e >= a()) {
  throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a().toString(16) + " bytes");
}
if (e.isBuffer(t)) {
  return t.length;
}
if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) {
  return t.byteLength;
}
if (0 === n) {
  return 0;
}
for (var o = !1;;) {
  switch (i) {
    case "ascii":
    case "latin1":
    case "binary":
      return n;
    case "utf8":
    case "utf-8":
    case void 0:
      return Y(t).length;
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return 2 * n;
    case "hex":
      return n >>> 1;
    case "base64":
      return X(t).length;
    default:
      if (o) {
        return Y(t).length;
      }
      i = ("" + i).toLowerCase(), o = !0;
  }
}
if (o) {
  return Y(t).length;
}
if ((void 0 === t || t < 0) && (t = 0), t > this.length) {
  return "";
}
if ((void 0 === i || i > this.length) && (i = this.length), i <= 0) {
  return "";
}
if (i >>>= 0, t >>>= 0, i <= t) {
  return "";
}
for (e || (e = "utf8");;) {
  switch (e) {
    case "hex":
      return R(this, t, i);
    case "utf8":
    case "utf-8":
      return N(this, t, i);
    case "ascii":
      return L(this, t, i);
    case "latin1":
    case "binary":
      return O(this, t, i);
    case "base64":
      return E(this, t, i);
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return D(this, t, i);
    default:
      if (n) {
        throw new TypeError("Unknown encoding: " + e);
      }
      e = (e + "").toLowerCase(), n = !0;
  }
}
if (n) {
  throw new TypeError("Unknown encoding: " + e);
}
if (0 === t.length) {
  return -1;
}
if ("string" == typeof n ? (o = n, n = 0) : n > 2147483647 ? n = 2147483647 : n < -2147483648 && (n = -2147483648), n = +n, isNaN(n) && (n = a ? 0 : t.length - 1), n < 0 && (n = t.length + n), n >= t.length) {
  if (a) {
    return -1;
  }
  n = t.length - 1;
} else if (n < 0) {
  if (!a) {
    return -1;
  }
  n = 0;
}
if (a) {
  return -1;
}
if (n < 0) {
  if (!a) {
    return -1;
  }
  n = 0;
}
if (!a) {
  return -1;
}
if ("string" == typeof i && (i = e.from(i, o)), e.isBuffer(i)) {
  return 0 === i.length ? -1 : b(t, i, n, o, a);
}
if ("number" == typeof i) {
  return i = 255 & i, e.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? a ? Uint8Array.prototype.indexOf.call(t, i, n) : Uint8Array.prototype.lastIndexOf.call(t, i, n) : b(t, [i], n, o, a);
}
if (void 0 !== n && (n = String(n).toLowerCase(), "ucs2" === n || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
  if (e.length < 2 || t.length < 2) {
    return -1;
  }
  s = 2, r /= 2, l /= 2, i /= 2;
}
if (e.length < 2 || t.length < 2) {
  return -1;
}
if (o) {
  var d = -1;
  for (c = i; c < r; c++) {
    if (a(e, c) === a(t, d === -1 ? 0 : c - d)) {
      if (d === -1 && (d = c), c - d + 1 === l) {
        return d * s;
      }
    } else {
      d !== -1 && (c -= c - d), d = -1;
    }
  }
} else {
  for (i + l > r && (i = r - l), c = i; c >= 0; c--) {
    for (var u = !0, h = 0; h < l; h++) {
      if (a(e, c + h) !== a(t, h)) {
        u = !1;
        break;
      }
    }
    if (u) {
      return c;
    }
  }
}
for (c = i; c < r; c++) {
  if (a(e, c) === a(t, d === -1 ? 0 : c - d)) {
    if (d === -1 && (d = c), c - d + 1 === l) {
      return d * s;
    }
  } else {
    d !== -1 && (c -= c - d), d = -1;
  }
}
if (a(e, c) === a(t, d === -1 ? 0 : c - d)) {
  if (d === -1 && (d = c), c - d + 1 === l) {
    return d * s;
  }
} else {
  d !== -1 && (c -= c - d), d = -1;
}
if (d === -1 && (d = c), c - d + 1 === l) {
  return d * s;
}
for (i + l > r && (i = r - l), c = i; c >= 0; c--) {
  for (var u = !0, h = 0; h < l; h++) {
    if (a(e, c + h) !== a(t, h)) {
      u = !1;
      break;
    }
  }
  if (u) {
    return c;
  }
}
for (var u = !0, h = 0; h < l; h++) {
  if (a(e, c + h) !== a(t, h)) {
    u = !1;
    break;
  }
}
if (a(e, c + h) !== a(t, h)) {
  u = !1;
  break;
}
if (u) {
  return c;
}
if (a % 2 !== 0) {
  throw new TypeError("Invalid hex string");
}
for (var s = 0; s < n; ++s) {
  var r = parseInt(t.substr(2 * s, 2), 16);
  if (isNaN(r)) {
    return s;
  }
  e[i + s] = r;
}
if (isNaN(r)) {
  return s;
}
for (var n = [], o = t; o < i;) {
  var a = e[o],
    s = null,
    r = a > 239 ? 4 : a > 223 ? 3 : a > 191 ? 2 : 1;
  if (o + r <= i) {
    var l, c, d, u;
    switch (r) {
      case 1:
        a < 128 && (s = a);
        break;
      case 2:
        l = e[o + 1], 128 === (192 & l) && (u = (31 & a) << 6 | 63 & l, u > 127 && (s = u));
        break;
      case 3:
        l = e[o + 1], c = e[o + 2], 128 === (192 & l) && 128 === (192 & c) && (u = (15 & a) << 12 | (63 & l) << 6 | 63 & c, u > 2047 && (u < 55296 || u > 57343) && (s = u));
        break;
      case 4:
        l = e[o + 1], c = e[o + 2], d = e[o + 3], 128 === (192 & l) && 128 === (192 & c) && 128 === (192 & d) && (u = (15 & a) << 18 | (63 & l) << 12 | (63 & c) << 6 | 63 & d, u > 65535 && u < 1114112 && (s = u));
    }
  }
  null === s ? (s = 65533, r = 1) : s > 65535 && (s -= 65536, n.push(s >>> 10 & 1023 | 55296), s = 56320 | 1023 & s), n.push(s), o += r;
}
if (o + r <= i) {
  var l, c, d, u;
  switch (r) {
    case 1:
      a < 128 && (s = a);
      break;
    case 2:
      l = e[o + 1], 128 === (192 & l) && (u = (31 & a) << 6 | 63 & l, u > 127 && (s = u));
      break;
    case 3:
      l = e[o + 1], c = e[o + 2], 128 === (192 & l) && 128 === (192 & c) && (u = (15 & a) << 12 | (63 & l) << 6 | 63 & c, u > 2047 && (u < 55296 || u > 57343) && (s = u));
      break;
    case 4:
      l = e[o + 1], c = e[o + 2], d = e[o + 3], 128 === (192 & l) && 128 === (192 & c) && 128 === (192 & d) && (u = (15 & a) << 18 | (63 & l) << 12 | (63 & c) << 6 | 63 & d, u > 65535 && u < 1114112 && (s = u));
  }
}
if (t <= ee) {
  return String.fromCharCode.apply(String, e);
}
for (var i = "", n = 0; n < t;) {
  i += String.fromCharCode.apply(String, e.slice(n, n += ee));
}
for (var o = t; o < i; ++o) {
  n += String.fromCharCode(127 & e[o]);
}
for (var o = t; o < i; ++o) {
  n += String.fromCharCode(e[o]);
}
for (var o = "", a = t; a < i; ++a) {
  o += q(e[a]);
}
for (var n = e.slice(t, i), o = "", a = 0; a < n.length; a += 2) {
  o += String.fromCharCode(n[a] + 256 * n[a + 1]);
}
if (e % 1 !== 0 || e < 0) {
  throw new RangeError("offset is not uint");
}
if (e + t > i) {
  throw new RangeError("Trying to access beyond buffer length");
}
if (!e.isBuffer(t)) {
  throw new TypeError('"buffer" argument must be a Buffer instance');
}
if (i > a || i < s) {
  throw new RangeError('"value" argument is out of bounds');
}
if (n + o > t.length) {
  throw new RangeError("Index out of range");
}
for (var o = 0, a = Math.min(e.length - i, 2); o < a; ++o) {
  e[i + o] = (t & 255 << 8 * (n ? o : 1 - o)) >>> 8 * (n ? o : 1 - o);
}
for (var o = 0, a = Math.min(e.length - i, 4); o < a; ++o) {
  e[i + o] = t >>> 8 * (n ? o : 3 - o) & 255;
}
if (i + n > e.length) {
  throw new RangeError("Index out of range");
}
if (i < 0) {
  throw new RangeError("Index out of range");
}
if (e = U(e).replace(te, ""), e.length < 2) {
  return "";
}
for (; e.length % 4 !== 0;) {
  e += "=";
}
for (var i, n = e.length, o = null, a = [], s = 0; s < n; ++s) {
  if (i = e.charCodeAt(s), i > 55295 && i < 57344) {
    if (!o) {
      if (i > 56319) {
        (t -= 3) > -1 && a.push(239, 191, 189);
        continue;
      }
      if (s + 1 === n) {
        (t -= 3) > -1 && a.push(239, 191, 189);
        continue;
      }
      o = i;
      continue;
    }
    if (i < 56320) {
      (t -= 3) > -1 && a.push(239, 191, 189), o = i;
      continue;
    }
    i = (o - 55296 << 10 | i - 56320) + 65536;
  } else {
    o && (t -= 3) > -1 && a.push(239, 191, 189);
  }
  if (o = null, i < 128) {
    if ((t -= 1) < 0) {
      break;
    }
    a.push(i);
  } else if (i < 2048) {
    if ((t -= 2) < 0) {
      break;
    }
    a.push(i >> 6 | 192, 63 & i | 128);
  } else if (i < 65536) {
    if ((t -= 3) < 0) {
      break;
    }
    a.push(i >> 12 | 224, i >> 6 & 63 | 128, 63 & i | 128);
  } else {
    if (!(i < 1114112)) {
      throw new Error("Invalid code point");
    }
    if ((t -= 4) < 0) {
      break;
    }
    a.push(i >> 18 | 240, i >> 12 & 63 | 128, i >> 6 & 63 | 128, 63 & i | 128);
  }
}
if (i = e.charCodeAt(s), i > 55295 && i < 57344) {
  if (!o) {
    if (i > 56319) {
      (t -= 3) > -1 && a.push(239, 191, 189);
      continue;
    }
    if (s + 1 === n) {
      (t -= 3) > -1 && a.push(239, 191, 189);
      continue;
    }
    o = i;
    continue;
  }
  if (i < 56320) {
    (t -= 3) > -1 && a.push(239, 191, 189), o = i;
    continue;
  }
  i = (o - 55296 << 10 | i - 56320) + 65536;
} else {
  o && (t -= 3) > -1 && a.push(239, 191, 189);
}
if (!o) {
  if (i > 56319) {
    (t -= 3) > -1 && a.push(239, 191, 189);
    continue;
  }
  if (s + 1 === n) {
    (t -= 3) > -1 && a.push(239, 191, 189);
    continue;
  }
  o = i;
  continue;
}
if (i > 56319) {
  (t -= 3) > -1 && a.push(239, 191, 189);
  continue;
}
if (s + 1 === n) {
  (t -= 3) > -1 && a.push(239, 191, 189);
  continue;
}
if (i < 56320) {
  (t -= 3) > -1 && a.push(239, 191, 189), o = i;
  continue;
}
if (o = null, i < 128) {
  if ((t -= 1) < 0) {
    break;
  }
  a.push(i);
} else if (i < 2048) {
  if ((t -= 2) < 0) {
    break;
  }
  a.push(i >> 6 | 192, 63 & i | 128);
} else if (i < 65536) {
  if ((t -= 3) < 0) {
    break;
  }
  a.push(i >> 12 | 224, i >> 6 & 63 | 128, 63 & i | 128);
} else {
  if (!(i < 1114112)) {
    throw new Error("Invalid code point");
  }
  if ((t -= 4) < 0) {
    break;
  }
  a.push(i >> 18 | 240, i >> 12 & 63 | 128, i >> 6 & 63 | 128, 63 & i | 128);
}
if ((t -= 1) < 0) {
  break;
}
if (i < 2048) {
  if ((t -= 2) < 0) {
    break;
  }
  a.push(i >> 6 | 192, 63 & i | 128);
} else if (i < 65536) {
  if ((t -= 3) < 0) {
    break;
  }
  a.push(i >> 12 | 224, i >> 6 & 63 | 128, 63 & i | 128);
} else {
  if (!(i < 1114112)) {
    throw new Error("Invalid code point");
  }
  if ((t -= 4) < 0) {
    break;
  }
  a.push(i >> 18 | 240, i >> 12 & 63 | 128, i >> 6 & 63 | 128, 63 & i | 128);
}
if ((t -= 2) < 0) {
  break;
}
if (i < 65536) {
  if ((t -= 3) < 0) {
    break;
  }
  a.push(i >> 12 | 224, i >> 6 & 63 | 128, 63 & i | 128);
} else {
  if (!(i < 1114112)) {
    throw new Error("Invalid code point");
  }
  if ((t -= 4) < 0) {
    break;
  }
  a.push(i >> 18 | 240, i >> 12 & 63 | 128, i >> 6 & 63 | 128, 63 & i | 128);
}
if ((t -= 3) < 0) {
  break;
}
if (!(i < 1114112)) {
  throw new Error("Invalid code point");
}
if ((t -= 4) < 0) {
  break;
}
for (var t = [], i = 0; i < e.length; ++i) {
  t.push(255 & e.charCodeAt(i));
}
for (var i, n, o, a = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) {
  i = e.charCodeAt(s), n = i >> 8, o = i % 256, a.push(o), a.push(n);
}
for (var o = 0; o < n && !(o + i >= t.length || o >= e.length); ++o) {
  t[o + i] = e[o];
}
if (!e.isBuffer(t) || !e.isBuffer(i)) {
  throw new TypeError("Arguments must be Buffers");
}
if (t === i) {
  return 0;
}
for (var n = t.length, o = i.length, a = 0, s = Math.min(n, o); a < s; ++a) {
  if (t[a] !== i[a]) {
    n = t[a], o = i[a];
    break;
  }
}
if (t[a] !== i[a]) {
  n = t[a], o = i[a];
  break;
}
if (!$(t)) {
  throw new TypeError('"list" argument must be an Array of Buffers');
}
if (0 === t.length) {
  return e.alloc(0);
}
if (void 0 === i) {
  for (i = 0, n = 0; n < t.length; ++n) {
    i += t[n].length;
  }
}
for (i = 0, n = 0; n < t.length; ++n) {
  i += t[n].length;
}
for (n = 0; n < t.length; ++n) {
  var s = t[n];
  if (!e.isBuffer(s)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  s.copy(o, a), a += s.length;
}
if (!e.isBuffer(s)) {
  throw new TypeError('"list" argument must be an Array of Buffers');
}
if (e % 2 !== 0) {
  throw new RangeError("Buffer size must be a multiple of 16-bits");
}
for (var t = 0; t < e; t += 2) {
  y(this, t, t + 1);
}
if (e % 4 !== 0) {
  throw new RangeError("Buffer size must be a multiple of 32-bits");
}
for (var t = 0; t < e; t += 4) {
  y(this, t, t + 3), y(this, t + 1, t + 2);
}
if (e % 8 !== 0) {
  throw new RangeError("Buffer size must be a multiple of 64-bits");
}
for (var t = 0; t < e; t += 8) {
  y(this, t, t + 7), y(this, t + 1, t + 6), y(this, t + 2, t + 5), y(this, t + 3, t + 4);
}
if (!e.isBuffer(t)) {
  throw new TypeError("Argument must be a Buffer");
}
if (!e.isBuffer(t)) {
  throw new TypeError("Argument must be a Buffer");
}
if (void 0 === i && (i = 0), void 0 === n && (n = t ? t.length : 0), void 0 === o && (o = 0), void 0 === a && (a = this.length), i < 0 || n > t.length || o < 0 || a > this.length) {
  throw new RangeError("out of range index");
}
if (o >= a && i >= n) {
  return 0;
}
if (o >= a) {
  return -1;
}
if (i >= n) {
  return 1;
}
if (i >>>= 0, n >>>= 0, o >>>= 0, a >>>= 0, this === t) {
  return 0;
}
for (var s = a - o, r = n - i, l = Math.min(s, r), c = this.slice(o, a), d = t.slice(i, n), u = 0; u < l; ++u) {
  if (c[u] !== d[u]) {
    s = c[u], r = d[u];
    break;
  }
}
if (c[u] !== d[u]) {
  s = c[u], r = d[u];
  break;
}
if (void 0 === t) {
  n = "utf8", i = this.length, t = 0;
} else if (void 0 === i && "string" == typeof t) {
  n = t, i = this.length, t = 0;
} else {
  if (!isFinite(t)) {
    throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
  }
  t = 0 | t, isFinite(i) ? (i = 0 | i, void 0 === n && (n = "utf8")) : (n = i, i = void 0);
}
if (void 0 === i && "string" == typeof t) {
  n = t, i = this.length, t = 0;
} else {
  if (!isFinite(t)) {
    throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
  }
  t = 0 | t, isFinite(i) ? (i = 0 | i, void 0 === n && (n = "utf8")) : (n = i, i = void 0);
}
if (!isFinite(t)) {
  throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
}
if ((void 0 === i || i > o) && (i = o), e.length > 0 && (i < 0 || t < 0) || t > this.length) {
  throw new RangeError("Attempt to write outside buffer bounds");
}
for (var a = !1;;) {
  switch (n) {
    case "hex":
      return M(this, e, t, i);
    case "utf8":
    case "utf-8":
      return T(this, e, t, i);
    case "ascii":
      return C(this, e, t, i);
    case "latin1":
    case "binary":
      return I(this, e, t, i);
    case "base64":
      return A(this, e, t, i);
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return S(this, e, t, i);
    default:
      if (a) {
        throw new TypeError("Unknown encoding: " + n);
      }
      n = ("" + n).toLowerCase(), a = !0;
  }
}
if (a) {
  throw new TypeError("Unknown encoding: " + n);
}
if (e.TYPED_ARRAY_SUPPORT) {
  o = this.subarray(t, i), o.__proto__ = e.prototype;
} else {
  var a = i - t;
  o = new e(a, void 0);
  for (var s = 0; s < a; ++s) {
    o[s] = this[s + t];
  }
}
for (var s = 0; s < a; ++s) {
  o[s] = this[s + t];
}
for (var n = this[e], o = 1, a = 0; ++a < t && (o *= 256);) {
  n += this[e + a] * o;
}
for (var n = this[e + --t], o = 1; t > 0 && (o *= 256);) {
  n += this[e + --t] * o;
}
for (var n = this[e], o = 1, a = 0; ++a < t && (o *= 256);) {
  n += this[e + a] * o;
}
for (var n = t, o = 1, a = this[e + --n]; n > 0 && (o *= 256);) {
  a += this[e + --n] * o;
}
if (e = +e, t = 0 | t, i = 0 | i, !n) {
  var o = Math.pow(2, 8 * i) - 1;
  B(this, e, t, i, o, 0);
}
for (this[t] = 255 & e; ++s < i && (a *= 256);) {
  this[t + s] = e / a & 255;
}
if (e = +e, t = 0 | t, i = 0 | i, !n) {
  var o = Math.pow(2, 8 * i) - 1;
  B(this, e, t, i, o, 0);
}
for (this[t + a] = 255 & e; --a >= 0 && (s *= 256);) {
  this[t + a] = e / s & 255;
}
if (e = +e, t = 0 | t, !n) {
  var o = Math.pow(2, 8 * i - 1);
  B(this, e, t, i, o - 1, -o);
}
for (this[t] = 255 & e; ++a < i && (s *= 256);) {
  e < 0 && 0 === r && 0 !== this[t + a - 1] && (r = 1), this[t + a] = (e / s >> 0) - r & 255;
}
if (e = +e, t = 0 | t, !n) {
  var o = Math.pow(2, 8 * i - 1);
  B(this, e, t, i, o - 1, -o);
}
for (this[t + a] = 255 & e; --a >= 0 && (s *= 256);) {
  e < 0 && 0 === r && 0 !== this[t + a + 1] && (r = 1), this[t + a] = (e / s >> 0) - r & 255;
}
if (n || (n = 0), o || 0 === o || (o = this.length), i >= t.length && (i = t.length), i || (i = 0), o > 0 && o < n && (o = n), o === n) {
  return 0;
}
if (0 === t.length || 0 === this.length) {
  return 0;
}
if (i < 0) {
  throw new RangeError("targetStart out of bounds");
}
if (n < 0 || n >= this.length) {
  throw new RangeError("sourceStart out of bounds");
}
if (o < 0) {
  throw new RangeError("sourceEnd out of bounds");
}
if (this === t && n < i && i < o) {
  for (a = s - 1; a >= 0; --a) {
    t[a + i] = this[a + n];
  }
} else if (s < 1e3 || !e.TYPED_ARRAY_SUPPORT) {
  for (a = 0; a < s; ++a) {
    t[a + i] = this[a + n];
  }
} else {
  Uint8Array.prototype.set.call(t, this.subarray(n, n + s), i);
}
for (a = s - 1; a >= 0; --a) {
  t[a + i] = this[a + n];
}
if (s < 1e3 || !e.TYPED_ARRAY_SUPPORT) {
  for (a = 0; a < s; ++a) {
    t[a + i] = this[a + n];
  }
} else {
  Uint8Array.prototype.set.call(t, this.subarray(n, n + s), i);
}
for (a = 0; a < s; ++a) {
  t[a + i] = this[a + n];
}
if ("string" == typeof t) {
  if ("string" == typeof i ? (o = i, i = 0, n = this.length) : "string" == typeof n && (o = n, n = this.length), 1 === t.length) {
    var a = t.charCodeAt(0);
    a < 256 && (t = a);
  }
  if (void 0 !== o && "string" != typeof o) {
    throw new TypeError("encoding must be a string");
  }
  if ("string" == typeof o && !e.isEncoding(o)) {
    throw new TypeError("Unknown encoding: " + o);
  }
} else {
  "number" == typeof t && (t = 255 & t);
}
if ("string" == typeof i ? (o = i, i = 0, n = this.length) : "string" == typeof n && (o = n, n = this.length), 1 === t.length) {
  var a = t.charCodeAt(0);
  a < 256 && (t = a);
}
if (void 0 !== o && "string" != typeof o) {
  throw new TypeError("encoding must be a string");
}
if ("string" == typeof o && !e.isEncoding(o)) {
  throw new TypeError("Unknown encoding: " + o);
}
if (i < 0 || this.length < i || this.length < n) {
  throw new RangeError("Out of range index");
}
if (n <= i) {
  return this;
}
if ("number" == typeof t) {
  for (s = i; s < n; ++s) {
    this[s] = t;
  }
} else {
  var r = e.isBuffer(t) ? t : Y(new e(t, o).toString()),
    l = r.length;
  for (s = 0; s < n - i; ++s) {
    this[s + i] = r[s % l];
  }
}
for (s = i; s < n; ++s) {
  this[s] = t;
}
for (s = 0; s < n - i; ++s) {
  this[s + i] = r[s % l];
}
if (t % 4 > 0) {
  throw new Error("Invalid string. Length must be a multiple of 4");
}
for (n = 0; n < h; n += 4) {
  t = d[e.charCodeAt(n)] << 18 | d[e.charCodeAt(n + 1)] << 12 | d[e.charCodeAt(n + 2)] << 6 | d[e.charCodeAt(n + 3)], l[c++] = t >> 16 & 255, l[c++] = t >> 8 & 255, l[c++] = 255 & t;
}
for (var n, o = [], a = t; a < i; a += 3) {
  n = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), o.push(s(n));
}
for (var t, i = e.length, n = i % 3, o = [], a = 16383, s = 0, l = i - n; s < l; s += a) {
  o.push(r(e, s, s + a > l ? l : s + a));
}
for (var c = [], d = [], u = "undefined" != typeof Uint8Array ? Uint8Array : Array, h = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", p = 0, m = h.length; p < m; ++p) {
  c[p] = h[p], d[h.charCodeAt(p)] = p;
}
for (u += h, a = p & (1 << -d) - 1, p >>= -d, d += r; d > 0; a = 256 * a + e[t + u], u += h, d -= 8) {
  ;
}
for (s = a & (1 << -d) - 1, a >>= -d, d += n; d > 0; s = 256 * s + e[t + u], u += h, d -= 8) {
  ;
}
if (0 === a) {
  a = 1 - c;
} else {
  if (a === l) {
    return s ? NaN : (p ? -1 : 1) * (1 / 0);
  }
  s += Math.pow(2, n), a -= c;
}
if (a === l) {
  return s ? NaN : (p ? -1 : 1) * (1 / 0);
}
for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (r = isNaN(t) ? 1 : 0, s = d) : (s = Math.floor(Math.log(t) / Math.LN2), t * (l = Math.pow(2, -s)) < 1 && (s--, l *= 2), t += s + u >= 1 ? h / l : h * Math.pow(2, 1 - u), t * l >= 2 && (s++, l /= 2), s + u >= d ? (r = 0, s = d) : s + u >= 1 ? (r = (t * l - 1) * Math.pow(2, o), s += u) : (r = t * Math.pow(2, u - 1) * Math.pow(2, o), s = 0)); o >= 8; e[i + p] = 255 & r, p += m, r /= 256, o -= 8) {
  ;
}
for (s = s << o | r, c += o; c > 0; e[i + p] = 255 & s, p += m, s /= 256, c -= 8) {
  ;
}
if (_crypto.getRandomValues) {
  var t = new n(e);
  return _crypto.getRandomValues(t), t;
}
if (_crypto.randomBytes) {
  return _crypto.randomBytes(e);
}
if (!i) {
  throw new Error(e + " is not supported (we accept pull requests)");
}
for (var n = this._len += t.length, o = this._s = this._s || 0, a = 0, s = this._block; o < n;) {
  for (var r = Math.min(t.length, a + this._blockSize - o % this._blockSize), l = r - a, c = 0; c < l; c++) {
    s[o % this._blockSize + c] = t[c + a];
  }
  o += l, a += l, o % this._blockSize === 0 && this._update(s);
}
for (var r = Math.min(t.length, a + this._blockSize - o % this._blockSize), l = r - a, c = 0; c < l; c++) {
  s[o % this._blockSize + c] = t[c + a];
}
for (var f = this._w, g = 0; g < 80; g++) {
  var _ = f[g] = g < 16 ? e.readInt32BE(4 * g) : r(f[g - 3] ^ f[g - 8] ^ f[g - 14] ^ f[g - 16], 1),
    v = s(s(r(t, 5), o(g, i, n, l)), s(s(c, _), a(g)));
  c = l, l = n, n = r(i, 30), i = t, t = v;
}
for (var y = 0; y < 64; y++) {
  var w = v[y] = y < 16 ? e.readInt32BE(4 * y) : u(v[y - 2]) + v[y - 7] + d(v[y - 15]) + v[y - 16];
  g = f + c(a) + s(a, p, m) + h[y] + w, _ = l(t) + r(t, i, n), f = m, m = p, p = a, a = o + g, o = n, n = i, i = t, t = g + _;
}
for (var M = 0; M < 80; M++) {
  var T,
    C,
    I = 2 * M;
  if (M < 16) {
    T = b[I] = e.readInt32BE(4 * I), C = b[I + 1] = e.readInt32BE(4 * I + 4);
  } else {
    var A = b[I - 30],
      S = b[I - 30 + 1],
      E = o(A, S, 1) ^ o(A, S, 8) ^ A >>> 7,
      N = o(S, A, 1) ^ o(S, A, 8) ^ o(S, A, 7);
    A = b[I - 4], S = b[I - 4 + 1];
    var x = o(A, S, 19) ^ o(S, A, 29) ^ A >>> 6,
      L = o(S, A, 19) ^ o(A, S, 29) ^ o(S, A, 6),
      O = b[I - 14],
      R = b[I - 14 + 1],
      D = b[I - 32],
      P = b[I - 32 + 1];
    C = N + R, T = E + O + (C >>> 0 < N >>> 0 ? 1 : 0), C += L, T = T + x + (C >>> 0 < L >>> 0 ? 1 : 0), C += P, T = T + D + (C >>> 0 < P >>> 0 ? 1 : 0), b[I] = T, b[I + 1] = C;
  }
  var B = s(t, i, n),
    k = s(p, m, f),
    F = o(t, p, 28) ^ o(p, t, 2) ^ o(p, t, 7),
    H = o(p, t, 28) ^ o(t, p, 2) ^ o(t, p, 7),
    z = o(c, _, 14) ^ o(c, _, 18) ^ o(_, c, 9),
    W = o(_, c, 14) ^ o(_, c, 18) ^ o(c, _, 9),
    G = r[I],
    U = r[I + 1],
    q = a(c, d, u),
    Y = a(_, v, y),
    j = w + W,
    V = h + z + (j >>> 0 < w >>> 0 ? 1 : 0);
  j += Y, V = V + q + (j >>> 0 < Y >>> 0 ? 1 : 0), j += U, V = V + G + (j >>> 0 < U >>> 0 ? 1 : 0), j += C, V = V + T + (j >>> 0 < C >>> 0 ? 1 : 0);
  var X = H + k,
    Q = F + B + (X >>> 0 < H >>> 0 ? 1 : 0);
  h = u, w = y, u = d, y = v, d = c, v = _, _ = g + j | 0, c = l + V + (_ >>> 0 < g >>> 0 ? 1 : 0) | 0, l = n, g = f, n = i, f = m, i = t, m = p, p = j + X | 0, t = V + Q + (p >>> 0 < j >>> 0 ? 1 : 0) | 0;
}
if (M < 16) {
  T = b[I] = e.readInt32BE(4 * I), C = b[I + 1] = e.readInt32BE(4 * I + 4);
} else {
  var A = b[I - 30],
    S = b[I - 30 + 1],
    E = o(A, S, 1) ^ o(A, S, 8) ^ A >>> 7,
    N = o(S, A, 1) ^ o(S, A, 8) ^ o(S, A, 7);
  A = b[I - 4], S = b[I - 4 + 1];
  var x = o(A, S, 19) ^ o(S, A, 29) ^ A >>> 6,
    L = o(S, A, 19) ^ o(A, S, 29) ^ o(S, A, 6),
    O = b[I - 14],
    R = b[I - 14 + 1],
    D = b[I - 32],
    P = b[I - 32 + 1];
  C = N + R, T = E + O + (C >>> 0 < N >>> 0 ? 1 : 0), C += L, T = T + x + (C >>> 0 < L >>> 0 ? 1 : 0), C += P, T = T + D + (C >>> 0 < P >>> 0 ? 1 : 0), b[I] = T, b[I + 1] = C;
}
for (var i = 1732584193, n = -271733879, o = -1732584194, d = 271733878, u = 0; u < e.length; u += 16) {
  var h = i,
    p = n,
    m = o,
    f = d;
  i = a(i, n, o, d, e[u + 0], 7, -680876936), d = a(d, i, n, o, e[u + 1], 12, -389564586), o = a(o, d, i, n, e[u + 2], 17, 606105819), n = a(n, o, d, i, e[u + 3], 22, -1044525330), i = a(i, n, o, d, e[u + 4], 7, -176418897), d = a(d, i, n, o, e[u + 5], 12, 1200080426), o = a(o, d, i, n, e[u + 6], 17, -1473231341), n = a(n, o, d, i, e[u + 7], 22, -45705983), i = a(i, n, o, d, e[u + 8], 7, 1770035416), d = a(d, i, n, o, e[u + 9], 12, -1958414417), o = a(o, d, i, n, e[u + 10], 17, -42063), n = a(n, o, d, i, e[u + 11], 22, -1990404162), i = a(i, n, o, d, e[u + 12], 7, 1804603682), d = a(d, i, n, o, e[u + 13], 12, -40341101), o = a(o, d, i, n, e[u + 14], 17, -1502002290), n = a(n, o, d, i, e[u + 15], 22, 1236535329), i = s(i, n, o, d, e[u + 1], 5, -165796510), d = s(d, i, n, o, e[u + 6], 9, -1069501632), o = s(o, d, i, n, e[u + 11], 14, 643717713), n = s(n, o, d, i, e[u + 0], 20, -373897302), i = s(i, n, o, d, e[u + 5], 5, -701558691), d = s(d, i, n, o, e[u + 10], 9, 38016083), o = s(o, d, i, n, e[u + 15], 14, -660478335), n = s(n, o, d, i, e[u + 4], 20, -405537848), i = s(i, n, o, d, e[u + 9], 5, 568446438), d = s(d, i, n, o, e[u + 14], 9, -1019803690), o = s(o, d, i, n, e[u + 3], 14, -187363961), n = s(n, o, d, i, e[u + 8], 20, 1163531501), i = s(i, n, o, d, e[u + 13], 5, -1444681467), d = s(d, i, n, o, e[u + 2], 9, -51403784), o = s(o, d, i, n, e[u + 7], 14, 1735328473), n = s(n, o, d, i, e[u + 12], 20, -1926607734), i = r(i, n, o, d, e[u + 5], 4, -378558), d = r(d, i, n, o, e[u + 8], 11, -2022574463), o = r(o, d, i, n, e[u + 11], 16, 1839030562), n = r(n, o, d, i, e[u + 14], 23, -35309556), i = r(i, n, o, d, e[u + 1], 4, -1530992060), d = r(d, i, n, o, e[u + 4], 11, 1272893353), o = r(o, d, i, n, e[u + 7], 16, -155497632), n = r(n, o, d, i, e[u + 10], 23, -1094730640), i = r(i, n, o, d, e[u + 13], 4, 681279174), d = r(d, i, n, o, e[u + 0], 11, -358537222), o = r(o, d, i, n, e[u + 3], 16, -722521979), n = r(n, o, d, i, e[u + 6], 23, 76029189), i = r(i, n, o, d, e[u + 9], 4, -640364487), d = r(d, i, n, o, e[u + 12], 11, -421815835), o = r(o, d, i, n, e[u + 15], 16, 530742520), n = r(n, o, d, i, e[u + 2], 23, -995338651), i = l(i, n, o, d, e[u + 0], 6, -198630844), d = l(d, i, n, o, e[u + 7], 10, 1126891415), o = l(o, d, i, n, e[u + 14], 15, -1416354905), n = l(n, o, d, i, e[u + 5], 21, -57434055), i = l(i, n, o, d, e[u + 12], 6, 1700485571), d = l(d, i, n, o, e[u + 3], 10, -1894986606), o = l(o, d, i, n, e[u + 10], 15, -1051523), n = l(n, o, d, i, e[u + 1], 21, -2054922799), i = l(i, n, o, d, e[u + 8], 6, 1873313359), d = l(d, i, n, o, e[u + 15], 10, -30611744), o = l(o, d, i, n, e[u + 6], 15, -1560198380), n = l(n, o, d, i, e[u + 13], 21, 1309151649), i = l(i, n, o, d, e[u + 4], 6, -145523070), d = l(d, i, n, o, e[u + 11], 10, -1120210379), o = l(o, d, i, n, e[u + 2], 15, 718787259), n = l(n, o, d, i, e[u + 9], 21, -343485551), i = c(i, h), n = c(n, p), o = c(o, m), d = c(d, f);
}
if (e.length % a !== 0) {
  var n = e.length + (a - e.length % a);
  e = t.concat([e, s], n);
}
for (var o = [], r = i ? e.readInt32BE : e.readInt32LE, l = 0; l < e.length; l += a) {
  o.push(r.call(e, l));
}
for (var o = new t(i), a = n ? o.writeInt32BE : o.writeInt32LE, s = 0; s < e.length; s++) {
  a.call(o, e[s], 4 * s, !0);
}
for (var s = 0; s < n.length; s += 16) {
  _(i, n, s);
}
for (var s = 0; s < 5; s++) {
  var r = i[s];
  i[s] = 16711935 & (r << 8 | r >>> 24) | 4278255360 & (r << 24 | r >>> 8);
}
for (var t = [], i = 0, n = 0; i < e.length; i++, n += 8) {
  t[n >>> 5] |= e[i] << 24 - n % 32;
}
for (var t = [], i = 0; i < 32 * e.length; i += 8) {
  t.push(e[i >>> 5] >>> 24 - i % 32 & 255);
}
for (var f = 0; f < 16; f++) {
  var g = l + f,
    _ = t[g];
  t[g] = 16711935 & (_ << 8 | _ >>> 24) | 4278255360 & (_ << 24 | _ >>> 8);
}
for (var E, f = 0; f < 80; f += 1) {
  E = v + t[l + c[f]] | 0, E += f < 16 ? i(y, w, b) + p[0] : f < 32 ? n(y, w, b) + p[1] : f < 48 ? o(y, w, b) + p[2] : f < 64 ? a(y, w, b) + p[3] : s(y, w, b) + p[4], E = 0 | E, E = r(E, u[f]), E = E + M | 0, v = M, M = b, b = r(w, 10), w = y, y = E, E = T + t[l + d[f]] | 0, E += f < 16 ? s(C, I, A) + m[0] : f < 32 ? a(C, I, A) + m[1] : f < 48 ? o(C, I, A) + m[2] : f < 64 ? n(C, I, A) + m[3] : i(C, I, A) + m[4], E = 0 | E, E = r(E, h[f]), E = E + S | 0, T = S, S = A, A = r(I, 10), I = C, C = E;
}
if (!(this instanceof n)) {
  return new n(e, i);
}
for (var r = this._ipad = new t(s), l = this._opad = new t(s), c = 0; c < s; c++) {
  r[c] = 54 ^ i[c], l[c] = 92 ^ i[c];
}
if ("function" == typeof a && (s = a, a = void 0), "function" != typeof s) {
  throw new Error("No callback provided to pbkdf2");
}
if ("number" != typeof o) {
  throw new TypeError("Iterations not a number");
}
if (o < 0) {
  throw new TypeError("Bad iterations");
}
if ("number" != typeof a) {
  throw new TypeError("Key length not a number");
}
if (a < 0) {
  throw new TypeError("Bad key length");
}
for (var p = 1; p <= d; p++) {
  h.writeUInt32BE(p, n.length);
  var m = e.createHmac(s, i).update(h).digest();
  if (!r && (r = m.length, c = new t(r), d = Math.ceil(a / r), l = a - (d - 1) * r, a > (Math.pow(2, 32) - 1) * r)) {
    throw new TypeError("keylen exceeds maximum length");
  }
  m.copy(c, 0, 0, r);
  for (var f = 1; f < o; f++) {
    m = e.createHmac(s, i).update(m).digest();
    for (var g = 0; g < r; g++) {
      c[g] ^= m[g];
    }
  }
  var _ = (p - 1) * r,
    v = p == d ? l : r;
  c.copy(u, _, 0, v);
}
if (!r && (r = m.length, c = new t(r), d = Math.ceil(a / r), l = a - (d - 1) * r, a > (Math.pow(2, 32) - 1) * r)) {
  throw new TypeError("keylen exceeds maximum length");
}
for (var f = 1; f < o; f++) {
  m = e.createHmac(s, i).update(m).digest();
  for (var g = 0; g < r; g++) {
    c[g] ^= m[g];
  }
}
for (var g = 0; g < r; g++) {
  c[g] ^= m[g];
}
for (var t = 0; t < h.monsters.length; t++) {
  if (h.monsters[t].creatureGenericId === e) {
    return h.monsters[t];
  }
}
if (h.monsters[t].creatureGenericId === e) {
  return h.monsters[t];
}
for (t._monsterIds = [], d = 0; d < c.length; d += 1) {
  t._monsterIds.push(c[d].creatureGenericId);
}
if (u) {
  for (var g = 0; u[g] && u[g].playerCount <= f;) {
    h = u[g], g += 1;
  }
  for (d = 0; d < h.monsters.length; d += 1) {
    p.push(h.monsters[d].creatureGenericId);
  }
}
for (var g = 0; u[g] && u[g].playerCount <= f;) {
  h = u[g], g += 1;
}
for (d = 0; d < h.monsters.length; d += 1) {
  p.push(h.monsters[d].creatureGenericId);
}
if (_) {
  var v = window.gui.playerData.ToaData.getMonsterLevelScaled(_);
  for (d = 0; d < c.length; d += 1) {
    c[d].staticInfos.level = v;
  }
}
for (d = 0; d < c.length; d += 1) {
  c[d].staticInfos.level = v;
}
for (d = 0; d < y.length; d += 1) {
  var M = y[d],
    T = M.staticInfos,
    C = M.creatureGenericId,
    I = !0,
    A = T.xp,
    S = T.level;
  if (u) {
    I = !1;
    var E = p.indexOf(C);
    if (E !== -1) {
      I = !0, p.splice(E, 1);
      var N = o(C);
      N && (A = N.xp, S = N.level);
    }
  }
  I && (b += S);
  var x = T.nameId + " (" + S + ")",
    L = I ? a : s,
    O = "monsterName";
  if (T.isMiniBoss) {
    O = ["monsterName", "miniBoss"], L.createChild("div", {
      className: O,
      text: x
    });
  } else if (T.isBoss) {
    O = ["monsterName", "boss"];
    var R = L.createChild("div", {
      className: O,
      text: x
    });
    R.createChild("div", {
      className: "bossIcon"
    }), R.createChild("div", {
      className: "bossName",
      text: x
    });
  } else {
    L.createChild("div", {
      className: O,
      text: x
    });
  }
  I && w.push({
    id: M.creatureGenericId,
    xp: A,
    level: S
  });
}
if (u) {
  I = !1;
  var E = p.indexOf(C);
  if (E !== -1) {
    I = !0, p.splice(E, 1);
    var N = o(C);
    N && (A = N.xp, S = N.level);
  }
}
if (E !== -1) {
  I = !0, p.splice(E, 1);
  var N = o(C);
  N && (A = N.xp, S = N.level);
}
if (T.isMiniBoss) {
  O = ["monsterName", "miniBoss"], L.createChild("div", {
    className: O,
    text: x
  });
} else if (T.isBoss) {
  O = ["monsterName", "boss"];
  var R = L.createChild("div", {
    className: O,
    text: x
  });
  R.createChild("div", {
    className: "bossIcon"
  }), R.createChild("div", {
    className: "bossName",
    text: x
  });
} else {
  L.createChild("div", {
    className: O,
    text: x
  });
}
if (T.isBoss) {
  O = ["monsterName", "boss"];
  var R = L.createChild("div", {
    className: O,
    text: x
  });
  R.createChild("div", {
    className: "bossIcon"
  }), R.createChild("div", {
    className: "bossName",
    text: x
  });
} else {
  L.createChild("div", {
    className: O,
    text: x
  });
}
if (window.foreground.lock("npcActionRequest"), window.dofus.sendMessage("NpcGenericActionRequestMessage", {
  npcId: t,
  npcActionId: n,
  npcMapId: i
}), 9 === n || 10 === n) {
  var o = window.foreground,
    a = window.gui,
    s = 9 === n ? "HouseToSellListMessage" : "PaddockToSellListMessage",
    r = setTimeout(function () {
      console.error(new Error(s + " not received: timeout triggered to unlock the character")), o.unlock("npcActionRequest"), a.removeListener(s, c);
    }, 5e3),
    c = function () {
      o.unlock("npcActionRequest"), clearTimeout(r);
    };
  window.gui.once(s, c);
}
for (var c = window.gui.playerData.isAlive(), d = 0, u = a.actions.length; d < u; d++) {
  var h = this.actionsContainer.appendChild(new r({
    text: a.actionsName[d],
    className: "cmButton",
    disable: !c
  }, o));
  h.npcActionId = a.actions[d];
}
if (void 0 === t.hoursSinceLastConnection) {
  e.setContent({
    name: t.playerName
  });
} else {
  var n = Math.floor(t.hoursSinceLastConnection),
    o = Math.floor(n / 720),
    a = Math.floor((n - 720 * o) / 24),
    r = "";
  r = o > 0 ? a > 0 ? s("ui.social.monthsAndDaysSinceLastConnection", o, a) : s("ui.social.monthsSinceLastConnection", o) : a > 0 ? s("ui.social.daysSinceLastConnection", a) : n > 0 ? s("tablet.ui.social.hoursSinceLastConnection", n) : s("tablet.ui.social.lessThanOneHour"), e.setContent({
    name: t.playerName + "\n" + s("ui.social.lastConnection", r)
  });
}
if (!a(n.position.mapPosition)) {
  return D;
}
if (n.isMutant()) {
  return n.getRestrictions().cantAttack || i ? P : B;
}
if (i) {
  return B;
}
if (d) {
  var g = c.state === b.PRISM_STATE_VULNERABLE;
  if (s) {
    if (r && !p && (c.alliance.allianceId !== r.allianceId || u.aggressable !== M.AvA_ENABLED_NON_AGGRESSABLE)) {
      return D;
    }
  } else if (g) {
    if (r && (!p || !t)) {
      return D;
    }
  } else {
    m = !0;
  }
  if (!m) {
    if (!r) {
      return D;
    }
    if (t && (s || g)) {
      if (t.aggressable === M.AvA_DISQUALIFIED) {
        return P;
      }
      if (!o(t.aggressable) || r.allianceId === t.allianceInformations.allianceId || s && c.alliance.allianceId === t.allianceInformations.allianceId && !g) {
        return D;
      }
    }
  }
  f = !0;
}
if (s) {
  if (r && !p && (c.alliance.allianceId !== r.allianceId || u.aggressable !== M.AvA_ENABLED_NON_AGGRESSABLE)) {
    return D;
  }
} else if (g) {
  if (r && (!p || !t)) {
    return D;
  }
} else {
  m = !0;
}
if (r && !p && (c.alliance.allianceId !== r.allianceId || u.aggressable !== M.AvA_ENABLED_NON_AGGRESSABLE)) {
  return D;
}
if (g) {
  if (r && (!p || !t)) {
    return D;
  }
} else {
  m = !0;
}
if (r && (!p || !t)) {
  return D;
}
if (!m) {
  if (!r) {
    return D;
  }
  if (t && (s || g)) {
    if (t.aggressable === M.AvA_DISQUALIFIED) {
      return P;
    }
    if (!o(t.aggressable) || r.allianceId === t.allianceInformations.allianceId || s && c.alliance.allianceId === t.allianceInformations.allianceId && !g) {
      return D;
    }
  }
}
if (!r) {
  return D;
}
if (t && (s || g)) {
  if (t.aggressable === M.AvA_DISQUALIFIED) {
    return P;
  }
  if (!o(t.aggressable) || r.allianceId === t.allianceInformations.allianceId || s && c.alliance.allianceId === t.allianceInformations.allianceId && !g) {
    return D;
  }
}
if (t.aggressable === M.AvA_DISQUALIFIED) {
  return P;
}
if (!o(t.aggressable) || r.allianceId === t.allianceInformations.allianceId || s && c.alliance.allianceId === t.allianceInformations.allianceId && !g) {
  return D;
}
if (s) {
  if (!d) {
    if (r && t) {
      if (r.allianceId === t.allianceInformations.allianceId || !p || !o(t.aggressable)) {
        return D;
      }
    } else if (!r || p) {
      return D;
    }
    f = !0;
  }
} else if (!d || m) {
  if (!u || !e || u.aggressable !== M.PvP_ENABLED_AGGRESSABLE || e.alignmentSide <= I.ALIGNMENT_NEUTRAL || 0 === e.alignmentGrade || u.alignmentSide !== I.ALIGNMENT_MERCENARY && u.alignmentSide === e.alignmentSide || u.alignmentSide === I.ALIGNMENT_NEUTRAL) {
    return D;
  }
  f = !1;
}
if (!d) {
  if (r && t) {
    if (r.allianceId === t.allianceInformations.allianceId || !p || !o(t.aggressable)) {
      return D;
    }
  } else if (!r || p) {
    return D;
  }
  f = !0;
}
if (r && t) {
  if (r.allianceId === t.allianceInformations.allianceId || !p || !o(t.aggressable)) {
    return D;
  }
} else if (!r || p) {
  return D;
}
if (r.allianceId === t.allianceInformations.allianceId || !p || !o(t.aggressable)) {
  return D;
}
if (!r || p) {
  return D;
}
if (!d || m) {
  if (!u || !e || u.aggressable !== M.PvP_ENABLED_AGGRESSABLE || e.alignmentSide <= I.ALIGNMENT_NEUTRAL || 0 === e.alignmentGrade || u.alignmentSide !== I.ALIGNMENT_MERCENARY && u.alignmentSide === e.alignmentSide || u.alignmentSide === I.ALIGNMENT_NEUTRAL) {
    return D;
  }
  f = !1;
}
if (!u || !e || u.aggressable !== M.PvP_ENABLED_AGGRESSABLE || e.alignmentSide <= I.ALIGNMENT_NEUTRAL || 0 === e.alignmentGrade || u.alignmentSide !== I.ALIGNMENT_MERCENARY && u.alignmentSide === e.alignmentSide || u.alignmentSide === I.ALIGNMENT_NEUTRAL) {
  return D;
}
if (s && _ < 50) {
  return P;
}
if (this.targetPlayer = {
  id: h,
  name: p
}, i) {
  for (var f = 0, g = i.length; f < g; f += 1) {
    t(i[f]);
  }
}
for (var f = 0, g = i.length; f < g; f += 1) {
  t(i[f]);
}
if (S.isRoleplayMode) {
  var _ = o.getRestrictions();
  if (_.cantExchange || (p ? this.exchangeProp.disable() : this.exchangeProp.enable(), this.exchangeProp.show()), _.cantChallenge || (p ? this.challenge.disable() : this.challenge.enable(), this.challenge.show()), t) {
    var v = s(t, n, f, h);
    v !== P && v !== B || (v === P || p ? this.assault.disable() : this.assault.enable(), this.assault.show());
  }
  !m && g ? this.spouseJoin.show() : o.position.isInIncarnam() && this.join.show();
}
if (_.cantExchange || (p ? this.exchangeProp.disable() : this.exchangeProp.enable(), this.exchangeProp.show()), _.cantChallenge || (p ? this.challenge.disable() : this.challenge.enable(), this.challenge.show()), t) {
  var v = s(t, n, f, h);
  v !== P && v !== B || (v === P || p ? this.assault.disable() : this.assault.enable(), this.assault.show());
}
if (o.clearContent(), !S.isFightMode) {
  var a = this,
    s = t.id,
    r = !t.isAlive();
  if (e.isInteractiveRequired && s !== e.playerId) {
    var l,
      c = window.isoEngine.mapRenderer.interactiveElements,
      d = i.getUsableSkillsInMap(s, c),
      u = _("ui.common.inviteTo");
    for (var p in d) {
      var m = d[p];
      l = u + " " + m.nameId, n(l, w.MULTICRAFT_CRAFTER, m.id);
    }
    var f = i.getUsableSkillsInMap(h, c),
      g = _("ui.common.askTo");
    for (var y in f) {
      var b = f[y];
      l = g + " " + b.nameId, n(l, w.MULTICRAFT_CUSTOMER, b.id);
    }
  }
}
if (e.isInteractiveRequired && s !== e.playerId) {
  var l,
    c = window.isoEngine.mapRenderer.interactiveElements,
    d = i.getUsableSkillsInMap(s, c),
    u = _("ui.common.inviteTo");
  for (var p in d) {
    var m = d[p];
    l = u + " " + m.nameId, n(l, w.MULTICRAFT_CRAFTER, m.id);
  }
  var f = i.getUsableSkillsInMap(h, c),
    g = _("ui.common.askTo");
  for (var y in f) {
    var b = f[y];
    l = g + " " + b.nameId, n(l, w.MULTICRAFT_CUSTOMER, b.id);
  }
}
for (var p in d) {
  var m = d[p];
  l = u + " " + m.nameId, n(l, w.MULTICRAFT_CRAFTER, m.id);
}
for (var y in f) {
  var b = f[y];
  l = g + " " + b.nameId, n(l, w.MULTICRAFT_CUSTOMER, b.id);
}
if (this.banner.setContent({
  name: e.characterBaseInformations.name
}), o = t ? t.getPartyId() : null, a = i ? i.getPartyId() : null, this.freeSoul.hide(), this.slapHimself.hide(), this.orientCharacter.hide(), this.partyTitle.hide(), this.leaveParty.hide(), this.arenaTitle.hide(), this.leaveArena.hide(), this.followMe.hide(), this.stopFollowMe.hide(), this.fightReady.hide(), this.admin.hide(), e.state === u.STATUS_TOMBSTONE ? this.freeSoul.show() : h.isRoleplayMode && (this.slapHimself.show(), this.orientCharacter.show()), o && (this.partyTitle.show(), this.leaveParty.show(), t.getLeaderId() === e.id)) {
  if (s) {
    return this.followMe.hide(), void this.stopFollowMe.show();
  }
  this.followMe.show(), this.stopFollowMe.hide();
}
if (s) {
  return this.followMe.hide(), void this.stopFollowMe.show();
}
for (var t in e) {
  o.call(this, t, e);
}
if (e.guilds) {
  var i = a(e);
  this.nbMembers = i.memberCount, this.guilds = i.guilds, this.guildCount = this.guilds.length;
}
if (n) {
  this.prisms = {};
  for (var s = 0, l = n.length; s < l; s += 1) {
    var c = n[s];
    this.prisms[c.subAreaId] = c;
  }
}
for (var s = 0, l = n.length; s < l; s += 1) {
  var c = n[s];
  this.prisms[c.subAreaId] = c;
}
for (var c = n.npcData, u = 0, m = c.actions.length; u < m; u += 1) {
  var f = this._addEntry(c.actionsName[u], e);
  f.actionId = c.actions[u];
}
if (a = e, m.hasGuild() && e.guild.guildId === m.current.guildId) {
  i.show();
  var r = m.hasRight(u.GUILD_RIGHT_COLLECT),
    l = m.hasRight(u.GUILD_RIGHT_COLLECT_MY_TAX_COLLECTOR);
  r || l ? i.enable() : i.disable(), t.hide();
} else {
  i.hide(), t.show(), 0 !== e.taxCollectorAttack ? t.disable() : t.enable();
}
for (var e = [{
    label: s("ui.chat.status.availiable"),
    className: "available",
    id: c.PLAYER_STATUS_AVAILABLE
  }, {
    label: s("ui.chat.status.away"),
    className: "away",
    id: c.PLAYER_STATUS_AFK
  }, {
    label: s("ui.chat.status.private"),
    className: "private",
    id: c.PLAYER_STATUS_PRIVATE
  }, {
    label: s("ui.chat.status.solo"),
    className: "solo",
    id: c.PLAYER_STATUS_SOLO
  }], t = this.entryList.createChild("ul"), i = 0, o = e.length; i < o; i += 1) {
  var a = e[i];
  t.appendChild(n(a.label, a.className, a.id, this));
}
if (h) {
  switch (h.data.type) {
    case "GameRolePlayPrismInformations":
      this.playersList.appendChild(new s({
        text: h.data.npcData.nameId + " [" + h.data.prism.alliance.allianceTag + "]",
        className: "cmButton"
      }, a.bind(null, h.data)));
      break;
    case "GameRolePlayTaxCollectorInformations":
      this.playersList.appendChild(new s({
        text: r("ui.common.taxCollector"),
        className: "cmButton"
      }, l.bind(null, h.data)));
      break;
    case "GameRolePlayNpcInformations":
    case "GameRolePlayNpcWithQuestInformations":
      this.playersList.appendChild(new s({
        text: r("tablet.npc.cell", h.data.npcData.nameId),
        className: "cmButton"
      }, n.bind(null, h)));
      break;
    default:
      return;
  }
}
if (p) {
  var m = p.data || {},
    f = m.staticInfos || {},
    g = f.mainCreatureLightInfos || {};
  g.staticInfos ? this.playersList.appendChild(new s({
    text: r("tablet.monster.cell", g.staticInfos.nameId),
    className: "cmButton"
  }, o.bind(null, m))) : console.error(new Error("Not a monster, type " + m.type));
}
for (var _ = 0; _ < d.length; _ += 1) {
  var v = d[_];
  v.data && v.data.playerId ? this.playersList.appendChild(new s({
    text: v.data.name,
    className: "cmButton"
  }, i.bind(null, v))) : console.warn("ContextualMenuPlayersList: skipped actor:", v.actorId);
}
for (var e = 0; e < r.length; e++) {
  l.push(new s(r[e], c));
}
if ("function" != typeof e.prototype.checkAndShowSuggestion || !e.configName) {
  throw new Error("Invalid class " + e.name);
}
if (window.gui.playerData.characterBaseInformations.level < 40) {
  return !1;
}
if (!e) {
  return !1;
}
for (var e in this._handlerMap) {
  var t = this._handlerMap[e];
  t[0].removeListener(e, t[1]);
}
if (!o || s) {
  return e();
}
if (!t) {
  return e("No notification config");
}
if (!t.length) {
  return 0;
}
for (var i = e.characterBaseInformations.level || 0, n = 0; n < t.length; n++) {
  i = Math.max(i, t[n].level);
}
if (v) {
  var i = {};
  i[e] = t, T.setCustomTags(i);
}
if (v) {
  var t = s();
  r("Wants Promo", w.wantPromoNotif), r("currently_subscribed", e.isSubscriberAtMinLevel(S.NORMAL)), e.characterBaseInformations.name && r("last_character_name", e.characterBaseInformations.name), e.characterBaseInformations.breed && r("class_id", e.characterBaseInformations.breed), e.guildData.current && r("guild_name", e.guildData.current.guildName), t > 0 && r("level_achieved", t);
}
if (e) {
  return a(e);
}
if (t[0] !== L || t.length < 3) {
  return console.error("Invalid offline options: " + e);
}
if (!window.cordova) {
  return !1;
}
if (e.isSubscriberAtMinLevel(g.NORMAL)) {
  var t = e.getSubscriptionMaxExpiration(),
    i = new Date(t - v),
    n = Math.round(v / _ * 10) / 10,
    o = n + " " + p("ui.time.days", n);
  u.schedule({
    id: f.subscriptionEnd,
    title: p("tablet.notification.bonusPackEndTitle"),
    text: p("tablet.notification.bonusPackEnd", o),
    at: i
  });
}
if (t) {
  w || o();
  var i = null;
  try {
    c(), console.info("Registered for local notifications");
  } catch (n) {
    i = n;
  }
  return e(i);
}
for (var t in e) {
  this._onItemAdded(e[t]);
}
for (var i in t) {
  this._onItemRemoved(i, t[i]);
}
if (!this.filterFunc || this.filterFunc(n)) {
  return !t || !i || i < 0 ? console.error("invalid quantity change from " + i + " to " + t) : void this.emit("itemQuantityChanged", n, i);
}
for (var i in e) {
  this._onQuantityChanged(i, e[i], t[i]);
}
for (var t = 0, i = 0; i < e.length; i++) {
  t += e.charCodeAt(i) % 16;
}
for (var e = "", t = 0; t < 20; t++) {
  e += o();
}
if (e) {
  return !1;
}
for (var t = 0; t < O.length; t++) {
  if (O[t].level > S.MAX_CHARACTER_LEVEL_FOR_TUTORIAL) {
    return A.setValue("tutorialDone", !0), !1;
  }
}
if (O[t].level > S.MAX_CHARACTER_LEVEL_FOR_TUTORIAL) {
  return A.setValue("tutorialDone", !0), !1;
}
for (var i = {}, n = !1, o = t.charactersToRemodel, a = 0; a < o.length; a += 1) {
  if (o[a].id === e) {
    i.characterToRemodel = o[a];
    var s = d(o[a].mandatoryChangeMask),
      r = d(o[a].possibleChangeMask);
    i.canRebreed = u(s.rebreed, r.rebreed), i.canRecolor = u(s.recolor, r.recolor), i.canReface = u(s.relook, r.relook), i.canRename = u(s.rename, r.rename), i.canRegender = u(s.regender, r.regender), n = !0;
    break;
  }
}
if (o[a].id === e) {
  i.characterToRemodel = o[a];
  var s = d(o[a].mandatoryChangeMask),
    r = d(o[a].possibleChangeMask);
  i.canRebreed = u(s.rebreed, r.rebreed), i.canRecolor = u(s.recolor, r.recolor), i.canReface = u(s.relook, r.relook), i.canRename = u(s.rename, r.rename), i.canRegender = u(s.regender, r.regender), n = !0;
  break;
}
if (v = null, "CharactersListWithRemodelingMessage" !== _._messageType) {
  return !1;
}
for (var t = [e], i = 0; i < O.length; i += 1) {
  var n = O[i];
  n.id !== e.id && t.push(n);
}
if (!p(e)) {
  return e < 1 ? void console.error(new Error("characterSelection: characterId should be positive")) : void window.dofus.sendMessage("CharacterSelectionMessage", {
    id: e
  });
}
if (t[0] <= t[1]) {
  return t;
}
if (e.x + e.width <= this.x || e.x >= this.x + this.width) {
  return 0;
}
if (e.y + e.height <= this.y || e.y >= this.y + this.height) {
  return 0;
}
if (e.x < this.originX + l || e.y < this.originY + l) {
  return 1 / 0;
}
if (e.x + e.width > this.originX + this.width - l || e.y + e.height > this.originY + this.height - l) {
  return 1 / 0;
}
for (var n = 0, o = this.boxes.length - 1; o >= 0; o--) {
  var a = this.boxes[o];
  if (a !== t) {
    var s = e.intersectingSurface(a);
    if (s) {
      if (!a.priority) {
        return 1 / 0;
      }
      if (n += s / a.priority, n >= i) {
        return n;
      }
    }
  }
}
if (a !== t) {
  var s = e.intersectingSurface(a);
  if (s) {
    if (!a.priority) {
      return 1 / 0;
    }
    if (n += s / a.priority, n >= i) {
      return n;
    }
  }
}
if (s) {
  if (!a.priority) {
    return 1 / 0;
  }
  if (n += s / a.priority, n >= i) {
    return n;
  }
}
if (!a.priority) {
  return 1 / 0;
}
if (n += s / a.priority, n >= i) {
  return n;
}
if (0 !== r.mapWidth && 0 !== r.mapHeight) {
  var t = Math.max(r.mapLeft + f.LEFT - e.x, 0),
    i = Math.max(e.x + e.width - (r.mapLeft + r.mapWidth + f.RIGHT), 0),
    n = Math.max(r.mapTop + f.TOP - e.y, 0),
    o = Math.max(e.y + e.height - (r.mapTop + r.mapHeight + f.BOTTOM), 0);
  e.x = e.x - i + t, e.y = e.y + n - o;
}
for (var n = new o(0, 0, t, i, m), a = 1 / 0, s = 0, r = 0; r < v; r++) {
  this._moveBoxAround(n, e, r);
  var l = this._computeWeight(n, e, a);
  if (l < a && (a = l, s = r, 0 === l)) {
    break;
  }
}
if (l < a && (a = l, s = r, 0 === l)) {
  break;
}
for (var e = [], t = this.boxes.length - 1; t >= 0; t--) {
  var i = this.boxes[t];
  i.actorId || e.push(i);
}
for (var t in e) {
  var i = e[t],
    n = i.data;
  n && !n.staticInfos && this._newActorBox(i, i.isNPC() ? h : p);
}
for (var t = e.actorId, i = this.boxes.length - 1; i >= 0; i--) {
  var n = this.boxes[i];
  if (n.actorId === t) {
    return n;
  }
}
if (n.actorId === t) {
  return n;
}
for (var e in this.iconDetailsListByChallengeId) {
  this.iconDetailsListByChallengeId[e].icon.destroy(), this.iconDetailsListByChallengeId[e].details.destroy(), delete this.iconDetailsListByChallengeId[e];
}
for (var t in window.gui.challengeIndicator.iconDetailsListByChallengeId) {
  switch (t) {
    case "3":
    case "4":
    case "32":
    case "34":
    case "35":
      var i = e.targetCells[0];
      window.gui.pingSystem.addPingPicto(i, 1, 3);
  }
}
for (var e in this.channelMap) {
  this.historyBuffers[~~e] = new C(te);
}
for (var i = [], n = 0, o = 0; o < t.length; o += 1) {
  var a = t[o],
    s = e.substring(n, a.start),
    r = e.substring(a.start, a.end);
  n = a.end;
  var l = '<a href="' + r + '">' + r + "</a>";
  i.push(s, l);
}
if (e) {
  for (var t = 0; t < e.length; t++) {
    for (var i = e[t], n = 0; n < i.effects.length; n++) {
      var o = i.effects[n];
      "ObjectEffectString" === o._type && (o.value = T(o.value));
    }
  }
}
for (var t = 0; t < e.length; t++) {
  for (var i = e[t], n = 0; n < i.effects.length; n++) {
    var o = i.effects[n];
    "ObjectEffectString" === o._type && (o.value = T(o.value));
  }
}
for (var i = e[t], n = 0; n < i.effects.length; n++) {
  var o = i.effects[n];
  "ObjectEffectString" === o._type && (o.value = T(o.value));
}
for (var e in this.historyBuffers) {
  this.historyBuffers[~~e].clear();
}
for (var i, n = [], s = 0; s < e.channels.length; s++) {
  i = e.channels[s], n.push(i);
}
for (var l in this.channelMap) {
  i = ~~l;
  var c = r.channelsList.appendChild(new g(this.channelMap[i].nameId));
  c.id = i, c.chat = this, c.addClassNames("channel" + c.id), c.on("change", o);
}
for (var t = 0; t < e.length; t++) {
  this._addPreset(e[t]);
}
for (var i in this.channelMap) {
  t[~~i] = 0;
}
for (var n, o, a = e.length - 1; a >= 0; a--) {
  var s = this.presets[a];
  o = s.channelsList.getChildren();
  var r = 0;
  for (i in this.channelMap) {
    n = ~~i;
    var l = this.chatInput.isChannelEnabledForSending(n),
      c = s.channels.indexOf(n) >= 0,
      d = o[r];
    r++, this.chatInput.isChannelAllowedForSending(n) ? (Z[n] || (!l || c || 0 !== a || t[n] || (this._setChannelInPreset(a, n, !0), c = !0), !l && c && (this._setChannelInPreset(a, n, !1), c = !1)), c ? (d.activate(!0), t[n]++) : d.deactivate(!0)) : d.hide();
  }
}
for (i in this.channelMap) {
  n = ~~i;
  var l = this.chatInput.isChannelEnabledForSending(n),
    c = s.channels.indexOf(n) >= 0,
    d = o[r];
  r++, this.chatInput.isChannelAllowedForSending(n) ? (Z[n] || (!l || c || 0 !== a || t[n] || (this._setChannelInPreset(a, n, !0), c = !0), !l && c && (this._setChannelInPreset(a, n, !1), c = !1)), c ? (d.activate(!0), t[n]++) : d.deactivate(!0)) : d.hide();
}
if (e.channel === Y) {
  return !1;
}
if ("ChatAdminServerMessage" === e._messageType) {
  return !1;
}
if (window.gui.playerData.isFighting && !F.showSpeechBubbleInFight) {
  return !1;
}
if (!i) {
  return !1;
}
if (!e.getDom) {
  return void console.error(new Error("Chat wrong object"));
}
if (!("ChatAdminServerMessage" !== e._messageType && e.channel !== Y && o || this.p2p.processMsg(e, n))) {
  var a = n || d.isChannelSelective(e.channel, e.senderId);
  e.content = this.censor.filterCensoredWords(e.content), r(e);
  var s = e.content.match(/\/([a-zA-Z]+),[b|m]essage:([^\\}]*)/),
    l = new m(console, window.gui.databases.ChatChannels, e, n, a);
  if (this._addMsgToChat(l, e.channel), !s && this.isChannelEnabledInPreset(e.channel) && !this._showMsgAsBubble(e, a)) {
    var c = new m(console, window.gui.databases.ChatChannels, e, n, a, !0);
    this._addTextNotification(c, e.channel);
  }
}
if (this._addMsgToChat(l, e.channel), !s && this.isChannelEnabledInPreset(e.channel) && !this._showMsgAsBubble(e, a)) {
  var c = new m(console, window.gui.databases.ChatChannels, e, n, a, !0);
  this._addTextNotification(c, e.channel);
}
if (void 0 === t && (t = u.PSEUDO_CHANNEL_INFO), !this.isChannelEnabledInPreset(t)) {
  var o = new f(console, window.gui.databases.ChatChannels, e, t, i);
  return this._addMsgToChat(o, t);
}
if (this.presetButtons) {
  var t = q - (U - e);
  this.presetButtons.setStyle("height", Math.min(t, q) + "px");
}
if (this.channelsLists.toggleDisplay(), !this.channelsLists.isVisible()) {
  return this._refreshScroller();
}
for (var t = 0; t < this.presets.length; t++) {
  var i = this.presets[t];
  i.element.toggleClassName("on", t === e), i.channelsList.toggleDisplay(t === e);
}
if (!this.presets) {
  return !0;
}
for (var e = this.presets[this.activePreset].channels, t = Object.keys(u).length, i = 0; i <= t; i++) {
  this._logChat.toggleClassName("showChannel" + i, e.indexOf(i) !== -1);
}
if (e.playerIds && e.playerIds.length > 0) {
  i._logServerText(M("tablet.chat.helpers.connected", e.playerIds.length));
  for (var t = 0, n = e.playerIds.length; t < n; t++) {
    i._logServerText("{player," + e.playerNames[t] + "," + e.playerIds[t] + "}");
  }
} else {
  i._logServerText(M("tablet.chat.helpers.none"));
}
for (var t = 0, n = e.playerIds.length; t < n; t++) {
  i._logServerText("{player," + e.playerNames[t] + "," + e.playerIds[t] + "}");
}
for (var t in this.historyBuffers) {
  if (this.historyBuffers.hasOwnProperty(~~t)) {
    for (var i = this.historyBuffers[~~t], n = i.getBuffer() || [], o = 0; o < n.length; o += 1) {
      var a = n[o];
      if (a && a.getId() === e) {
        return a;
      }
    }
  }
}
if (this.historyBuffers.hasOwnProperty(~~t)) {
  for (var i = this.historyBuffers[~~t], n = i.getBuffer() || [], o = 0; o < n.length; o += 1) {
    var a = n[o];
    if (a && a.getId() === e) {
      return a;
    }
  }
}
for (var i = this.historyBuffers[~~t], n = i.getBuffer() || [], o = 0; o < n.length; o += 1) {
  var a = n[o];
  if (a && a.getId() === e) {
    return a;
  }
}
if (a && a.getId() === e) {
  return a;
}
if (this.displayMode !== e) {
  if (!this.active) {
    return void (this.displayMode = e);
  }
  this.removeDisplayMode(), this.displayMode = e, this.addDisplayMode(), this.setDimensions();
}
if (!this.active) {
  return void (this.displayMode = e);
}
if (this.active) {
  this.active = !1, this.chatInput.blur(), A.disableScroll(!1);
  var e = this;
  L.tween(this, {
    webkitTransform: "translate3d(0, -" + this.logWrapper.windowHeight + "px, 0)"
  }, {
    time: 200,
    delay: 0,
    easing: "ease-out"
  }, function () {
    e.removeDisplayMode(), e.delClassNames("open");
  }), window.gui.textNotification && window.gui.textNotification.show(), this.channelsLists && this.channelsLists.hide(), this.emit("closed"), A.setAutomaticHide(!0);
}
for (var i = this, n = this.outgoingChannelMenu = [], o = 0; o < T.length; o++) {
  var a = this.channelMap[T[o]];
  n.push({
    id: a.id,
    caption: a.nameId + " (" + a.shortcut + ")",
    cb: t,
    ticked: a.id === this.outgoingChannel
  });
}
for (var e = this.outgoingChannelMenu, t = 0; t < e.length; t++) {
  var i = e[t];
  i.hidden = this.sendingEnabledChannels.indexOf(i.id) < 0, i.ticked = i.id === this.outgoingChannel;
}
for (var t = this.outgoingChannelMenu, i = 0; i < t.length; i++) {
  if (t[i].id === e) {
    return t[i];
  }
}
if (t[i].id === e) {
  return t[i];
}
if (a !== -1) {
  if (this._showNotification(u("tablet.chat.disablingChannel", n)), t) {
    return console.warn("Chat channel already enabled");
  }
  o.splice(a, 1);
} else {
  if (this._showNotification(u("tablet.chat.enablingChannel", n)), !t) {
    return console.warn("Chat channel already disabled");
  }
  o.push(e);
}
if (this._showNotification(u("tablet.chat.disablingChannel", n)), t) {
  return console.warn("Chat channel already enabled");
}
if (this._showNotification(u("tablet.chat.enablingChannel", n)), !t) {
  return console.warn("Chat channel already disabled");
}
if (n) {
  n = n[1].toLowerCase();
  var o = e.split(" ").slice(1),
    a = y(n, o);
  if (a) {
    return void this._setInput("");
  }
  if (t = S[n], void 0 === t && "me" !== n && "think" !== n) {
    return this._showNotification(u("ui.console.notfound", e.substr(1).split(" ")[0]));
  }
  e = e.substr(n.length + 2);
}
if (a) {
  return void this._setInput("");
}
if (t = S[n], void 0 === t && "me" !== n && "think" !== n) {
  return this._showNotification(u("ui.console.notfound", e.substr(1).split(" ")[0]));
}
if (t === I) {
  var s = e.indexOf(" ");
  if (i = e.substr(0, s), e = e.substr(s), !i || !e || i.length < _.MIN_NICK_LEN || i.length > _.MAX_NICK_LEN) {
    return this._showNotification(u("tablet.chat.privateReceiverHelp"));
  }
  this.previousPrivateReceiver = i;
}
if (i = e.substr(0, s), e = e.substr(s), !i || !e || i.length < _.MIN_NICK_LEN || i.length > _.MAX_NICK_LEN) {
  return this._showNotification(u("tablet.chat.privateReceiverHelp"));
}
if (e = e.trim()) {
  this.previousInput = e;
  var r = {
      allPagesAllowed: f.isChannelSelective(t, i)
    },
    d = l.getUnsendableCharacters(e, r);
  if (d.length) {
    var p = d[0] + " (" + d[0].codePointAt().toString(16) + ")";
    return this._showNotification(u("tablet.chat.unsendableChars", p));
  }
  e = l.encode(e, r), e = g(e);
  var m = [];
  e = this.linkHelper.prepareForSending(e, m), "me" !== n && "think" !== n || (e = "/" + n + ",message:" + e);
  var v = c.sendMessage(e, t, i, m);
  if (v) {
    return this._showNotification(v);
  }
  this.sentMessageHistory.addMessage(this.previousInput, this.linkHelper.previousLinks), this._setInput(""), this.emit("sentChatMsg");
}
if (d.length) {
  var p = d[0] + " (" + d[0].codePointAt().toString(16) + ")";
  return this._showNotification(u("tablet.chat.unsendableChars", p));
}
if (v) {
  return this._showNotification(v);
}
if (s > 0) {
  return n("tablet.chat.messageTooLong", s);
}
if (!i) {
  return "?";
}
if (!n) {
  return e;
}
if (t.isIncarnation()) {
  var p = window.gui.playerData.inventory.equippedItems[l.ACCESSORY_POSITION_WEAPON];
  p = p || {};
  var m = p.effectsMap[d];
  if (m) {
    var f = r.getIncarnationExpDetails(m.diceSide, m.diceNum, m.diceConst);
    u = f.currentExp - f.expPreviousLevel, h = f.requiredExpToNextLevel - f.expPreviousLevel;
  } else {
    console.error(new Error("incarnation effect not found. id: " + p.id + " init: " + p.isInitialised));
  }
}
if (m) {
  var f = r.getIncarnationExpDetails(m.diceSide, m.diceNum, m.diceConst);
  u = f.currentExp - f.expPreviousLevel, h = f.requiredExpToNextLevel - f.expPreviousLevel;
} else {
  console.error(new Error("incarnation effect not found. id: " + p.id + " init: " + p.isInitialised));
}
if (e = e.replace(c.stats, M), t.position.area) {
  var T = t.position.area.nameId;
  e = e.replace(c.area, T);
}
if (t.position.subArea) {
  var C = t.position.subArea.nameId;
  e = e.replace(c.subarea, C);
}
if (t.position.mapPosition) {
  var I = "{mapWithFlag," + t.position.coordinates.posX + ",";
  I += t.position.coordinates.posY + "," + window.gui.playerData.position.worldmapId + "}", e = e.replace(c.position, I);
}
if ("help" === e) {
  return r.forEach(function (e) {
    c += e + "\n";
  }), l.forEach(function (e) {
    c += o(e) + "\n";
  }), window.gui.chat.logMsg(c.substring(0, c.length - 1)), !0;
}
if ("whois" === e) {
  i();
} else {
  if ("whoami" === e) {
    return window.dofus.sendMessage("BasicWhoAmIRequestMessage", {
      verbose: !0
    }), !0;
  }
  if ("mapid" === e) {
    var d = window.isoEngine.mapRenderer.mapId;
    return c = o("ui.chat.console.currentMap", null, d), window.gui.chat.logMsg(c), !0;
  }
}
if ("whoami" === e) {
  return window.dofus.sendMessage("BasicWhoAmIRequestMessage", {
    verbose: !0
  }), !0;
}
if ("mapid" === e) {
  var d = window.isoEngine.mapRenderer.mapId;
  return c = o("ui.chat.console.currentMap", null, d), window.gui.chat.logMsg(c), !0;
}
if ("time" === e || "whois" === e) {
  var u = new s(a.now()).getServerDate().toString(!1),
    h = u.date + " - " + u.time;
  return window.gui.chat.logMsg(h), !0;
}
if (s && (d = s[2], "me" === s[1] ? (l = !1, t.addClassNames("meText")) : "think" === s[1] && (t.addClassNames("thinkText"), o = r("ui.chat.console.think", o))), this._channel !== m && this._channel !== f) {
  var p = this._channelMap[this._channel] || {},
    g = p.nameId || "channel" + this._channel;
  t.createChild("span", {
    text: "(" + g + ") "
  });
}
if (this._tag === a.CHAT_TAG_COMMUNITY_HELPER && t.createChild("span", {
  text: "(Helper) ",
  className: "link"
}), this._channel === f) {
  var _ = r(this._isCopy ? "ui.chat.to" : "ui.chat.from");
  t.createChild("span", {
    text: _ + " "
  });
}
if (n && t.createChild("span", {
  text: "[REMOVED] "
}), !this._hideTimestamp) {
  var v = new h(1e3 * this._timestamp).getServerDate(),
    y = v.minute,
    w = y < 10 ? "0" + y : y;
  t.createChild("span", {
    className: "chatTimestamp",
    text: "[" + v.hour + ":" + w + "] "
  });
}
if (!e) {
  throw new Error("Need the logger!");
}
if (this._important === c && e.addClassNames("mod"), e.addClassNames("channel" + this._channel), this._options.showChannelName && this._channelMap[this._channel] && this._channelMap[this._channel].nameId && e.createChild("span", {
  text: "(" + this._channelMap[this._channel].nameId + ") "
}), this._options.npcId) {
  var t = "{npc," + this._options.npcId + "::" + this._options.npcName + "}";
  e.appendChild(a.process(t + o("ui.common.colon") + " "));
} else if (this._options.playerId) {
  var i = "{player," + this._options.playerName + "," + this._options.playerId + "}";
  e.appendChild(a.process(i + " ")), e.addClassNames("meText");
}
if (this._options.playerId) {
  var i = "{player," + this._options.playerName + "," + this._options.playerId + "}";
  e.appendChild(a.process(i + " ")), e.addClassNames("meText");
}
if (this.isRadio && i) {
  var o = i.getChildren();
  o.forEach(function (i) {
    i !== t && t instanceof n && i.deactivate(e);
  });
}
if (i) {
  for (var n = 0; n < e.effects.length; n++) {
    var o = e.effects[n];
    o && t.push(o.serialize());
  }
}
for (var n = 0; n < e.effects.length; n++) {
  var o = e.effects[n];
  o && t.push(o.serialize());
}
if (this.linksToReplace.length >= s.MAX_CHAT_OBJECT_REF) {
  return "";
}
for (var i = 0; i < this.linksToReplace.length; i++) {
  var n = this.linksToReplace[i],
    a = e.replace(n[0], n[1]);
  n[2] && a !== e && t.push(o(n[2])), e = a;
}
for (var i = 0; i < t.length; i++) {
  var n = t[i],
    o = "{itemStats," + n.objectGID + "," + n.objectUID + "}";
  e = e.replace(r, o);
}
if (e.channel !== o.PSEUDO_CHANNEL_PRIVATE) {
  return !1;
}
if (i.substr(0, l.length) !== l) {
  return !1;
}
if (i.substr(i.length - c.length) !== c) {
  return !1;
}
if (t) {
  return !0;
}
for (var i = l + t, n = 2; n < arguments.length; n++) {
  i += d + arguments[n].toString();
}
for (var n = i.cbs, o = 0; o < n.length; o++) {
  n[o](e, t);
}
if (e.socialGroups && e.socialGroups.length > 0) {
  for (var l = 0, c = e.socialGroups.length; l < c; l += 1) {
    var d = e.socialGroups[l];
    "GuildInformations" === d._type && (r += " " + n("ui.common.guild"), r += " {guild," + d.guildId + "::" + d.guildName + "}"), "AllianceInformations" === d._type && (r += " " + n("ui.common.alliance"), r += " {alliance," + d.allianceId + "::[" + d.allianceTag + "]}");
  }
}
for (var l = 0, c = e.socialGroups.length; l < c; l += 1) {
  var d = e.socialGroups[l];
  "GuildInformations" === d._type && (r += " " + n("ui.common.guild"), r += " {guild," + d.guildId + "::" + d.guildName + "}"), "AllianceInformations" === d._type && (r += " " + n("ui.common.alliance"), r += " {alliance," + d.allianceId + "::[" + d.allianceTag + "]}");
}
if (!p && r("RESIZE", e)) {
  p = !0, m.w = g.w = e.rootElement.clientWidth, m.h = g.h = e.rootElement.clientHeight;
  var i = s(t);
  f.x = i.x, f.y = i.y, e.emit("resizeStart"), window.gui.wBody.once("dom.touchend", a), window.gui.wBody.on("dom.touchmove", n), n(t);
}
for (var t = ["&", "%", "?", "#", "§", "!"], i = t.length, n = "", o = 0; o < e; o++) {
  var a = Math.floor(Math.random() * i);
  n += t[a];
}
for (var o in i) {
  i[o].language === n && (e.censoredMap[i[o].word] = !0);
}
if (!s.getValue("option-censorship", !0)) {
  return e;
}
for (var t = e.split(" "), i = 0; i < t.length; i++) {
  this.censoredMap[t[i].toLowerCase()] && (t[i] = n(t[i].length));
}
if (this.ipadRatio) {
  e.setStyles({
    left: a.posChatBtn + "px",
    right: "auto",
    top: "auto",
    bottom: 0,
    width: o.CHAT_BTN_MIN_WIDTH + "px",
    height: a.bottomBarHeight + "px"
  });
} else {
  var t, i;
  t = a.sideBarWidth - o.PING_EMOTE_BTN_WIDE_MIN_WIDTH, i = 0, e.setStyles({
    left: "auto",
    right: i + "px",
    top: a.posChatBtn + "px",
    bottom: "auto",
    width: t + "px",
    height: o.CHAT_BTN_MIN_HEIGHT + "px"
  });
}
if (n) {
  return console.error("Craft: prepareSkillRecipes", t, n);
}
if (o) {
  return console.error("MultiCraft: prepareSkillRecipes", i, o);
}
if (!o) {
  return console.error(new Error("mutualPopup#setupNames cannot find the other actor: " + n)), null;
}
for (var t in c) {
  this.mutedChannelsId[r[t]] = !0;
}
if (i) {
  return t("GPS cannot load subarea " + n.subAreaId + ": " + i);
}
if (s) {
  this._requestUpdatePOI(s, i, n, o);
} else {
  if (void 0 === i && void 0 === n) {
    return console.error("unexpected undefined x,y");
  }
  delete e.mapId, this._addPOI(e);
}
if (void 0 === i && void 0 === n) {
  return console.error("unexpected undefined x,y");
}
if (t) {
  this._compass.addMarker({
    type: e.id,
    x: e.x,
    y: e.y,
    arrowType: e.categoryId,
    tooltip: e.nameId
  });
} else {
  this._compass.removeMarker(e.id);
  var n = this.getObjectiveId(e),
    o = window.gui.playerData.quests.getQuestIdfromObjectiveId(n);
  i && this.questFollower.unfollowQuest(o);
}
if (window.gui.playerData.guild.hasGuild()) {
  for (var e in m) {
    var t = m[e];
    window.dofus.sendMessage("GuildGetInformationsMessage", {
      infoType: t
    });
  }
}
for (var e in m) {
  var t = m[e];
  window.dofus.sendMessage("GuildGetInformationsMessage", {
    infoType: t
  });
}
for (var e in this._POIMap) {
  var t = this._POIMap[e];
  for (var i in t) {
    this._removePOI(i, e);
  }
}
for (var i in t) {
  this._removePOI(i, e);
}
for (var e = this._delayedPois.length, t = 0; t < e; t++) {
  var i = this._delayedPois.shift();
  this._addPOI(i);
}
if (0 === window.gui.playerData.position.worldmapId) {
  return void this._delayedPois.push(e);
}
if (e.mapId) {
  this._waitingPoiCount++;
  var t = this;
  d.getObject("MapPositions", e.mapId, function (i, n) {
    return t._waitingPoiCount--, i ? console.error("No MapPosition for POI at " + e.mapId + "; " + i) : void t._addPoiSync(e, n);
  });
} else {
  var i;
  i = "questObjective" === e.categoryId ? f : window.gui.playerData.position.worldmapId, this._addPoiSync(e, {
    worldMap: i,
    posX: e.x,
    posY: e.y
  });
}
if (a === -1 && (a = e.worldMapId ? e.worldMapId : o), a === v) {
  return console.error('worldMapId is "fixed"');
}
if (!s) {
  return console.error(new Error("WorldMap missing in DB:" + a));
}
if (r) {
  return this._requestUpdatePOI(r, i, n);
}
if (void 0 !== t) {
  this._removePOI(e, t, i);
} else {
  for (var n in this._POIMap) {
    this._removePOI(e, n, i);
  }
}
for (var n in this._POIMap) {
  this._removePOI(e, n, i);
}
if (void 0 !== e) {
  this._isDungeonMap(e) || this._requestGuildInfo();
  var t, i;
  for (t in this._POIMap[v]) {
    i = this._POIMap[v][t], this._removePOI(t, this._lastWorldMapId), i.mapId = 0, this._addPOI(i);
  }
  var n = this._POIMap[this._lastWorldMapId];
  if (n) {
    for (t in n) {
      i = n[t], i.isDestination && this._setTrackingEnabled(i, !1);
    }
  }
  var o = [];
  for (t in this._POIMap[e]) {
    i = this._POIMap[e][t], i.isDestination && (this._setTrackingEnabled(i, !0), o.push(i.id));
  }
  var a = this._compass;
  for (t in a.markers) {
    o.indexOf(t) === -1 && a.removeMarker(t);
  }
  this._scheduleRendering(), this.emit("changedMap", e), this._lastWorldMapId = e;
}
for (t in this._POIMap[v]) {
  i = this._POIMap[v][t], this._removePOI(t, this._lastWorldMapId), i.mapId = 0, this._addPOI(i);
}
if (n) {
  for (t in n) {
    i = n[t], i.isDestination && this._setTrackingEnabled(i, !1);
  }
}
for (t in n) {
  i = n[t], i.isDestination && this._setTrackingEnabled(i, !1);
}
for (t in this._POIMap[e]) {
  i = this._POIMap[e][t], i.isDestination && (this._setTrackingEnabled(i, !0), o.push(i.id));
}
for (t in a.markers) {
  o.indexOf(t) === -1 && a.removeMarker(t);
}
for (var t in this._POIMap) {
  if (this._POIMap[t][e]) {
    return !0;
  }
}
if (this._POIMap[t][e]) {
  return !0;
}
if (!this.isActivePOI(r)) {
  var l = t.mapId;
  if (!a) {
    if (l) {
      return o(l, function (e, o) {
        return e ? console.error("questId: " + n + ", objectiveId: " + i + ", error: " + e) : (o = o || t.coords, void s.addQuestObjectiveFromObjective({
          objectiveDb: t,
          objectiveId: i,
          coords: o,
          questId: n
        }));
      });
    }
    a = t.coords;
  }
  if (a && void 0 !== a.x && void 0 !== a.y) {
    var c = window.gui.playerData.quests.all[n];
    if (!c) {
      return void console.error(new Error("GPS: Cannot find the quest: " + n + ", objectiveId: " + i));
    }
    for (var d = c.dbQuest ? c.dbQuest.nameId : "", u = "", h = 0; h < c.objectives.length; h++) {
      var p = c.objectives[h];
      if (p.objectiveId === i) {
        u = p.text;
        break;
      }
    }
    var m = {
      id: r,
      x: a.x,
      y: a.y,
      mapId: l,
      worldMapId: a.worldMapId,
      nameId: d + "\n\n" + u + "\n\n(" + a.x + "," + a.y + ")",
      categoryId: "questObjective",
      color: {
        r: 148,
        g: 185,
        b: 35,
        a: 1
      },
      isDestination: !0
    };
    this.addPOI(m);
  }
}
if (!a) {
  if (l) {
    return o(l, function (e, o) {
      return e ? console.error("questId: " + n + ", objectiveId: " + i + ", error: " + e) : (o = o || t.coords, void s.addQuestObjectiveFromObjective({
        objectiveDb: t,
        objectiveId: i,
        coords: o,
        questId: n
      }));
    });
  }
  a = t.coords;
}
if (l) {
  return o(l, function (e, o) {
    return e ? console.error("questId: " + n + ", objectiveId: " + i + ", error: " + e) : (o = o || t.coords, void s.addQuestObjectiveFromObjective({
      objectiveDb: t,
      objectiveId: i,
      coords: o,
      questId: n
    }));
  });
}
if (a && void 0 !== a.x && void 0 !== a.y) {
  var c = window.gui.playerData.quests.all[n];
  if (!c) {
    return void console.error(new Error("GPS: Cannot find the quest: " + n + ", objectiveId: " + i));
  }
  for (var d = c.dbQuest ? c.dbQuest.nameId : "", u = "", h = 0; h < c.objectives.length; h++) {
    var p = c.objectives[h];
    if (p.objectiveId === i) {
      u = p.text;
      break;
    }
  }
  var m = {
    id: r,
    x: a.x,
    y: a.y,
    mapId: l,
    worldMapId: a.worldMapId,
    nameId: d + "\n\n" + u + "\n\n(" + a.x + "," + a.y + ")",
    categoryId: "questObjective",
    color: {
      r: 148,
      g: 185,
      b: 35,
      a: 1
    },
    isDestination: !0
  };
  this.addPOI(m);
}
if (!c) {
  return void console.error(new Error("GPS: Cannot find the quest: " + n + ", objectiveId: " + i));
}
for (var d = c.dbQuest ? c.dbQuest.nameId : "", u = "", h = 0; h < c.objectives.length; h++) {
  var p = c.objectives[h];
  if (p.objectiveId === i) {
    u = p.text;
    break;
  }
}
if (p.objectiveId === i) {
  u = p.text;
  break;
}
if (!i[e]) {
  return console.warn("GPS.addQuestObjective: quest id" + e + " is not active.");
}
if (!t.active[e]) {
  return console.warn("GPS.addQuestNextObjective: quest id" + e + " is not active.");
}
for (var i = t.active[e], n = 0; n < i.objectives.length; n++) {
  var o = i.objectives[n];
  if (o.objectiveStatus) {
    var a = o.objectiveId,
      s = i.dbObjectives[a];
    this.addQuestObjectiveFromObjective({
      objectiveDb: s,
      objectiveId: a,
      questId: e
    });
  }
}
if (o.objectiveStatus) {
  var a = o.objectiveId,
    s = i.dbObjectives[a];
  this.addQuestObjectiveFromObjective({
    objectiveDb: s,
    objectiveId: a,
    questId: e
  });
}
if (!t) {
  return console.warn("GPS.removeQuestObjectives: quest id" + e + " not found.");
}
for (var i = 0; i < t.objectives.length; i++) {
  var n = t.objectives[i];
  if (n.objectiveStatus) {
    var o = n.objectiveId,
      a = this.getQuestObjectivePoiId(o);
    this.removePOI(a);
  }
}
if (n.objectiveStatus) {
  var o = n.objectiveId,
    a = this.getQuestObjectivePoiId(o);
  this.removePOI(a);
}
for (var t in e.active) {
  this.addQuestNextObjective(t);
}
for (var t in e.active) {
  this.questFollower.isQuestFollowed(t) && this.addQuestNextObjective(t);
}
if (!t) {
  return console.warn("GPS.isAtLeastOneQuestObjectiveFollowed: quest id" + e + " not active."), !1;
}
for (var i = 0; i < t.objectives.length; i++) {
  var n = t.objectives[i];
  if (n.objectiveStatus) {
    var o = n.objectiveId,
      a = this.getQuestObjectivePoiId(o);
    if (this.isActivePOI(a)) {
      return !0;
    }
  }
}
if (n.objectiveStatus) {
  var o = n.objectiveId,
    a = this.getQuestObjectivePoiId(o);
  if (this.isActivePOI(a)) {
    return !0;
  }
}
if (this.isActivePOI(a)) {
  return !0;
}
if (i) {
  return console.error(i);
}
if (t.type.type === h.ATLAS_INFOS_PHOENIX) {
  var i;
  if (window.gui.playerData.isAlive()) {
    for (i = 0; i < e._lastPhoenixes.length; i += 1) {
      e.removePOI("phoenix_" + e._lastPhoenixes[i].mapId);
    }
  } else {
    var n = t.type.coords;
    for (i = 0; i < n.length; i += 1) {
      var o = n[i];
      w.indexOf(o.mapId) === -1 && e.addPOI({
        id: "phoenix_" + o.mapId,
        mapId: o.mapId,
        categoryId: "phoenix",
        x: o.worldX,
        y: o.worldY,
        nameId: c("ui.common.phoenix"),
        iconId: _,
        isDestination: !0
      });
    }
    e._lastPhoenixes = n;
  }
}
if (window.gui.playerData.isAlive()) {
  for (i = 0; i < e._lastPhoenixes.length; i += 1) {
    e.removePOI("phoenix_" + e._lastPhoenixes[i].mapId);
  }
} else {
  var n = t.type.coords;
  for (i = 0; i < n.length; i += 1) {
    var o = n[i];
    w.indexOf(o.mapId) === -1 && e.addPOI({
      id: "phoenix_" + o.mapId,
      mapId: o.mapId,
      categoryId: "phoenix",
      x: o.worldX,
      y: o.worldY,
      nameId: c("ui.common.phoenix"),
      iconId: _,
      isDestination: !0
    });
  }
  e._lastPhoenixes = n;
}
for (i = 0; i < e._lastPhoenixes.length; i += 1) {
  e.removePOI("phoenix_" + e._lastPhoenixes[i].mapId);
}
for (i = 0; i < n.length; i += 1) {
  var o = n[i];
  w.indexOf(o.mapId) === -1 && e.addPOI({
    id: "phoenix_" + o.mapId,
    mapId: o.mapId,
    categoryId: "phoenix",
    x: o.worldX,
    y: o.worldY,
    nameId: c("ui.common.phoenix"),
    iconId: _,
    isDestination: !0
  });
}
for (var n = t.dbSteps[i], o = 0; o < n.objectiveIds.length; o += 1) {
  e.removePOI(e.getQuestObjectivePoiId(n.objectiveIds[o]));
}
for (var i = t.dbSteps[t.stepId], n = 0; n < i.objectiveIds.length; n += 1) {
  e.removePOI(e.getQuestObjectivePoiId(i.objectiveIds[n]));
}
if (i.hasSpouse) {
  var n = t.playerData.socialData.spouse;
  n ? n.followSpouse && e.addOrUpdateSpouse(n.spouseName, n.mapId) : t.once("SpouseInformationsMessage", function (t) {
    n = t.spouse, n.followSpouse && e.addOrUpdateSpouse(n.spouseName, n.mapId);
  });
} else {
  e.removeSpouse();
}
for (var i in t) {
  e.GPS.removeQuestObjectives(i);
}
for (var i = window.gui.playerData, n = i.alliance.current, s = i.position, r = g.entities.prism[s.subAreaId], l = r && r.prism && r.prism.alliance || n, d = 0, u = 0, p = {
    mine: {
      weight: 0,
      type: h("ui.alliance.myAlliance"),
      tooltip: ""
    },
    defense: {
      weight: 0,
      type: h("ui.alliance.allianceInDefense"),
      tooltip: ""
    },
    attack: {
      weight: 0,
      type: h("ui.alliance.allianceInAttack"),
      tooltip: ""
    }
  }, f = 0, _ = e.alliances.length; f < _; f += 1) {
  var y = e.alliances[f],
    w = e.allianceNbMembers[f],
    b = e.allianceMatchScore[f],
    M = e.allianceRoundWeigth[f];
  d += M;
  var T;
  T = y.allianceId === n.allianceId ? "mine" : y.allianceId === l.allianceId ? "defense" : "attack";
  var C = b + "/" + a,
    I = p[T];
  I.weight += M, I.tooltip += y.allianceName + " [" + y.allianceTag + "] (" + M + ") : " + C + "\n", this.table.addRow(o(y, T, I.type, C, M, w), {
    weight: M
  }), e.allianceMatchScore[u] < b && (u = f);
}
if (A && S >= a) {
  return this.winnerInfo.setText(h("ui.koh.win", A.allianceName)), this.winnerInfo.show(), void setTimeout(function () {
    t.winnerInfo.setText(""), t.hide();
  }, 6e4);
}
if (this.winnerStats.createChild("span", {
  text: h("ui.option.worldOption") + " [" + x.posX + ", " + x.posY + "]" + h("ui.common.colon")
}), 0 === N || this.isInProbation) {
  this.winnerStats.createChild("span", {
    text: h("ui.common.neutral")
  });
} else if ("" === E.allianceTag) {
  this.winnerStats.createChild("span", {
    text: h("ui.koh.draw", N)
  });
} else {
  var L = this.winnerStats.createChild("span", {
    text: E.allianceTag,
    className: "link"
  });
  m(L), L.on("tap", function () {
    c.openAllianceCard(E.allianceId);
  }), this.winnerStats.appendChild(new v("span", {
    text: " " + N + " " + h("ui.short.points")
  }));
}
if ("" === E.allianceTag) {
  this.winnerStats.createChild("span", {
    text: h("ui.koh.draw", N)
  });
} else {
  var L = this.winnerStats.createChild("span", {
    text: E.allianceTag,
    className: "link"
  });
  m(L), L.on("tap", function () {
    c.openAllianceCard(E.allianceId);
  }), this.winnerStats.appendChild(new v("span", {
    text: " " + N + " " + h("ui.short.points")
  }));
}
if (E.allianceId !== n.allianceId && N > 0 && !this.isInProbation) {
  this.myStats.clearContent(), this.myStats.createChild("span", {
    text: "("
  });
  var O = this.myStats.createChild("span", {
    text: n.allianceTag,
    className: "link"
  });
  m(O), O.on("tap", function () {
    c.openAllianceCard(n.allianceId);
  }), this.myStats.appendChild(new v("span", {
    text: " " + e.allianceMapMyAllianceScore + " " + h("ui.short.points") + ")"
  })), this.myStats.show();
} else {
  this.myStats.hide();
}
if (t) {
  return console.error("accessGameServer serverId: " + e, t);
}
if (!e) {
  return console.error(new Error("serverId is null")), void this._onSelectedServerRefused({});
}
if (!e.server) {
  return console.warn("WARN: ServerStatusUpdateMessage message have no server information");
}
for (var i = e.server, n = !0, o = 0, a = t.serversRawData.length; o < a; o += 1) {
  if (i.id === t.serversRawData[o].id) {
    t.serversRawData[o] = i, n = !1;
    break;
  }
}
if (i.id === t.serversRawData[o].id) {
  t.serversRawData[o] = i, n = !1;
  break;
}
for (var i = window.gui.databases.OptionalFeatures, n = 0, o = e.features.length; n < o; n += 1) {
  var a = e.features[n];
  t.optionalFeatures[i[a].keyword] = a;
}
for (var i = e.variables, n = 0, o = e.variables.length; n < o; n += 1) {
  t.sessionConstants[i[n].id] = i[n].value;
}
if (i) {
  var n = this.serversWithMyCharacter[0] || {},
    o = n.id;
  if (o && n.status === h.ONLINE && n.isSelectable) {
    return this.selectServer(o);
  }
}
if (o && n.status === h.ONLINE && n.isSelectable) {
  return this.selectServer(o);
}
if (this.staticContent) {
  return e();
}
if (e) {
  return window.gui.openSimplePopup(d("tablet.server.noServersForYourCommunity")), void (y || (console.error("pickUpOneServerForMe:", e), y = !0));
}
for (var t = 0; t < this.serversRawData.length; t++) {
  if (e === this.serversRawData[t].id) {
    return this.serversRawData[t];
  }
}
if (e === this.serversRawData[t].id) {
  return this.serversRawData[t];
}
for (var t = 0; t < this.serversRawData.length; t++) {
  if (e === this.serversRawData[t].id) {
    return this.serversRawData[t]._name;
  }
}
if (e === this.serversRawData[t].id) {
  return this.serversRawData[t]._name;
}
for (var e = [], t = 0; t < this.serversRawData.length; t++) {
  var i = this.serversRawData[t];
  i.status !== h.ONLINE && i.status !== h.SAVING && i.status !== h.FULL || i.id === g.TOURNAMENT_PROD_SERVERID || e.push(i);
}
for (var e = [], t = 0; t < this.serversRawData.length; t++) {
  var i = this.serversRawData[t];
  i.status === h.ONLINE && i.isSelectable && e.push(i);
}
if (0 === e.length) {
  return d("ui.common.none").toLowerCase();
}
for (var t = e[0]._name, i = 1; i < e.length; i++) {
  t += ", " + e[i]._name;
}
if (d.indexOf(e) === -1 && !i) {
  return t;
}
for (var a, s, r = n(), l = [], c = 0; c < t.length; c += 1) {
  a = t[c], s = a.staticData.server, o(r, s) && l.push(a);
}
for (var t = -1, i = [], n = 0, o = e.length; n < o; n += 1) {
  var a = e[n],
    s = a.staticData.server;
  a.status === r.ONLINE && t === -1 && (t = a.completion), s.nameId = s.nameId || "n/a", t !== -1 && s.populationId === t && a.status === r.ONLINE && s.nameId.indexOf("Test") === -1 && i.push(a);
}
for (var u, h = [], p = [], m = [], f = 0; f < e.length; f += 1) {
  var g = e[f];
  if (g) {
    var _ = t && t.data || {},
      v = _[g.id];
    if (v) {
      switch (g.staticData || (g.staticData = {}), g.staticData.server = v, g.id) {
        case c.GRANDAPAN_SERVERID:
        case 402:
          v.area = "America";
        case 406:
        case 407:
          g.completion = s.COMPLETION_AVERAGE, v.populationId = s.COMPLETION_AVERAGE;
          break;
        case 403:
        case 404:
        case 405:
        case 409:
          g.completion = s.COMPLETION_AVERAGE, v.populationId = s.COMPLETION_AVERAGE;
          break;
        case c.TOURNAMENT_TEST_SERVERID:
        case c.TOURNAMENT_PROD_SERVERID:
          g.completion = s.COMPLETION_FULL, v.populationId = s.COMPLETION_FULL;
      }
      var y = v.communityId;
      if (900 === g.id) {
        u = g;
      } else if (i === y) {
        l(g);
      } else {
        1 !== i && 2 !== i || 1 !== y && 2 !== y || l(g);
        var w = 4 === i || 6 === i,
          b = 4 === y || 6 === y,
          M = g.id === c.GRANDAPAN_SERVERID;
        w && (b || M) && l(g), 2 !== y && 1 !== y || d(g);
      }
    } else {
      console.warn("WARN: server", g.id, "has no staticContent");
    }
  }
}
if (g) {
  var _ = t && t.data || {},
    v = _[g.id];
  if (v) {
    switch (g.staticData || (g.staticData = {}), g.staticData.server = v, g.id) {
      case c.GRANDAPAN_SERVERID:
      case 402:
        v.area = "America";
      case 406:
      case 407:
        g.completion = s.COMPLETION_AVERAGE, v.populationId = s.COMPLETION_AVERAGE;
        break;
      case 403:
      case 404:
      case 405:
      case 409:
        g.completion = s.COMPLETION_AVERAGE, v.populationId = s.COMPLETION_AVERAGE;
        break;
      case c.TOURNAMENT_TEST_SERVERID:
      case c.TOURNAMENT_PROD_SERVERID:
        g.completion = s.COMPLETION_FULL, v.populationId = s.COMPLETION_FULL;
    }
    var y = v.communityId;
    if (900 === g.id) {
      u = g;
    } else if (i === y) {
      l(g);
    } else {
      1 !== i && 2 !== i || 1 !== y && 2 !== y || l(g);
      var w = 4 === i || 6 === i,
        b = 4 === y || 6 === y,
        M = g.id === c.GRANDAPAN_SERVERID;
      w && (b || M) && l(g), 2 !== y && 1 !== y || d(g);
    }
  } else {
    console.warn("WARN: server", g.id, "has no staticContent");
  }
}
if (v) {
  switch (g.staticData || (g.staticData = {}), g.staticData.server = v, g.id) {
    case c.GRANDAPAN_SERVERID:
    case 402:
      v.area = "America";
    case 406:
    case 407:
      g.completion = s.COMPLETION_AVERAGE, v.populationId = s.COMPLETION_AVERAGE;
      break;
    case 403:
    case 404:
    case 405:
    case 409:
      g.completion = s.COMPLETION_AVERAGE, v.populationId = s.COMPLETION_AVERAGE;
      break;
    case c.TOURNAMENT_TEST_SERVERID:
    case c.TOURNAMENT_PROD_SERVERID:
      g.completion = s.COMPLETION_FULL, v.populationId = s.COMPLETION_FULL;
  }
  var y = v.communityId;
  if (900 === g.id) {
    u = g;
  } else if (i === y) {
    l(g);
  } else {
    1 !== i && 2 !== i || 1 !== y && 2 !== y || l(g);
    var w = 4 === i || 6 === i,
      b = 4 === y || 6 === y,
      M = g.id === c.GRANDAPAN_SERVERID;
    w && (b || M) && l(g), 2 !== y && 1 !== y || d(g);
  }
} else {
  console.warn("WARN: server", g.id, "has no staticContent");
}
if (900 === g.id) {
  u = g;
} else if (i === y) {
  l(g);
} else {
  1 !== i && 2 !== i || 1 !== y && 2 !== y || l(g);
  var w = 4 === i || 6 === i,
    b = 4 === y || 6 === y,
    M = g.id === c.GRANDAPAN_SERVERID;
  w && (b || M) && l(g), 2 !== y && 1 !== y || d(g);
}
if (i === y) {
  l(g);
} else {
  1 !== i && 2 !== i || 1 !== y && 2 !== y || l(g);
  var w = 4 === i || 6 === i,
    b = 4 === y || 6 === y,
    M = g.id === c.GRANDAPAN_SERVERID;
  w && (b || M) && l(g), 2 !== y && 1 !== y || d(g);
}
if (e < 0 || e > this._rows.length) {
  return console.warn("[Table.insertRow] the specified index (" + e + ") is out of range."), null;
}
if (n && n._isEmpty) {
  n._isEmpty = !1, n = this.updateRow(e, t, i);
} else {
  n = this._createRow(t, "content");
  for (var o in i) {
    n[o] = i[o];
  }
  e === this._rows.length ? this.content.appendChild(n) : n.insertBefore(this._rows[e]), this._rows.splice(e, 0, n);
}
for (var o in i) {
  n[o] = i[o];
}
for (var i = 0, n = t.length; i < n; i += 1) {
  this.content.appendChild(t[i]);
}
if (e > this._rowCount) {
  return console.error("[Table.delRow] Row index " + e + " does not exist.");
}
if (!this._isRowEmpty(e)) {
  var t = this._rows[e];
  this._lastSelected === t && (this._lastSelected = null), t.destroy(), this._rowCount--, this._rows.splice(e, 1), this._rows.length < this._minRows && this._addRow(), this._highlightable && !this._disableAutoSelect && this.highlight(0), this._updateDisplay();
}
if (!e._isEmpty) {
  for (var n in i) {
    e[n] = i[n];
  }
  if (this._highlightable && e.enable(), Array.isArray(t)) {
    for (var a = {}, s = this._colIds, r = 0; r < s.length; r++) {
      a[s[r]] = t[r];
    }
    t = a;
  }
  for (var l in t) {
    var c = e.getChild(l),
      d = t[l];
    c.clearContent(), d instanceof o ? c.appendChild(d) : (void 0 !== d && null !== d || (d = ""), c.setHtml(d.toString()));
  }
  return !this._highlightable || this._lastSelected || this._disableAutoSelect || this.highlight(0), e;
}
for (var n in i) {
  e[n] = i[n];
}
if (this._highlightable && e.enable(), Array.isArray(t)) {
  for (var a = {}, s = this._colIds, r = 0; r < s.length; r++) {
    a[s[r]] = t[r];
  }
  t = a;
}
for (var a = {}, s = this._colIds, r = 0; r < s.length; r++) {
  a[s[r]] = t[r];
}
for (var l in t) {
  var c = e.getChild(l),
    d = t[l];
  c.clearContent(), d instanceof o ? c.appendChild(d) : (void 0 !== d && null !== d || (d = ""), c.setHtml(d.toString()));
}
if (!this._isRowEmpty(e)) {
  var n = this._rows[e];
  return this.updateRowContent(n, t, i);
}
for (var e = 0; e < this._rows.length; e++) {
  this._rows[e].destroy();
}
for (var e = 0; e < this._rows.length; e++) {
  var t = this._rows[e];
  if (t.isVisible()) {
    return void this.highlightRow(t);
  }
}
if (t.isVisible()) {
  return void this.highlightRow(t);
}
if (this._highlightable) {
  if (!e || e._isEmpty) {
    return void console.warn("Invalid index, row does not exist or empty!");
  }
  e !== this._lastSelected && (this._lastSelected && this._lastSelected.delClassNames("highlight"), this._lastSelected = e, this._lastSelected.addClassNames("highlight")), this.emit("selected", e);
}
if (!e || e._isEmpty) {
  return void console.warn("Invalid index, row does not exist or empty!");
}
if (i) {
  return i.getChild(t);
}
if (e.length) {
  for (var t = 0, i = 0; i < e.length; i++) {
    var n = e[i],
      o = this.getRow(n);
    o && (o.hide(), this._hiddenRowIds.push(n), t++);
  }
  var a = this.getRowCount() - t;
  return this._disableAutoSelect || this.highlightFirstRow(), a < this._minRows ? (a = this._minRows - a, void this._addEmptyRows(a)) : void this._updateDisplay();
}
for (var t = 0, i = 0; i < e.length; i++) {
  var n = e[i],
    o = this.getRow(n);
  o && (o.hide(), this._hiddenRowIds.push(n), t++);
}
if (e.length) {
  for (var t = 0; t < e.length; t++) {
    var i = this.getRow(e[t]);
    i && i.show();
  }
  return this._disableAutoSelect || this.highlightFirstRow(), this._hiddenRowIds = [], this._rows.length > this._minRows ? void this._delEmptyRows(this._rows.length - this._minRows) : void this._updateDisplay();
}
for (var t = 0; t < e.length; t++) {
  var i = this.getRow(e[t]);
  i && i.show();
}
for (var e = !1, t = 0; t < this._rows.length; t++) {
  if (this._rows[t].isVisible()) {
    e = !0;
    break;
  }
}
if (this._rows[t].isVisible()) {
  e = !0;
  break;
}
if (this._autoUpdateRowColor) {
  for (var e = !0, t = 0; t < this._rows.length; t++) {
    var i = this._rows[t];
    i.isVisible() && (e ? (i.addClassNames("odd"), e = !1) : (i.delClassNames("odd", "even"), e = !0));
  }
}
for (var e = !0, t = 0; t < this._rows.length; t++) {
  var i = this._rows[t];
  i.isVisible() && (e ? (i.addClassNames("odd"), e = !1) : (i.delClassNames("odd", "even"), e = !0));
}
for (var a, r = Array.isArray(e), l = 0; l < this._colCount; l++) {
  var c = i[l],
    d = n.createChild("div", {
      className: "col",
      name: c || ""
    });
  r ? a = e[l] : (a = e[c], n[c] = a), (a || 0 === a) && (a instanceof o ? d.appendChild(a) : d.setHtml(a.toString()));
}
if ("content" !== t) {
  return n;
}
if (this.noneLabel.hide(), this._highlightable || this._clickable) {
  s(n), n.on("disabled", function () {
    n.addClassNames("disabled");
  }), n.on("enabled", function () {
    n.delClassNames("disabled");
  }), n._isEmpty && n.disable();
  var u = this;
  n.on("tap", function () {
    u.highlightRow(this);
  });
}
for (var o in i) {
  n[o] = i[o];
}
for (var t = 0; t < e; t++) {
  this._addRow();
}
for (; this._rows.length < this._minRows;) {
  this._addRow();
}
for (var t = this._rows.length - 1; t >= 0 && !(0 === e || this._rows.length <= this._minRows); t--) {
  this._isRowEmpty(t) && (this._rows[t].destroy(), this._rows.splice(t, 1), e--);
}
for (var n = 0, a = e.length; n < a; n += 1) {
  var r = i.createChild("div", {
    className: "barContainer"
  });
  r.createChild("div", {
    className: ["bar", e[n]]
  }), r.tooltip = i.createChild("div", {
    className: "tooltip"
  }), r.tooltipContent = new s("div"), o(r.tooltip, r.tooltipContent, {
    openOnTap: !0
  }), this.bars.push(r);
}
for (var t = 0, i = 0, n = this.bars.length; i < n; i += 1) {
  var o = e[i],
    a = this.bars[i],
    s = Math.floor(this.width * o.weight);
  a.setStyles({
    "-webkit-mask-position": t + "px 0",
    "-webkit-mask-size": s + "px 100%"
  }), a.tooltip.setStyles({
    left: t + "px",
    width: s + "px"
  }), t += s, a.tooltipContent.setText(o.tooltip);
}
if (!i.mapPosition) {
  return e(!1);
}
if (s && s.prism) {
  var r = s.getAlliance();
  this.allianceInfo.allianceId = r.allianceId, this.allianceTag.setText("[" + r.allianceTag + "]"), this.allianceEmblem.setValue(r.allianceEmblem, !0), this.allianceInfo.show();
} else {
  this.allianceInfo.hide();
}
if (e !== this._shouldShowMapInfo) {
  return this._shouldShowMapInfo = e, e ? this._updateMapInfo(function (e) {
    e && t._appear();
  }) : void (this._markerCount > 0 ? this.addClassNames("noMapInfo") : this._disappear());
}
if (e._shouldShowMapInfo) {
  return e._updateMapInfo(function () {
    e._appear();
  });
}
if (!t) {
  return g["switch"](e);
}
for (var t = 0; t < C.length; t++) {
  this._createIcon(t, C[t]);
}
for (var t = this._icons.getChildren(), i = 0, n = t.length; i < n; i += 1) {
  c.setDragEnable(t[i], e);
}
if (e.menuButtonId) {
  if (!T[e.menuButtonId]) {
    return console.error(new Error("Unknown button id `" + e.menuButtonId + "` in MenuBar."));
  }
  if (n.setIconAvailability(e.menuButtonId, !e.locked), !e.locked) {
    var t = n._getIcon(e.menuButtonId);
    if (t) {
      var i = n._notificationIconList,
        o = e.menuButtonId,
        a = i[o];
      i.hasOwnProperty(o) && t.addClassNames(a);
    }
  }
}
if (!T[e.menuButtonId]) {
  return console.error(new Error("Unknown button id `" + e.menuButtonId + "` in MenuBar."));
}
if (n.setIconAvailability(e.menuButtonId, !e.locked), !e.locked) {
  var t = n._getIcon(e.menuButtonId);
  if (t) {
    var i = n._notificationIconList,
      o = e.menuButtonId,
      a = i[o];
    i.hasOwnProperty(o) && t.addClassNames(a);
  }
}
if (t) {
  var i = n._notificationIconList,
    o = e.menuButtonId,
    a = i[o];
  i.hasOwnProperty(o) && t.addClassNames(a);
}
if (e.id !== t.id) {
  e.delClassNames("vibrate");
  var i = e.index,
    n = t.index,
    o = this;
  m.tween(e, {
    webkitTransform: "translate3d(" + (t.x - e.x) + "px," + (t.y - e.y) + "px,0)"
  }, {
    time: 100,
    easing: "ease-out"
  }, function () {
    o._positionIcon(e, n), o._iconOrder[e.index] = e.id, o._iconOrder[t.index] = t.id, p.setValue(I, o._iconOrder), e.addClassNames("vibrate");
  }), this._positionIcon(t, i);
}
if (this.isDisabled) {
  var e = window.gui.uiLocker.getMenuButtonLockedReasons(t);
  return void v.showNotification(e.join("\r\n"), this);
}
for (var e = this._icons.getChildren(), t = this._iconsBox.getChildren(), i = 0, n = e.length; i < n; i += 1) {
  var o = e[i];
  this._positionIcon(o, o.index), this._positionIcon(t[i], o.index);
}
for (var t = 0; t < e.length; t++) {
  var i = e[t],
    n = this._icons.getChild(i);
  n.index = t, this._positionIcon(n, t);
}
if (this._iconOrder = p.getValue(I, null), this._iconOrder) {
  for (var e = 0; e < C.length; e++) {
    this._iconOrder.indexOf(C[e]) === -1 && this._iconOrder.splice(e, 0, C[e]);
  }
} else {
  this._iconOrder = C.concat();
}
for (var e = 0; e < C.length; e++) {
  this._iconOrder.indexOf(C[e]) === -1 && this._iconOrder.splice(e, 0, C[e]);
}
for (var t = 0; t < this._iconOrder.length; t++) {
  var i = this._iconOrder[t],
    n = this._icons.getChild(i);
  if (n) {
    var o = window.gui.uiLocker.isMenuButtonAvailable(i);
    this.setIconAvailability(i, o);
  } else {
    this._iconOrder.splice(t, 1), t--;
  }
}
if (n) {
  var o = window.gui.uiLocker.isMenuButtonAvailable(i);
  this.setIconAvailability(i, o);
} else {
  this._iconOrder.splice(t, 1), t--;
}
if (!e) {
  return void console.error("MenuBar._addNotificationIcon: undefined iconName with notificationIcon", t);
}
if (!t) {
  return void console.error("MenuBar._addNotificationIcon: undefined notificationIcon on iconName", e);
}
if (n) {
  var o = this._notificationIconList;
  o.hasOwnProperty(e) || (o[e] = t, !i.doNotShow && window.gui.uiLocker.isMenuButtonAvailable(e) && n.addClassNames(t));
}
if (!e) {
  return void console.error("MenuBar._removeNotificationIcon: undefined iconName with notificationIcon:", t);
}
if (!t) {
  return void console.error("MenuBar._removeNotificationIcon: undefined notificationIcon on iconName:", e);
}
if (i) {
  var n = this._notificationIconList;
  n.hasOwnProperty(e) && (i.delClassNames(t), delete n[e]);
}
for (var t = this._notificationIconList, i = this._icons.getChildren(), n = 0; n < i.length; n += 1) {
  var o = i[n],
    a = o.id;
  t.hasOwnProperty(a) && ("all" !== e && e.indexOf(t[a]) === -1 || o.delClassNames(t[a]));
}
for (var t in e) {
  e.hasOwnProperty(t) && delete e[t];
}
for (var i in t) {
  if (t.hasOwnProperty(i)) {
    var n = i,
      o = this._getIcon(n);
    "all" !== e && e.indexOf(t[n]) === -1 || o.addClassNames(t[n]);
  }
}
if (t.hasOwnProperty(i)) {
  var n = i,
    o = this._getIcon(n);
  "all" !== e && e.indexOf(t[n]) === -1 || o.addClassNames(t[n]);
}
if (!this._isAlwaysOpen) {
  var n = "x" === this._axis ? t : i;
  this._currentPosition += n;
  var o;
  o = e ? n * this._direction < 0 : this.isOpen, o ? this._open(!0) : this._close(!0), this.removeListener("slide", s);
}
if (this._visibleSize = this.rootElement[this._clientProperty], this._contentSize = this.getCurrentContentSize(), this._contentSize) {
  this._isAlwaysOpen && (this._contentSize += this._extraContentSize), this._contentSize < this._visibleSize && (this._contentSize = this._visibleSize);
  var e, t, i, n, o, a;
  switch (e = t = i = n = o = a = "", this.side) {
    case "top":
      t = this._visibleSize + "px";
      break;
    case "bottom":
      e = this._visibleSize + "px";
      break;
    case "left":
      n = this._visibleSize + "px";
      break;
    case "right":
      i = this._visibleSize + "px";
  }
  if (this.content.setStyles({
    top: e,
    bottom: t,
    left: i,
    right: n,
    width: o,
    height: a,
    webkitTransform: "translate" + this._axis + "(" + 100 * this._direction + "%)"
  }), this.setStyle(this._dimension, this._contentSize + "px"), this.background) {
    var s = {
      top: e,
      bottom: t,
      left: i,
      right: n,
      width: "",
      height: "",
      webkitTransform: "translate" + this._axis + "(" + 100 * this._direction + "%)"
    };
    s[this._dimension] = this._contentSize + "px", this.background.setStyles(s);
  }
  this._currentPosition = this._contentSize * this._direction, this.isOpen = !1, this.delClassNames("open");
}
if (this.content.setStyles({
  top: e,
  bottom: t,
  left: i,
  right: n,
  width: o,
  height: a,
  webkitTransform: "translate" + this._axis + "(" + 100 * this._direction + "%)"
}), this.setStyle(this._dimension, this._contentSize + "px"), this.background) {
  var s = {
    top: e,
    bottom: t,
    left: i,
    right: n,
    width: "",
    height: "",
    webkitTransform: "translate" + this._axis + "(" + 100 * this._direction + "%)"
  };
  s[this._dimension] = this._contentSize + "px", this.background.setStyles(s);
}
if (e || !(this._opening || this.isOpen || this.drawerLocked)) {
  this._opening = !0, this.addClassNames("open"), this._tween1 && this._tween1.cancel(), this._tween2 && this._tween2.cancel(), e || this.emit("opening");
  var t = this;
  this._tween1 = s.tween(this.content, {
    webkitTransform: "translate" + this._axis + "(" + this._visibleSize * this._direction + "px)"
  }, {
    time: l,
    easing: "ease-out"
  }, function () {
    t._currentPosition = t._visibleSize * t._direction, t._tween1 = null, t._opening = !1, t.isOpen || t.emit("open"), t.isOpen = !0;
  }), this.background && (this._tween2 = s.tween(this.background, {
    webkitTransform: "translate" + this._axis + "(" + this._visibleSize * this._direction + "px)"
  }, {
    time: l,
    easing: "ease-out"
  }, function () {
    t._tween2 = null;
  }));
}
if (e || !this._closing && this.isOpen && !this.drawerLocked) {
  this._closing = !0, this._tween1 && this._tween1.cancel(), this._tween2 && this._tween2.cancel(), e || this.emit("closing");
  var t = this;
  this._tween1 = s.tween(this.content, {
    webkitTransform: "translate" + this._axis + "(" + 100 * this._direction + "%)"
  }, {
    time: l,
    easing: "ease-out"
  }, function () {
    t._currentPosition = t._contentSize * t._direction, t._tween1 = null, t._closing = !1, t.emit("close"), t.isOpen = !1, t.delClassNames("open");
  }), this.background && (this._tween2 = s.tween(this.background, {
    webkitTransform: "translate" + this._axis + "(" + 100 * this._direction + "%)"
  }, {
    time: l,
    easing: "ease-out"
  }, function () {
    t._tween2 = null;
  }));
}
if (this.buttonBox) {
  for (var i = this.buttonBox.getChildren(), n = null, o = null, a = 0; a < i.length; a++) {
    i[a].getClassNames().indexOf(e) !== -1 ? n = i[a] : i[a].getClassNames().indexOf(t) !== -1 && (o = i[a]);
  }
  n && o && this.buttonBox.insertChildBefore(n, o);
}
for (var i = this.buttonBox.getChildren(), n = null, o = null, a = 0; a < i.length; a++) {
  i[a].getClassNames().indexOf(e) !== -1 ? n = i[a] : i[a].getClassNames().indexOf(t) !== -1 && (o = i[a]);
}
if (e.playerData.isSpectator) {
  return t.sendMessage("GameContextQuitMessage");
}
if ("start" === t) {
  this.serverLagEventName = e, this.serverLagStart = Date.now();
} else if ("stop" === t) {
  if (this.serverLagEventName !== e) {
    return;
  }
  this._currentServerLag(Date.now() - this.serverLagStart), this.serverLagEventName = null;
} else {
  console.warn("Invalid action emitted to checkServerLag", e, ":", t);
}
if ("stop" === t) {
  if (this.serverLagEventName !== e) {
    return;
  }
  this._currentServerLag(Date.now() - this.serverLagStart), this.serverLagEventName = null;
} else {
  console.warn("Invalid action emitted to checkServerLag", e, ":", t);
}
if (this.serverLagEventName !== e) {
  return;
}
if (g && g.remove(), _ && _.remove(), f) {
  for (var e = 0; e < f.length; e++) {
    f[e].remove();
  }
}
for (var e = 0; e < f.length; e++) {
  f[e].remove();
}
if (_ && _.hide(), g && g.hide(), f) {
  for (var e in f) {
    f[e].hide();
  }
}
for (var e in f) {
  f[e].hide();
}
for (var t = window.isoEngine.mapRenderer, i = [], n = t.map.cells, o = 0; o < s.NB_CELLS; o++) {
  var a = t.isWalkable(o);
  if (a) {
    var r = n[o],
      u = l.cellCoord[o],
      h = (e && r.f || 0) + g,
      _ = u.x,
      y = _ - m,
      w = _ + m,
      b = u.y - h,
      M = b + f,
      T = b + p,
      C = new c(_, b, w, M, _, T, y, M);
    C.cellId = o, i.push(C);
  }
}
if (a) {
  var r = n[o],
    u = l.cellCoord[o],
    h = (e && r.f || 0) + g,
    _ = u.x,
    y = _ - m,
    w = _ + m,
    b = u.y - h,
    M = b + f,
    T = b + p,
    C = new c(_, b, w, M, _, T, y, M);
  C.cellId = o, i.push(C);
}
for (var e = window.isoEngine.mapRenderer, t = e.map.cells, i = [], n = 0; n < y; n++) {
  if (!(7 & t[n].l)) {
    var o = l.cellCoord[n],
      a = e.mapScene.createTexture(r(), "roleplayTacticBlock", "linear", "permanent");
    i.push(new u({
      id: "tacticGraphic" + n,
      position: n,
      hue: [1, 1, 1, 1],
      x: o.x - T / 2,
      y: o.y - p,
      g: 1,
      w: T,
      h: C,
      scene: e.mapScene
    }, a));
  }
}
if (!(7 & t[n].l)) {
  var o = l.cellCoord[n],
    a = e.mapScene.createTexture(r(), "roleplayTacticBlock", "linear", "permanent");
  i.push(new u({
    id: "tacticGraphic" + n,
    position: n,
    hue: [1, 1, 1, 1],
    x: o.x - T / 2,
    y: o.y - p,
    g: 1,
    w: T,
    h: C,
    scene: e.mapScene
  }, a));
}
for (var r = 0; r < i.length; r++) {
  t.lineTo(i[r], n[r]);
}
for (var e = 0; e < 560; e += 1) {
  l.push(n(e));
}
if (this._hueContrast) {
  for (var n = 0, o = !1, a = 0; a < e; a += 1) {
    var s = this._boxes[a];
    s.x0 > n ? (n = s.x0, this._createBox(a, o ? i : t)) : (n = 0, o = !o, this._createBox(a, o ? i : t));
  }
} else {
  for (var r = 0; r < e; r += 1) {
    this._createBox(r, t);
  }
}
for (var n = 0, o = !1, a = 0; a < e; a += 1) {
  var s = this._boxes[a];
  s.x0 > n ? (n = s.x0, this._createBox(a, o ? i : t)) : (n = 0, o = !o, this._createBox(a, o ? i : t));
}
for (var r = 0; r < e; r += 1) {
  this._createBox(r, t);
}
if (void 0 === e) {
  var t = this.id,
    i = this._positions,
    n = !1;
  this.renderer.loadSpriteBuffer(t, i, null, this._bbox, n), this.renderer.lockBuffer(this.id);
}
if (this.dialogs[e]) {
  this.dialogs[e].destroy(), delete this.dialogs[e];
  var i = this.container.getChild(e),
    n = i.getChild("icon");
  if ("function" == typeof n.cancelTween && n.cancelTween(), i.destroy(), this._updateCounter(), !t && this.currentOpenedId) {
    if (e === this.currentOpenedId) {
      this.currentOpenedId = null;
      var o = this.container.getChildren();
      if (o.length) {
        var a = o[o.length - 1].getWuiName();
        this.showDialog(a, !0);
      }
    } else {
      this._repositionDialog(this.currentOpenedId);
    }
  }
}
if ("function" == typeof n.cancelTween && n.cancelTween(), i.destroy(), this._updateCounter(), !t && this.currentOpenedId) {
  if (e === this.currentOpenedId) {
    this.currentOpenedId = null;
    var o = this.container.getChildren();
    if (o.length) {
      var a = o[o.length - 1].getWuiName();
      this.showDialog(a, !0);
    }
  } else {
    this._repositionDialog(this.currentOpenedId);
  }
}
if (e === this.currentOpenedId) {
  this.currentOpenedId = null;
  var o = this.container.getChildren();
  if (o.length) {
    var a = o[o.length - 1].getWuiName();
    this.showDialog(a, !0);
  }
} else {
  this._repositionDialog(this.currentOpenedId);
}
if (o.length) {
  var a = o[o.length - 1].getWuiName();
  this.showDialog(a, !0);
}
for (var e in this.dialogs) {
  this._destroyNotification(e, !0);
}
if (t.buttons) {
  t.buttons.length > 1 && !t.onClose && console.warn("Notification needs an onClose function");
  for (var r = 0; r < t.buttons.length; r++) {
    var l = s.appendChild(new c({
      className: "button",
      text: t.buttons[r].label
    }, n));
    l.index = r;
  }
}
for (var r = 0; r < t.buttons.length; r++) {
  var l = s.appendChild(new c({
    className: "button",
    text: t.buttons[r].label
  }, n));
  l.index = r;
}
if (!isNaN(t.type)) {
  var d = p[t.type] || {};
  s = d.icon || s, r = d.color || r;
}
if (a && a.rootElement && (a.setStyle("backgroundImage", o[0] + ", " + o[1]), a.delClassNames("spinner"), t.timer)) {
  var s = parseInt(t.timer, 10),
    r = n.createChild("div", {
      className: "timer"
    }),
    c = l.tween(r, {
      height: "100%"
    }, {
      time: s,
      easing: "linear"
    }, function () {
      i.removeNotification(e);
    });
  a.cancelTween = c.cancel;
}
if (e && e === this.currentOpenedId) {
  var t = this.container.getChild(e);
  t.delClassNames("opened"), this.currentOpenedId = null, this.dialogs[e].hide();
}
if (t) {
  var i = this;
  window.setTimeout(function () {
    i._destroyNotification(e);
  }, 0);
}
for (var i = 0; i < t.length; i++) {
  e = e.replace("#" + (i + 1), t[i]);
}
if (!t.npcData) {
  var i = window.actorManager.getActor(t.npcActorId).data.npcData;
  t.prepareDialog(i);
}
for (i = 0; i < e.dialogMessages.length; i++) {
  t = e.dialogMessages[i], n[t[0]] = t[1];
}
for (n = this.replyTextIds = {}, i = 0; i < e.dialogReplies.length; i++) {
  t = e.dialogReplies[i], n[t[0]] = t[1];
}
for (var n = this.msgTextIds[e], s = [n], r = 0; r < t.length; r++) {
  s.push(this.replyTextIds[t[r]]);
}
if (e) {
  return console.error("Failed to get texts for NPC. textIds:", s, "error:", e), l._closeDialog();
}
for (r = 0; r < t.length; r++) {
  d.push(a[l.replyTextIds[t[r]]]);
}
for (var e = this.replies, t = e.length, i = Math.ceil(t / b), n = this.numReplyTabs; n < i; n++) {
  var o = this.replyBoxes[n] = new g("div", {
    className: "replyBox"
  });
  this.replyTabs.addTab("", o, n), this.numReplyTabs++;
  for (var s = 0; s < b; s++) {
    var r = o.appendChild(new u({
      className: "reply"
    }, a));
    r.myUi = this, this.replyElts.push(r);
  }
}
for (var s = 0; s < b; s++) {
  var r = o.appendChild(new u({
    className: "reply"
  }, a));
  r.myUi = this, this.replyElts.push(r);
}
for (n = t; n < this.replyElts.length; n++) {
  this.replyElts[n].hide();
}
for (this.leftBtn.toggleDisplay(i > 1), this.rightBtn.toggleDisplay(i > 1), this.replyBoxes[0].setStyle("textAlign", i > 1 ? "left" : "center"), n = this.numUsedReplyTabs; n < this.numReplyTabs; n++) {
  this.replyTabs.toggleTabAvailability(n, n < i);
}
for (n = 0; n < t; n++) {
  c(this.replyElts[n], n, e[n], l, T);
}
for (var t = 0; t < this.numUsedReplyTabs; t++) {
  this.replyBoxes[t].toggleDisplay(e);
}
for (var i, n = C, o = this.replies, a = 0; a < o.length; a++) {
  i = this.replyElts[a].rootElement.offsetHeight, n = Math.max(n, i);
}
for (this.replyTabs.setStyle("min-height", n + "px"), a = 0; a < o.length; a++) {
  var s = this.replyElts[a];
  if (i = s.rootElement.offsetHeight, i !== n) {
    var r = Math.round(1 + (i - T) / M),
      l = Math.round(M + (n - i) / r);
    s.setStyles({
      "line-height": l + "px",
      minHeight: n + "px"
    });
  }
}
if (i = s.rootElement.offsetHeight, i !== n) {
  var r = Math.round(1 + (i - T) / M),
    l = Math.round(M + (n - i) / r);
  s.setStyles({
    "line-height": l + "px",
    minHeight: n + "px"
  });
}
if (this.replyTabs.reopen(), this.leftBtn.setEnable(!!this.replyTabs.leftTab), this.rightBtn.setEnable(!!this.replyTabs.rightTab), this.replyTabs.setStyle("opacity", 1), e) {
  var c = this.rootElement;
  this.uiBox = window.gui.boxArranger.addObstacle(0, c.offsetTop - v, h.screenWidth, c.offsetHeight), this._waitZoomChange(this._appear);
}
if (!this.isChangingZoom) {
  return e && e.call(this);
}
if (this.isZoomed) {
  return this._waitZoomChange(e);
}
if (!this.isZoomed) {
  return this._waitZoomChange(e);
}
if (this.replyHandler) {
  if (null !== e) {
    this.replyElts[e].disable();
    var t = this.replies[e];
    window.gui.chat.logNPCReplyMsg(t);
  }
  this._closeMsgBubble();
  var i = this.replyHandler;
  this.replyHandler = null, i(e);
}
if (null !== e) {
  this.replyElts[e].disable();
  var t = this.replies[e];
  window.gui.chat.logNPCReplyMsg(t);
}
for (var e in this.singleMsgBubbles) {
  this.singleMsgBubbles[e].close();
}
if (null !== this.replyHandler && console.error("previous replyHandler was not called"), n = n || {}, this.replies = t, this.replyHandler = i, this.actor = n.actor || window.actorManager.getActorFromNpcId(n.npcData.id), this.npcName = n.npcData && n.npcData.nameId, this.currentMsg = e, 0 === t.length) {
  if (this.singleMsgBubbles[this.npcName]) {
    return this._sendReply(null);
  }
  this.hide(), this._restoreZoom(this._showSingleMsgBubble);
} else {
  this._showQuestion();
}
if (this.singleMsgBubbles[this.npcName]) {
  return this._sendReply(null);
}
if (this.overlay.show(), this.setStyle("opacity", 0), this.show(), !s) {
  var e = this.digitBoxes[0].rootElement;
  s = e.offsetTop + e.offsetHeight / 2;
}
for (var n = this.createChild("div", {
    className: "displayContainer"
  }), s = d("ui.common.numberSeparator") || ".", c = 0; c < w; c++) {
  var h = w - 1 - c,
    p = h % 3 === 2;
  p && (this.separators[h + 1] = n.createChild("div", {
    className: "separator",
    text: s
  }));
  var m = this.digitBoxes[h] = n.createChild("div", {
    className: "digitBox"
  });
  p && m.addClassNames("groupStart"), m.id = h, m.numberInput = this, f(m), m.on("tap", a), this.digitElements[h] = m.createChild("div", {
    className: "digit"
  });
}
for (c = 0; c < M.length; c++) {
  var v = M[c],
    y = T[v] || v,
    b = this.keyMap[v] = new l(y, {
      className: ["keyboardKey", "key" + v]
    });
  "@" === y[0] && (y.length > 1 && b.createChild("div", {
    text: y.substr(1)
  }), b.createChild("div", {
    className: "keyIcon"
  })), _.appendChild(b), b.id = v, b.numberInput = this, b.on("tap", o);
}
for (var t = w - 1; t >= e.length; t--) {
  this._setDigit(t, "");
}
for (var i = 0; i < e.length; i++) {
  this._setDigit(t, e[i]), t--;
}
for (var e = "", t = w - 1; t >= 0; t--) {
  e += this.digits[t];
}
if (this.mode === b.INSERT) {
  var e = Math.floor(this._getValue() / 10);
  this.setValue(e);
}
for (var e = 0; e < 3; e++) {
  this._doDigit("0");
}
if ("0" === e && 0 === this._getValue()) {
  return;
}
if ("" !== this.digits[w - 1]) {
  return;
}
if (0 !== e) {
  for (var i = w - 1; i >= e; i--) {
    var n = this.digits[i];
    if ("0" !== n && "" !== n) {
      break;
    }
    "0" === n && this._setDigit(i, "");
  }
  if ("0" !== t) {
    for (i = e - 1; i >= 0 && "" === this.digits[i]; i--) {
      this._setDigit(i, "0");
    }
  }
}
for (var i = w - 1; i >= e; i--) {
  var n = this.digits[i];
  if ("0" !== n && "" !== n) {
    break;
  }
  "0" === n && this._setDigit(i, "");
}
if ("0" !== n && "" !== n) {
  break;
}
if ("0" !== t) {
  for (i = e - 1; i >= 0 && "" === this.digits[i]; i--) {
    this._setDigit(i, "0");
  }
}
for (i = e - 1; i >= 0 && "" === this.digits[i]; i--) {
  this._setDigit(i, "0");
}
if (s) {
  s.memberData = t, this._updateMemberTooltip(s, o), this._updateCogTooltip(this.cogDom);
  for (var r = i.getChildren(), l = r.sort(a), c = 0; c < l.length; c += 1) {
    var d = i.removeChild(l[c]);
    i.appendChild(d);
  }
  var u = s.getChild("characterDisplay"),
    h = t.entityLook || t.guestLook;
  u.setLook(h, {
    riderOnly: !0,
    direction: v.DIRECTION_SOUTH_WEST,
    animation: "AnimArtwork",
    boneType: "timeline/",
    skinType: "timeline/"
  }), s.hp.setStyle("height", t.lifePoints / t.maxLifePoints * 100 + "%"), s.toggleClassName("guest", !!t.guestId), s.toggleClassName("leader", o);
}
for (var r = i.getChildren(), l = r.sort(a), c = 0; c < l.length; c += 1) {
  var d = i.removeChild(l[c]);
  i.appendChild(d);
}
if (i) {
  var n = i.getChild(t.id);
  n ? (n.memberData = t, this.updateMember(i.type, t)) : this.addMember(i.type, t);
}
if (i) {
  var n = i.getChild(t);
  if (n) {
    return n.memberData;
  }
}
if (n) {
  return n.memberData;
}
for (var s = 0; s < n.length; s += 1) {
  a.getChild(n[s].id) ? this.updateMember(e, n[s]) : this.addMember(e, n[s]);
}
for (s = 0; s < o.length; s += 1) {
  a.getChild(o[s].id) ? this.updateMember(e, o[s]) : this.addMember(e, o[s]);
}
if (e && this.hasParty[e]) {
  this.hasParty[e] = !1, this.numParties--;
  var i = this.partyBoxes.getChild(e);
  i.hide(), i.clearContent(), delete i.partyLeaderId;
  for (var n in this.partyTypesById) {
    parseInt(this.partyTypesById[n], 10) === e && delete this.partyTypesById[n];
  }
  this.switchPartyButton.hide(), this.numParties > 0 ? this._selectPartyType(o(e)) : this.hide(), e === g.PARTY_TYPE_ARENA && this.removeArenaFightQuestion(), t || this.emit("resized");
}
for (var n in this.partyTypesById) {
  parseInt(this.partyTypesById[n], 10) === e && delete this.partyTypesById[n];
}
if (n) {
  var o = n.getChild(n.partyLeaderId),
    a = n.getChild(i);
  n.partyLeaderId = i, e.updateMember(n.type, o.memberData), e.updateMember(n.type, a.memberData);
}
if (i) {
  var n = t.guest;
  n.hostName = i.getChild(n.hostId).memberData.name, e.addMember(i.type, n), i.partyId = t.partyId;
}
if (t.playerData.id !== n) {
  var o = e.invitedFrom[i],
    a = m("ui.party.invitationCancelledForGuest", o);
  t.chat.logMsg(a), t.notificationBar.removeNotification("party" + i);
}
if (a) {
  if (a !== t.playerData.characterBaseInformations.id) {
    var r = i.getMemberName(a);
    t.chat.logMsg(m("ui.party.invitationCancelled", r, s));
  }
} else {
  t.chat.logMsg(m("ui.party.invitationRefused", s));
}
if (a !== t.playerData.characterBaseInformations.id) {
  var r = i.getMemberName(a);
  t.chat.logMsg(m("ui.party.invitationCancelled", r, s));
}
if (t.success) {
  var i = e._getPartyById(t.partyId);
  if (i) {
    var n = i.getChild(e.followedId);
    if (e.followedId && (n ? n.delClassNames("following") : console.error(new Error("Cannot find the previous child " + e.followedId))), e.followedId = t.followedId, e.followedId) {
      var o = i.getChild(e.followedId);
      o ? o.addClassNames("following") : console.error(new Error("Cannot find the new child " + e.followedId));
    }
  }
}
if (i) {
  var n = i.getChild(e.followedId);
  if (e.followedId && (n ? n.delClassNames("following") : console.error(new Error("Cannot find the previous child " + e.followedId))), e.followedId = t.followedId, e.followedId) {
    var o = i.getChild(e.followedId);
    o ? o.addClassNames("following") : console.error(new Error("Cannot find the new child " + e.followedId));
  }
}
if (e.followedId && (n ? n.delClassNames("following") : console.error(new Error("Cannot find the previous child " + e.followedId))), e.followedId = t.followedId, e.followedId) {
  var o = i.getChild(e.followedId);
  o ? o.addClassNames("following") : console.error(new Error("Cannot find the new child " + e.followedId));
}
if (i) {
  var n = i.getChild(t.id).getChild("hpBar").getChild("hp");
  n.setStyle("height", t.lifePoints / t.maxLifePoints * 100 + "%");
}
for (var n = i.getMemberName(e.inviterId), o = [], a = 0; a < e.invalidBuddiesIds.length; a++) {
  o.push(i.getMemberName(e.invalidBuddiesIds[a]));
}
if (e === g.PARTY_TYPE_CLASSICAL) {
  a = m("ui.party.playerInvitation", i);
} else {
  if (e !== g.PARTY_TYPE_ARENA) {
    return console.error("Unknown party type " + e);
  }
  a = m("ui.party.playerInvitationArena", i);
}
if (e !== g.PARTY_TYPE_ARENA) {
  return console.error("Unknown party type " + e);
}
for (var n = 0, o = 0, a = 0, s = 0, r = t.partyBoxes.getChild(t.currentPartyType), l = 0; l < r.getChildCount(); l++) {
  var c = r.getChildren()[l].memberData;
  "?" !== c.level && (n += c.level, o += c.prospecting, a += c.initiative, s++);
}
if (s) {
  a.getChild("leaderTitle").hide(), n.getChild("invitedBy").setText(m("ui.party.invitedBy") + r + "\n" + o.hostName);
} else {
  var l = o.lifePoints + " / " + o.maxLifePoints;
  a.getChild("leaderTitle").toggleDisplay(t), i.getChild("level").setText(m("ui.common.level") + r + o.level), i.getChild("hp").setText(m("ui.short.lifePoints") + r + l), i.getChild("prospecting").setText(m("ui.stats.prospecting") + r + o.prospecting), i.getChild("initiative").setText(m("ui.stats.initiative") + r + o.initiative);
}
for (var n = e.playerData.characters.controlledCharacterId, o = 0; o < t.actors.length; o++) {
  var a = t.actors[o];
  if (a.contextualId === n) {
    var s = i.characterBaseInformations.entityLook,
      l = a.look,
      c = r.differenceBetweenTwoArrays(s.skins, l.skins);
    return c = c || r.differenceBetweenTwoArrays(s.indexedColors, l.indexedColors), void (c && (i.characterBaseInformations.entityLook = a.look, i.emit("lookUpdate", a.look)));
  }
}
if (a.contextualId === n) {
  var s = i.characterBaseInformations.entityLook,
    l = a.look,
    c = r.differenceBetweenTwoArrays(s.skins, l.skins);
  return c = c || r.differenceBetweenTwoArrays(s.indexedColors, l.indexedColors), void (c && (i.characterBaseInformations.entityLook = a.look, i.emit("lookUpdate", a.look)));
}
if (i.equippedMount) {
  var e = i.equippedMount.id;
  i._removeMount(), i.emit("unsetMount", e);
}
if (i.state = t, t === d.STATUS_TOMBSTONE) {
  var n = {
    title: p("ui.login.news"),
    message: p("ui.gameuicore.playerDied") + "\n\n" + p("ui.gameuicore.freeSoul"),
    cb: function (e) {
      e && window.dofus.sendMessage("GameRolePlayFreeSoulRequestMessage");
    }
  };
  h.getWindow("confirm").update(n), h.openDialog(["confirm"]);
} else {
  t === d.STATUS_PHANTOM && window.gui.openSimplePopup(p("ui.gameuicore.soulsWorld"), p("ui.login.news"));
}
for (var t = 0; t < e.levels.length; t++) {
  var n = e.levels[t];
  i.subscriptionLevels[n.level] = n;
}
for (var t = _.ELITE; t >= e; t--) {
  var i = this.subscriptionLevels[t] && this.subscriptionLevels[t].expiration_date > f.now();
  if (i) {
    return !0;
  }
}
if (i) {
  return !0;
}
for (var t in this.subscriptionLevels) {
  e = Math.max(e, this.subscriptionLevels[t].expiration_date);
}
if (!this.subscriptionLevels[e]) {
  return 0;
}
for (var t = f.now(), i = e + 1; i <= _.ELITE; i++) {
  if (this.subscriptionLevels[i]) {
    t = this.subscriptionLevels[i].expiration_date;
    break;
  }
}
if (this.subscriptionLevels[i]) {
  t = this.subscriptionLevels[i].expiration_date;
  break;
}
if (0 === e) {
  return 0;
}
if (!e) {
  return !1;
}
if (void 0 !== H[t]) {
  return H[t];
}
for (var n in i) {
  var o = i[n],
    a = o.lookMale.slice(1, o.lookMale.indexOf("|")),
    s = o.lookFemale.slice(1, o.lookFemale.indexOf("|"));
  if (t === ~~a || t === ~~s) {
    return H[t] = !0, !0;
  }
}
if (t === ~~a || t === ~~s) {
  return H[t] = !0, !0;
}
if (t.shop) {
  return !0;
}
if (isNaN(i) || !i) {
  return !1;
}
if (!this.isOnShieldTutorial()) {
  return !1;
}
for (var e = window.gui.playerData.quests.active[this.shieldTutorialQuestId], t = 0; t < e.objectives.length; t++) {
  if (e.objectives[t].objectiveId === this.shieldTutorialQuestObjective) {
    return !e.objectives[t].objectiveStatus;
  }
}
if (e.objectives[t].objectiveId === this.shieldTutorialQuestObjective) {
  return !e.objectives[t].objectiveStatus;
}
if (e) {
  var t = this;
  o && o.isAvailable() && o.setApplicationUsername(e, function (i) {
    if (i) {
      var n = "purchaseWrapper#setApplicationUsername failure: for token " + e + " and accountId ";
      return n += t.identification.accountId + " with the error " + i, void console.error(n);
    }
  });
}
if (i) {
  var n = "purchaseWrapper#setApplicationUsername failure: for token " + e + " and accountId ";
  return n += t.identification.accountId + " with the error " + i, void console.error(n);
}
if ("levelUp" === e && i % 20 === 0) {
  this._openRatingWindow();
} else if ("fightEnd" === e && t && t.fighters) {
  for (var n = Object.keys(t.fighters), o = 0; o < n.length; o++) {
    if (t.fighters[n[o]].isBoss && i >= 200) {
      this._openRatingWindow();
      break;
    }
  }
} else if ("arenaFightWin" === e && t && t.fighters && i >= 200) {
  for (var a = this.id, s = t.fighters, r = 0; r < s.length; r++) {
    if (a === s[r].id) {
      s[r].outcome && this._openRatingWindow();
      break;
    }
  }
}
if ("fightEnd" === e && t && t.fighters) {
  for (var n = Object.keys(t.fighters), o = 0; o < n.length; o++) {
    if (t.fighters[n[o]].isBoss && i >= 200) {
      this._openRatingWindow();
      break;
    }
  }
} else if ("arenaFightWin" === e && t && t.fighters && i >= 200) {
  for (var a = this.id, s = t.fighters, r = 0; r < s.length; r++) {
    if (a === s[r].id) {
      s[r].outcome && this._openRatingWindow();
      break;
    }
  }
}
for (var n = Object.keys(t.fighters), o = 0; o < n.length; o++) {
  if (t.fighters[n[o]].isBoss && i >= 200) {
    this._openRatingWindow();
    break;
  }
}
if (t.fighters[n[o]].isBoss && i >= 200) {
  this._openRatingWindow();
  break;
}
if ("arenaFightWin" === e && t && t.fighters && i >= 200) {
  for (var a = this.id, s = t.fighters, r = 0; r < s.length; r++) {
    if (a === s[r].id) {
      s[r].outcome && this._openRatingWindow();
      break;
    }
  }
}
for (var a = this.id, s = t.fighters, r = 0; r < s.length; r++) {
  if (a === s[r].id) {
    s[r].outcome && this._openRatingWindow();
    break;
  }
}
if (a === s[r].id) {
  s[r].outcome && this._openRatingWindow();
  break;
}
if (window && window.cordova && window.LaunchReview) {
  var e = v.getValue("rateDofus", null);
  e ? e.numAsked < 4 && !e.isNeverAsk && h.open("ratingWindow") : this.characterBaseInformations.level >= 40 && h.open("ratingWindow");
}
if (!this.current || !this.current.guilds.length) {
  return !1;
}
if (!this.hasAlliance()) {
  return !1;
}
for (var t = 0; t < this.current.guilds.length; t++) {
  if (this.current.guilds[t].guildId === e) {
    return !0;
  }
}
if (this.current.guilds[t].guildId === e) {
  return !0;
}
if (!this.hasAlliance()) {
  return 0;
}
for (var i = t.current.guilds, n = 0, o = i.length; n < o; n += 1) {
  if (i[n].guildId === e.guildId) {
    return i.splice(n, 1), void t.emit("guildLeft", e.guildId);
  }
}
if (i[n].guildId === e.guildId) {
  return i.splice(n, 1), void t.emit("guildLeft", e.guildId);
}
if (e.invitationState === l.SOCIAL_GROUP_INVITATION_CANCELED) {
  return c.close("confirm");
}
if (t.current) {
  for (var i = e.prisms, n = [], o = [], a = t.current.prisms, s = 0, r = i.length; s < r; s += 1) {
    var l = i[s];
    "PrismGeolocalizedInformation" === l._type && "AllianceInsiderPrismInformation" === l.prism._type ? (l.prism.alliance = t.current, a[l.subAreaId] = l, n.push(l)) : a[l.subAreaId] && (delete a[l.subAreaId], o.push(l.subAreaId));
  }
  n.length && t.emit("prismUpdatedList", n), o.length && t.emit("prismDeletedList", o);
}
for (var i = e.prisms, n = [], o = [], a = t.current.prisms, s = 0, r = i.length; s < r; s += 1) {
  var l = i[s];
  "PrismGeolocalizedInformation" === l._type && "AllianceInsiderPrismInformation" === l.prism._type ? (l.prism.alliance = t.current, a[l.subAreaId] = l, n.push(l)) : a[l.subAreaId] && (delete a[l.subAreaId], o.push(l.subAreaId));
}
if (this._isSingleCopy) {
  var o = this._localStore.getValue(a);
  this._entryName !== o && (this._erase(o), this._localStore.setValue(a, this._entryName));
}
for (var t = 0; t < e.length; t++) {
  var i = e[t],
    n = i.objectGID,
    o = i.objectUID,
    a = i.quantity;
  this._countByGid[n] = (this._countByGid[n] || 0) + a, this._countByUid[o] = a, this._gidByUid[o] = n;
}
for (var t = 0; t < e.length; t++) {
  var i,
    n = e[t],
    o = n.objectGID,
    a = n.objectUID,
    s = n.quantity,
    r = this._countByUid[a];
  void 0 === r ? (i = s, this._gidByUid[a] = o) : i = s - r, this._countByGid[o] = (this._countByGid[o] || 0) + i, this._countByUid[a] = s;
}
for (var t = 0; t < e.length; t++) {
  var i = e[t],
    n = this._gidByUid[i];
  n ? (this._countByGid[n] -= this._countByUid[i], 0 === this._countByGid[n] && delete this._countByGid[n], delete this._countByUid[i], delete this._gidByUid[i]) : console.error("Invalid UID: " + i);
}
if (this._needsSave) {
  var e,
    t = Date.now();
  try {
    var i = JSON.stringify(this._valueMap);
    e = i.length, o.setItem(this._keyName, i), this._needsSave = !1, console.info("LocalStore saved " + e + " characters to " + this._keyName + " in " + (Date.now() - t) + "ms");
  } catch (n) {
    console.error("Failed to save LocalStore, size " + e + " into " + this._keyName + ": " + n);
  }
  e > 1e5 && console.error("LocalStore size is " + e + " for " + this._keyName);
  var a = Date.now() - t;
  a > 500 && console.error("LocalStore took " + a + "ms to save");
}
for (var e in this.slaves) {
  this.slaves[e].disconnect();
}
if (e !== this.controlledCharacterId) {
  this.controlledCharacterId = e, window.actorManager.switchUserActor(e), this.emit("switchControlledCharacter");
  var t = this.getControlledCharacter();
  t.characteristics && this.emitCharacteristicsUpdate(t);
}
if (!e) {
  return console.warn("getSpellModifications: the character id is missing for spell: " + t), null;
}
if (!n) {
  return console.warn("getSpellModifications: the character cannot be found for character: " + e + " spell: " + t), null;
}
if (!o) {
  return null;
}
for (var a = 0; a < o.length; a++) {
  var s = o[a];
  if (s.spellId === t && s.modificationType === i) {
    return s;
  }
}
if (s.spellId === t && s.modificationType === i) {
  return s;
}
if (!e) {
  return void console.warn("emitCharacteristicsUpdate: the character does not exist");
}
for (var t in p) {
  void 0 !== e.characteristics[t] ? this.emit("specificCharacteristicsUpdated", t, e.characteristics[t]) : console.error(new Error("emitCharacteristicsUpdate: No characteristic named: " + t));
}
if (!e) {
  return void console.warn("setCharacteristics: the character does not exist");
}
if (!e) {
  return void console.warn("setCharacteristic: the character does not exist");
}
for (var t = n.mainCharacter.spellData, i = {}, o = window.gui.playerData.characterBreed, a = e.spellPrevisualization ? l.VISIBLE : l.UNAVAILABLE, s = 0; s < o.breedSpellsId.length; s++) {
  i[o.breedSpellsId[s]] = {
    spellStatus: a
  };
}
for (s = 0; s < e.spells.length; s++) {
  i[e.spells[s].spellId] = {
    spellStatus: l.USABLE,
    spellLevel: e.spells[s].spellLevel,
    position: e.spells[s].position
  };
}
if (n.mainCharacter.characteristics) {
  var i = n.mainCharacter.characteristics.energyPoints,
    o = t.stats.energyPoints;
  i > o && e.playerData.emit("playerIsDead");
}
if (t === n.mainCharacterId) {
  var i = e.slaveId,
    o = n.slaves[i];
  o || (o = n.slaves[i] = new r(), o.connect(), o.setCharacterId(i));
  for (var a = {}, s = 0; s < e.slaveSpells.length; s++) {
    a[e.slaveSpells[s].spellId] = {
      spellStatus: l.USABLE,
      spellLevel: e.slaveSpells[s].spellLevel,
      position: e.slaveSpells[s].position
    };
  }
  o.spellData.addSpells(a, function () {
    n.emit("spellList");
  }), n.setCharacteristics(o, e.slaveStats), n.switchControlledCharacter(i);
}
for (var a = {}, s = 0; s < e.slaveSpells.length; s++) {
  a[e.slaveSpells[s].spellId] = {
    spellStatus: l.USABLE,
    spellLevel: e.slaveSpells[s].spellLevel,
    position: e.slaveSpells[s].position
  };
}
if (e) {
  return console.error("could not retrieve emotes data", e);
}
for (var n in i) {
  i[n] && (t.list[n] = i[n]);
}
if (e) {
  return console.error("could not retrieve emotes data", e);
}
if (n) {
  var s = window.isoEngine.actorManager,
    l = s.getActor(o).data;
  if ("GameRolePlayCharacterInformations" === l.type) {
    if (t) {
      return this.confirmAttackTarget(e, !0, null);
    }
    var c = "GameRolePlayMutantInformations" === s.userActor.data.type;
    if (l.alignmentInfos.alignmentSide === r.ALIGNMENT_NEUTRAL && !c) {
      return this.confirmAttackTarget(e, !1, 2);
    }
    var d = l.alignmentInfos.characterPower - o,
      u = window.gui.playerData.getLevelDiff(d);
    if (u) {
      return this.confirmAttackTarget(e, !1, u);
    }
  }
}
if ("GameRolePlayCharacterInformations" === l.type) {
  if (t) {
    return this.confirmAttackTarget(e, !0, null);
  }
  var c = "GameRolePlayMutantInformations" === s.userActor.data.type;
  if (l.alignmentInfos.alignmentSide === r.ALIGNMENT_NEUTRAL && !c) {
    return this.confirmAttackTarget(e, !1, 2);
  }
  var d = l.alignmentInfos.characterPower - o,
    u = window.gui.playerData.getLevelDiff(d);
  if (u) {
    return this.confirmAttackTarget(e, !1, u);
  }
}
if (t) {
  return this.confirmAttackTarget(e, !0, null);
}
if (l.alignmentInfos.alignmentSide === r.ALIGNMENT_NEUTRAL && !c) {
  return this.confirmAttackTarget(e, !1, 2);
}
if (u) {
  return this.confirmAttackTarget(e, !1, u);
}
if (!i || !n) {
  return console.error("Could not find aggressed actors.");
}
if (this.hasGuild()) {
  return this.current.members[e];
}
if (e.isConnected) {
  var n = t.current;
  n.level = i.level, n.creationDate = i.creationDate, n.abandonnedPaddock = i.abandonnedPaddock, n.experience = i.experience, n.expNextLevelFloor = i.expNextLevelFloor, n.experiencePercentage = (i.experience - i.expLevelFloor) / (i.expNextLevelFloor - i.expLevelFloor), t.emit("GuildGeneralInformationUpdate");
}
if (e.isConnected) {
  for (var n = t.current, o = 0, a = {}, s = i.members.length, r = 0, l = 0; l < s; l++) {
    var c = i.members[l];
    r += c.level, c.rank === w && (n.leaderId = c.id), c.connected && (o += 1), a[c.id] = c;
  }
  n.members = a, n.averageMemberLevel = Math.floor(r / s), n.nbMembers = s, n.nbConnectedMembers = o, t.emit("guildMemberCountUpdate"), t.emit("guildMember", n.getMembersByRank());
}
for (var n = t.current, o = 0, a = {}, s = i.members.length, r = 0, l = 0; l < s; l++) {
  var c = i.members[l];
  r += c.level, c.rank === w && (n.leaderId = c.id), c.connected && (o += 1), a[c.id] = c;
}
for (var s in n) {
  var r = n[s];
  r.connected && (o += 1), a += 1;
}
if (t.current) {
  var i = t.current.members[e.playerId];
  i && (i.status = e.status, t.emit("guildMemberStatusUpdate", i));
}
if (e.invitationState === p.SOCIAL_GROUP_INVITATION_CANCELED) {
  return f.close("confirm");
}
if (t.current && t.current.paddocks) {
  var i = e.paddockId;
  u.removeObjectInArrayById(t.current.paddocks, "paddockId", i) && t.emit("guildPaddockRemoved", i);
}
if (t.current && t.current.houses) {
  var i = e.houseId;
  u.removeObjectInArrayById(t.current.houses, "houseId", i) && t.emit("guildHouseRemoved", i);
}
if (e.resultCode === _.MOOD_OK) {
  var i = t.current && t.current.members[window.gui.playerData.id];
  i && (i.moodSmileyId = e.smileyId, t.emit("guildMember", t.current.getMembersByRank()));
}
for (var i in e._requestedSocialInfoMap) {
  e._requestedSocialInfoMap.hasOwnProperty(i) && (t.push(i), e._awaitedSocialInfoMap[i] = e._awaitedSocialInfoMap[i] || e._requestedSocialInfoMap[i]);
}
for (var i = 0; i < e.length; i++) {
  var n = e[i],
    a = t[i],
    s = this._awaitedSocialInfoMap[n];
  if (delete this._awaitedSocialInfoMap[n], (void 0 === s || s) && n === m.SOCIAL_INFO_GUILD_MOTD && a.value) {
    var r = v.decode(a.value, b);
    r = u.encodeSpecialChars(r);
    var l = d("tablet.social.motd") + d("ui.common.colon") + r;
    window.gui.chat.logMsg(l, o.CHANNEL_GUILD);
  }
  this.emit("socialInfoUpdated", n, a);
}
if (delete this._awaitedSocialInfoMap[n], (void 0 === s || s) && n === m.SOCIAL_INFO_GUILD_MOTD && a.value) {
  var r = v.decode(a.value, b);
  r = u.encodeSpecialChars(r);
  var l = d("tablet.social.motd") + d("ui.common.colon") + r;
  window.gui.chat.logMsg(l, o.CHANNEL_GUILD);
}
for (var i in t) {
  var n = t[i],
    o = n.objectGID;
  e[o] = (e[o] || 0) + n.quantity;
}
for (var i = 0, n = e.length; i < n; i += 1) {
  var o = e[i];
  M.objects[o.objectUID] = o, o.position !== u.notEquipped && (M.equippedItems[o.position] = o, o.position === u.weapon && M.emit("weaponChanged"));
}
for (var t = 0; t < e.length; t++) {
  if (e[t].objectGID === y) {
    return !0;
  }
}
if (e[t].objectGID === y) {
  return !0;
}
if (t) {
  return console.error(t);
}
if (!e.presets) {
  return o();
}
for (var i = [], n = 0; n < e.presets.length; n += 1) {
  var a = e.presets[n];
  M.presets[a.presetId] = a;
  for (var s = 0; s < a.objects.length; s += 1) {
    var r = a.objects[s].objGid;
    c.items[r] || i.push(r);
  }
}
for (var s = 0; s < a.objects.length; s += 1) {
  var r = a.objects[s].objGid;
  c.items[r] || i.push(r);
}
if (!n) {
  return t.retry(new Error("Preset is missing for presetId " + i.presetId)) ? void console.warn("Preset is missing for presetId " + i.presetId + " will retry...") : void console.error(t.mainError());
}
for (var o = 0; o < n.objects.length; o += 1) {
  if (n.objects[o].position === i.presetItem.position) {
    n.objects[o] = i.presetItem;
    break;
  }
}
if (n.objects[o].position === i.presetItem.position) {
  n.objects[o] = i.presetItem;
  break;
}
if (t) {
  return console.error(t);
}
if (t) {
  t.position !== u.weapon && e.position !== u.weapon || (i = !0);
  var n = t.position;
  t.position = e.position, M.equippedItems[n] && delete M.equippedItems[n], e.position !== u.notEquipped && (M.equippedItems[e.position] = t), t.isInitialised && (i && M.emit("weaponChanged"), t.emit("moved"), M.emit("itemMoved", t, n, e.position));
}
for (var i = {}, n = {}, o = 0, a = e.objectsUIDAndQty.length; o < a; o += 1) {
  var s = e.objectsUIDAndQty[o],
    r = s.objectUID,
    l = s.quantity,
    c = M.objects[r],
    d = c.quantity;
  c.quantity = l, c.isInitialised && (i[r] = l, n[r] = d);
}
for (var t = {}, i = 0, n = e.objectUID.length; i < n; i += 1) {
  var o = e.objectUID[i];
  t[o] = b(o);
}
if (i && i.position === u.notEquipped) {
  var n = i.item,
    o = n.type;
  if (o.category === c.categories.equipment) {
    if (n.typeId === v) {
      return this._equip(t, i, o);
    }
    var a = o.possiblePositions;
    if (a.length) {
      if (t && a.indexOf(t) !== -1) {
        return this._equip(t, i, o);
      }
      var s,
        r,
        l,
        d,
        h = this.equippedItems;
      if (9 !== o.id || i.belongsToSet) {
        for (s = 0, r = a.length; s < r; s += 1) {
          if (l = a[s], d = h[l], d && d.objectGID === i.objectGID) {
            return this._equip(l, i, o);
          }
        }
      }
      for (s = 0, r = a.length; s < r; s += 1) {
        if (l = a[s], !h[l]) {
          return this._equip(l, i, o);
        }
      }
      var p = this._lastUpdatedPosition[o.superTypeId] || 0,
        m = p < a.length - 1 ? p + 1 : 0;
      this._equip(a[m], i, o);
    }
  }
}
if (o.category === c.categories.equipment) {
  if (n.typeId === v) {
    return this._equip(t, i, o);
  }
  var a = o.possiblePositions;
  if (a.length) {
    if (t && a.indexOf(t) !== -1) {
      return this._equip(t, i, o);
    }
    var s,
      r,
      l,
      d,
      h = this.equippedItems;
    if (9 !== o.id || i.belongsToSet) {
      for (s = 0, r = a.length; s < r; s += 1) {
        if (l = a[s], d = h[l], d && d.objectGID === i.objectGID) {
          return this._equip(l, i, o);
        }
      }
    }
    for (s = 0, r = a.length; s < r; s += 1) {
      if (l = a[s], !h[l]) {
        return this._equip(l, i, o);
      }
    }
    var p = this._lastUpdatedPosition[o.superTypeId] || 0,
      m = p < a.length - 1 ? p + 1 : 0;
    this._equip(a[m], i, o);
  }
}
if (n.typeId === v) {
  return this._equip(t, i, o);
}
if (a.length) {
  if (t && a.indexOf(t) !== -1) {
    return this._equip(t, i, o);
  }
  var s,
    r,
    l,
    d,
    h = this.equippedItems;
  if (9 !== o.id || i.belongsToSet) {
    for (s = 0, r = a.length; s < r; s += 1) {
      if (l = a[s], d = h[l], d && d.objectGID === i.objectGID) {
        return this._equip(l, i, o);
      }
    }
  }
  for (s = 0, r = a.length; s < r; s += 1) {
    if (l = a[s], !h[l]) {
      return this._equip(l, i, o);
    }
  }
  var p = this._lastUpdatedPosition[o.superTypeId] || 0,
    m = p < a.length - 1 ? p + 1 : 0;
  this._equip(a[m], i, o);
}
if (t && a.indexOf(t) !== -1) {
  return this._equip(t, i, o);
}
if (9 !== o.id || i.belongsToSet) {
  for (s = 0, r = a.length; s < r; s += 1) {
    if (l = a[s], d = h[l], d && d.objectGID === i.objectGID) {
      return this._equip(l, i, o);
    }
  }
}
for (s = 0, r = a.length; s < r; s += 1) {
  if (l = a[s], d = h[l], d && d.objectGID === i.objectGID) {
    return this._equip(l, i, o);
  }
}
if (l = a[s], d = h[l], d && d.objectGID === i.objectGID) {
  return this._equip(l, i, o);
}
for (s = 0, r = a.length; s < r; s += 1) {
  if (l = a[s], !h[l]) {
    return this._equip(l, i, o);
  }
}
if (l = a[s], !h[l]) {
  return this._equip(l, i, o);
}
for (var n in i) {
  if (t = i[n], t.objectGID === e) {
    return t;
  }
}
if (t = i[n], t.objectGID === e) {
  return t;
}
for (var n in t) {
  var o = t[n];
  o.objectGID === e && (i += o.quantity);
}
for (var i in t) {
  var n = t[i];
  if (n.objectGID === e && n.position !== u.notEquipped) {
    return !0;
  }
}
if (n.objectGID === e && n.position !== u.notEquipped) {
  return !0;
}
if (t) {
  return i(t);
}
for (var a in n) {
  o[a] = n[a];
}
if (i) {
  return t(i);
}
for (var n = {}, a = 0, s = e.length; a < s; a += 1) {
  var r = h[e[a]];
  if (r && r.craftableItemIds) {
    for (var l = 0, c = r.craftableItemIds.length; l < c; l += 1) {
      var d = r.craftableItemIds[l];
      p[d] || (n[d] = !0);
    }
  }
}
if (r && r.craftableItemIds) {
  for (var l = 0, c = r.craftableItemIds.length; l < c; l += 1) {
    var d = r.craftableItemIds[l];
    p[d] || (n[d] = !0);
  }
}
for (var l = 0, c = r.craftableItemIds.length; l < c; l += 1) {
  var d = r.craftableItemIds[l];
  p[d] || (n[d] = !0);
}
if (i) {
  return t(i);
}
for (var n = 0, o = e.length; n < o; n += 1) {
  var a = h[e[n]];
  if (a && a.craftableItemIds) {
    a.recipes = [];
    for (var s = 0, r = a.craftableItemIds.length; s < r; s += 1) {
      var l = a.craftableItemIds[s];
      p[l] && a.recipes.push(p[l]);
    }
  }
}
if (a && a.craftableItemIds) {
  a.recipes = [];
  for (var s = 0, r = a.craftableItemIds.length; s < r; s += 1) {
    var l = a.craftableItemIds[s];
    p[l] && a.recipes.push(p[l]);
  }
}
for (var s = 0, r = a.craftableItemIds.length; s < r; s += 1) {
  var l = a.craftableItemIds[s];
  p[l] && a.recipes.push(p[l]);
}
if (e) {
  return console.error("Failed to get the name of the job npcs", e);
}
for (var i in t) {
  x[i] = t[i].nameId;
}
for (var n = {}, s = {}, r = 0, l = e.length; r < l; r += 1) {
  var c = e[r],
    d = c.jobId,
    p = t[d];
  p || (p = t[d] = {
    id: d
  }), p.description = c, u[d] || (n[d] = !0);
  for (var m = 0, f = c.skills.length; m < f; m += 1) {
    var g = c.skills[m].skillId;
    h[g] || (s[g] = !0);
  }
}
for (var m = 0, f = c.skills.length; m < f; m += 1) {
  var g = c.skills[m].skillId;
  h[g] || (s[g] = !0);
}
if (e) {
  return i(e);
}
for (var n in t) {
  var o = t[n];
  o.info = u[o.id];
  for (var a = 0, s = o.description.skills.length; a < s; a += 1) {
    var r = o.description.skills[a];
    r.info = h[r.skillId];
  }
}
for (var a = 0, s = o.description.skills.length; a < s; a += 1) {
  var r = o.description.skills[a];
  r.info = h[r.skillId];
}
if (!this.isListeningForCraft) {
  this.isListeningForCraft = !0, this._objectAddedHandler || (this._objectAddedHandler = this._onCraftObjectAddedMessage.bind(this), this._objectModifiedHandler = this._onCraftObjectModifiedMessage.bind(this), this._objectRemovedHandler = this._onCraftObjectRemovedMessage.bind(this));
  var e = window.dofus.connectionManager;
  e.on("ExchangeObjectAddedMessage", this._objectAddedHandler), e.on("ExchangeObjectModifiedMessage", this._objectModifiedHandler), e.on("ExchangeObjectRemovedMessage", this._objectRemovedHandler);
}
if (this.isListeningForCraft) {
  this.isListeningForCraft = !1;
  var e = window.dofus.connectionManager;
  e.removeListener("ExchangeObjectAddedMessage", this._objectAddedHandler), e.removeListener("ExchangeObjectModifiedMessage", this._objectModifiedHandler), e.removeListener("ExchangeObjectRemovedMessage", this._objectRemovedHandler);
}
if (!n) {
  return console.error("craftObjectRemoved of unknown object " + i);
}
for (var e in this._onCraftTable) {
  var t = this._onCraftTable[e];
  if (t.GID === T) {
    return e;
  }
}
if (t.GID === T) {
  return e;
}
for (var e in this._onCraftTable) {
  var t = this._onCraftTable[e],
    i = y.items[t.GID].typeId;
  if (i === I || i === A) {
    return e;
  }
}
if (i === I || i === A) {
  return e;
}
for (var e in this._onCraftTable) {
  var t = this._onCraftTable[e];
  if (t.GID !== T) {
    var i = y.items[t.GID].typeId;
    if (i !== I && i !== A) {
      return e;
    }
  }
}
if (t.GID !== T) {
  var i = y.items[t.GID].typeId;
  if (i !== I && i !== A) {
    return e;
  }
}
if (i !== I && i !== A) {
  return e;
}
if (this.isMagicCraft) {
  switch (this.craftSide) {
    case "SOLO":
      switch (e) {
        case "craftInventory":
          return ["crafting"];
        case "crafting":
          return ["craftInventory"];
        default:
          return [];
      }
    case "CLIENT":
      if (this.isCrafterWorking) {
        return [];
      }
      switch (e) {
        case "craftInventory":
          return ["ingredientsBag", "craftPayment"];
        case "ingredientsBag":
          return ["craftInventory"];
        case "craftPayment":
          return ["craftInventory"];
        default:
          return [];
      }
    case "CRAFTER":
      if (!this.isCrafterWorking) {
        return [];
      }
      switch (e) {
        case "craftInventory":
          return this.canUseCrafterIngredient || t.objectGID === T ? ["crafting"] : [];
        case "crafting":
          return c(t) ? ["craftInventory"] : ["ingredientsBag"];
        case "ingredientsBag":
          return ["crafting"];
        default:
          return [];
      }
    default:
      return [];
  }
} else {
  switch (this.craftSide) {
    case "SOLO":
      switch (e) {
        case "craftInventory":
          return ["crafting"];
        case "crafting":
          return ["craftInventory"];
        default:
          return [];
      }
    case "CRAFTER":
      switch (e) {
        case "craftInventory":
          return ["crafting"];
        case "crafting":
          return ["craftInventory"];
        default:
          return [];
      }
    case "CLIENT":
      switch (e) {
        case "craftInventory":
          return ["crafting", "craftPayment"];
        case "crafting":
          return ["craftInventory"];
        case "craftPayment":
          return ["craftInventory"];
        default:
          return [];
      }
    default:
      return [];
  }
}
if (this.isCrafterWorking) {
  return [];
}
if (!this.isCrafterWorking) {
  return [];
}
if (this.isCombining) {
  return {
    targets: [],
    movedQty: 0,
    proposedQty: 0
  };
}
if (0 === n.length) {
  return {
    targets: [],
    movedQty: 0,
    proposedQty: 0
  };
}
if (o = n.indexOf(a) !== -1 ? this.howManyCanBeAddedToCraft(e, t, i) : t.quantity, 0 === o) {
  return {
    targets: [],
    movedQty: 0,
    proposedQty: 0
  };
}
if (this.isCombining) {
  return 0;
}
if (i < 1) {
  return 0;
}
if (t.objectGID === T) {
  return !this._getSignatureRuneOnTable() && "CLIENT" !== this.craftSide && this.canCrafterSign ? 1 : 0;
}
if (this.isMagicCraft) {
  if ("CLIENT" === this.craftSide && this.isCrafterWorking) {
    return 0;
  }
  if ("CRAFTER" === this.craftSide && !this.isCrafterWorking) {
    return 0;
  }
  var n = "CRAFTER" === this.craftSide && "craftInventory" === e;
  return this._isMagicRuneOrPotion(t) ? n && !this.canUseCrafterIngredient ? 0 : i : this.isCraftableItem(t) ? n ? 0 : this._onCraftTable[t.objectUID] ? 0 : 1 : 0;
}
if ("CLIENT" === this.craftSide && this.isCrafterWorking) {
  return 0;
}
if ("CRAFTER" === this.craftSide && !this.isCrafterWorking) {
  return 0;
}
if (!(i >= 1)) {
  return console.error("moveItemToCraft quantity: " + i);
}
if (this.isMagicCraft) {
  var n = this._getReplacedItemOnMagicTable(t);
  n && this.removeItemFromCraft(n, this._onCraftTable[n].quantity);
}
if (i) {
  return t(i);
}
for (var n = 0; n < e.jobsDescription.length; n++) {
  o.jobOriginalOrder.push(e.jobsDescription[n].jobId);
}
for (var n = 0, a = e.experiencesUpdate.length; n < a; n += 1) {
  i(e.experiencesUpdate[n]);
  var s = e.experiencesUpdate[n].jobId;
  o.emit("jobExperienceUpdate", o.getJobExperience(s));
}
if (i) {
  return t(i);
}
for (var e = {}, t = Object.keys(this.list), i = 0; i < t.length; i++) {
  for (var n = this.list[t[i]], o = n.description.skills, a = 0; a < o.length; a++) {
    e[o[a].skillId] = o[a].info;
  }
}
for (var n = this.list[t[i]], o = n.description.skills, a = 0; a < o.length; a++) {
  e[o[a].skillId] = o[a].info;
}
for (var i = this._getRecipeByNbIngredient(e, 1, t), n = {}, o = 0, a = i.length; o < a; o += 1) {
  for (var s = i[o].ingredientIds, r = 0, l = s.length; r < l; r += 1) {
    var c = s[r];
    n[c] = !0;
  }
}
for (var s = i[o].ingredientIds, r = 0, l = s.length; r < l; r += 1) {
  var c = s[r];
  n[c] = !0;
}
for (var n = this.getRecipesBySkill(e), o = [], a = 0, s = n.length; a < s; a += 1) {
  var r = n[a],
    l = r.ingredientIds.length;
  l >= t && l <= i && o.push(r);
}
for (var t in i._onCraftTable) {
  var n = i._onCraftTable[t],
    o = n.GID,
    a = n.quantity;
  o !== T && (e[o] || (e[o] = 0), e[o] += a);
}
for (var i = this, n = [], o = t(), a = Object.keys(o).length, s = this._getRecipeByNbIngredient(e, a), r = 0, l = s.length; r < l; r += 1) {
  var c = s[r],
    d = !0;
  for (var u in o) {
    for (var h = parseInt(u, 10), p = o[h], m = !1, f = 0, g = c.ingredientIds.length; f < g; f += 1) {
      var _ = c.ingredientIds[f],
        v = c.quantities[f];
      if (h === _ && p === v) {
        m = !0;
        break;
      }
    }
    if (!m) {
      d = !1;
      break;
    }
  }
  d && n.push(c);
}
for (var u in o) {
  for (var h = parseInt(u, 10), p = o[h], m = !1, f = 0, g = c.ingredientIds.length; f < g; f += 1) {
    var _ = c.ingredientIds[f],
      v = c.quantities[f];
    if (h === _ && p === v) {
      m = !0;
      break;
    }
  }
  if (!m) {
    d = !1;
    break;
  }
}
for (var h = parseInt(u, 10), p = o[h], m = !1, f = 0, g = c.ingredientIds.length; f < g; f += 1) {
  var _ = c.ingredientIds[f],
    v = c.quantities[f];
  if (h === _ && p === v) {
    m = !0;
    break;
  }
}
if (h === _ && p === v) {
  m = !0;
  break;
}
if (!m) {
  d = !1;
  break;
}
if (!e.enabled) {
  return void delete this._playersMultiCraftSkillById[i];
}
for (var s = [], r = 0, l = n.length; r < l; r += 1) {
  var c = n[r];
  h[c] || s.push(c);
}
if (e) {
  return console.error("JobData: Cannot get missing skills for ids", s, e);
}
for (var o = 0, r = n.length; o < r; o += 1) {
  var l = n[o],
    c = h[l];
  c ? a[l] = c : console.warn("JobsData: No data for skillId", l);
}
if (!t) {
  return 0;
}
for (var n = t.description.skills, o = 0, a = n.length; o < a; o += 1) {
  var s = n[o].maxSlots;
  s && s > i && (i = s);
}
if (!t) {
  return i;
}
if (!n) {
  return i;
}
for (var a in t) {
  for (var s = t[a], r = s.enabledSkills, l = s.disabledSkills, c = r.concat(l), d = 0, u = c.length; d < u; d += 1) {
    var h = c[d].skillId;
    n[h] && !o[h] && (i.push(n[h]), o[h] = !0);
  }
}
for (var s = t[a], r = s.enabledSkills, l = s.disabledSkills, c = r.concat(l), d = 0, u = c.length; d < u; d += 1) {
  var h = c[d].skillId;
  n[h] && !o[h] && (i.push(n[h]), o[h] = !0);
}
if (!t) {
  return null;
}
for (var n = 0; n < e.rewardableAchievements.length; n++) {
  t.finishedAchievementsIds.push(e.rewardableAchievements[n].id), t.rewardableAchievements[e.rewardableAchievements[n].id] = e.rewardableAchievements[n];
}
for (var o = 0; o < e.accountAchievements.length; o++) {
  e.accountAchievements[o].isFirstForAccount || t.accountAchievementsIds.push(e.accountAchievements[o].id);
}
if (t.categories[o]) {
  t.categoriesTotalCurrentAchievementCount[o]++, t.categoriesCurrentAchievementCount[o]++, t.categoriesPercentage[o] = t.categoriesCurrentAchievementCount[o] / t.categoriesAchievementCount[o];
} else {
  for (var a in t.categoriesTotal) {
    if (t.categoriesTotal.hasOwnProperty(a) && t.categoriesTotal[a].indexOf(o) !== -1) {
      n = a;
      break;
    }
  }
  n && (t.categoriesTotalCurrentAchievementCount[n]++, t.subCategoriesCurentAchievementCount[o]++, t.subCategoriesPercentage[o] = t.subCategoriesCurentAchievementCount[o] / t.subCategoriesAchievementCount[o]);
}
for (var a in t.categoriesTotal) {
  if (t.categoriesTotal.hasOwnProperty(a) && t.categoriesTotal[a].indexOf(o) !== -1) {
    n = a;
    break;
  }
}
if (t.categoriesTotal.hasOwnProperty(a) && t.categoriesTotal[a].indexOf(o) !== -1) {
  n = a;
  break;
}
if (!e) {
  return 0;
}
if (!e) {
  return 0;
}
if (o.isCompleted) {
  return o;
}
for (var s in a) {
  if (a.hasOwnProperty(s)) {
    var r = a[s];
    if (r.id === e) {
      o.isCompleted = !0, o.finishedlevel = r.finishedlevel;
      break;
    }
  }
}
if (a.hasOwnProperty(s)) {
  var r = a[s];
  if (r.id === e) {
    o.isCompleted = !0, o.finishedlevel = r.finishedlevel;
    break;
  }
}
if (r.id === e) {
  o.isCompleted = !0, o.finishedlevel = r.finishedlevel;
  break;
}
if (e <= 0) {
  return 0;
}
if (t > e) {
  var i = Math.min(t, Math.floor(e * a)),
    o = Math.floor(s * n(e)),
    l = Math.floor(r * n(i));
  return o + l;
}
for (var u = 0; u < d; u++) {
  l[u] = i(u + 1);
}
if (n) {
  return console.error("MapPositions missing or error", t.mapId, n);
}
if (t) {
  return console.warn("SubAreas error", t);
}
if (t) {
  if (t.displayedName = t.ownerName, "?" !== t.ownerName && "" !== t.ownerName) {
    var i = new l(c, t.ownerName);
    t.displayedName = i.getForDisplay();
  }
  var n = window.gui.playerData;
  o.isInMyHouse = t.ownerId === n.identification.accountId, o.emit("myHouseNotification", {
    isInMyHouse: o.isInMyHouse,
    msg: e
  });
} else {
  !t && o.isInMyHouse && (o.isInMyHouse = !1, o.emit("myHouseNotification", {
    isInMyHouse: o.isInMyHouse
  }));
}
if (t.displayedName = t.ownerName, "?" !== t.ownerName && "" !== t.ownerName) {
  var i = new l(c, t.ownerName);
  t.displayedName = i.getForDisplay();
}
if (t) {
  if (t._displayedName = t.ownerName, "?" !== t.ownerName && "" !== t.ownerName) {
    var i = new l(c, t.ownerName);
    t._displayedName = i.getForDisplay();
  }
  var n = t.houseId;
  o.currentMapHouses[n] = t;
}
if (t._displayedName = t.ownerName, "?" !== t.ownerName && "" !== t.ownerName) {
  var i = new l(c, t.ownerName);
  t._displayedName = i.getForDisplay();
}
for (var e in this._partyFromId) {
  this._archiveParty(this._partyFromId[e]);
}
for (var e in this._pastMembers) {
  var t = this._pastMembers[e];
  Date.now() - t._timeWhenLeft > _ && delete this._pastMembers[e];
}
for (var t in this._members) {
  this._members.hasOwnProperty(t) && (e += this._members[t].level);
}
for (var r = 0; r < i.length; r += 1) {
  var l = i[r];
  s._addMember(l.id, l.name, l.level);
}
for (r = 0; r < n.length; r++) {
  s._addGuest(n[r]);
}
for (var t in this._partyFromId) {
  var i = this._partyFromId[t];
  if (i._partyType === e) {
    return i;
  }
}
if (i._partyType === e) {
  return i;
}
if (e === t.id) {
  return t.characterBaseInformations.name;
}
for (var i in this._partyFromId) {
  var n = this._partyFromId[i],
    o = n._members[e];
  if (o) {
    return o.name;
  }
}
if (o) {
  return o.name;
}
if (!i) {
  return "?";
}
for (var i = 0; i < e.guests.length; i++) {
  t._enrichGuestInfo(e.guests[i]);
}
if (!n) {
  var o,
    a = i.fightMap.mapId;
  switch (i.reason) {
    case p.FIGHT_REASON_MONSTER_ATTACK:
      o = r("ui.party.memberStartFight.monsterAttack", i.memberName, i.memberId, a);
      break;
    case p.FIGHT_REASON_PLAYER_ATTACK:
      o = r("ui.party.memberStartFight.playerAttack", i.memberName, i.memberId, a);
      break;
    case p.FIGHT_REASON_MEMBER_ATTACKED_PLAYERS:
      o = r("ui.party.memberStartFight.attackPlayer", i.memberName, i.memberId, a);
      break;
    default:
      o = r("ui.party.memberStartFight.unknownReason", i.memberName, i.memberId, a);
  }
  e.chat.logMsg(o);
  var s = i.secondsBeforeFightStart;
  if (t._addFightInfo(a, i.fightId, i.memberId, i.memberName, s), e.playerData.position.mapId === a) {
    var l = i.memberId;
    e.party.showPartyFightQuestion(i.fightId, l, i.memberId, i.memberName, s);
  }
}
if (t._addFightInfo(a, i.fightId, i.memberId, i.memberName, s), e.playerData.position.mapId === a) {
  var l = i.memberId;
  e.party.showPartyFightQuestion(i.fightId, l, i.memberId, i.memberName, s);
}
if (n) {
  for (var o = i.fights, a = 0; a < o.length; a++) {
    var s = n[o[a].fightId];
    if (s) {
      var r = s.memberId;
      e.party.showPartyFightQuestion(s.fightId, r, s.memberId, s.memberName, s.startTime - Date.now());
    }
  }
}
for (var o = i.fights, a = 0; a < o.length; a++) {
  var s = n[o[a].fightId];
  if (s) {
    var r = s.memberId;
    e.party.showPartyFightQuestion(s.fightId, r, s.memberId, s.memberName, s.startTime - Date.now());
  }
}
if (s) {
  var r = s.memberId;
  e.party.showPartyFightQuestion(s.fightId, r, s.memberId, s.memberName, s.startTime - Date.now());
}
for (var e in this._partyFights) {
  var t = this._partyFights[e];
  for (var i in t) {
    window.gui.party.removePartyFightQuestion(i);
  }
}
for (var i in t) {
  window.gui.party.removePartyFightQuestion(i);
}
for (var i in this._pastParties) {
  e = this._pastParties[i], t[e._partyType] = Math.max(t[e._partyType] || 0, e._timeWhenDisconnected), Date.now() - e._timeWhenDisconnected > _ && delete this._pastParties[i];
}
for (i in this._pastParties) {
  e = this._pastParties[i], e._timeWhenDisconnected < t[e._partyType] && delete this._pastParties[i];
}
for (var i in this._partyFromId) {
  t[i] = this._partyFromId[i];
}
for (i in this._pastParties) {
  t[i] = this._pastParties[i];
}
for (var t in e) {
  var i = o.unserializeFrom(e[t]);
  this._pastParties[t] = i, i._timeWhenDisconnected || (i._timeWhenDisconnected = Date.now());
}
for (var t in this._pastParties) {
  var i = this._pastParties[t];
  if (!i._inviterName && e === i._myCharacterId) {
    var n = [];
    for (var o in i._members) {
      n.push(i._members[o].name);
    }
    i._purgeExpiredPastMembers();
    for (o in i._pastMembers) {
      n.push(i._pastMembers[o].name);
    }
    if (n.length) {
      var a = i._members[i._leaderId] || i._pastMembers[i._leaderId];
      a && (n.splice(n.indexOf(a.name), 1), n.unshift(a.name)), this._findOnlineInviter(i, n);
    }
  }
}
if (!i._inviterName && e === i._myCharacterId) {
  var n = [];
  for (var o in i._members) {
    n.push(i._members[o].name);
  }
  i._purgeExpiredPastMembers();
  for (o in i._pastMembers) {
    n.push(i._pastMembers[o].name);
  }
  if (n.length) {
    var a = i._members[i._leaderId] || i._pastMembers[i._leaderId];
    a && (n.splice(n.indexOf(a.name), 1), n.unshift(a.name)), this._findOnlineInviter(i, n);
  }
}
for (var o in i._members) {
  n.push(i._members[o].name);
}
for (o in i._pastMembers) {
  n.push(i._pastMembers[o].name);
}
if (n.length) {
  var a = i._members[i._leaderId] || i._pastMembers[i._leaderId];
  a && (n.splice(n.indexOf(a.name), 1), n.unshift(a.name)), this._findOnlineInviter(i, n);
}
if (o) {
  if (n = o._partyType, o._purgeExpiredPastMembers(), i = o._pastMembers[t], !i) {
    return;
  }
  if (0 === o.getFreeSlotCount()) {
    return;
  }
} else {
  var a = this._pastParties[e];
  if (!a) {
    return;
  }
  if (a._purgeExpiredPastMembers(), i = a._members[t] || a._pastMembers[t], !i) {
    return;
  }
  if (n = a._partyType, this._getPartyFromType(n)) {
    return;
  }
}
if (n = o._partyType, o._purgeExpiredPastMembers(), i = o._pastMembers[t], !i) {
  return;
}
if (0 === o.getFreeSlotCount()) {
  return;
}
if (!a) {
  return;
}
if (a._purgeExpiredPastMembers(), i = a._members[t] || a._pastMembers[t], !i) {
  return;
}
if (n = a._partyType, this._getPartyFromType(n)) {
  return;
}
if (!n) {
  var o = !1;
  for (var a in this._pastParties) {
    var s = this._pastParties[a];
    if (s._partyType === e && s._inviterName === i) {
      o = !0;
      break;
    }
  }
  if (!o) {
    return !1;
  }
}
for (var a in this._pastParties) {
  var s = this._pastParties[a];
  if (s._partyType === e && s._inviterName === i) {
    o = !0;
    break;
  }
}
if (s._partyType === e && s._inviterName === i) {
  o = !0;
  break;
}
if (!o) {
  return !1;
}
for (var o in t.dbRewards) {
  if (t.dbRewards.hasOwnProperty(o)) {
    var a = t.dbRewards[o];
    if (a.stepId === i || i === -1) {
      var s = a.itemsReward,
        r = a.levelMax,
        c = a.levelMin;
      if (r > -1 && c > -1 && (r < n || c > n)) {
        continue;
      }
      for (var d in s) {
        if (s.hasOwnProperty(d)) {
          var u = s[d];
          e.logMsg(l("ui.common.newItem", u[1], u[0]));
        }
      }
    }
  }
}
if (t.dbRewards.hasOwnProperty(o)) {
  var a = t.dbRewards[o];
  if (a.stepId === i || i === -1) {
    var s = a.itemsReward,
      r = a.levelMax,
      c = a.levelMin;
    if (r > -1 && c > -1 && (r < n || c > n)) {
      continue;
    }
    for (var d in s) {
      if (s.hasOwnProperty(d)) {
        var u = s[d];
        e.logMsg(l("ui.common.newItem", u[1], u[0]));
      }
    }
  }
}
if (a.stepId === i || i === -1) {
  var s = a.itemsReward,
    r = a.levelMax,
    c = a.levelMin;
  if (r > -1 && c > -1 && (r < n || c > n)) {
    continue;
  }
  for (var d in s) {
    if (s.hasOwnProperty(d)) {
      var u = s[d];
      e.logMsg(l("ui.common.newItem", u[1], u[0]));
    }
  }
}
if (r > -1 && c > -1 && (r < n || c > n)) {
  continue;
}
for (var d in s) {
  if (s.hasOwnProperty(d)) {
    var u = s[d];
    e.logMsg(l("ui.common.newItem", u[1], u[0]));
  }
}
if (s.hasOwnProperty(d)) {
  var u = s[d];
  e.logMsg(l("ui.common.newItem", u[1], u[0]));
}
for (var i = Object.getOwnPropertyNames(this.active), n = 0; n < i.length; n++) {
  var o = this.active[i[n]];
  if (o.objectives.find(t)) {
    return o.questId;
  }
}
if (o.objectives.find(t)) {
  return o.questId;
}
for (var i = Object.getOwnPropertyNames(this.dailyQuests.active), n = 0; n < i.length; n++) {
  var o = this.dailyQuests.active[i[n]];
  if (o.objectives.find(t)) {
    return o.questId;
  }
}
if (o.objectives.find(t)) {
  return o.questId;
}
if (!this.dailyQuests.active[e] && !this.active[e]) {
  return "";
}
for (var i = this.dailyQuests.active[e] ? this.dailyQuests.active[e] : this.active[e], n = 0; n < i.objectives.length; n++) {
  if (i.objectives[n].objectiveId === t) {
    return !i.objectives[n].maxCompletion || i.objectives[n].maxCompletion < 2 ? "" : " (" + i.objectives[n].curCompletion + "/" + i.objectives[n].maxCompletion + ")";
  }
}
if (i.objectives[n].objectiveId === t) {
  return !i.objectives[n].maxCompletion || i.objectives[n].maxCompletion < 2 ? "" : " (" + i.objectives[n].curCompletion + "/" + i.objectives[n].maxCompletion + ")";
}
for (var n in t.startableQuestsIds) {
  t.startableQuestsIds.hasOwnProperty(n) && (e.startable[t.startableQuestsIds[n]] = !0);
}
if (t) {
  return i(t);
}
for (var o in n) {
  o === f ? e.dailyQuests.mainQuest = n[o] : n[o].dbQuest.repeatType === m ? e.dailyQuests.finished[o] = e.dailyQuests.all[o] = n[o] : e.finished[o] = e.all[o] = n[o];
}
if (t) {
  return i(t);
}
for (var o in n) {
  n[o].questId === f ? e.dailyQuests.mainQuest = n[o] : n[o].dbQuest.repeatType === m ? e.dailyQuests.active[o] = e.dailyQuests.all[o] = n[o] : e.active[o] = e.all[o] = n[o];
}
if (n = t.questId === f ? e.dailyQuests.mainQuest : e.active[t.questId] || e.dailyQuests.active[t.questId], !n) {
  return i(new Error("QuestsUpdatedMessage: quest gone for " + t.questId));
}
if (t.stepId !== n.stepId) {
  return i(new Error("QuestsUpdatedMessage: not the same stepId " + t.stepId + " on quest " + t.questId));
}
for (var o = 0, a = t.objectives.length; o < a; o += 1) {
  for (var s = t.objectives[o], r = 0; r < n.objectives.length; r += 1) {
    var l = n.objectives[r];
    l.objectiveId === s.objectiveId && (l.curCompletion = s.curCompletion, e.emit("questUpdate", t.questId));
  }
}
for (var s = t.objectives[o], r = 0; r < n.objectives.length; r += 1) {
  var l = n.objectives[r];
  l.objectiveId === s.objectiveId && (l.curCompletion = s.curCompletion, e.emit("questUpdate", t.questId));
}
if (!n) {
  return i(new Error("QuestObjectiveValidatedMessage: quest gone for " + t.questId));
}
for (var a = 0, s = n.objectives.length; a < s; a += 1) {
  var r = n.objectives[a];
  if (r.objectiveId === t.objectiveId) {
    return r.objectiveStatus = !1, e.emit("objectiveValidated", n, t.objectiveId), o(window.gui.chat, n, !!e.dailyQuests.all[n.questId], e, !0), e.emit("questUpdate", t.questId), i();
  }
}
if (r.objectiveId === t.objectiveId) {
  return r.objectiveStatus = !1, e.emit("objectiveValidated", n, t.objectiveId), o(window.gui.chat, n, !!e.dailyQuests.all[n.questId], e, !0), e.emit("questUpdate", t.questId), i();
}
if (!t.infos.objectives) {
  return i();
}
if (!n) {
  return i();
}
if (!i) {
  return void console.error(new Error("QuestStepValidatedMessage: quest gone for " + t.questId));
}
if (t.questId === f) {
  return a = e.dailyQuests, a.mainQuest.finishedCount = 1, e.emit("DQFinished", t.questId), n(window.gui.chat, a.mainQuest, -1, s), o(window.gui.chat, a.mainQuest, !!e.dailyQuests.all[t.questId], a), i();
}
for (var i = window.gui.databases.QuestObjectiveTypes, s = {}, c = {}, d = 0, u = e.length; d < u; d += 1) {
  for (var m = e[d], f = m.objectives, g = 0, _ = f.length; g < _; g += 1) {
    for (var v = f[g].objectiveId, y = m.dbObjectives[v], w = h[y._type] || [], b = 0, M = w.length; b < M; b += 1) {
      var T = w[b];
      n(s, y.parameters, b, T, c);
    }
  }
}
for (var m = e[d], f = m.objectives, g = 0, _ = f.length; g < _; g += 1) {
  for (var v = f[g].objectiveId, y = m.dbObjectives[v], w = h[y._type] || [], b = 0, M = w.length; b < M; b += 1) {
    var T = w[b];
    n(s, y.parameters, b, T, c);
  }
}
for (var v = f[g].objectiveId, y = m.dbObjectives[v], w = h[y._type] || [], b = 0, M = w.length; b < M; b += 1) {
  var T = w[b];
  n(s, y.parameters, b, T, c);
}
if (!s[e].length) {
  return t();
}
if (n) {
  return t(n);
}
for (var r = 0, c = e.length; r < c; r += 1) {
  for (var d = e[r], u = d.objectives, p = 0, m = u.length; p < m; p += 1) {
    for (var f = u[p], g = f.objectiveId, _ = d.dbObjectives[g], v = _.parameters.slice(0), y = [], w = h[_._type] || [], b = 0, M = w.length; b < M; b += 1) {
      var T = w[b];
      "getText" === T.type ? a(v, s, b) : "table" === T.type && o(g, v, y, s, b, T);
    }
    var C = i[_.typeId].nameId;
    if (v.unshift(C), f.text = l.apply(null, v), y.length) {
      for (var I = v.concat(), A = 0; A < y.length; A++) {
        I[y[A][0] + 1] = y[A][1];
      }
      f.hypertext = l.apply(null, I);
    }
  }
}
for (var d = e[r], u = d.objectives, p = 0, m = u.length; p < m; p += 1) {
  for (var f = u[p], g = f.objectiveId, _ = d.dbObjectives[g], v = _.parameters.slice(0), y = [], w = h[_._type] || [], b = 0, M = w.length; b < M; b += 1) {
    var T = w[b];
    "getText" === T.type ? a(v, s, b) : "table" === T.type && o(g, v, y, s, b, T);
  }
  var C = i[_.typeId].nameId;
  if (v.unshift(C), f.text = l.apply(null, v), y.length) {
    for (var I = v.concat(), A = 0; A < y.length; A++) {
      I[y[A][0] + 1] = y[A][1];
    }
    f.hypertext = l.apply(null, I);
  }
}
for (var f = u[p], g = f.objectiveId, _ = d.dbObjectives[g], v = _.parameters.slice(0), y = [], w = h[_._type] || [], b = 0, M = w.length; b < M; b += 1) {
  var T = w[b];
  "getText" === T.type ? a(v, s, b) : "table" === T.type && o(g, v, y, s, b, T);
}
if (v.unshift(C), f.text = l.apply(null, v), y.length) {
  for (var I = v.concat(), A = 0; A < y.length; A++) {
    I[y[A][0] + 1] = y[A][1];
  }
  f.hypertext = l.apply(null, I);
}
for (var I = v.concat(), A = 0; A < y.length; A++) {
  I[y[A][0] + 1] = y[A][1];
}
if (o) {
  return i(o);
}
for (var s = 0, r = e.length; s < r; s += 1) {
  var l = e[s];
  n[l] = {
    questId: l,
    dbQuest: a[l],
    finishedCount: t[s]
  };
}
for (var i = [], n = {}, o = 0, a = e.length; o < a; o += 1) {
  var l = e[o];
  n[l.questId] = l, i.push(l.questId);
}
if (i) {
  return t(i);
}
for (var l in o) {
  if (o.hasOwnProperty(l)) {
    var u = o[l];
    n[l].dbQuest = u, a = a.concat(u.stepIds);
  }
}
if (o.hasOwnProperty(l)) {
  var u = o[l];
  n[l].dbQuest = u, a = a.concat(u.stepIds);
}
if (i) {
  return t(i);
}
for (var h in o) {
  if (o.hasOwnProperty(h)) {
    var p = n[h],
      m = p.dbQuest.stepIds;
    p.dbSteps = {};
    var f, g;
    for (f = 0, g = m.length; f < g; f += 1) {
      var _ = m[f],
        v = a[_];
      p.dbSteps[_] = v, l = l.concat(v.rewardsIds), u = u.concat(v.objectiveIds);
    }
  }
}
if (o.hasOwnProperty(h)) {
  var p = n[h],
    m = p.dbQuest.stepIds;
  p.dbSteps = {};
  var f, g;
  for (f = 0, g = m.length; f < g; f += 1) {
    var _ = m[f],
      v = a[_];
    p.dbSteps[_] = v, l = l.concat(v.rewardsIds), u = u.concat(v.objectiveIds);
  }
}
for (f = 0, g = m.length; f < g; f += 1) {
  var _ = m[f],
    v = a[_];
  p.dbSteps[_] = v, l = l.concat(v.rewardsIds), u = u.concat(v.objectiveIds);
}
if (i) {
  return t(i);
}
for (var a in o) {
  if (o.hasOwnProperty(a)) {
    var r = n[a];
    r.dbObjectives = {}, r.dbRewards = {};
    for (var l in r.dbSteps) {
      if (r.dbSteps.hasOwnProperty(l)) {
        var c,
          u,
          h,
          p = r.dbSteps[l];
        for (c = 0, u = p.objectiveIds.length; c < u; c += 1) {
          h = p.objectiveIds[c], r.dbObjectives[h] = y[0].data[h], 0 === r.dbObjectives[h].mapId && (r.dbObjectives[h].mapId = d[h] || 0);
        }
        for (c = 0, u = p.rewardsIds.length; c < u; c += 1) {
          h = p.rewardsIds[c], r.dbRewards[h] = y[1].data[h];
        }
      }
    }
  }
}
if (o.hasOwnProperty(a)) {
  var r = n[a];
  r.dbObjectives = {}, r.dbRewards = {};
  for (var l in r.dbSteps) {
    if (r.dbSteps.hasOwnProperty(l)) {
      var c,
        u,
        h,
        p = r.dbSteps[l];
      for (c = 0, u = p.objectiveIds.length; c < u; c += 1) {
        h = p.objectiveIds[c], r.dbObjectives[h] = y[0].data[h], 0 === r.dbObjectives[h].mapId && (r.dbObjectives[h].mapId = d[h] || 0);
      }
      for (c = 0, u = p.rewardsIds.length; c < u; c += 1) {
        h = p.rewardsIds[c], r.dbRewards[h] = y[1].data[h];
      }
    }
  }
}
for (var l in r.dbSteps) {
  if (r.dbSteps.hasOwnProperty(l)) {
    var c,
      u,
      h,
      p = r.dbSteps[l];
    for (c = 0, u = p.objectiveIds.length; c < u; c += 1) {
      h = p.objectiveIds[c], r.dbObjectives[h] = y[0].data[h], 0 === r.dbObjectives[h].mapId && (r.dbObjectives[h].mapId = d[h] || 0);
    }
    for (c = 0, u = p.rewardsIds.length; c < u; c += 1) {
      h = p.rewardsIds[c], r.dbRewards[h] = y[1].data[h];
    }
  }
}
if (r.dbSteps.hasOwnProperty(l)) {
  var c,
    u,
    h,
    p = r.dbSteps[l];
  for (c = 0, u = p.objectiveIds.length; c < u; c += 1) {
    h = p.objectiveIds[c], r.dbObjectives[h] = y[0].data[h], 0 === r.dbObjectives[h].mapId && (r.dbObjectives[h].mapId = d[h] || 0);
  }
  for (c = 0, u = p.rewardsIds.length; c < u; c += 1) {
    h = p.rewardsIds[c], r.dbRewards[h] = y[1].data[h];
  }
}
for (c = 0, u = p.objectiveIds.length; c < u; c += 1) {
  h = p.objectiveIds[c], r.dbObjectives[h] = y[0].data[h], 0 === r.dbObjectives[h].mapId && (r.dbObjectives[h].mapId = d[h] || 0);
}
for (c = 0, u = p.rewardsIds.length; c < u; c += 1) {
  h = p.rewardsIds[c], r.dbRewards[h] = y[1].data[h];
}
for (var t = {}, i = 0; i < e.length; i++) {
  e[i].accountId && (t[e[i].accountId] = e[i]);
}
if (i.success) {
  e.chat.logError(s("ui.social.friend.delete"));
  for (var n in t.friendsList) {
    if (t.friendsList[n].uniqueNickname.toString() === i.name) {
      return delete t.friendsList[n], t.emit("friendDeleted", n);
    }
  }
}
for (var n in t.friendsList) {
  if (t.friendsList[n].uniqueNickname.toString() === i.name) {
    return delete t.friendsList[n], t.emit("friendDeleted", n);
  }
}
if (t.friendsList[n].uniqueNickname.toString() === i.name) {
  return delete t.friendsList[n], t.emit("friendDeleted", n);
}
if (e.success) {
  var i = e.session ? t.ignoredList : t.enemiesList;
  for (var n in i) {
    if (i[n].uniqueNickname.toString() === e.name) {
      return delete i[n], t.emit(e.session ? "ignoredDeleted" : "enemyDeleted", n);
    }
  }
}
for (var n in i) {
  if (i[n].uniqueNickname.toString() === e.name) {
    return delete i[n], t.emit(e.session ? "ignoredDeleted" : "enemyDeleted", n);
  }
}
if (i[n].uniqueNickname.toString() === e.name) {
  return delete i[n], t.emit(e.session ? "ignoredDeleted" : "enemyDeleted", n);
}
for (var t in this.friendsList) {
  var i = this.friendsList[t];
  if (i.playerId === e) {
    return !0;
  }
}
if (i.playerId === e) {
  return !0;
}
for (var t in this.friendsList) {
  var i = this.friendsList[t];
  if (i.playerId === e) {
    return i;
  }
}
if (i.playerId === e) {
  return i;
}
for (var i in this.friendsList) {
  var n = this.friendsList[i];
  if (n.playerName && r.simplifyString(n.playerName) === t) {
    return n;
  }
}
if (n.playerName && r.simplifyString(n.playerName) === t) {
  return n;
}
if (i._wingsData[c].frames[a]) {
  var s = "gfx/alignments/wings/demonAngel2_frame" + a + ".png",
    r = i._wingsData[c].frames[a].position,
    l = {
      imagePath: s,
      left: r.x,
      top: r.h + r.y,
      width: r.w,
      height: r.h
    };
  return t(l);
}
if (e = e || {}, this._isModerator) {
  var t;
  if (e.isOnCharacterSelection) {
    for (t = 0; t < s.length; t += 1) {
      o.getWindow("adminConsole").runCommand(s[t]);
    }
  }
  if (e.isOnRP) {
    for (t = 0; t < a.length; t += 1) {
      o.getWindow("adminConsole").runCommand(a[t]);
    }
  }
}
if (e.isOnCharacterSelection) {
  for (t = 0; t < s.length; t += 1) {
    o.getWindow("adminConsole").runCommand(s[t]);
  }
}
for (t = 0; t < s.length; t += 1) {
  o.getWindow("adminConsole").runCommand(s[t]);
}
if (e.isOnRP) {
  for (t = 0; t < a.length; t += 1) {
    o.getWindow("adminConsole").runCommand(a[t]);
  }
}
for (t = 0; t < a.length; t += 1) {
  o.getWindow("adminConsole").runCommand(a[t]);
}
if (this._hasSpecialStartupCmds && e.isOnRP) {
  for (t = 0; t < r.length; t += 1) {
    o.getWindow("adminConsole").runCommand(r[t]);
  }
}
for (t = 0; t < r.length; t += 1) {
  o.getWindow("adminConsole").runCommand(r[t]);
}
if (!Array.isArray(this._myRank)) {
  return e.join("\n");
}
for (var t = 0; t < this._myRank.length; t += 1) {
  var i = this._myRank[t];
  this._canUse(i) && e.push(i);
}
for (var n in t) {
  i += t[n].points;
}
if (!e || !t) {
  return n;
}
for (var o = 0; o < i.length; o++) {
  if (i[o].stepNumber === t) {
    for (var a = 0; a < i[o].stages.length; a++) {
      if (i[o].stages[a].stageLevel === e) {
        for (var s = 0; s < i[o].stages[a].monsters.length; s++) {
          n.push(i[o].stages[a].monsters[s].creatureGenericId);
        }
        return n;
      }
    }
  }
}
if (i[o].stepNumber === t) {
  for (var a = 0; a < i[o].stages.length; a++) {
    if (i[o].stages[a].stageLevel === e) {
      for (var s = 0; s < i[o].stages[a].monsters.length; s++) {
        n.push(i[o].stages[a].monsters[s].creatureGenericId);
      }
      return n;
    }
  }
}
for (var a = 0; a < i[o].stages.length; a++) {
  if (i[o].stages[a].stageLevel === e) {
    for (var s = 0; s < i[o].stages[a].monsters.length; s++) {
      n.push(i[o].stages[a].monsters[s].creatureGenericId);
    }
    return n;
  }
}
if (i[o].stages[a].stageLevel === e) {
  for (var s = 0; s < i[o].stages[a].monsters.length; s++) {
    n.push(i[o].stages[a].monsters[s].creatureGenericId);
  }
  return n;
}
for (var s = 0; s < i[o].stages[a].monsters.length; s++) {
  n.push(i[o].stages[a].monsters[s].creatureGenericId);
}
if (!e || !t) {
  return [];
}
for (var i = this.current.steps, n = 0; n < i.length; n++) {
  if (i[n].stepNumber === t) {
    for (var o = 0; o < i[n].stages.length; o++) {
      if (i[n].stages[o].stageLevel === e) {
        return i[n].stages[o].challengeId;
      }
    }
  }
}
if (i[n].stepNumber === t) {
  for (var o = 0; o < i[n].stages.length; o++) {
    if (i[n].stages[o].stageLevel === e) {
      return i[n].stages[o].challengeId;
    }
  }
}
for (var o = 0; o < i[n].stages.length; o++) {
  if (i[n].stages[o].stageLevel === e) {
    return i[n].stages[o].challengeId;
  }
}
if (i[n].stages[o].stageLevel === e) {
  return i[n].stages[o].challengeId;
}
if (!e || !t) {
  return i;
}
for (var n = 0; n < t.length; n++) {
  if (t[n].stageLevel === e && t[n].scorer.length > 0) {
    for (var o = !1, a = 0; a < t[n].scorer.length; a++) {
      o || (i = t[n].scorer[a].score, o = t[n].scorer[a].validated);
    }
    return i;
  }
}
if (t[n].stageLevel === e && t[n].scorer.length > 0) {
  for (var o = !1, a = 0; a < t[n].scorer.length; a++) {
    o || (i = t[n].scorer[a].score, o = t[n].scorer[a].validated);
  }
  return i;
}
for (var o = !1, a = 0; a < t[n].scorer.length; a++) {
  o || (i = t[n].scorer[a].score, o = t[n].scorer[a].validated);
}
if (!e || !t) {
  return i;
}
for (var n = 0; n < t.length; n++) {
  if (t[n].stageLevel === e && t[n].scorer.length > 0) {
    for (var o = !1, a = 0; a < t[n].scorer.length; a++) {
      o || (i = -20 * t[n].scorer[a].nbDeath, o = t[n].scorer[a].validated);
    }
    return i;
  }
}
if (t[n].stageLevel === e && t[n].scorer.length > 0) {
  for (var o = !1, a = 0; a < t[n].scorer.length; a++) {
    o || (i = -20 * t[n].scorer[a].nbDeath, o = t[n].scorer[a].validated);
  }
  return i;
}
for (var o = !1, a = 0; a < t[n].scorer.length; a++) {
  o || (i = -20 * t[n].scorer[a].nbDeath, o = t[n].scorer[a].validated);
}
if (!e || !t) {
  return i;
}
for (var n = 0; n < t.length; n++) {
  if (t[n].stageLevel === e && t[n].scorer.length > 0) {
    return i = !0;
  }
}
if (t[n].stageLevel === e && t[n].scorer.length > 0) {
  return i = !0;
}
if (!e) {
  return t;
}
for (var i = 0; i < e.length; i++) {
  for (var n = 0, o = 0, a = 0; a < e[i].stages.length; a++) {
    n += this.getSelectedStageScore(e[i].stages[a].stageLevel);
    for (var s = {}, r = 0; r < e[i].stages[a]._challengePts.length; r++) {
      var l = e[i].stages[a].challengeId[r];
      s[l] = {
        points: e[i].stages[a]._challengePts[r]
      };
    }
    o += this.calculateMaxStageScore(e[i].stages[a].stageLevel, s);
  }
  t.push(Math.trunc(n / o * 100));
}
for (var n = 0, o = 0, a = 0; a < e[i].stages.length; a++) {
  n += this.getSelectedStageScore(e[i].stages[a].stageLevel);
  for (var s = {}, r = 0; r < e[i].stages[a]._challengePts.length; r++) {
    var l = e[i].stages[a].challengeId[r];
    s[l] = {
      points: e[i].stages[a]._challengePts[r]
    };
  }
  o += this.calculateMaxStageScore(e[i].stages[a].stageLevel, s);
}
for (var s = {}, r = 0; r < e[i].stages[a]._challengePts.length; r++) {
  var l = e[i].stages[a].challengeId[r];
  s[l] = {
    points: e[i].stages[a]._challengePts[r]
  };
}
if (!e || !t) {
  return i;
}
for (var o = 0; o < t.length; o++) {
  if (t[o].stageLevel === e && t[o].scorer.length > 0) {
    var a = !1;
    n = !0;
    for (var s = 0; s < t[o].scorer.length; s++) {
      a || (i = t[o].scorer[s].challengeId, a = t[o].scorer[s].validated);
    }
    return i;
  }
}
if (t[o].stageLevel === e && t[o].scorer.length > 0) {
  var a = !1;
  n = !0;
  for (var s = 0; s < t[o].scorer.length; s++) {
    a || (i = t[o].scorer[s].challengeId, a = t[o].scorer[s].validated);
  }
  return i;
}
for (var s = 0; s < t[o].scorer.length; s++) {
  a || (i = t[o].scorer[s].challengeId, a = t[o].scorer[s].validated);
}
if (!e || !t) {
  return n;
}
for (var o = 0; o < i.length; o++) {
  if (i[o].stepNumber === t) {
    for (var a = 0; a < i[o].stages.length; a++) {
      if (i[o].stages[a].stageLevel === e) {
        return n = i[o].stages[a].monsters;
      }
    }
  }
}
if (i[o].stepNumber === t) {
  for (var a = 0; a < i[o].stages.length; a++) {
    if (i[o].stages[a].stageLevel === e) {
      return n = i[o].stages[a].monsters;
    }
  }
}
for (var a = 0; a < i[o].stages.length; a++) {
  if (i[o].stages[a].stageLevel === e) {
    return n = i[o].stages[a].monsters;
  }
}
if (i[o].stages[a].stageLevel === e) {
  return n = i[o].stages[a].monsters;
}
for (var i = {}, n = 0; n < t.ladderResult.length; n += 1) {
  i[n] = {
    rank: t.ladderResult[n].rank,
    name: t.ladderResult[n].character.name,
    breed: window.gui.databases.Breeds[t.ladderResult[n].character.breed].shortNameId,
    level: t.ladderResult[n].character.level,
    server: t.ladderResult[n].character.server,
    score: t.ladderResult[n].score
  };
}
for (var i = !1, n = 0; n < e.current.scoreStageList.length; n++) {
  if (e.current.scoreStageList[n].stageLevel === t.stageLevel) {
    e.current.scoreStageList[n] = t, i = !0;
    break;
  }
}
if (e.current.scoreStageList[n].stageLevel === t.stageLevel) {
  e.current.scoreStageList[n] = t, i = !0;
  break;
}
if ((e[0].rank || 0 === e[0].rank) && 0 !== _.length) {
  var i;
  if (t && t.length > 0) {
    for (var n = 0; n < _.length; n++) {
      if (e[0].rank + 1 <= _[n].rank && e[0].score >= this.ranks[_[n].rankId].score) {
        i = _[n].rankId;
        break;
      }
    }
  }
  var o = {};
  o[0] = {
    rank: e[0].rank,
    score: e[0].score,
    name: e[0].name,
    rankId: i
  }, this.current.ladder.player = o, this.emit("toaPlayerRankDataSuccess");
}
if (t && t.length > 0) {
  for (var n = 0; n < _.length; n++) {
    if (e[0].rank + 1 <= _[n].rank && e[0].score >= this.ranks[_[n].rankId].score) {
      i = _[n].rankId;
      break;
    }
  }
}
for (var n = 0; n < _.length; n++) {
  if (e[0].rank + 1 <= _[n].rank && e[0].score >= this.ranks[_[n].rankId].score) {
    i = _[n].rankId;
    break;
  }
}
if (e[0].rank + 1 <= _[n].rank && e[0].score >= this.ranks[_[n].rankId].score) {
  i = _[n].rankId;
  break;
}
if (!i || 0 === i.length) {
  return t;
}
for (var o = i.length - 1; o >= 0; o--) {
  if (i[o].scorer.length > 0) {
    t.stage = i[o].stageLevel, t.stage = 100 === t.stage ? t.stage : t.stage++;
    break;
  }
}
if (i[o].scorer.length > 0) {
  t.stage = i[o].stageLevel, t.stage = 100 === t.stage ? t.stage : t.stage++;
  break;
}
for (var a = 0; a < n.length; a++) {
  for (var s = 0; s < n[a].stages.length; s++) {
    if (n[a].stages[s].stageLevel === t.stage) {
      return t.step = n[a].stepNumber, t;
    }
  }
}
for (var s = 0; s < n[a].stages.length; s++) {
  if (n[a].stages[s].stageLevel === t.stage) {
    return t.step = n[a].stepNumber, t;
  }
}
if (n[a].stages[s].stageLevel === t.stage) {
  return t.step = n[a].stepNumber, t;
}
if (e) {
  this.initRanksData();
  var t = this.ranks[e];
  if (t && t.rewards && 0 !== !t.rewards.length) {
    for (var i, n = t.rewards, o = "", a = 0; a < n.length; a++) {
      i = a + 1 === n.length ? "." : ", ", o = o + n[a].quantity + " x $item" + n[a].itemId + i;
    }
    var s = l("ui.toa.infoRewards", o);
    window.gui.chat.logMsg(s, u.PSEUDO_CHANNEL_INFO);
  }
}
if (t && t.rewards && 0 !== !t.rewards.length) {
  for (var i, n = t.rewards, o = "", a = 0; a < n.length; a++) {
    i = a + 1 === n.length ? "." : ", ", o = o + n[a].quantity + " x $item" + n[a].itemId + i;
  }
  var s = l("ui.toa.infoRewards", o);
  window.gui.chat.logMsg(s, u.PSEUDO_CHANNEL_INFO);
}
for (var i, n = t.rewards, o = "", a = 0; a < n.length; a++) {
  i = a + 1 === n.length ? "." : ", ", o = o + n[a].quantity + " x $item" + n[a].itemId + i;
}
if (!this.hasOwnProperty("ranks")) {
  for (var e = {}, t = [l("ui.toa.rewardsBoardTop1"), l("ui.toa.rewardsBoardTop2"), l("ui.toa.rewardsBoardTop3"), l("ui.toa.rewardsBoardTop15"), l("ui.toa.rewardsBoardTop16"), l("ui.toa.rewardsBoardTop4"), l("ui.toa.rewardsBoardTop5"), l("ui.toa.rewardsBoardTop6"), l("ui.toa.rewardsBoardTop7"), l("ui.toa.rewardsBoardTop8"), l("ui.toa.rewardsBoardTop9"), l("ui.toa.rewardsBoardTop10"), l("ui.toa.rewardsBoardTop11"), l("ui.toa.rewardsBoardTop12"), l("ui.toa.rewardsBoardTop13"), l("ui.toa.rewardsBoardTop14")], i = [80, 79, 79, 78, 77, 76, 75, 75], n = window.gui.databases.ToaRank, o = 0; o < t.length; o += 1) {
    e[n[o + 1].id] = {
      id: n[o + 1].id,
      rankName: n[o + 1].nameId,
      score: n[o + 1].minScore,
      rewards: n[o + 1].rewards,
      goultines: n[o + 1].goultines,
      ornament: i[o] || -1,
      details: t[o]
    };
  }
  this.ranks = e;
}
for (var e = {}, t = [l("ui.toa.rewardsBoardTop1"), l("ui.toa.rewardsBoardTop2"), l("ui.toa.rewardsBoardTop3"), l("ui.toa.rewardsBoardTop15"), l("ui.toa.rewardsBoardTop16"), l("ui.toa.rewardsBoardTop4"), l("ui.toa.rewardsBoardTop5"), l("ui.toa.rewardsBoardTop6"), l("ui.toa.rewardsBoardTop7"), l("ui.toa.rewardsBoardTop8"), l("ui.toa.rewardsBoardTop9"), l("ui.toa.rewardsBoardTop10"), l("ui.toa.rewardsBoardTop11"), l("ui.toa.rewardsBoardTop12"), l("ui.toa.rewardsBoardTop13"), l("ui.toa.rewardsBoardTop14")], i = [80, 79, 79, 78, 77, 76, 75, 75], n = window.gui.databases.ToaRank, o = 0; o < t.length; o += 1) {
  e[n[o + 1].id] = {
    id: n[o + 1].id,
    rankName: n[o + 1].nameId,
    score: n[o + 1].minScore,
    rewards: n[o + 1].rewards,
    goultines: n[o + 1].goultines,
    ornament: i[o] || -1,
    details: t[o]
  };
}
if (e && !(e <= 0)) {
  for (var n = 0; n < t.length; n++) {
    if (e === t[n].id) {
      i = t[n];
      break;
    }
  }
  return i;
}
for (var n = 0; n < t.length; n++) {
  if (e === t[n].id) {
    i = t[n];
    break;
  }
}
if (e === t[n].id) {
  i = t[n];
  break;
}
for (var o in this.ranks) {
  this.ranks.hasOwnProperty(o) && n.push(o);
}
for (var a = [], s = 0; s < i.length; s++) {
  a.push({
    rank: i[s],
    rankId: n[s]
  });
}
if (!Number.isInteger(e) || e < 0) {
  return 0;
}
if (e) {
  return console.error(e);
}
if (e) {
  return console.error(e);
}
if (e) {
  return console.error(e);
}
if (!(this.popups.length <= 0)) {
  var e = r.getValue(this.getPromoDisplayUserPrefKey(), {}),
    t = u.getMarketingItemToDisplayWithTrigger(this.popups, e, l);
  t && this._displayMarketingPopup(t);
}
if (!this.alreadyOpenedPopup) {
  var t = r.getValue(this.getPromoDisplayUserPrefKey(), {}),
    i = u.getMarketingItemToDisplay(e, t, l);
  i ? (this.alreadyOpenedPopup = !0, this._displayMarketingPopup(i)) : this._processPopupsWithTriggers();
}
for (var i = 0; i < V.length; i++) {
  V[i](e, t);
}
if (!t.length) {
  return m({});
}
for (var i = [], n = 0; n < t.length; n++) {
  i.push(t[n].key);
}
for (var n in i) {
  if (i.hasOwnProperty(n)) {
    var o = i[n],
      a = oe.parsePriceMicros(o.priceMicros);
    if (isNaN(a)) {
      continue;
    }
    o._parsedPrice = a, j[n] = o, ue || (ue = e.currency), he || (he = e.country);
  }
}
if (i.hasOwnProperty(n)) {
  var o = i[n],
    a = oe.parsePriceMicros(o.priceMicros);
  if (isNaN(a)) {
    continue;
  }
  o._parsedPrice = a, j[n] = o, ue || (ue = e.currency), he || (he = e.country);
}
if (isNaN(a)) {
  continue;
}
for (var t = null, i = e.pricelist || [], n = 0; n < i.length; n += 1) {
  var o = i[n];
  if (o.currency === Z.GOULTINE) {
    t = o;
    break;
  }
}
if (o.currency === Z.GOULTINE) {
  t = o;
  break;
}
if (!e) {
  return t;
}
for (var i = 0; i < e.length; i++) {
  var n = e[i],
    o = y(n);
  if (o && (n._hardPrice = o.price, n._hardOriginalPrice = o.original_price), n.key) {
    var a = j[n.key];
    if (!a && !o) {
      continue;
    }
    a && (n.product = a, n._inAppPrice = a.price);
  } else if (n.currency !== Z.GOULTINE) {
    continue;
  }
  if (v(n), n._hardPrice && n._hardOriginalPrice) {
    var s = Math.floor(100 - 100 * n._hardPrice / n._hardOriginalPrice);
    n._promoRate = s ? "- " + s + "%" : "";
  }
  for (var r = [], l = !1, c = n.references, d = 0; d < c.length; d++) {
    var u = c[d].reference_virtualgift;
    if (u) {
      for (var h = 0; h < u.length; h++) {
        r.push(u[h].id);
      }
    }
    var p = c[d].reference_kard;
    if (p) {
      for (var m = 0; m < p.length; m++) {
        if ("MULTIPLE" === p[m].type) {
          l = !0;
          break;
        }
      }
    }
  }
  n.isMysteryBox = l, n.itemsId = r, t.push(n);
}
if (o && (n._hardPrice = o.price, n._hardOriginalPrice = o.original_price), n.key) {
  var a = j[n.key];
  if (!a && !o) {
    continue;
  }
  a && (n.product = a, n._inAppPrice = a.price);
} else if (n.currency !== Z.GOULTINE) {
  continue;
}
if (!a && !o) {
  continue;
}
if (n.currency !== Z.GOULTINE) {
  continue;
}
if (v(n), n._hardPrice && n._hardOriginalPrice) {
  var s = Math.floor(100 - 100 * n._hardPrice / n._hardOriginalPrice);
  n._promoRate = s ? "- " + s + "%" : "";
}
for (var r = [], l = !1, c = n.references, d = 0; d < c.length; d++) {
  var u = c[d].reference_virtualgift;
  if (u) {
    for (var h = 0; h < u.length; h++) {
      r.push(u[h].id);
    }
  }
  var p = c[d].reference_kard;
  if (p) {
    for (var m = 0; m < p.length; m++) {
      if ("MULTIPLE" === p[m].type) {
        l = !0;
        break;
      }
    }
  }
}
if (u) {
  for (var h = 0; h < u.length; h++) {
    r.push(u[h].id);
  }
}
for (var h = 0; h < u.length; h++) {
  r.push(u[h].id);
}
if (p) {
  for (var m = 0; m < p.length; m++) {
    if ("MULTIPLE" === p[m].type) {
      l = !0;
      break;
    }
  }
}
for (var m = 0; m < p.length; m++) {
  if ("MULTIPLE" === p[m].type) {
    l = !0;
    break;
  }
}
if ("MULTIPLE" === p[m].type) {
  l = !0;
  break;
}
if (i) {
  if (!X) {
    return console.error(new Error("Purchase could not be done, store infos are no longer available")), H(), window.gui.openSimplePopup(ee("tablet.shop.couldNotBuy"));
  }
  var n = 0;
  t.doubleCheckAmount(e.key, function (t, i, o) {
    if (t) {
      return console.error(new Error("Purchase could not be done, error: " + t)), H(), window.gui.openSimplePopup(ee("tablet.shop.couldNotBuy"));
    }
    i !== X.currency && console.error("Currency is not the same as the storeInfos: storeInfos.currency: " + X.currency + ", currency: " + i), n = o, n !== e.product._parsedPrice && console.error("Amount is not the same as the article: _parsedPrice: " + e.product._parsedPrice + ", amount: " + n);
    var a = {
      currency: i,
      iapKey: e.key,
      purchase: JSON.stringify([{
        quantity: 1,
        id: e.id,
        amount: n
      }])
    };
    console.error("[Haapi info] ShopWindow sending shopBuyIAPRequest with data: " + JSON.stringify(a) + ", from price: " + e.product.price + ", from priceMicros: " + e.product.priceMicros), window.dofus.send("shopBuyIAPRequest", a);
  });
}
if (!X) {
  return console.error(new Error("Purchase could not be done, store infos are no longer available")), H(), window.gui.openSimplePopup(ee("tablet.shop.couldNotBuy"));
}
if (t) {
  return console.error(new Error("Purchase could not be done, error: " + t)), H(), window.gui.openSimplePopup(ee("tablet.shop.couldNotBuy"));
}
if (!e) {
  return console.error(new Error("Trying to buy a non-existent article"));
}
if (a && e._softPrice > o) {
  return b(e);
}
if (!a && e._hardPrice > n) {
  var s = e._hardPrice - n;
  return M(s);
}
if (i = i || o, !Q.isAvailable()) {
  var n = new Error("Purchase should not have been possible on this platform, for key: " + e + " and order id: " + t);
  return i(n, e);
}
if (n) {
  var o = new Error("Finish purchase failed for key " + e + " and order id " + t + " with error: " + n);
  return i(o, e);
}
if (!Q.isAvailable()) {
  var t = "Purchase should not have been possible on this platform, for key: " + e.iapKey;
  return t += " and order id: " + e.buyResult.order_id, console.error(new Error(t));
}
if (e) {
  return Q.isAlreadyOwnedError(e) ? U() : (console.error("makePurchase error: " + e), H(), void window.gui.openSimplePopup(ee("tablet.shop.validateIAPFail")));
}
if (e) {
  return t(e);
}
for (var s in a) {
  if (a.hasOwnProperty(s)) {
    var r = a[s],
      l = oe.parsePriceMicros(r.priceMicros);
    if (isNaN(l)) {
      continue;
    }
    i = l;
  }
}
if (a.hasOwnProperty(s)) {
  var r = a[s],
    l = oe.parsePriceMicros(r.priceMicros);
  if (isNaN(l)) {
    continue;
  }
  i = l;
}
if (isNaN(l)) {
  continue;
}
if (!(h instanceof t)) {
  return new t(e, i);
}
if (null == i) {
  if (e instanceof t) {
    return h.s = e.s, h.e = e.e, void (h.c = (e = e.c) ? e.slice() : e);
  }
  if (l = "number" == typeof e, l && 0 * e == 0) {
    if (h.s = 1 / e < 0 ? (e = -e, -1) : 1, e === ~~e) {
      for (s = 0, r = e; r >= 10; r /= 10, s++) {
        ;
      }
      return h.e = s, void (h.c = [e]);
    }
    u = String(e);
  } else {
    if (u = String(e), !m.test(u)) {
      return E(h, u, l);
    }
    h.s = 45 == u.charCodeAt(0) ? (u = u.slice(1), -1) : 1;
  }
  (s = u.indexOf(".")) > -1 && (u = u.replace(".", "")), (r = u.search(/e/i)) > 0 ? (s < 0 && (s = r), s += +u.slice(r + 1), u = u.substring(0, r)) : s < 0 && (s = u.length);
} else {
  if (c(i, 2, W.length, "Base"), u = String(e), 10 == i) {
    return h = new t(e instanceof t ? e : u), p(h, L + h.e + 1, O);
  }
  if (l = "number" == typeof e) {
    if (0 * e != 0) {
      return E(h, u, l, i);
    }
    if (h.s = 1 / e < 0 ? (u = u.slice(1), -1) : 1, t.DEBUG && u.replace(/^0\.0*|\./, "").length > 15) {
      throw Error(v + e);
    }
    l = !1;
  } else {
    h.s = 45 === u.charCodeAt(0) ? (u = u.slice(1), -1) : 1;
  }
  for (n = W.slice(0, i), s = r = 0, d = u.length; r < d; r++) {
    if (n.indexOf(o = u.charAt(r)) < 0) {
      if ("." == o) {
        if (r > s) {
          s = d;
          continue;
        }
      } else if (!a && (u == u.toUpperCase() && (u = u.toLowerCase()) || u == u.toLowerCase() && (u = u.toUpperCase()))) {
        a = !0, r = -1, s = 0;
        continue;
      }
      return E(h, String(e), l, i);
    }
  }
  u = S(u, i, 10, h.s), (s = u.indexOf(".")) > -1 ? u = u.replace(".", "") : s = u.length;
}
if (e instanceof t) {
  return h.s = e.s, h.e = e.e, void (h.c = (e = e.c) ? e.slice() : e);
}
if (l = "number" == typeof e, l && 0 * e == 0) {
  if (h.s = 1 / e < 0 ? (e = -e, -1) : 1, e === ~~e) {
    for (s = 0, r = e; r >= 10; r /= 10, s++) {
      ;
    }
    return h.e = s, void (h.c = [e]);
  }
  u = String(e);
} else {
  if (u = String(e), !m.test(u)) {
    return E(h, u, l);
  }
  h.s = 45 == u.charCodeAt(0) ? (u = u.slice(1), -1) : 1;
}
if (h.s = 1 / e < 0 ? (e = -e, -1) : 1, e === ~~e) {
  for (s = 0, r = e; r >= 10; r /= 10, s++) {
    ;
  }
  return h.e = s, void (h.c = [e]);
}
for (s = 0, r = e; r >= 10; r /= 10, s++) {
  ;
}
if (u = String(e), !m.test(u)) {
  return E(h, u, l);
}
if (c(i, 2, W.length, "Base"), u = String(e), 10 == i) {
  return h = new t(e instanceof t ? e : u), p(h, L + h.e + 1, O);
}
if (l = "number" == typeof e) {
  if (0 * e != 0) {
    return E(h, u, l, i);
  }
  if (h.s = 1 / e < 0 ? (u = u.slice(1), -1) : 1, t.DEBUG && u.replace(/^0\.0*|\./, "").length > 15) {
    throw Error(v + e);
  }
  l = !1;
} else {
  h.s = 45 === u.charCodeAt(0) ? (u = u.slice(1), -1) : 1;
}
if (0 * e != 0) {
  return E(h, u, l, i);
}
if (h.s = 1 / e < 0 ? (u = u.slice(1), -1) : 1, t.DEBUG && u.replace(/^0\.0*|\./, "").length > 15) {
  throw Error(v + e);
}
for (n = W.slice(0, i), s = r = 0, d = u.length; r < d; r++) {
  if (n.indexOf(o = u.charAt(r)) < 0) {
    if ("." == o) {
      if (r > s) {
        s = d;
        continue;
      }
    } else if (!a && (u == u.toUpperCase() && (u = u.toLowerCase()) || u == u.toLowerCase() && (u = u.toUpperCase()))) {
      a = !0, r = -1, s = 0;
      continue;
    }
    return E(h, String(e), l, i);
  }
}
if (n.indexOf(o = u.charAt(r)) < 0) {
  if ("." == o) {
    if (r > s) {
      s = d;
      continue;
    }
  } else if (!a && (u == u.toUpperCase() && (u = u.toLowerCase()) || u == u.toLowerCase() && (u = u.toUpperCase()))) {
    a = !0, r = -1, s = 0;
    continue;
  }
  return E(h, String(e), l, i);
}
if ("." == o) {
  if (r > s) {
    s = d;
    continue;
  }
} else if (!a && (u == u.toUpperCase() && (u = u.toLowerCase()) || u == u.toLowerCase() && (u = u.toUpperCase()))) {
  a = !0, r = -1, s = 0;
  continue;
}
if (r > s) {
  s = d;
  continue;
}
if (!a && (u == u.toUpperCase() && (u = u.toLowerCase()) || u == u.toLowerCase() && (u = u.toUpperCase()))) {
  a = !0, r = -1, s = 0;
  continue;
}
for (r = 0; 48 === u.charCodeAt(r); r++) {
  ;
}
for (d = u.length; 48 === u.charCodeAt(--d);) {
  ;
}
if (u = u.slice(r, ++d)) {
  if (d -= r, l && t.DEBUG && d > 15 && (e > b || e !== g(e))) {
    throw Error(v + h.s * e);
  }
  if (s = s - r - 1, s > B) {
    h.c = h.e = null;
  } else if (s < P) {
    h.c = [h.e = 0];
  } else {
    if (h.e = s, h.c = [], r = (s + 1) % w, s < 0 && (r += w), r < d) {
      for (r && h.c.push(+u.slice(0, r)), d -= w; r < d;) {
        h.c.push(+u.slice(r, r += w));
      }
      u = u.slice(r), r = w - u.length;
    } else {
      r -= d;
    }
    for (; r--; u += "0") {
      ;
    }
    h.c.push(+u);
  }
} else {
  h.c = [h.e = 0];
}
if (d -= r, l && t.DEBUG && d > 15 && (e > b || e !== g(e))) {
  throw Error(v + h.s * e);
}
if (s = s - r - 1, s > B) {
  h.c = h.e = null;
} else if (s < P) {
  h.c = [h.e = 0];
} else {
  if (h.e = s, h.c = [], r = (s + 1) % w, s < 0 && (r += w), r < d) {
    for (r && h.c.push(+u.slice(0, r)), d -= w; r < d;) {
      h.c.push(+u.slice(r, r += w));
    }
    u = u.slice(r), r = w - u.length;
  } else {
    r -= d;
  }
  for (; r--; u += "0") {
    ;
  }
  h.c.push(+u);
}
if (s < P) {
  h.c = [h.e = 0];
} else {
  if (h.e = s, h.c = [], r = (s + 1) % w, s < 0 && (r += w), r < d) {
    for (r && h.c.push(+u.slice(0, r)), d -= w; r < d;) {
      h.c.push(+u.slice(r, r += w));
    }
    u = u.slice(r), r = w - u.length;
  } else {
    r -= d;
  }
  for (; r--; u += "0") {
    ;
  }
  h.c.push(+u);
}
if (h.e = s, h.c = [], r = (s + 1) % w, s < 0 && (r += w), r < d) {
  for (r && h.c.push(+u.slice(0, r)), d -= w; r < d;) {
    h.c.push(+u.slice(r, r += w));
  }
  u = u.slice(r), r = w - u.length;
} else {
  r -= d;
}
for (r && h.c.push(+u.slice(0, r)), d -= w; r < d;) {
  h.c.push(+u.slice(r, r += w));
}
for (; r--; u += "0") {
  ;
}
if (null == n ? n = O : c(n, 0, 8), !e.c) {
  return e.toString();
}
if (a = e.c[0], l = e.e, null == i) {
  m = r(e.c), m = 1 == o || 2 == o && l <= R ? u(m, l) : h(m, l, "0");
} else if (e = p(new t(e), i, n), s = e.e, m = r(e.c), d = m.length, 1 == o || 2 == o && (i <= s || s <= R)) {
  for (; d < i; m += "0", d++) {
    ;
  }
  m = u(m, s);
} else if (i -= l, m = h(m, s, "0"), s + 1 > d) {
  if (--i > 0) {
    for (m += "."; i--; m += "0") {
      ;
    }
  }
} else if (i += s - d, i > 0) {
  for (s + 1 == d && (m += "."); i--; m += "0") {
    ;
  }
}
if (e = p(new t(e), i, n), s = e.e, m = r(e.c), d = m.length, 1 == o || 2 == o && (i <= s || s <= R)) {
  for (; d < i; m += "0", d++) {
    ;
  }
  m = u(m, s);
} else if (i -= l, m = h(m, s, "0"), s + 1 > d) {
  if (--i > 0) {
    for (m += "."; i--; m += "0") {
      ;
    }
  }
} else if (i += s - d, i > 0) {
  for (s + 1 == d && (m += "."); i--; m += "0") {
    ;
  }
}
for (; d < i; m += "0", d++) {
  ;
}
if (i -= l, m = h(m, s, "0"), s + 1 > d) {
  if (--i > 0) {
    for (m += "."; i--; m += "0") {
      ;
    }
  }
} else if (i += s - d, i > 0) {
  for (s + 1 == d && (m += "."); i--; m += "0") {
    ;
  }
}
if (--i > 0) {
  for (m += "."; i--; m += "0") {
    ;
  }
}
for (m += "."; i--; m += "0") {
  ;
}
if (i += s - d, i > 0) {
  for (s + 1 == d && (m += "."); i--; m += "0") {
    ;
  }
}
for (s + 1 == d && (m += "."); i--; m += "0") {
  ;
}
for (var n, o = 1, a = new t(e[0]); o < e.length; o++) {
  if (n = new t(e[o]), !n.s) {
    a = n;
    break;
  }
  i.call(a, n) && (a = n);
}
if (n = new t(e[o]), !n.s) {
  a = n;
  break;
}
for (var n = 1, o = t.length; !t[--o]; t.pop()) {
  ;
}
for (o = t[0]; o >= 10; o /= 10, n++) {
  ;
}
if (u) {
  e: {
    for (o = 1, r = u[0]; r >= 10; r /= 10, o++) {
      ;
    }
    if (a = t - o, a < 0) {
      a += w, s = t, l = u[c = 0], d = l / h[o - s - 1] % 10 | 0;
    } else if (c = f((a + 1) / w), c >= u.length) {
      if (!n) {
        break e;
      }
      for (; u.length <= c; u.push(0)) {
        ;
      }
      l = d = 0, o = 1, a %= w, s = a - w + 1;
    } else {
      for (l = r = u[c], o = 1; r >= 10; r /= 10, o++) {
        ;
      }
      a %= w, s = a - w + o, d = s < 0 ? 0 : l / h[o - s - 1] % 10 | 0;
    }
    if (n = n || t < 0 || null != u[c + 1] || (s < 0 ? l : l % h[o - s - 1]), n = i < 4 ? (d || n) && (0 == i || i == (e.s < 0 ? 3 : 2)) : d > 5 || 5 == d && (4 == i || n || 6 == i && (a > 0 ? s > 0 ? l / h[o - s] : 0 : u[c - 1]) % 10 & 1 || i == (e.s < 0 ? 8 : 7)), t < 1 || !u[0]) {
      return u.length = 0, n ? (t -= e.e + 1, u[0] = h[(w - t % w) % w], e.e = -t || 0) : u[0] = e.e = 0, e;
    }
    if (0 == a ? (u.length = c, r = 1, c--) : (u.length = c + 1, r = h[w - a], u[c] = s > 0 ? g(l / h[o - s] % h[s]) * r : 0), n) {
      for (;;) {
        if (0 == c) {
          for (a = 1, s = u[0]; s >= 10; s /= 10, a++) {
            ;
          }
          for (s = u[0] += r, r = 1; s >= 10; s /= 10, r++) {
            ;
          }
          a != r && (e.e++, u[0] == y && (u[0] = 1));
          break;
        }
        if (u[c] += r, u[c] != y) {
          break;
        }
        u[c--] = 0, r = 1;
      }
    }
    for (a = u.length; 0 === u[--a]; u.pop()) {
      ;
    }
  }
  e.e > B ? e.c = e.e = null : e.e < P && (e.c = [e.e = 0]);
}
e: {
  for (o = 1, r = u[0]; r >= 10; r /= 10, o++) {
    ;
  }
  if (a = t - o, a < 0) {
    a += w, s = t, l = u[c = 0], d = l / h[o - s - 1] % 10 | 0;
  } else if (c = f((a + 1) / w), c >= u.length) {
    if (!n) {
      break e;
    }
    for (; u.length <= c; u.push(0)) {
      ;
    }
    l = d = 0, o = 1, a %= w, s = a - w + 1;
  } else {
    for (l = r = u[c], o = 1; r >= 10; r /= 10, o++) {
      ;
    }
    a %= w, s = a - w + o, d = s < 0 ? 0 : l / h[o - s - 1] % 10 | 0;
  }
  if (n = n || t < 0 || null != u[c + 1] || (s < 0 ? l : l % h[o - s - 1]), n = i < 4 ? (d || n) && (0 == i || i == (e.s < 0 ? 3 : 2)) : d > 5 || 5 == d && (4 == i || n || 6 == i && (a > 0 ? s > 0 ? l / h[o - s] : 0 : u[c - 1]) % 10 & 1 || i == (e.s < 0 ? 8 : 7)), t < 1 || !u[0]) {
    return u.length = 0, n ? (t -= e.e + 1, u[0] = h[(w - t % w) % w], e.e = -t || 0) : u[0] = e.e = 0, e;
  }
  if (0 == a ? (u.length = c, r = 1, c--) : (u.length = c + 1, r = h[w - a], u[c] = s > 0 ? g(l / h[o - s] % h[s]) * r : 0), n) {
    for (;;) {
      if (0 == c) {
        for (a = 1, s = u[0]; s >= 10; s /= 10, a++) {
          ;
        }
        for (s = u[0] += r, r = 1; s >= 10; s /= 10, r++) {
          ;
        }
        a != r && (e.e++, u[0] == y && (u[0] = 1));
        break;
      }
      if (u[c] += r, u[c] != y) {
        break;
      }
      u[c--] = 0, r = 1;
    }
  }
  for (a = u.length; 0 === u[--a]; u.pop()) {
    ;
  }
}
for (o = 1, r = u[0]; r >= 10; r /= 10, o++) {
  ;
}
if (a = t - o, a < 0) {
  a += w, s = t, l = u[c = 0], d = l / h[o - s - 1] % 10 | 0;
} else if (c = f((a + 1) / w), c >= u.length) {
  if (!n) {
    break e;
  }
  for (; u.length <= c; u.push(0)) {
    ;
  }
  l = d = 0, o = 1, a %= w, s = a - w + 1;
} else {
  for (l = r = u[c], o = 1; r >= 10; r /= 10, o++) {
    ;
  }
  a %= w, s = a - w + o, d = s < 0 ? 0 : l / h[o - s - 1] % 10 | 0;
}
if (c = f((a + 1) / w), c >= u.length) {
  if (!n) {
    break e;
  }
  for (; u.length <= c; u.push(0)) {
    ;
  }
  l = d = 0, o = 1, a %= w, s = a - w + 1;
} else {
  for (l = r = u[c], o = 1; r >= 10; r /= 10, o++) {
    ;
  }
  a %= w, s = a - w + o, d = s < 0 ? 0 : l / h[o - s - 1] % 10 | 0;
}
if (!n) {
  break e;
}
for (; u.length <= c; u.push(0)) {
  ;
}
for (l = r = u[c], o = 1; r >= 10; r /= 10, o++) {
  ;
}
if (n = n || t < 0 || null != u[c + 1] || (s < 0 ? l : l % h[o - s - 1]), n = i < 4 ? (d || n) && (0 == i || i == (e.s < 0 ? 3 : 2)) : d > 5 || 5 == d && (4 == i || n || 6 == i && (a > 0 ? s > 0 ? l / h[o - s] : 0 : u[c - 1]) % 10 & 1 || i == (e.s < 0 ? 8 : 7)), t < 1 || !u[0]) {
  return u.length = 0, n ? (t -= e.e + 1, u[0] = h[(w - t % w) % w], e.e = -t || 0) : u[0] = e.e = 0, e;
}
if (0 == a ? (u.length = c, r = 1, c--) : (u.length = c + 1, r = h[w - a], u[c] = s > 0 ? g(l / h[o - s] % h[s]) * r : 0), n) {
  for (;;) {
    if (0 == c) {
      for (a = 1, s = u[0]; s >= 10; s /= 10, a++) {
        ;
      }
      for (s = u[0] += r, r = 1; s >= 10; s /= 10, r++) {
        ;
      }
      a != r && (e.e++, u[0] == y && (u[0] = 1));
      break;
    }
    if (u[c] += r, u[c] != y) {
      break;
    }
    u[c--] = 0, r = 1;
  }
}
for (;;) {
  if (0 == c) {
    for (a = 1, s = u[0]; s >= 10; s /= 10, a++) {
      ;
    }
    for (s = u[0] += r, r = 1; s >= 10; s /= 10, r++) {
      ;
    }
    a != r && (e.e++, u[0] == y && (u[0] = 1));
    break;
  }
  if (u[c] += r, u[c] != y) {
    break;
  }
  u[c--] = 0, r = 1;
}
if (0 == c) {
  for (a = 1, s = u[0]; s >= 10; s /= 10, a++) {
    ;
  }
  for (s = u[0] += r, r = 1; s >= 10; s /= 10, r++) {
    ;
  }
  a != r && (e.e++, u[0] == y && (u[0] = 1));
  break;
}
for (a = 1, s = u[0]; s >= 10; s /= 10, a++) {
  ;
}
for (s = u[0] += r, r = 1; s >= 10; s /= 10, r++) {
  ;
}
if (u[c] += r, u[c] != y) {
  break;
}
for (a = u.length; 0 === u[--a]; u.pop()) {
  ;
}
if (null != e) {
  if ("object" != typeof e) {
    throw Error(_ + "Object expected: " + e);
  }
  if (e.hasOwnProperty(t = "DECIMAL_PLACES") && (i = e[t], c(i, 0, C, t), L = i), e.hasOwnProperty(t = "ROUNDING_MODE") && (i = e[t], c(i, 0, 8, t), O = i), e.hasOwnProperty(t = "EXPONENTIAL_AT") && (i = e[t], i && i.pop ? (c(i[0], -C, 0, t), c(i[1], 0, C, t), R = i[0], D = i[1]) : (c(i, -C, C, t), R = -(D = i < 0 ? -i : i))), e.hasOwnProperty(t = "RANGE")) {
    if (i = e[t], i && i.pop) {
      c(i[0], -C, -1, t), c(i[1], 1, C, t), P = i[0], B = i[1];
    } else {
      if (c(i, -C, C, t), !i) {
        throw Error(_ + t + " cannot be zero: " + i);
      }
      P = -(B = i < 0 ? -i : i);
    }
  }
  if (e.hasOwnProperty(t = "CRYPTO")) {
    if (i = e[t], i !== !!i) {
      throw Error(_ + t + " not true or false: " + i);
    }
    if (i) {
      if ("undefined" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) {
        throw k = !i, Error(_ + "crypto unavailable");
      }
      k = i;
    } else {
      k = i;
    }
  }
  if (e.hasOwnProperty(t = "MODULO_MODE") && (i = e[t], c(i, 0, 9, t), F = i), e.hasOwnProperty(t = "POW_PRECISION") && (i = e[t], c(i, 0, C, t), H = i), e.hasOwnProperty(t = "FORMAT")) {
    if (i = e[t], "object" != typeof i) {
      throw Error(_ + t + " not an object: " + i);
    }
    z = i;
  }
  if (e.hasOwnProperty(t = "ALPHABET")) {
    if (i = e[t], "string" != typeof i || /^.$|[+-.\s]|(.).*\1/.test(i)) {
      throw Error(_ + t + " invalid: " + i);
    }
    W = i;
  }
}
if ("object" != typeof e) {
  throw Error(_ + "Object expected: " + e);
}
if (e.hasOwnProperty(t = "DECIMAL_PLACES") && (i = e[t], c(i, 0, C, t), L = i), e.hasOwnProperty(t = "ROUNDING_MODE") && (i = e[t], c(i, 0, 8, t), O = i), e.hasOwnProperty(t = "EXPONENTIAL_AT") && (i = e[t], i && i.pop ? (c(i[0], -C, 0, t), c(i[1], 0, C, t), R = i[0], D = i[1]) : (c(i, -C, C, t), R = -(D = i < 0 ? -i : i))), e.hasOwnProperty(t = "RANGE")) {
  if (i = e[t], i && i.pop) {
    c(i[0], -C, -1, t), c(i[1], 1, C, t), P = i[0], B = i[1];
  } else {
    if (c(i, -C, C, t), !i) {
      throw Error(_ + t + " cannot be zero: " + i);
    }
    P = -(B = i < 0 ? -i : i);
  }
}
if (i = e[t], i && i.pop) {
  c(i[0], -C, -1, t), c(i[1], 1, C, t), P = i[0], B = i[1];
} else {
  if (c(i, -C, C, t), !i) {
    throw Error(_ + t + " cannot be zero: " + i);
  }
  P = -(B = i < 0 ? -i : i);
}
if (c(i, -C, C, t), !i) {
  throw Error(_ + t + " cannot be zero: " + i);
}
if (e.hasOwnProperty(t = "CRYPTO")) {
  if (i = e[t], i !== !!i) {
    throw Error(_ + t + " not true or false: " + i);
  }
  if (i) {
    if ("undefined" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) {
      throw k = !i, Error(_ + "crypto unavailable");
    }
    k = i;
  } else {
    k = i;
  }
}
if (i = e[t], i !== !!i) {
  throw Error(_ + t + " not true or false: " + i);
}
if (i) {
  if ("undefined" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) {
    throw k = !i, Error(_ + "crypto unavailable");
  }
  k = i;
} else {
  k = i;
}
if ("undefined" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) {
  throw k = !i, Error(_ + "crypto unavailable");
}
if (e.hasOwnProperty(t = "MODULO_MODE") && (i = e[t], c(i, 0, 9, t), F = i), e.hasOwnProperty(t = "POW_PRECISION") && (i = e[t], c(i, 0, C, t), H = i), e.hasOwnProperty(t = "FORMAT")) {
  if (i = e[t], "object" != typeof i) {
    throw Error(_ + t + " not an object: " + i);
  }
  z = i;
}
if (i = e[t], "object" != typeof i) {
  throw Error(_ + t + " not an object: " + i);
}
if (e.hasOwnProperty(t = "ALPHABET")) {
  if (i = e[t], "string" != typeof i || /^.$|[+-.\s]|(.).*\1/.test(i)) {
    throw Error(_ + t + " invalid: " + i);
  }
  W = i;
}
if (i = e[t], "string" != typeof i || /^.$|[+-.\s]|(.).*\1/.test(i)) {
  throw Error(_ + t + " invalid: " + i);
}
if (null == e ? e = L : c(e, 0, C), s = f(e / w), k) {
  if (crypto.getRandomValues) {
    for (n = crypto.getRandomValues(new Uint32Array(s *= 2)); l < s;) {
      r = 131072 * n[l] + (n[l + 1] >>> 11), r >= 9e15 ? (o = crypto.getRandomValues(new Uint32Array(2)), n[l] = o[0], n[l + 1] = o[1]) : (d.push(r % 1e14), l += 2);
    }
    l = s / 2;
  } else {
    if (!crypto.randomBytes) {
      throw k = !1, Error(_ + "crypto unavailable");
    }
    for (n = crypto.randomBytes(s *= 7); l < s;) {
      r = 281474976710656 * (31 & n[l]) + 1099511627776 * n[l + 1] + 4294967296 * n[l + 2] + 16777216 * n[l + 3] + (n[l + 4] << 16) + (n[l + 5] << 8) + n[l + 6], r >= 9e15 ? crypto.randomBytes(7).copy(n, l) : (d.push(r % 1e14), l += 7);
    }
    l = s / 7;
  }
}
if (crypto.getRandomValues) {
  for (n = crypto.getRandomValues(new Uint32Array(s *= 2)); l < s;) {
    r = 131072 * n[l] + (n[l + 1] >>> 11), r >= 9e15 ? (o = crypto.getRandomValues(new Uint32Array(2)), n[l] = o[0], n[l + 1] = o[1]) : (d.push(r % 1e14), l += 2);
  }
  l = s / 2;
} else {
  if (!crypto.randomBytes) {
    throw k = !1, Error(_ + "crypto unavailable");
  }
  for (n = crypto.randomBytes(s *= 7); l < s;) {
    r = 281474976710656 * (31 & n[l]) + 1099511627776 * n[l + 1] + 4294967296 * n[l + 2] + 16777216 * n[l + 3] + (n[l + 4] << 16) + (n[l + 5] << 8) + n[l + 6], r >= 9e15 ? crypto.randomBytes(7).copy(n, l) : (d.push(r % 1e14), l += 7);
  }
  l = s / 7;
}
for (n = crypto.getRandomValues(new Uint32Array(s *= 2)); l < s;) {
  r = 131072 * n[l] + (n[l + 1] >>> 11), r >= 9e15 ? (o = crypto.getRandomValues(new Uint32Array(2)), n[l] = o[0], n[l + 1] = o[1]) : (d.push(r % 1e14), l += 2);
}
if (!crypto.randomBytes) {
  throw k = !1, Error(_ + "crypto unavailable");
}
for (n = crypto.randomBytes(s *= 7); l < s;) {
  r = 281474976710656 * (31 & n[l]) + 1099511627776 * n[l + 1] + 4294967296 * n[l + 2] + 16777216 * n[l + 3] + (n[l + 4] << 16) + (n[l + 5] << 8) + n[l + 6], r >= 9e15 ? crypto.randomBytes(7).copy(n, l) : (d.push(r % 1e14), l += 7);
}
if (!k) {
  for (; l < s;) {
    r = i(), r < 9e15 && (d[l++] = r % 1e14);
  }
}
for (; l < s;) {
  r = i(), r < 9e15 && (d[l++] = r % 1e14);
}
for (s = d[--l], e %= w, s && e && (r = M[w - e], d[l] = g(s / r) * r); 0 === d[l]; d.pop(), l--) {
  ;
}
if (l < 0) {
  d = [a = 0];
} else {
  for (a = -1; 0 === d[0]; d.splice(0, 1), a -= w) {
    ;
  }
  for (l = 1, r = d[0]; r >= 10; r /= 10, l++) {
    ;
  }
  l < w && (a -= w - l);
}
for (a = -1; 0 === d[0]; d.splice(0, 1), a -= w) {
  ;
}
for (l = 1, r = d[0]; r >= 10; r /= 10, l++) {
  ;
}
for (var e = 1, i = arguments, n = new t(i[0]); e < i.length;) {
  n = n.plus(i[e++]);
}
for (var o, a, s = [0], r = 0, l = e.length; r < l;) {
  for (a = s.length; a--; s[a] *= t) {
    ;
  }
  for (s[0] += n.indexOf(e.charAt(r++)), o = 0; o < s.length; o++) {
    s[o] > i - 1 && (null == s[o + 1] && (s[o + 1] = 0), s[o + 1] += s[o] / i | 0, s[o] %= i);
  }
}
for (a = s.length; a--; s[a] *= t) {
  ;
}
for (s[0] += n.indexOf(e.charAt(r++)), o = 0; o < s.length; o++) {
  s[o] > i - 1 && (null == s[o + 1] && (s[o + 1] = 0), s[o + 1] += s[o] / i | 0, s[o] %= i);
}
for (v >= 0 && (p = H, H = 0, n = n.replace(".", ""), _ = new t(o), f = _.pow(n.length - v), H = p, _.c = e(h(r(f.c), f.e, "0"), 10, a, i), _.e = _.c.length), g = e(n, o, a, l ? (c = W, i) : (c = i, W)), u = p = g.length; 0 == g[--p]; g.pop()) {
  ;
}
if (!g[0]) {
  return c.charAt(0);
}
if (v < 0 ? --u : (f.c = g, f.e = u, f.s = s, f = A(f, _, y, w, a), g = f.c, m = f.r, u = f.e), d = u + y + 1, v = g[d], p = a / 2, m = m || d < 0 || null != g[d + 1], m = w < 4 ? (null != v || m) && (0 == w || w == (f.s < 0 ? 3 : 2)) : v > p || v == p && (4 == w || m || 6 == w && 1 & g[d - 1] || w == (f.s < 0 ? 8 : 7)), d < 1 || !g[0]) {
  n = m ? h(c.charAt(1), -y, c.charAt(0)) : c.charAt(0);
} else {
  if (g.length = d, m) {
    for (--a; ++g[--d] > a;) {
      g[d] = 0, d || (++u, g = [1].concat(g));
    }
  }
  for (p = g.length; !g[--p];) {
    ;
  }
  for (v = 0, n = ""; v <= p; n += c.charAt(g[v++])) {
    ;
  }
  n = h(n, u, c.charAt(0));
}
if (g.length = d, m) {
  for (--a; ++g[--d] > a;) {
    g[d] = 0, d || (++u, g = [1].concat(g));
  }
}
for (--a; ++g[--d] > a;) {
  g[d] = 0, d || (++u, g = [1].concat(g));
}
for (p = g.length; !g[--p];) {
  ;
}
for (v = 0, n = ""; v <= p; n += c.charAt(g[v++])) {
  ;
}
for (e = e.slice(); l--;) {
  a = e[l] % T, s = e[l] / T | 0, n = d * a + s * c, o = c * a + n % T * T + r, r = (o / i | 0) + (n / T | 0) + d * s, e[l] = o % i;
}
if (i != n) {
  a = i > n ? 1 : -1;
} else {
  for (o = a = 0; o < i; o++) {
    if (e[o] != t[o]) {
      a = e[o] > t[o] ? 1 : -1;
      break;
    }
  }
}
for (o = a = 0; o < i; o++) {
  if (e[o] != t[o]) {
    a = e[o] > t[o] ? 1 : -1;
    break;
  }
}
if (e[o] != t[o]) {
  a = e[o] > t[o] ? 1 : -1;
  break;
}
for (var o = 0; i--;) {
  e[i] -= o, o = e[i] < t[i] ? 1 : 0, e[i] = o * n + e[i] - t[i];
}
for (; !e[0] && e.length > 1; e.splice(0, 1)) {
  ;
}
if (!(O && O[0] && R && R[0])) {
  return new t(o.s && a.s && (O ? !R || O[0] != R[0] : R) ? O && 0 == O[0] || !R ? 0 * L : L / 0 : NaN);
}
for (b = new t(L), M = b.c = [], u = o.e - a.e, L = r + u + 1, c || (c = y, u = s(o.e / w) - s(a.e / w), L = L / w | 0), h = 0; R[h] == (O[h] || 0); h++) {
  ;
}
if (R[h] > (O[h] || 0) && u--, L < 0) {
  M.push(1), m = !0;
} else {
  for (S = O.length, N = R.length, h = 0, L += 2, f = g(c / (R[0] + 1)), f > 1 && (R = e(R, f, c), O = e(O, f, c), N = R.length, S = O.length), A = N, T = O.slice(0, N), C = T.length; C < N; T[C++] = 0) {
    ;
  }
  x = R.slice(), x = [0].concat(x), E = R[0], R[1] >= c / 2 && E++;
  do {
    if (f = 0, d = i(R, T, N, C), d < 0) {
      if (I = T[0], N != C && (I = I * c + (T[1] || 0)), f = g(I / E), f > 1) {
        for (f >= c && (f = c - 1), _ = e(R, f, c), v = _.length, C = T.length; 1 == i(_, T, v, C);) {
          f--, n(_, N < v ? x : R, v, c), v = _.length, d = 1;
        }
      } else {
        0 == f && (d = f = 1), _ = R.slice(), v = _.length;
      }
      if (v < C && (_ = [0].concat(_)), n(T, _, C, c), C = T.length, d == -1) {
        for (; i(R, T, N, C) < 1;) {
          f++, n(T, N < C ? x : R, C, c), C = T.length;
        }
      }
    } else {
      0 === d && (f++, T = [0]);
    }
    M[h++] = f, T[0] ? T[C++] = O[A] || 0 : (T = [O[A]], C = 1);
  } while ((A++ < S || null != T[0]) && L--);
  m = null != T[0], M[0] || M.splice(0, 1);
}
for (S = O.length, N = R.length, h = 0, L += 2, f = g(c / (R[0] + 1)), f > 1 && (R = e(R, f, c), O = e(O, f, c), N = R.length, S = O.length), A = N, T = O.slice(0, N), C = T.length; C < N; T[C++] = 0) {
  ;
}
do {
  if (f = 0, d = i(R, T, N, C), d < 0) {
    if (I = T[0], N != C && (I = I * c + (T[1] || 0)), f = g(I / E), f > 1) {
      for (f >= c && (f = c - 1), _ = e(R, f, c), v = _.length, C = T.length; 1 == i(_, T, v, C);) {
        f--, n(_, N < v ? x : R, v, c), v = _.length, d = 1;
      }
    } else {
      0 == f && (d = f = 1), _ = R.slice(), v = _.length;
    }
    if (v < C && (_ = [0].concat(_)), n(T, _, C, c), C = T.length, d == -1) {
      for (; i(R, T, N, C) < 1;) {
        f++, n(T, N < C ? x : R, C, c), C = T.length;
      }
    }
  } else {
    0 === d && (f++, T = [0]);
  }
  M[h++] = f, T[0] ? T[C++] = O[A] || 0 : (T = [O[A]], C = 1);
} while ((A++ < S || null != T[0]) && L--);
if (f = 0, d = i(R, T, N, C), d < 0) {
  if (I = T[0], N != C && (I = I * c + (T[1] || 0)), f = g(I / E), f > 1) {
    for (f >= c && (f = c - 1), _ = e(R, f, c), v = _.length, C = T.length; 1 == i(_, T, v, C);) {
      f--, n(_, N < v ? x : R, v, c), v = _.length, d = 1;
    }
  } else {
    0 == f && (d = f = 1), _ = R.slice(), v = _.length;
  }
  if (v < C && (_ = [0].concat(_)), n(T, _, C, c), C = T.length, d == -1) {
    for (; i(R, T, N, C) < 1;) {
      f++, n(T, N < C ? x : R, C, c), C = T.length;
    }
  }
} else {
  0 === d && (f++, T = [0]);
}
if (I = T[0], N != C && (I = I * c + (T[1] || 0)), f = g(I / E), f > 1) {
  for (f >= c && (f = c - 1), _ = e(R, f, c), v = _.length, C = T.length; 1 == i(_, T, v, C);) {
    f--, n(_, N < v ? x : R, v, c), v = _.length, d = 1;
  }
} else {
  0 == f && (d = f = 1), _ = R.slice(), v = _.length;
}
for (f >= c && (f = c - 1), _ = e(R, f, c), v = _.length, C = T.length; 1 == i(_, T, v, C);) {
  f--, n(_, N < v ? x : R, v, c), v = _.length, d = 1;
}
if (v < C && (_ = [0].concat(_)), n(T, _, C, c), C = T.length, d == -1) {
  for (; i(R, T, N, C) < 1;) {
    f++, n(T, N < C ? x : R, C, c), C = T.length;
  }
}
for (; i(R, T, N, C) < 1;) {
  f++, n(T, N < C ? x : R, C, c), C = T.length;
}
if (c == y) {
  for (h = 1, L = M[0]; L >= 10; L /= 10, h++) {
    ;
  }
  p(b, r + (b.e = h + u * w - 1) + 1, l, m);
} else {
  b.e = u, b.r = +m;
}
for (h = 1, L = M[0]; L >= 10; L /= 10, h++) {
  ;
}
if (o.test(u)) {
  s.s = isNaN(u) ? null : u < 0 ? -1 : 1, s.c = s.e = null;
} else {
  if (!l && (u = u.replace(e, function (e, t, i) {
    return d = "x" == (i = i.toLowerCase()) ? 16 : "b" == i ? 2 : 8, c && c != d ? e : t;
  }), c && (d = c, u = u.replace(i, "$1").replace(n, "0.$1")), r != u)) {
    return new t(u, d);
  }
  if (t.DEBUG) {
    throw Error(_ + "Not a" + (c ? " base " + c : "") + " number: " + r);
  }
  s.c = s.e = s.s = null;
}
if (!l && (u = u.replace(e, function (e, t, i) {
  return d = "x" == (i = i.toLowerCase()) ? 16 : "b" == i ? 2 : 8, c && c != d ? e : t;
}), c && (d = c, u = u.replace(i, "$1").replace(n, "0.$1")), r != u)) {
  return new t(u, d);
}
if (t.DEBUG) {
  throw Error(_ + "Not a" + (c ? " base " + c : "") + " number: " + r);
}
if (null != e) {
  return c(e, 0, C), null == i ? i = O : c(i, 0, 8), p(new t(r), e + r.e + 1, i);
}
if (!(n = r.c)) {
  return null;
}
if (o = ((a = n.length - 1) - s(this.e / w)) * w, a = n[a]) {
  for (; a % 10 == 0; a /= 10, o--) {
    ;
  }
}
for (; a % 10 == 0; a /= 10, o--) {
  ;
}
if (e = new t(e), e.c && !e.isInteger()) {
  throw Error(_ + "Exponent not an integer: " + I(e));
}
if (null != i && (i = new t(i)), l = e.e > 14, !m.c || !m.c[0] || 1 == m.c[0] && !m.e && 1 == m.c.length || !e.c || !e.c[0]) {
  return h = new t(Math.pow(+I(m), l ? 2 - d(e) : +I(e))), i ? h.mod(i) : h;
}
if (c = e.s < 0, i) {
  if (i.c ? !i.c[0] : !i.s) {
    return new t(NaN);
  }
  o = !c && m.isInteger() && i.isInteger(), o && (m = m.mod(i));
} else {
  if (e.e > 9 && (m.e > 0 || m.e < -1 || (0 == m.e ? m.c[0] > 1 || l && m.c[1] >= 24e7 : m.c[0] < 8e13 || l && m.c[0] <= 9999975e7))) {
    return s = m.s < 0 && d(e) ? -0 : 0, m.e > -1 && (s = 1 / s), new t(c ? 1 / s : s);
  }
  H && (s = f(H / w + 2));
}
if (i.c ? !i.c[0] : !i.s) {
  return new t(NaN);
}
if (e.e > 9 && (m.e > 0 || m.e < -1 || (0 == m.e ? m.c[0] > 1 || l && m.c[1] >= 24e7 : m.c[0] < 8e13 || l && m.c[0] <= 9999975e7))) {
  return s = m.s < 0 && d(e) ? -0 : 0, m.e > -1 && (s = 1 / s), new t(c ? 1 / s : s);
}
for (l ? (n = new t(.5), c && (e.s = 1), u = d(e)) : (a = Math.abs(+I(e)), u = a % 2), h = new t(x);;) {
  if (u) {
    if (h = h.times(m), !h.c) {
      break;
    }
    s ? h.c.length > s && (h.c.length = s) : o && (h = h.mod(i));
  }
  if (a) {
    if (a = g(a / 2), 0 === a) {
      break;
    }
    u = a % 2;
  } else if (e = e.times(n), p(e, e.e + 1, 1), e.e > 14) {
    u = d(e);
  } else {
    if (a = +I(e), 0 === a) {
      break;
    }
    u = a % 2;
  }
  m = m.times(m), s ? m.c && m.c.length > s && (m.c.length = s) : o && (m = m.mod(i));
}
if (u) {
  if (h = h.times(m), !h.c) {
    break;
  }
  s ? h.c.length > s && (h.c.length = s) : o && (h = h.mod(i));
}
if (h = h.times(m), !h.c) {
  break;
}
if (a) {
  if (a = g(a / 2), 0 === a) {
    break;
  }
  u = a % 2;
} else if (e = e.times(n), p(e, e.e + 1, 1), e.e > 14) {
  u = d(e);
} else {
  if (a = +I(e), 0 === a) {
    break;
  }
  u = a % 2;
}
if (a = g(a / 2), 0 === a) {
  break;
}
if (e = e.times(n), p(e, e.e + 1, 1), e.e > 14) {
  u = d(e);
} else {
  if (a = +I(e), 0 === a) {
    break;
  }
  u = a % 2;
}
if (a = +I(e), 0 === a) {
  break;
}
if (e = new t(e, i), i = e.s, !d || !i) {
  return new t(NaN);
}
if (d != i) {
  return e.s = -i, c.plus(e);
}
if (!u || !h) {
  if (!p || !m) {
    return p ? (e.s = -i, e) : new t(m ? c : NaN);
  }
  if (!p[0] || !m[0]) {
    return m[0] ? (e.s = -i, e) : new t(p[0] ? c : 3 == O ? -0 : 0);
  }
}
if (!p || !m) {
  return p ? (e.s = -i, e) : new t(m ? c : NaN);
}
if (!p[0] || !m[0]) {
  return m[0] ? (e.s = -i, e) : new t(p[0] ? c : 3 == O ? -0 : 0);
}
if (u = s(u), h = s(h), p = p.slice(), d = u - h) {
  for ((l = d < 0) ? (d = -d, r = p) : (h = u, r = m), r.reverse(), i = d; i--; r.push(0)) {
    ;
  }
  r.reverse();
} else {
  for (a = (l = (d = p.length) < (i = m.length)) ? d : i, d = i = 0; i < a; i++) {
    if (p[i] != m[i]) {
      l = p[i] < m[i];
      break;
    }
  }
}
for ((l = d < 0) ? (d = -d, r = p) : (h = u, r = m), r.reverse(), i = d; i--; r.push(0)) {
  ;
}
for (a = (l = (d = p.length) < (i = m.length)) ? d : i, d = i = 0; i < a; i++) {
  if (p[i] != m[i]) {
    l = p[i] < m[i];
    break;
  }
}
if (p[i] != m[i]) {
  l = p[i] < m[i];
  break;
}
if (l && (r = p, p = m, m = r, e.s = -e.s), i = (a = m.length) - (n = p.length), i > 0) {
  for (; i--; p[n++] = 0) {
    ;
  }
}
for (; i--; p[n++] = 0) {
  ;
}
for (i = y - 1; a > d;) {
  if (p[--a] < m[a]) {
    for (n = a; n && !p[--n]; p[n] = i) {
      ;
    }
    --p[n], p[a] += y;
  }
  p[a] -= m[a];
}
if (p[--a] < m[a]) {
  for (n = a; n && !p[--n]; p[n] = i) {
    ;
  }
  --p[n], p[a] += y;
}
for (n = a; n && !p[--n]; p[n] = i) {
  ;
}
for (; 0 == p[0]; p.splice(0, 1), --h) {
  ;
}
if (!(C && I && C[0] && I[0])) {
  return !M.s || !e.s || C && !C[0] && !I || I && !I[0] && !C ? e.c = e.e = e.s = null : (e.s *= M.s, C && I ? (e.c = [0], e.e = 0) : e.c = e.e = null), e;
}
for (a = s(M.e / w) + s(e.e / w), e.s *= M.s, u = C.length, m = I.length, u < m && (_ = C, C = I, I = _, r = u, u = m, m = r), r = u + m, _ = []; r--; _.push(0)) {
  ;
}
for (v = y, b = T, r = m; --r >= 0;) {
  for (n = 0, f = I[r] % b, g = I[r] / b | 0, c = u, l = r + c; l > r;) {
    h = C[--c] % b, p = C[c] / b | 0, d = g * h + p * f, h = f * h + d % b * b + _[l] + n, n = (h / v | 0) + (d / b | 0) + g * p, _[l--] = h % v;
  }
  _[l] = n;
}
for (n = 0, f = I[r] % b, g = I[r] / b | 0, c = u, l = r + c; l > r;) {
  h = C[--c] % b, p = C[c] / b | 0, d = g * h + p * f, h = f * h + d % b * b + _[l] + n, n = (h / v | 0) + (d / b | 0) + g * p, _[l--] = h % v;
}
if (e = new t(e, i), i = e.s, !r || !i) {
  return new t(NaN);
}
if (r != i) {
  return e.s = -i, a.minus(e);
}
if (!l || !c) {
  if (!d || !u) {
    return new t(r / 0);
  }
  if (!d[0] || !u[0]) {
    return u[0] ? e : new t(d[0] ? a : 0 * r);
  }
}
if (!d || !u) {
  return new t(r / 0);
}
if (!d[0] || !u[0]) {
  return u[0] ? e : new t(d[0] ? a : 0 * r);
}
if (l = s(l), c = s(c), d = d.slice(), r = l - c) {
  for (r > 0 ? (c = l, n = u) : (r = -r, n = d), n.reverse(); r--; n.push(0)) {
    ;
  }
  n.reverse();
}
for (r > 0 ? (c = l, n = u) : (r = -r, n = d), n.reverse(); r--; n.push(0)) {
  ;
}
for (r = d.length, i = u.length, r - i < 0 && (n = u, u = d, d = n, i = r), r = 0; i;) {
  r = (d[--i] = d[i] + u[i] + r) / y | 0, d[i] = y === d[i] ? 0 : d[i] % y;
}
if (null != e && e !== !!e) {
  return c(e, 1, C), null == i ? i = O : c(i, 0, 8), p(new t(s), e, i);
}
if (!(n = s.c)) {
  return null;
}
if (a = n.length - 1, o = a * w + 1, a = n[a]) {
  for (; a % 10 == 0; a /= 10, o--) {
    ;
  }
  for (a = n[0]; a >= 10; a /= 10, o++) {
    ;
  }
}
for (; a % 10 == 0; a /= 10, o--) {
  ;
}
for (a = n[0]; a >= 10; a /= 10, o++) {
  ;
}
if (1 !== d || !c || !c[0]) {
  return new t(!d || d < 0 && (!c || c[0]) ? NaN : c ? l : 1 / 0);
}
if (d = Math.sqrt(+I(l)), 0 == d || d == 1 / 0 ? (i = r(c), (i.length + u) % 2 == 0 && (i += "0"), d = Math.sqrt(+i), u = s((u + 1) / 2) - (u < 0 || u % 2), d == 1 / 0 ? i = "1e" + u : (i = d.toExponential(), i = i.slice(0, i.indexOf("e") + 1) + u), n = new t(i)) : n = new t(d + ""), n.c[0]) {
  for (u = n.e, d = u + h, d < 3 && (d = 0);;) {
    if (a = n, n = m.times(a.plus(A(l, a, h, 1))), r(a.c).slice(0, d) === (i = r(n.c)).slice(0, d)) {
      if (n.e < u && --d, i = i.slice(d - 3, d + 1), "9999" != i && (o || "4999" != i)) {
        +i && (+i.slice(1) || "5" != i.charAt(0)) || (p(n, n.e + L + 2, 1), e = !n.times(n).eq(l));
        break;
      }
      if (!o && (p(a, a.e + L + 2, 0), a.times(a).eq(l))) {
        n = a;
        break;
      }
      h += 4, d += 4, o = 1;
    }
  }
}
for (u = n.e, d = u + h, d < 3 && (d = 0);;) {
  if (a = n, n = m.times(a.plus(A(l, a, h, 1))), r(a.c).slice(0, d) === (i = r(n.c)).slice(0, d)) {
    if (n.e < u && --d, i = i.slice(d - 3, d + 1), "9999" != i && (o || "4999" != i)) {
      +i && (+i.slice(1) || "5" != i.charAt(0)) || (p(n, n.e + L + 2, 1), e = !n.times(n).eq(l));
      break;
    }
    if (!o && (p(a, a.e + L + 2, 0), a.times(a).eq(l))) {
      n = a;
      break;
    }
    h += 4, d += 4, o = 1;
  }
}
if (a = n, n = m.times(a.plus(A(l, a, h, 1))), r(a.c).slice(0, d) === (i = r(n.c)).slice(0, d)) {
  if (n.e < u && --d, i = i.slice(d - 3, d + 1), "9999" != i && (o || "4999" != i)) {
    +i && (+i.slice(1) || "5" != i.charAt(0)) || (p(n, n.e + L + 2, 1), e = !n.times(n).eq(l));
    break;
  }
  if (!o && (p(a, a.e + L + 2, 0), a.times(a).eq(l))) {
    n = a;
    break;
  }
  h += 4, d += 4, o = 1;
}
if (n.e < u && --d, i = i.slice(d - 3, d + 1), "9999" != i && (o || "4999" != i)) {
  +i && (+i.slice(1) || "5" != i.charAt(0)) || (p(n, n.e + L + 2, 1), e = !n.times(n).eq(l));
  break;
}
if (!o && (p(a, a.e + L + 2, 0), a.times(a).eq(l))) {
  n = a;
  break;
}
if (null == i) {
  null != e && t && "object" == typeof t ? (i = t, t = null) : e && "object" == typeof e ? (i = e, e = t = null) : i = z;
} else if ("object" != typeof i) {
  throw Error(_ + "Argument not an object: " + i);
}
if ("object" != typeof i) {
  throw Error(_ + "Argument not an object: " + i);
}
if (n = o.toFixed(e, t), o.c) {
  var a,
    s = n.split("."),
    r = +i.groupSize,
    l = +i.secondaryGroupSize,
    c = i.groupSeparator || "",
    d = s[0],
    u = s[1],
    h = o.s < 0,
    p = h ? d.slice(1) : d,
    m = p.length;
  if (l && (a = r, r = l, l = a, m -= a), r > 0 && m > 0) {
    for (a = m % r || r, d = p.substr(0, a); a < m; a += r) {
      d += c + p.substr(a, r);
    }
    l > 0 && (d += c + p.slice(a)), h && (d = "-" + d);
  }
  n = u ? d + (i.decimalSeparator || "") + ((l = +i.fractionGroupSize) ? u.replace(new RegExp("\\d{" + l + "}\\B", "g"), "$&" + (i.fractionGroupSeparator || "")) : u) : d;
}
if (l && (a = r, r = l, l = a, m -= a), r > 0 && m > 0) {
  for (a = m % r || r, d = p.substr(0, a); a < m; a += r) {
    d += c + p.substr(a, r);
  }
  l > 0 && (d += c + p.slice(a)), h && (d = "-" + d);
}
for (a = m % r || r, d = p.substr(0, a); a < m; a += r) {
  d += c + p.substr(a, r);
}
if (null != e && (c = new t(e), !c.isInteger() && (c.c || 1 !== c.s) || c.lt(x))) {
  throw Error(_ + "Argument " + (c.isInteger() ? "out of range: " : "not an integer: ") + I(c));
}
if (!g) {
  return new t(f);
}
for (i = new t(x), u = n = new t(x), o = d = new t(x), m = r(g), s = i.e = m.length - f.e - 1, i.c[0] = M[(l = s % w) < 0 ? w + l : l], e = !e || c.comparedTo(i) > 0 ? s > 0 ? i : u : c, l = B, B = 1 / 0, c = new t(m), d.c[0] = 0; h = A(c, i, 0, 1), a = n.plus(h.times(o)), 1 != a.comparedTo(e);) {
  n = o, o = a, u = d.plus(h.times(a = u)), d = a, i = c.minus(h.times(a = i)), c = a;
}
for (var t, i, n = 1, o = e.length, a = e[0] + ""; n < o;) {
  for (t = e[n++] + "", i = w - t.length; i--; t = "0" + t) {
    ;
  }
  a += t;
}
for (t = e[n++] + "", i = w - t.length; i--; t = "0" + t) {
  ;
}
for (o = a.length; 48 === a.charCodeAt(--o);) {
  ;
}
if (!s || !r) {
  return null;
}
if (i = o && !o[0], n = a && !a[0], i || n) {
  return i ? n ? 0 : -r : s;
}
if (s != r) {
  return s;
}
if (i = s < 0, n = l == c, !o || !a) {
  return n ? 0 : !o ^ i ? 1 : -1;
}
if (!n) {
  return l > c ^ i ? 1 : -1;
}
for (r = (l = o.length) < (c = a.length) ? l : c, s = 0; s < r; s++) {
  if (o[s] != a[s]) {
    return o[s] > a[s] ^ i ? 1 : -1;
  }
}
if (o[s] != a[s]) {
  return o[s] > a[s] ^ i ? 1 : -1;
}
if (e < t || e > i || e !== (e < 0 ? f(e) : g(e))) {
  throw Error(_ + (n || "Argument") + ("number" == typeof e ? e < t || e > i ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(e));
}
if (t < 0) {
  for (o = i + "."; ++t; o += i) {
    ;
  }
  e = o + e;
} else if (n = e.length, ++t > n) {
  for (o = i, t -= n; --t; o += i) {
    ;
  }
  e += o;
} else {
  t < n && (e = e.slice(0, t) + "." + e.slice(t));
}
for (o = i + "."; ++t; o += i) {
  ;
}
if (n = e.length, ++t > n) {
  for (o = i, t -= n; --t; o += i) {
    ;
  }
  e += o;
} else {
  t < n && (e = e.slice(0, t) + "." + e.slice(t));
}
for (o = i, t -= n; --t; o += i) {
  ;
}
if (!e || e.length < 1) {
  return null;
}
for (var s = 0; s < e.length; s++) {
  var l = e[s];
  if ("POPUP" === l.mode && l.external_article) {
    var d = l.external_article.id,
      u = a[d];
    if (!u) {
      continue;
    }
    for (var m = !1, f = !1, g = 0; g < u.length; g++) {
      var _ = u[g];
      switch (f = Boolean(_.noMinLevel), _.type) {
        case p.LEVEL:
          m = _.level <= c.gui.playerData.characterBaseInformations.level;
          break;
        case p.MAP:
          m = _.mapId === c.gui.playerData.position.mapId;
      }
      if (m) {
        break;
      }
    }
    if (c.gui.playerData.characterBaseInformations.level < r.MARKETING_POPUP_LEVEL_LIMIT && !f && (m = !1), !m) {
      continue;
    }
    var v = t[l.id];
    if (v) {
      var y = i.now();
      if (y - v < h) {
        continue;
      }
    }
    if (l.external_article.enddate) {
      o.push(l);
      continue;
    }
    n.push(l);
  }
}
if ("POPUP" === l.mode && l.external_article) {
  var d = l.external_article.id,
    u = a[d];
  if (!u) {
    continue;
  }
  for (var m = !1, f = !1, g = 0; g < u.length; g++) {
    var _ = u[g];
    switch (f = Boolean(_.noMinLevel), _.type) {
      case p.LEVEL:
        m = _.level <= c.gui.playerData.characterBaseInformations.level;
        break;
      case p.MAP:
        m = _.mapId === c.gui.playerData.position.mapId;
    }
    if (m) {
      break;
    }
  }
  if (c.gui.playerData.characterBaseInformations.level < r.MARKETING_POPUP_LEVEL_LIMIT && !f && (m = !1), !m) {
    continue;
  }
  var v = t[l.id];
  if (v) {
    var y = i.now();
    if (y - v < h) {
      continue;
    }
  }
  if (l.external_article.enddate) {
    o.push(l);
    continue;
  }
  n.push(l);
}
if (!u) {
  continue;
}
for (var m = !1, f = !1, g = 0; g < u.length; g++) {
  var _ = u[g];
  switch (f = Boolean(_.noMinLevel), _.type) {
    case p.LEVEL:
      m = _.level <= c.gui.playerData.characterBaseInformations.level;
      break;
    case p.MAP:
      m = _.mapId === c.gui.playerData.position.mapId;
  }
  if (m) {
    break;
  }
}
if (m) {
  break;
}
if (c.gui.playerData.characterBaseInformations.level < r.MARKETING_POPUP_LEVEL_LIMIT && !f && (m = !1), !m) {
  continue;
}
if (v) {
  var y = i.now();
  if (y - v < h) {
    continue;
  }
}
if (y - v < h) {
  continue;
}
if (l.external_article.enddate) {
  o.push(l);
  continue;
}
if (!e || e.length < 1) {
  return null;
}
for (var l = 0; l < e.length; l++) {
  var p = e[l];
  if ("POPUP" === p.mode && d[p.type]) {
    var m = p.external_article && p.external_article.id;
    if (c.gui.playerData.characterBaseInformations.level < r.MARKETING_POPUP_LEVEL_LIMIT) {
      return null;
    }
    if ((m === r.BP_ELITE_LATAM || m === r.BP_ELITE_ROW) && o > 0 && o <= u) {
      n = [p];
      break;
    }
    if (a[m]) {
      continue;
    }
    var f = t[p.id];
    if (f) {
      var g = i.now();
      if (g - f < h) {
        continue;
      }
    }
    n.push(p);
  }
}
if ("POPUP" === p.mode && d[p.type]) {
  var m = p.external_article && p.external_article.id;
  if (c.gui.playerData.characterBaseInformations.level < r.MARKETING_POPUP_LEVEL_LIMIT) {
    return null;
  }
  if ((m === r.BP_ELITE_LATAM || m === r.BP_ELITE_ROW) && o > 0 && o <= u) {
    n = [p];
    break;
  }
  if (a[m]) {
    continue;
  }
  var f = t[p.id];
  if (f) {
    var g = i.now();
    if (g - f < h) {
      continue;
    }
  }
  n.push(p);
}
if (c.gui.playerData.characterBaseInformations.level < r.MARKETING_POPUP_LEVEL_LIMIT) {
  return null;
}
if ((m === r.BP_ELITE_LATAM || m === r.BP_ELITE_ROW) && o > 0 && o <= u) {
  n = [p];
  break;
}
if (a[m]) {
  continue;
}
if (f) {
  var g = i.now();
  if (g - f < h) {
    continue;
  }
}
if (g - f < h) {
  continue;
}
if (e.gaugeMode === d.FIGHT_TIMER) {
  var o = n.characters.controlledCharacterId;
  t.id === o ? e._animate(i) : (e._setStatic(), e._setPercentage(0));
}
if (this.gaugeMode !== d.FIGHT_TIMER) {
  return console.error(new Error("ProgressGauge._animate: ProgressGauge is not in timer mode"));
}
if (this.gaugeMode === d.FIGHT_TIMER && 0 !== e.startTime) {
  var t = Date.now() - e.startTime;
  if (t < e.duration) {
    var i = t / e.duration * (100 - e.startFrom),
      n = e.startFrom + i;
    this._animate(e.duration - t, n);
  }
}
if (t < e.duration) {
  var i = t / e.duration * (100 - e.startFrom),
    n = e.startFrom + i;
  this._animate(e.duration - t, n);
}
for (var o in window.gui.playerData.jobs.list) {
  var a = window.gui.playerData.jobs.list[o];
  t(l("ui.common.xp") + " " + a.info.nameId, "job" + a.id);
}
if (r) {
  var l = r.data;
  window.gui.chat.logMsg("{player," + l.name + "," + l.playerId + "}" + c("ui.common.colon") + "{pingsystem," + n + "," + o + "," + a + "::[" + s + "]}");
}
if (e._emoteBox.isOpen) {
  e._emoteBox.hide();
} else {
  if (t.playerData.isFighting) {
    return;
  }
  e._emoteBox.show(), e._emoteBox.refreshPosition();
}
if (t.playerData.isFighting) {
  return;
}
if (window.gui.playerData.isFighting && e !== -1) {
  var o = this;
  this._activePictoMap[e] && (window.isoEngine.mapRenderer.removePingPicto(e), delete o._activePictoMap[e]), window.isoEngine.mapRenderer.addPingPictoOnCell(e, t, i), this._activePictoMap[e] = n(e);
}
for (var e in this._activePictoMap) {
  this._activePictoMap.hasOwnProperty(e) && (window.clearTimeout(this._activePictoMap[e]), window.isoEngine.mapRenderer.removePingPicto(e), delete this._activePictoMap[e]);
}
if (window.gui.ipadRatio) {
  this.setStyles({
    top: "",
    right: "",
    left: l.posPingEmoteBtn + "px",
    bottom: "0",
    width: e + "px",
    height: l.bottomBarHeight + "px"
  });
} else {
  var t = l.sideBarWidth - c.PING_EMOTE_BTN_WIDE_MIN_WIDTH;
  this.setStyles({
    bottom: "",
    left: "",
    right: t + "px",
    top: l.posPingEmoteBtn + "px",
    width: c.PING_EMOTE_BTN_WIDE_MIN_WIDTH + "px",
    height: e + "px"
  });
}
if (t) {
  if (this._currentSelection) {
    if (e === this._currentSelection) {
      return;
    }
    this._currentSelection.unselect();
  }
  this._currentSelection = e;
} else {
  e === this._currentSelection && (this._currentSelection = null);
}
if (this._currentSelection) {
  if (e === this._currentSelection) {
    return;
  }
  this._currentSelection.unselect();
}
if (e === this._currentSelection) {
  return;
}
if (e || (e = "default"), e in s) {
  return s[e];
}
if (this._buttons.length) {
  var i = this;
  this._context = e, this._buttons.forEach(function (n) {
    i._svg.setAttributes({
      fill: "url(#imgPatternContext" + e + "Icon" + (n._id - 1) + ")"
    }, n.icon), n.text.setText(c(t(e, n._id)));
  }), i._svg.setAttributes({
    fill: "url(#contextCircleBorder" + e + ")"
  }, this._circle);
}
for (var i = 0; i < t.length; i++) {
  var n = g._svg.newElement("pattern", {
    parent: v,
    attr: {
      id: "imgPatternContext" + e + "Icon" + i,
      width: "1",
      height: "1"
    }
  });
  g._svg.newElement("image", {
    parent: n,
    attr: {
      href: t[i],
      width: .24 * u
    }
  });
}
for (var A = 0; A < M.elements.length; A++) {
  var S = this._svg.newElement("g", {
    parent: _
  });
  S._id = this._buttons.length + 1, r(S, null), this._setButtonEvent(S), this._svg.newElement("path", {
    parent: S,
    attr: {
      d: e(.5 * s, .5 * c, u, 60, 120),
      fill: "url(#imgPattern)",
      transform: M.elements[A].arc.transform || ""
    }
  }), S.icon = this._svg.newElement("rect", {
    parent: S,
    attr: {
      width: M.icon.width,
      height: M.icon.height,
      x: M.icon.x,
      y: M.icon.y,
      transform: M.elements[A].icon.transform
    }
  }), S.text = this._svg.newElement("text", {
    parent: S,
    attr: {
      width: M.icon.width,
      x: M.elements[A].text.x,
      y: M.elements[A].text.y,
      "text-anchor": "middle",
      fill: M.elements[A].text.fill,
      style: M.elements[A].text.style
    }
  }), this._buttons.push(S);
}
if (!this.isOpen()) {
  this._isOpen = !0;
  var i = this;
  this._setContext(t);
  var n = window.foreground;
  this._cellId = e, n.confirmBox.close(), n.deselectSpell(), window.gui.shortcutBar.deselectCurrentSlot();
  var o = l.mapHeight > 720 ? 680 : l.mapHeight - 40,
    a = window.isoEngine.mapRenderer.getCellSceneCoordinate(e),
    s = window.background.scene.getImage(a, o / 3.55);
  s || console.error(new Error("Preview is missing inside the PingBox")), i._svg.setAttributes({
    href: s
  }, i._contextCircle), i.show();
}
for (var t = window.gui.databases.Smileys, i = Object.keys(t), n = [], o = 0; o < i.length; o++) {
  n.push("gfx/smilies/" + t[i[o]].gfxId + ".png");
}
for (var o = 0; o < n.length; o++) {
  e.addSmileyIcon(t[i[o]], n[o]);
}
for (var n = [], o = 0; o < i.length; o++) {
  n.push("gfx/emotes/" + i[o] + ".png");
}
for (var o = 0; o < n.length; o++) {
  t.addAttitudeIcon(e[i[o]], n[o]);
}
if (e.forPlayers) {
  var o = this,
    a = new r("div", {
      name: e.id,
      className: ["chatIcon", "smileyIcon"]
    });
  a.id = e.id, a.setStyle("backgroundImage", t), l(a), a.on("tap", i), a.on("longtap", n), this.smileysPanel.appendChild(a), this._addDraggableBehaviourTo(a, "smiley", a.id);
}
for (var t = [], n = 0; n < e.length; n += 1) {
  for (var o = e[n], a = o.uid, s = o.items || [], r = null, l = 0; l < s.length; l += 1) {
    if (s[l].objectGID === c.TOA_RETRY_ITEM_ID) {
      r = s[l];
      break;
    }
  }
  r ? i._autoAssign ? (i.assignGift(a, window.gui.playerData.id), i._autoAssign = !1) : i._toaRetryPending.push(a) : t.push(o);
}
for (var o = e[n], a = o.uid, s = o.items || [], r = null, l = 0; l < s.length; l += 1) {
  if (s[l].objectGID === c.TOA_RETRY_ITEM_ID) {
    r = s[l];
    break;
  }
}
if (s[l].objectGID === c.TOA_RETRY_ITEM_ID) {
  r = s[l];
  break;
}
for (var i = this, n = [], o = 0, a = e.length; o < a; o += 1) {
  for (var r = e[o], l = r.items, c = 0, d = l.length; c < d; c += 1) {
    var u = l[c];
    u && n.push(u);
  }
}
for (var r = e[o], l = r.items, c = 0, d = l.length; c < d; c += 1) {
  var u = l[c];
  u && n.push(u);
}
if (n) {
  return t(n);
}
for (var a = 0, s = 0, r = e.length; s < r; s += 1) {
  for (var l = e[s], c = [], d = l.items, u = 0, h = d.length; u < h; u += 1) {
    var p = o.array[a] || null;
    a += 1, p && c.push(p);
  }
  c.length && i._giftList.push({
    uid: l.uid,
    title: l.title,
    text: l.text,
    items: c
  });
}
for (var l = e[s], c = [], d = l.items, u = 0, h = d.length; u < h; u += 1) {
  var p = o.array[a] || null;
  a += 1, p && c.push(p);
}
if (t.id) {
  for (var i = 0, n = e.length; i < n; i += 1) {
    var o = e[i];
    t.id === o.id && (o.deathState && 0 !== o.deathState || this._charaListMinusDeadPeople.push(o));
  }
}
for (var i = 0, n = e.length; i < n; i += 1) {
  var o = e[i];
  t.id === o.id && (o.deathState && 0 !== o.deathState || this._charaListMinusDeadPeople.push(o));
}
if (!this._toaRetryPending.length) {
  return console.error(new Error("Pending retry are empty " + e)), !1;
}
for (var i = 0; i < e.length; i++) {
  var n = e[i];
  n.enableContextMenu(t);
}
if (n) {
  if (n.indexOf(e) !== -1) {
    return;
  }
} else {
  n = t[i] = [];
}
if (n.indexOf(e) !== -1) {
  return;
}
if (n) {
  var o = n.indexOf(e);
  o !== -1 && n.splice(o, 1);
}
for (var t = 0; t < e.length; t++) {
  var i = e[t];
  i.exclusiveSelector && (i.exclusiveSelector.unregister(i), delete i.exclusiveSelector);
}
for (var i = "spell" === e ? N : E, n = 0; n < B; n++) {
  var o = new T("div", {
    className: "page"
  });
  t.addTab("", o, n);
  for (var a = 0; a < P; a++) {
    var s = n * P + a,
      r = new i(this, s);
    t.slotList[s] = r, o.appendChild(r), this._positionSlot(r);
  }
}
for (var a = 0; a < P; a++) {
  var s = n * P + a,
    r = new i(this, s);
  t.slotList[s] = r, o.appendChild(r), this._positionSlot(r);
}
for (var n = O[t.barType], o = [], a = 0; a < t.shortcuts.length; a++) {
  o.push(new S(t.shortcuts[a]));
}
for (var t = this._panels.spell.slotList, i = 0; i < t.length; i++) {
  var n = t[i];
  if (n.data && n.data.id === e) {
    return n;
  }
}
if (n.data && n.data.id === e) {
  return n;
}
for (var t = this._panels.spell.slotList, i = 0; i < t.length; i++) {
  var n = t[i];
  n.enableBehaviour(e);
}
if (i) {
  for (var n = 0; n < i.length; n++) {
    i[n].setQuantity(t);
  }
}
for (var n = 0; n < i.length; n++) {
  i[n].setQuantity(t);
}
for (var t in e) {
  this._updateItemQuantity(t, e[t]);
}
if (t) {
  for (var i = 0; i < t.length; i++) {
    var n = t[i];
    n.icon.addClassNames("disabled"), n.isDisabled = !0;
  }
}
for (var i = 0; i < t.length; i++) {
  var n = t[i];
  n.icon.addClassNames("disabled"), n.isDisabled = !0;
}
for (var t = 0; t < e.length; t++) {
  this._disableItem(e[t]);
}
if (t) {
  for (var i = 0; i < t.length; i++) {
    t[i].refreshShortcut();
  }
}
for (var i = 0; i < t.length; i++) {
  t[i].refreshShortcut();
}
if ("spell" === e.type) {
  var t;
  if (x.isFightMode && !e.isEmpty()) {
    var i = e.shortcut.spellId;
    e.isDisabled = !window.gui.fightManager.canCastThisSpell(i), t = window.gui.fightManager.getSpellCooldown(i);
  } else {
    e.isDisabled = !1, t = 0;
  }
  e.isDisabled && this._unSelectSlot(e), e.icon.toggleClassName("disabled", e.isDisabled), e.setCooldown(t);
}
if (x.isFightMode && !e.isEmpty()) {
  var i = e.shortcut.spellId;
  e.isDisabled = !window.gui.fightManager.canCastThisSpell(i), t = window.gui.fightManager.getSpellCooldown(i);
} else {
  e.isDisabled = !1, t = 0;
}
if (this._currentCharacterId === window.gui.playerData.characters.controlledCharacterId) {
  var t = this._panels.spell.slotMap["spell" + e];
  if (t) {
    for (var i = 0; i < t.length; i++) {
      this._updateSpellSlotAvailability(t[i]);
    }
  }
}
if (t) {
  for (var i = 0; i < t.length; i++) {
    this._updateSpellSlotAvailability(t[i]);
  }
}
for (var i = 0; i < t.length; i++) {
  this._updateSpellSlotAvailability(t[i]);
}
if (this._currentCharacterId === window.gui.playerData.characters.controlledCharacterId) {
  for (var e = this._panels.spell.slotList, t = 0; t < e.length; t++) {
    var i = e[t];
    i.isEmpty() || this._updateSpellSlotAvailability(i);
  }
}
for (var e = this._panels.spell.slotList, t = 0; t < e.length; t++) {
  var i = e[t];
  i.isEmpty() || this._updateSpellSlotAvailability(i);
}
for (var i = this._panels[e], n = i.slotList, o = 0, a = t.length; o < a; o += 1) {
  var s = t[o];
  this._isSlotIndexValid(s.slotIndex) && (n[s.slotIndex].isEmpty() ? n[s.slotIndex].setImage(w.placeHolder) : console.error(new Error("ShortcutBar._setPlaceHolder: cannot change image of non empty slot")));
}
for (var o = i.slotList, a = n.slotList, s = 0; s < o.length; s++) {
  this._positionSlot(o[s]), this._positionSlot(a[s]);
}
if (!this._isShortcutValid(e)) {
  return console.error(new Error("ShortcutBar._setShortcutRequest: invalid shortcut"));
}
if (!this._isShortcutValid(e)) {
  return console.error(new Error("ShortcutBar._setShortcutClient: invalid shortcut"));
}
if (this._isSlotIndexValid(t)) {
  var i = this._panels[e],
    n = i.slotList[t];
  n.isEmpty() || (s(n, i.slotMap), this._selectedSlot === n && this._unSelectSlot(n), n.unset(), n.disableDrag());
}
for (var n = 0; n < i.length; n++) {
  var o = i[n];
  o.isEmpty() ? o.image && o.setImage() : o.unset();
}
for (c = 0; c < t.length; c++) {
  d = t[c], this._isSlotIndexValid(d.slotIndex) && (h[d.slotIndex] = d);
}
for (c = 0; c < l.length; c++) {
  d = h[c];
  var p = l[c];
  d ? (p.isEmpty() || p.getShortcutHash() !== d.getHash()) && (p.setShortcut(d), a(p, u)) : p.isEmpty() || (p.unset(), s(p, u));
}
if (this._emptyPanel(e), "spell" === e ? (this._currentCharacterId = null, i = n.spellData) : i = window.gui.playerData.inventory, i.isLoaded) {
  this._setPanelContent(e, t);
} else {
  this._setPlaceHolder(e, t);
  var o = this._setPanelContent.bind(this, e, t);
  this._panelLoadingCb[e] = o, i.once("loaded", o);
}
if (this._panelLoadingCb[e]) {
  var t = window.gui.playerData.characters.getControlledCharacter(),
    i = "spell" === e ? t.spellData : window.gui.playerData.inventory;
  i.removeListener("loaded", this._panelLoadingCb[e]), delete this._panelLoadingCb[e];
}
for (var t = this._panels.item.slotList, i = 0; i < t.length; i++) {
  t[i].setDraggability(e && !t[i].isEmpty());
}
for (var t = this._panels.spell.slotList, i = 0; i < t.length; i++) {
  t[i].setDraggability(e && !t[i].isEmpty());
}
if (!this.isOrganizing) {
  if (t && window.isoEngine.clearSpellDisplay(), this._selectedSlot === e) {
    return this._unSelectSlot(e);
  }
  if (this._selectedSlot && this._selectedSlot.unselect(), e.isEmpty()) {
    return void (this._selectedSlot = null);
  }
  this._selectedSlot = e, e.select(), window.gui.fightManager.isInBattle() && this._close(!0);
}
if (t && window.isoEngine.clearSpellDisplay(), this._selectedSlot === e) {
  return this._unSelectSlot(e);
}
if (this._selectedSlot && this._selectedSlot.unselect(), e.isEmpty()) {
  return void (this._selectedSlot = null);
}
if (!e) {
  return console.warn("the player weapon spell has not been created yet");
}
if (t) {
  for (var i = 0; i < t.length; i++) {
    t[i].setSpell(e);
  }
}
for (var i = 0; i < t.length; i++) {
  t[i].setSpell(e);
}
if (e.type !== t.type) {
  return console.error(new Error("Impossible to swap a slot from panel " + e.type + " and panel " + t.type));
}
if ((!window.gui.fightManager.isInBattle() || this.isOrganizing) && this._dragStartPage === this._pagination.current) {
  if (e.slotIndex === t.slotIndex) {
    return t.setStyle("webkitTransform", "translate3d(0,0,0)");
  }
  C.removeAllListeners("ShortcutBarSwapErrorMessage");
  var o = t.slotIndex,
    a = t.getParent(),
    s = t.x - e.x,
    r = t.y - e.y;
  t.slotIndex = e.slotIndex, n.slotList[t.slotIndex] = e.getParent().appendChild(t), this._positionSlot(t), e.slotIndex = o, n.slotList[e.slotIndex] = a.appendChild(e), M.tween(e, {
    webkitTransform: "translate3d(" + s + "px," + r + "px,0)"
  }, {
    time: 100,
    easing: "ease-out"
  }, function () {
    i._positionSlot(e), window.dofus.sendMessage("ShortcutBarSwapRequestMessage", {
      barType: R[t.type],
      firstSlot: t.slotIndex,
      secondSlot: e.slotIndex
    });
  }), C.once("ShortcutBarSwapErrorMessage", function () {
    var n = t.slotIndex;
    t.slotIndex = e.slotIndex, e.slotIndex = n, i._positionSlot(t), i._positionSlot(e);
  });
}
if (e.slotIndex === t.slotIndex) {
  return t.setStyle("webkitTransform", "translate3d(0,0,0)");
}
if (!e || "spell" !== this._currentPanelType || t) {
  if (this._tempToolbarResize || (this._tempToolbarResize = {
    active: !1,
    previousPanel: null
  }), this.isOrganizing = e, this.toggleClassName("draggable", this.isOrganizing), this._setItemsSlotsDraggability(this.isOrganizing), this._setSpellsSlotsDraggability(this.isOrganizing), this.isOrganizing) {
    this.spellBtn.disable(), this.itemBtn.disable();
    var i = "spell" === this._currentPanelType,
      n = m.menubarSizeInFight !== m.menubarSize,
      o = i !== window.gui.playerData.isFighting;
    if (n && o) {
      this._tempToolbarResize.active = !0, this._tempToolbarResize.previousPanel = i ? "spell" : "item", this.shouldKeepOpen = !0;
      var a = i ? "tablet.nowShowingFightToolbar" : "tablet.nowShowingRpToolbar";
      b.showNotification(f(a), this), window.gui.showFightingToolbar(i);
    }
  } else {
    this.spellBtn.enable(), this.itemBtn.enable(), this._tempToolbarResize.active ? (this.shouldKeepOpen = !1, "spell" === this._tempToolbarResize.previousPanel ? window.gui.resizeToolbarForRoleplay() : window.gui.resizeToolbarForFight(), this._tempToolbarResize.active = !1, this._tempToolbarResize.previousPanel = null) : this.close();
  }
}
if (this._tempToolbarResize || (this._tempToolbarResize = {
  active: !1,
  previousPanel: null
}), this.isOrganizing = e, this.toggleClassName("draggable", this.isOrganizing), this._setItemsSlotsDraggability(this.isOrganizing), this._setSpellsSlotsDraggability(this.isOrganizing), this.isOrganizing) {
  this.spellBtn.disable(), this.itemBtn.disable();
  var i = "spell" === this._currentPanelType,
    n = m.menubarSizeInFight !== m.menubarSize,
    o = i !== window.gui.playerData.isFighting;
  if (n && o) {
    this._tempToolbarResize.active = !0, this._tempToolbarResize.previousPanel = i ? "spell" : "item", this.shouldKeepOpen = !0;
    var a = i ? "tablet.nowShowingFightToolbar" : "tablet.nowShowingRpToolbar";
    b.showNotification(f(a), this), window.gui.showFightingToolbar(i);
  }
} else {
  this.spellBtn.enable(), this.itemBtn.enable(), this._tempToolbarResize.active ? (this.shouldKeepOpen = !1, "spell" === this._tempToolbarResize.previousPanel ? window.gui.resizeToolbarForRoleplay() : window.gui.resizeToolbarForFight(), this._tempToolbarResize.active = !1, this._tempToolbarResize.previousPanel = null) : this.close();
}
if (n && o) {
  this._tempToolbarResize.active = !0, this._tempToolbarResize.previousPanel = i ? "spell" : "item", this.shouldKeepOpen = !0;
  var a = i ? "tablet.nowShowingFightToolbar" : "tablet.nowShowingRpToolbar";
  b.showNotification(f(a), this), window.gui.showFightingToolbar(i);
}
if (!e) {
  return console.error(new Error("Shortcut: cannot create a new shortcut without data"));
}
if (!e._type || !n[e._type]) {
  return console.error(new Error("Shortcut: type " + e._type + " is invalid"));
}
if (void 0 === e.slot || null === e.slot) {
  return console.error(new Error("Shortcut: invalid slot " + e.slot));
}
for (var t = n[e._type], i = 0; i < t.length; i++) {
  if (void 0 === e[t[i]] || null === e[t[i]]) {
    return console.error(new Error("Shortcut (" + e._type + "): invalid " + t[i] + " :" + e[t[i]]));
  }
  this[t[i]] = e[t[i]];
}
if (void 0 === e[t[i]] || null === e[t[i]]) {
  return console.error(new Error("Shortcut (" + e._type + "): invalid " + t[i] + " :" + e[t[i]]));
}
for (var t = n[this._type], i = 0; i < t.length; i++) {
  e[t[i]] = this[t[i]];
}
if (!this._isShortcutValid(e)) {
  return !this.isEmpty() && this.unset();
}
if (this.shortcut = e, e.hasOwnProperty("presetId")) {
  this.icon.delClassNames("disabled"), this.isDisabled = !1, this.setQuantity(1);
  var n = i.presets[e.presetId];
  o.preloadImage("gfx/presets/icon_" + n.symbolId + ".png", function (e) {
    t.setImage(e);
  }), this.setData(n), this.setContextMenu("preset", {
    presetId: e.presetId,
    canRemove: !0,
    onClose: this._onContextualMenuClosed.bind(this)
  });
} else if (e.hasOwnProperty("emoteId")) {
  this.icon.delClassNames("disabled"), this.isDisabled = !1, this.setQuantity(1), this.setData({
    emoteId: e.emoteId
  }), this.setContextMenu("emote", {
    emoteId: e.emoteId,
    canRemove: !0,
    onClose: this._onContextualMenuClosed.bind(this)
  }), o.preloadImage("gfx/emotes/" + e.emoteId + ".png", function (e) {
    t.setImage(e);
  });
} else if (e.hasOwnProperty("smileyId")) {
  this.icon.delClassNames("disabled"), this.isDisabled = !1, this.setQuantity(1), this.setData({
    smileyId: e.smileyId
  }), this.setContextMenu("smiley", {
    smileyId: e.smileyId,
    canRemove: !0,
    onClose: this._onContextualMenuClosed.bind(this)
  });
  var a = window.gui.databases.Smileys;
  o.preloadImage("gfx/smilies/" + a[e.smileyId].gfxId + ".png", function (e) {
    t.setImage(e);
  });
} else {
  var r = i.objects[e.itemUID];
  if (r) {
    if (!r.isInitialised) {
      return r.once("initialised", function () {
        t.setShortcut(e);
      });
    }
    this.isDisabled = !1, this.icon.delClassNames("disabled"), this.setContextMenu("item", {
      item: r,
      onClose: this._onContextualMenuClosed.bind(this),
      remove: !0,
      enableActions: !0,
      enableDestroy: !0
    }), this.setItem(r);
  } else {
    this.isDisabled = !0, this.icon.addClassNames("disabled"), s.getItems([e.itemGID], function (e, i) {
      if (e) {
        return console.error(e);
      }
      var n = i[0];
      t.setContextMenu("item", {
        item: n,
        onClose: t._onContextualMenuClosed.bind(t),
        remove: !0,
        enableActions: !0,
        enableDestroy: !0
      }), t.setItem(n);
    });
  }
}
if (e.hasOwnProperty("emoteId")) {
  this.icon.delClassNames("disabled"), this.isDisabled = !1, this.setQuantity(1), this.setData({
    emoteId: e.emoteId
  }), this.setContextMenu("emote", {
    emoteId: e.emoteId,
    canRemove: !0,
    onClose: this._onContextualMenuClosed.bind(this)
  }), o.preloadImage("gfx/emotes/" + e.emoteId + ".png", function (e) {
    t.setImage(e);
  });
} else if (e.hasOwnProperty("smileyId")) {
  this.icon.delClassNames("disabled"), this.isDisabled = !1, this.setQuantity(1), this.setData({
    smileyId: e.smileyId
  }), this.setContextMenu("smiley", {
    smileyId: e.smileyId,
    canRemove: !0,
    onClose: this._onContextualMenuClosed.bind(this)
  });
  var a = window.gui.databases.Smileys;
  o.preloadImage("gfx/smilies/" + a[e.smileyId].gfxId + ".png", function (e) {
    t.setImage(e);
  });
} else {
  var r = i.objects[e.itemUID];
  if (r) {
    if (!r.isInitialised) {
      return r.once("initialised", function () {
        t.setShortcut(e);
      });
    }
    this.isDisabled = !1, this.icon.delClassNames("disabled"), this.setContextMenu("item", {
      item: r,
      onClose: this._onContextualMenuClosed.bind(this),
      remove: !0,
      enableActions: !0,
      enableDestroy: !0
    }), this.setItem(r);
  } else {
    this.isDisabled = !0, this.icon.addClassNames("disabled"), s.getItems([e.itemGID], function (e, i) {
      if (e) {
        return console.error(e);
      }
      var n = i[0];
      t.setContextMenu("item", {
        item: n,
        onClose: t._onContextualMenuClosed.bind(t),
        remove: !0,
        enableActions: !0,
        enableDestroy: !0
      }), t.setItem(n);
    });
  }
}
if (e.hasOwnProperty("smileyId")) {
  this.icon.delClassNames("disabled"), this.isDisabled = !1, this.setQuantity(1), this.setData({
    smileyId: e.smileyId
  }), this.setContextMenu("smiley", {
    smileyId: e.smileyId,
    canRemove: !0,
    onClose: this._onContextualMenuClosed.bind(this)
  });
  var a = window.gui.databases.Smileys;
  o.preloadImage("gfx/smilies/" + a[e.smileyId].gfxId + ".png", function (e) {
    t.setImage(e);
  });
} else {
  var r = i.objects[e.itemUID];
  if (r) {
    if (!r.isInitialised) {
      return r.once("initialised", function () {
        t.setShortcut(e);
      });
    }
    this.isDisabled = !1, this.icon.delClassNames("disabled"), this.setContextMenu("item", {
      item: r,
      onClose: this._onContextualMenuClosed.bind(this),
      remove: !0,
      enableActions: !0,
      enableDestroy: !0
    }), this.setItem(r);
  } else {
    this.isDisabled = !0, this.icon.addClassNames("disabled"), s.getItems([e.itemGID], function (e, i) {
      if (e) {
        return console.error(e);
      }
      var n = i[0];
      t.setContextMenu("item", {
        item: n,
        onClose: t._onContextualMenuClosed.bind(t),
        remove: !0,
        enableActions: !0,
        enableDestroy: !0
      }), t.setItem(n);
    });
  }
}
if (r) {
  if (!r.isInitialised) {
    return r.once("initialised", function () {
      t.setShortcut(e);
    });
  }
  this.isDisabled = !1, this.icon.delClassNames("disabled"), this.setContextMenu("item", {
    item: r,
    onClose: this._onContextualMenuClosed.bind(this),
    remove: !0,
    enableActions: !0,
    enableDestroy: !0
  }), this.setItem(r);
} else {
  this.isDisabled = !0, this.icon.addClassNames("disabled"), s.getItems([e.itemGID], function (e, i) {
    if (e) {
      return console.error(e);
    }
    var n = i[0];
    t.setContextMenu("item", {
      item: n,
      onClose: t._onContextualMenuClosed.bind(t),
      remove: !0,
      enableActions: !0,
      enableDestroy: !0
    }), t.setItem(n);
  });
}
if (!r.isInitialised) {
  return r.once("initialised", function () {
    t.setShortcut(e);
  });
}
if (e) {
  return console.error(e);
}
if (this.shortcut) {
  switch (this.shortcut._type) {
    case "ShortcutObjectItem":
      var e = this.getItem();
      e.isItemInstance && e.doDefaultAction();
      break;
    case "ShortcutEmote":
      window.dofus.sendMessage("EmotePlayRequestMessage", {
        emoteId: this.shortcut.emoteId
      });
      break;
    case "ShortcutSmiley":
      window.dofus.sendMessage("ChatSmileyRequestMessage", {
        smileyId: this.shortcut.smileyId
      });
      break;
    case "ShortcutObjectPreset":
      window.dofus.sendMessage("InventoryPresetUseMessage", {
        presetId: this.shortcut.presetId
      });
  }
}
if (!e) {
  return this.unset();
}
if (!i && e.isItemInstance && !e.isInitialised) {
  var n = this;
  e.once("initialised", function () {
    n._itemData === e && (n.setImage(e.getProperty("image")), n.toggleClassName("cosmeticSlot", e.isCosmetic()), n.toggleClassName("legendaryWeaponSlot", e.isLegendaryWeapon()));
  });
}
if (this.rootElement) {
  this.enabledBehaviour = e, this.setStyle("pointerEvents", e ? "" : "none");
  var t = this.image || "none",
    i = "linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5))," + t;
  this.icon.setStyle("backgroundImage", e ? t : i);
}
if (this.data = e, this.data) {
  if (this.data.mountLocation) {
    for (var t = this.data.effectList || [], i = 0, n = t.length; i < n; i += 1) {
      var o = t[i];
      o.effectCaller || (o.effectCaller = "Slot: mount " + this.data.model + " from location " + this.data.mountLocation);
    }
  }
  this.emit("setData", this.data);
}
if (this.data.mountLocation) {
  for (var t = this.data.effectList || [], i = 0, n = t.length; i < n; i += 1) {
    var o = t[i];
    o.effectCaller || (o.effectCaller = "Slot: mount " + this.data.model + " from location " + this.data.mountLocation);
  }
}
for (var t = this.data.effectList || [], i = 0, n = t.length; i < n; i += 1) {
  var o = t[i];
  o.effectCaller || (o.effectCaller = "Slot: mount " + this.data.model + " from location " + this.data.mountLocation);
}
if (t.requestedImages === e && !this.destroyed) {
  for (var n = "none", o = 0; o < i.length && (n = i[o], "none" === n); o += 1) {
    ;
  }
  t.loadingImage && t.setImage(n);
}
for (var n = "none", o = 0; o < i.length && (n = i[o], "none" === n); o += 1) {
  ;
}
for (var t in a.prototype) {
  if (e.prototype[t]) {
    return console.error("ShortcutBarSlot: class " + e.name + ' already has a method called "' + t + '"');
  }
  e.prototype[t] = a.prototype[t];
}
if (e.prototype[t]) {
  return console.error("ShortcutBarSlot: class " + e.name + ' already has a method called "' + t + '"');
}
if (!("spell" === i.type && i.isDisabled || "item" === i.type && window.gui.fightManager.isInBattle())) {
  var t = !0;
  e._selectSlot(i, t);
}
if (this.delayedSetShortcutData) {
  var e = this.delayedSetShortcutData.character;
  e && e.spellData && (e.spellData.removeListener("loaded", this.delayedSetShortcutData.cb), this.delayedSetShortcutData = null);
}
if (this._resetDelayedSetShortcut(), !this._isShortcutValid(e)) {
  return !this.isEmpty() && this.unset();
}
if (this.descriptionOptions = t || this.descriptionOptions, !e) {
  return this.unset();
}
if (n && n.isItem) {
  var r = n._item;
  if (!r.isInitialised) {
    return r.once("initialised", function () {
      s._setSpellCount === i && s.setSpell(e);
    });
  }
  this.setImage(r.getProperty("image"));
} else {
  o.image ? this.setImage(o.image) : (this.setImage(a.placeHolder), o.iconId < 0 && console.error(new Error("iconId < 0 for spellId " + o.id + ": " + o.iconId)), l.preloadImage("gfx/spells/sort_" + o.iconId + ".png", function (e) {
    s._setSpellCount === i && (o.image = e, s.setImage(o.image));
  }));
}
if (!r.isInitialised) {
  return r.once("initialised", function () {
    s._setSpellCount === i && s.setSpell(e);
  });
}
if (t = t || {}, S.call(this, "div", t), this.addClassNames("SpellDescription"), this._buildDomElements(t), this.visibilityBoundToOptions = !t.visibilityOptions && !t.spellTooltipAll, this.visibilityOptions = t.visibilityOptions || {}, t.spellTooltipAll) {
  for (var i in L) {
    this.visibilityOptions[i] = !0;
  }
}
for (var i in L) {
  this.visibilityOptions[i] = !0;
}
if (i > 0) {
  var n = i >= 63 ? x.INFINITE_CHARACTER : i;
  this._domElements.minCastInterval.setText(I("ui.spellInfo.minCastInterval") + I("ui.common.colon") + n);
} else {
  this._domElements.minCastInterval.clearContent();
}
if (i && i.length > 0) {
  this._domElements.forbiddenStates.createChild("span", {
    text: I("ui.spellInfo.stateForbidden") + I("ui.common.colon")
  });
  for (var n = 0; n < i.length; n++) {
    this._domElements.forbiddenStates.createChild("span", {
      text: " " + e._tables.spellStates[i[n]].nameId
    });
  }
} else {
  this._domElements.forbiddenStates.clearContent();
}
for (var n = 0; n < i.length; n++) {
  this._domElements.forbiddenStates.createChild("span", {
    text: " " + e._tables.spellStates[i[n]].nameId
  });
}
if (i && i.length > 0) {
  this._domElements.requiredStates.createChild("span", {
    text: I("ui.spellInfo.stateRequired") + I("ui.common.colon")
  });
  for (var n = 0; n < i.length; n++) {
    this._domElements.requiredStates.createChild("span", {
      text: " " + e._tables.spellStates[i[n]].nameId
    });
  }
} else {
  this._domElements.requiredStates.clearContent();
}
for (var n = 0; n < i.length; n++) {
  this._domElements.requiredStates.createChild("span", {
    text: " " + e._tables.spellStates[i[n]].nameId
  });
}
for (var i in L) {
  var n = this.visibilityOptions[i],
    o = this.visibilityBoundToOptions ? E[i] : !!this.visibilityOptions[i];
  if (e || o !== n) {
    this.visibilityOptions[i] = o;
    for (var a = L[i], s = 0; s < a.length; s++) {
      t[a[s]].toggleDisplay(o);
    }
  }
}
if (e || o !== n) {
  this.visibilityOptions[i] = o;
  for (var a = L[i], s = 0; s < a.length; s++) {
    t[a[s]].toggleDisplay(o);
  }
}
for (var a = L[i], s = 0; s < a.length; s++) {
  t[a[s]].toggleDisplay(o);
}
if (e && e.spell && e.spell.isLoaded) {
  this.updateVisibleBlocks();
  var t = e.spell,
    i = void 0 !== e.level ? e.level : t.level;
  o.call(this, t), a.call(this, t, i), s.call(this, t, i), r.call(this, t, i), l.call(this, t), c.call(this, t, i), d.call(this, t, i), u.call(this, t, i), h.call(this, t, i), p.call(this, t, i), m.call(this, t, i), f.call(this, t, i), g.call(this, t, i), y.call(this, t, i), _.call(this, t, i), v.call(this, t, i), b.call(this, t, i), w.call(this, t, i), M.call(this, t, i), T.call(this, t, i);
}
for (var i = 0, n = null, o = 0; o < t.length; o++) {
  var a = e.lastIndexOf(t[o]);
  a > i && (n = t[o], i = a);
}
for (var t, i = [], n = 0, a = "", s = "";;) {
  t = e.substr(n, b);
  var r = e.length - n;
  if (r < b) {
    return i.push(s + t), i;
  }
  var l = o(t, I);
  if (l && r - l.length < b * M) {
    var c = o(t.substr(0, r * T), I);
    c && r - c.length <= b && (l = c);
  }
  if (!l || l.length < b * M) {
    var d = o(t, A);
    d && d.length >= b * T && (l = d, a = S), l || (l = t, a = S);
  }
  n += l.length, i.push(s + l + a), s = a === S ? S : "", a = "";
}
if (r < b) {
  return i.push(s + t), i;
}
if (l && r - l.length < b * M) {
  var c = o(t.substr(0, r * T), I);
  c && r - c.length <= b && (l = c);
}
if (!l || l.length < b * M) {
  var d = o(t, A);
  d && d.length >= b * T && (l = d, a = S), l || (l = t, a = S);
}
if (t > m) {
  var i = this.contentLength < f ? m : p;
  e.setStyle("width", i + "px");
}
if (this.objectItems = t, "string" == typeof e) {
  e.length > b && (this.nextBtn = this.createChild("div", {
    className: "nextBtn"
  }), this.msgPages = a(e), this.currentPage = 0, e = this.msgPages[0] + C), this._setPage(e);
} else {
  if (!(e instanceof h)) {
    return console.error(new Error("SpeechBubble: unknown msg type (" + typeof e + ")"));
  }
  this.content.appendChild(e), this.contentLength = e.rootElement.innerText.length;
}
if (!(e instanceof h)) {
  return console.error(new Error("SpeechBubble: unknown msg type (" + typeof e + ")"));
}
if (this.isAlive) {
  this.currentPage++, this.currentPage === this.msgPages.length - 1 && this.nextBtn.hide();
  var e = this.msgPages[this.currentPage] + C;
  this.content.setStyle("width", null), this.content.clearContent(), this._setPage(e), this._resize(), this._findPosition(), s.forceReflow(this), u.tween(this, {
    opacity: 1
  }, {
    time: g
  });
}
if (!e) {
  var t = d.computeNotificationDisplayTime(this.contentLength);
  this.timeout = window.setTimeout(function (e) {
    e._dimBeforeDisappearing();
  }, t, this);
}
if (!this._displayNextPage()) {
  if (this.isLocked) {
    if (!this.actionHandler) {
      return;
    }
    return this.actionHandler();
  }
  return this.msgPages ? this.close() : this.tweener || this.timeout ? void this._freeze() : this.close();
}
if (this.isLocked) {
  if (!this.actionHandler) {
    return;
  }
  return this.actionHandler();
}
if (!this.actionHandler) {
  return;
}
for (var n = s.getAvailableFighters(), o = 0, a = t.length; o < a; o++) {
  var r = t[o],
    l = n[r];
  l && i(l);
}
for (var i in t) {
  t[i].picto.fighterNumber.toggleDisplay(e);
}
if (n) {
  var u = this.fighterList.getChildren();
  for (i = 0; i < u.length; i++) {
    this.fighterList.removeChild(u[i]);
  }
}
for (i = 0; i < u.length; i++) {
  this.fighterList.removeChild(u[i]);
}
for (i = 0; i < p; i++) {
  if (e = s[i], c[e] = !0, t = l[e]) {
    var f = r.indexOf(e) < 0;
    if (t.setAlive(f, !0), (f || !a.hideDeadFighters) && (t.updateNumber(f && d++), m += t.isSummon() ? y : v, !this.fighterList.getChild(e))) {
      h = null;
      for (var g = i + 1; g < p && !(h = this.fighterList.getChild(s[g])); g++) {
        ;
      }
      this.fighterList.insertChildBefore(t.picto, h), t.resizeFighterIllustration();
    }
  } else {
    console.error(new Error("Fighter " + e + " not found when refreshing timeline during fight state " + o.fightState));
  }
}
if (e = s[i], c[e] = !0, t = l[e]) {
  var f = r.indexOf(e) < 0;
  if (t.setAlive(f, !0), (f || !a.hideDeadFighters) && (t.updateNumber(f && d++), m += t.isSummon() ? y : v, !this.fighterList.getChild(e))) {
    h = null;
    for (var g = i + 1; g < p && !(h = this.fighterList.getChild(s[g])); g++) {
      ;
    }
    this.fighterList.insertChildBefore(t.picto, h), t.resizeFighterIllustration();
  }
} else {
  console.error(new Error("Fighter " + e + " not found when refreshing timeline during fight state " + o.fightState));
}
if (t.setAlive(f, !0), (f || !a.hideDeadFighters) && (t.updateNumber(f && d++), m += t.isSummon() ? y : v, !this.fighterList.getChild(e))) {
  h = null;
  for (var g = i + 1; g < p && !(h = this.fighterList.getChild(s[g])); g++) {
    ;
  }
  this.fighterList.insertChildBefore(t.picto, h), t.resizeFighterIllustration();
}
for (var g = i + 1; g < p && !(h = this.fighterList.getChild(s[g])); g++) {
  ;
}
if (!n) {
  for (e in l) {
    if (!c[e]) {
      var _ = this.fighterList.getChild(e);
      _ && this.fighterList.removeChild(_);
    }
  }
}
for (e in l) {
  if (!c[e]) {
    var _ = this.fighterList.getChild(e);
    _ && this.fighterList.removeChild(_);
  }
}
if (!c[e]) {
  var _ = this.fighterList.getChild(e);
  _ && this.fighterList.removeChild(_);
}
for (var e = this.fighterList.getChildren(), t = window.gui.fightManager, i = 1, n = 0, o = e.length; n < o; n++) {
  var a = e[n].getWuiName(),
    s = t.getFighter(a);
  if (!s) {
    return console.error("Fighters' order switch failed, fighter does not exist.");
  }
  s.data.alive ? (s.updateNumber(i), i++) : s.updateNumber();
}
if (!s) {
  return console.error("Fighters' order switch failed, fighter does not exist.");
}
if (!window.gui.fightManager.isInFightPreparation() || e.data.disposition.cellId !== -1) {
  return t.statsDetails ? e.refreshStatsTooltipContent(t.statsDetails) : t.statsDetails = e.createStatsTooltipContent(), t.statsDetails;
}
if (window.gui.scenarioManager.isBehaviourEnabled(_.TIMELINE_CAST)) {
  var t = window.gui.shortcutBar.getIdOfSelectedSpellIfAny();
  if (t || 0 === t) {
    var i = window.gui,
      n = i.playerData.characters.controlledCharacterId;
    return void (e.data.alive && i.fightManager.currentFighterId === n && (i.fightManager.castSpell(t, e.data.disposition.cellId, i.playerData.characters.controlledCharacterId), window.isoEngine.clearSpellDisplay(), i.shortcutBar.deselectCurrentSlot()));
  }
  if (this.selectedFighter) {
    window.actorManager.selectionIndicatorOff(this.selectedFighter);
    var o = this.selectedFighter.picto;
    o && o.rootElement && o.delClassNames("selected");
  }
  if (window.gui.pingSystem.isActive()) {
    var a = e.data.disposition.cellId;
    return window.isoEngine.mapRenderer.addPingHighlight(a, window.isoEngine.getContext(a), !0);
  }
  this.selectedFighter === e ? (this.selectedFighter = null, this.buffList.hide()) : (window.actorManager.selectionIndicatorOn(e), e.picto.addClassNames("selected"), this.selectedFighter = e, this.buffList.open(e)), this._refreshAfterResize();
}
if (t || 0 === t) {
  var i = window.gui,
    n = i.playerData.characters.controlledCharacterId;
  return void (e.data.alive && i.fightManager.currentFighterId === n && (i.fightManager.castSpell(t, e.data.disposition.cellId, i.playerData.characters.controlledCharacterId), window.isoEngine.clearSpellDisplay(), i.shortcutBar.deselectCurrentSlot()));
}
if (this.selectedFighter) {
  window.actorManager.selectionIndicatorOff(this.selectedFighter);
  var o = this.selectedFighter.picto;
  o && o.rootElement && o.delClassNames("selected");
}
if (window.gui.pingSystem.isActive()) {
  var a = e.data.disposition.cellId;
  return window.isoEngine.mapRenderer.addPingHighlight(a, window.isoEngine.getContext(a), !0);
}
if (this.currentFighter && this.timerTween) {
  this.timerTween.cancel();
  var e = Date.now() - this.timerTimestamp;
  if (!(e < 0 || e >= this.timerDuration)) {
    var t = this.timerDuration - e,
      i = Math.ceil(100 * e / this.timerDuration);
    this.playTimerAnimation(t, i);
  }
}
if (!(e < 0 || e >= this.timerDuration)) {
  var t = this.timerDuration - e,
    i = Math.ceil(100 * e / this.timerDuration);
  this.playTimerAnimation(t, i);
}
if (e === window.gui.playerData.id) {
  t.lastWasPlayer = !0;
} else if (t.lastWasPlayer) {
  for (var i = t.buffList.getChildren(), n = 0; n < i.length; n++) {
    i[n].updateCooldown();
  }
  t.lastWasPlayer = !1;
}
if (t.lastWasPlayer) {
  for (var i = t.buffList.getChildren(), n = 0; n < i.length; n++) {
    i[n].updateCooldown();
  }
  t.lastWasPlayer = !1;
}
for (var i = t.buffList.getChildren(), n = 0; n < i.length; n++) {
  i[n].updateCooldown();
}
for (var t = e.buffs, i = 0, n = t.length; i < n; i++) {
  this._addBuff(t[i]);
}
for (var e = [], t = [], i = this.buffList.getChildren(), n = 0; n < i.length; n++) {
  var o = i[n];
  0 !== o.parentBoostUid ? t.push(o) : e.push(o);
}
for (e.sort(c), n = 0; n < t.length; n++) {
  for (var a = t[n], s = !1, r = 0, l = 0; l < e.length; l++) {
    if (e[l].maxCooldown() < a.cooldown && (r = l), e[l].hasUid(a.parentBoostUid)) {
      e.splice(l + 1, 0, a), s = !0;
      break;
    }
  }
  s || e.splice(r, 0, a);
}
for (var a = t[n], s = !1, r = 0, l = 0; l < e.length; l++) {
  if (e[l].maxCooldown() < a.cooldown && (r = l), e[l].hasUid(a.parentBoostUid)) {
    e.splice(l + 1, 0, a), s = !0;
    break;
  }
}
if (e[l].maxCooldown() < a.cooldown && (r = l), e[l].hasUid(a.parentBoostUid)) {
  e.splice(l + 1, 0, a), s = !0;
  break;
}
for (n = 0; n < e.length; n++) {
  var d = e[n];
  this.buffList.appendChild(d);
}
for (var e = [], t = -1, i = 0; i < n.buffs.length; i++) {
  var a = n.buffs[i];
  e.push(a.effect), t = a.source;
}
if (!r) {
  return null;
}
if (e.visibleInBuffUI) {
  var i = s.getKey(e),
    n = this.buffItems[i];
  if (n) {
    return void n.addBuff(e);
  }
  n = new s(e);
  var o;
  r(n, t), this.buffItems[i] = n, this.buffList.appendChild(n), n.addBuff(e);
}
if (n) {
  return void n.addBuff(e);
}
if (i) {
  i.updateCooldown(e), this.updateUi();
} else {
  var n = s.getDelayKey(e);
  if (i = this.buffItems[n], !i) {
    return void console.warn("Trying to update a non-existing buff.");
  }
  this.buffItems[t] = i, delete this.buffItems[n];
}
if (i = this.buffItems[n], !i) {
  return void console.warn("Trying to update a non-existing buff.");
}
for (var t = 0; t < this.buffs.length; t++) {
  if (this.buffs[t].uid === e) {
    return !0;
  }
}
if (this.buffs[t].uid === e) {
  return !0;
}
for (var e = 0; e < this.buffs.length; e++) {
  if (!this.buffs[e].isUnusableNextTurn()) {
    return !1;
  }
}
if (!this.buffs[e].isUnusableNextTurn()) {
  return !1;
}
for (var e = 0, t = !1, i = 0, n = 0, o = this.buffs.length; n < o; n++) {
  var a = this.buffs[n];
  t && e !== a.duration && this.setCooldown(this.cooldown - 1), (0 === i || a.effect.delay < i) && (i = a.effect.delay), e = a.duration, t = !0;
}
if (this.cooldown !== -1) {
  return this.cooldown;
}
for (var e = 0, t = 0, i = this.buffs.length; t < i; t++) {
  var n = this.buffs[t];
  (n.duration > e || n.duration < -1) && (e = n.duration);
}
for (var t = 0; t < this.buffs.length; t++) {
  if (this.buffs[t] === e) {
    this.buffs.splice(t, 1), this.updateCooldown();
    break;
  }
}
if (this.buffs[t] === e) {
  this.buffs.splice(t, 1), this.updateCooldown();
  break;
}
if (e) {
  var t = e.spellName,
    i = e.casterName,
    n = e.effects;
  o.call(this, t), a.call(this, i), s.call(this, n);
}
if (t.isVisible()) {
  var s = t.rootElement.getBoundingClientRect();
  s.height > 0 && s.width > 0 && i.push({
    left: s.left,
    top: s.top - v,
    height: s.height,
    width: s.width,
    dom: null
  });
}
for (var c in e) {
  if (e.hasOwnProperty(c)) {
    var d = e[c],
      u = d.rootElement.getBoundingClientRect();
    u.height > 0 && u.width > 0 && i.push({
      left: u.left,
      top: u.top,
      height: u.height,
      width: u.width,
      dom: d
    });
  }
}
if (e.hasOwnProperty(c)) {
  var d = e[c],
    u = d.rootElement.getBoundingClientRect();
  u.height > 0 && u.width > 0 && i.push({
    left: u.left,
    top: u.top,
    height: u.height,
    width: u.width,
    dom: d
  });
}
for (h = 0; h < i.length; h++) {
  var m = i[h],
    f = !1;
  for (p = 0; p < n.length; p++) {
    var g = i[n[p]];
    if (l(m, g)) {
      f = !0;
      break;
    }
  }
  if (f) {
    for (n.sort(o(m, i)), p = 0; p < n.length; p++) {
      var _ = n[p],
        y = r(i, n, h, _);
      if (y) {
        m.left = y.left, m.top = y.top;
        break;
      }
    }
    n.push(h);
  } else {
    n.push(h);
  }
}
for (p = 0; p < n.length; p++) {
  var g = i[n[p]];
  if (l(m, g)) {
    f = !0;
    break;
  }
}
if (l(m, g)) {
  f = !0;
  break;
}
if (f) {
  for (n.sort(o(m, i)), p = 0; p < n.length; p++) {
    var _ = n[p],
      y = r(i, n, h, _);
    if (y) {
      m.left = y.left, m.top = y.top;
      break;
    }
  }
  n.push(h);
} else {
  n.push(h);
}
for (n.sort(o(m, i)), p = 0; p < n.length; p++) {
  var _ = n[p],
    y = r(i, n, h, _);
  if (y) {
    m.left = y.left, m.top = y.top;
    break;
  }
}
if (y) {
  m.left = y.left, m.top = y.top;
  break;
}
for (h = 0; h < i.length; h++) {
  i[h].dom && i[h].dom.setStyles({
    webkitTransform: "translate3d(" + i[h].left + "px," + i[h].top + "px,0)"
  });
}
for (var o = e[i], a = e[n], s = c({
    left: o.left,
    top: a.top - o.height,
    height: o.height,
    width: o.width
  }), r = c({
    left: o.left,
    top: a.top + a.height,
    height: o.height,
    width: o.width
  }), d = c({
    left: a.left - o.width,
    top: o.top,
    height: o.height,
    width: o.width
  }), u = c({
    left: a.left + a.width,
    top: o.top,
    height: o.height,
    width: o.width
  }), h = !0, p = !0, m = !0, f = !0, g = 0; g < y; g++) {
  for (var _ = 0; _ < t.length; _++) {
    var v = e[t[_]];
    l(s, v) && (h = !1), l(r, v) && (p = !1), l(d, v) && (m = !1), l(u, v) && (f = !1);
  }
  if (h || p || m || f) {
    break;
  }
  s.top -= o.height, r.top += o.height, d.top -= o.width, u.top += o.width;
}
for (var _ = 0; _ < t.length; _++) {
  var v = e[t[_]];
  l(s, v) && (h = !1), l(r, v) && (p = !1), l(d, v) && (m = !1), l(u, v) && (f = !1);
}
if (h || p || m || f) {
  break;
}
if (n) {
  var o = window.foreground.convertSceneToScreenCoordinate(n[0], n[2]),
    a = window.foreground.convertSceneToScreenCoordinate(n[1], n[3]),
    s = (o.x + a.x) / 2,
    r = (o.y + a.y) / 2;
  return {
    x: s,
    y: r
  };
}
for (var e in this.tooltips) {
  if (this.tooltips.hasOwnProperty(e)) {
    var t = this.tooltips[e];
    t && t.isVisible() && t.hide();
  }
}
if (this.tooltips.hasOwnProperty(e)) {
  var t = this.tooltips[e];
  t && t.isVisible() && t.hide();
}
for (var e in this.tooltips) {
  if (this.tooltips.hasOwnProperty(e)) {
    var t = this.tooltips[e];
    t && t.destroy();
  }
}
if (this.tooltips.hasOwnProperty(e)) {
  var t = this.tooltips[e];
  t && t.destroy();
}
if (e) {
  return console.error("The spell could not be previewed ", e);
}
for (var l in r) {
  if (r.hasOwnProperty(l)) {
    l = parseInt(l, 10);
    var c = o.getActor(l),
      d = r[l],
      h = a.getFighter(l),
      p = n.tooltips[l];
    if (0 !== d.length) {
      p || (n.tooltips[l] = new _(l), p = n.tooltips[l], n.appendChild(p));
      var m = !1;
      i.hasConfirmBox && h && h.data.disposition.cellId === t && (m = !0);
      var f = c && c.parentActor && c.parentActor.actorId || l,
        g = u(f);
      p.show(), p.update(g.x, g.y, d, {
        insideConfirmBox: m
      });
    } else {
      p && p.isVisible() && p.hide();
    }
  }
}
if (r.hasOwnProperty(l)) {
  l = parseInt(l, 10);
  var c = o.getActor(l),
    d = r[l],
    h = a.getFighter(l),
    p = n.tooltips[l];
  if (0 !== d.length) {
    p || (n.tooltips[l] = new _(l), p = n.tooltips[l], n.appendChild(p));
    var m = !1;
    i.hasConfirmBox && h && h.data.disposition.cellId === t && (m = !0);
    var f = c && c.parentActor && c.parentActor.actorId || l,
      g = u(f);
    p.show(), p.update(g.x, g.y, d, {
      insideConfirmBox: m
    });
  } else {
    p && p.isVisible() && p.hide();
  }
}
if (0 !== d.length) {
  p || (n.tooltips[l] = new _(l), p = n.tooltips[l], n.appendChild(p));
  var m = !1;
  i.hasConfirmBox && h && h.data.disposition.cellId === t && (m = !0);
  var f = c && c.parentActor && c.parentActor.actorId || l,
    g = u(f);
  p.show(), p.update(g.x, g.y, d, {
    insideConfirmBox: m
  });
} else {
  p && p.isVisible() && p.hide();
}
if (!e || !t || d.DISABLED_SPELL[e.id]) {
  return !1;
}
if (!a) {
  return i(new Error("Spell " + e + " not available"));
}
if (e) {
  return a.resetCellZoneEffect(), i(e);
}
if (a.resetCellZoneEffect(), e) {
  return i(e);
}
for (var t = 0; t < e.length; t++) {
  var i = e[t],
    n = i.newCellId;
  this.changePosition(i.id, n);
}
for (var a = m.gui.damagePreview.damagePreviewManager.transposition, s = u.getActorOnCell(n), l = o.isCriticalEffect ? e.getEffectInstances().criticalEffects : e.getEffectInstances().effects, c = 0; c < l.length; c++) {
  var d = l[c];
  if (0 === d.order && d.isDirectEffect() && "I" === d.triggers && "P" === d.rawZone) {
    if (d.effectId === r.ACTION_CHARACTER_EXCHANGE_PLACES && s && u.verifySpellEffectMask(d, t, s.actorId, o)) {
      return a[i] = n, a[n] = i, !0;
    }
    if (d.effectId === r.ACTION_CHARACTER_TELEPORT_ON_SAME_MAP && !s) {
      return a[i] = n, !0;
    }
  }
}
if (0 === d.order && d.isDirectEffect() && "I" === d.triggers && "P" === d.rawZone) {
  if (d.effectId === r.ACTION_CHARACTER_EXCHANGE_PLACES && s && u.verifySpellEffectMask(d, t, s.actorId, o)) {
    return a[i] = n, a[n] = i, !0;
  }
  if (d.effectId === r.ACTION_CHARACTER_TELEPORT_ON_SAME_MAP && !s) {
    return a[i] = n, !0;
  }
}
if (d.effectId === r.ACTION_CHARACTER_EXCHANGE_PLACES && s && u.verifySpellEffectMask(d, t, s.actorId, o)) {
  return a[i] = n, a[n] = i, !0;
}
if (d.effectId === r.ACTION_CHARACTER_TELEPORT_ON_SAME_MAP && !s) {
  return a[i] = n, !0;
}
if (!e) {
  return r(new Error("The casting spell does not exist"));
}
if (h > f) {
  return r(new Error("The spell " + e.id + " seems to be looped."));
}
if (this._callStacks[e + "-" + t] = ++h, !o(e, n)) {
  return r(null, []);
}
for (_ in w) {
  if (w.hasOwnProperty(_)) {
    _ = parseInt(_, 10);
    var b = u.getActor(_);
    if (b && !b.isDead && !b.isInvisibleInFight()) {
      var M = this._getLifeLostFromFighter(t),
        T = this._getLifeLostFromFighter(_);
      g[_] = new c(e, i, n, t, _, {
        isCriticalEffect: a.isCriticalEffect,
        isGlyph: a.isGlyph,
        isTrap: a.isTrap,
        comboBonus: a.comboBonus,
        casterLifeLost: M,
        targetLifeLost: T,
        statsBonus: a.statsBonus,
        specificTarget: a.specificTarget,
        triggeredBy: a.triggeredBy
      });
    }
  }
}
if (w.hasOwnProperty(_)) {
  _ = parseInt(_, 10);
  var b = u.getActor(_);
  if (b && !b.isDead && !b.isInvisibleInFight()) {
    var M = this._getLifeLostFromFighter(t),
      T = this._getLifeLostFromFighter(_);
    g[_] = new c(e, i, n, t, _, {
      isCriticalEffect: a.isCriticalEffect,
      isGlyph: a.isGlyph,
      isTrap: a.isTrap,
      comboBonus: a.comboBonus,
      casterLifeLost: M,
      targetLifeLost: T,
      statsBonus: a.statsBonus,
      specificTarget: a.specificTarget,
      triggeredBy: a.triggeredBy
    });
  }
}
if (b && !b.isDead && !b.isInvisibleInFight()) {
  var M = this._getLifeLostFromFighter(t),
    T = this._getLifeLostFromFighter(_);
  g[_] = new c(e, i, n, t, _, {
    isCriticalEffect: a.isCriticalEffect,
    isGlyph: a.isGlyph,
    isTrap: a.isTrap,
    comboBonus: a.comboBonus,
    casterLifeLost: M,
    targetLifeLost: T,
    statsBonus: a.statsBonus,
    specificTarget: a.specificTarget,
    triggeredBy: a.triggeredBy
  });
}
if (!C) {
  return r(new Error("Unable to preview the spell as the caster " + t + " is dead"));
}
for (var I = this.getPushedEntities(e, t, i, n, a), A = 0; A < I.length; A++) {
  var S = I[A];
  v = g[S.id], v && v.pushedEntities.push(S);
}
for (_ in g) {
  g.hasOwnProperty(_) && g[_].addSplashDamages(this._allSpellDamageInfo[t]);
}
for (_ in g) {
  g.hasOwnProperty(_) && g[_].addSharedDamages(E, N);
}
for (_ in g) {
  g.hasOwnProperty(_) && g[_].computeSpellDamage();
}
for (_ in g) {
  g.hasOwnProperty(_) && (y = g[_], C.addCounteredDamagesReceived(y.counteredDamagesGiven));
}
for (_ in g) {
  if (g.hasOwnProperty(_)) {
    y = g[_], C.addLifeStealingDamagesReceived(y.lifeStealingDamagesGiven);
    var L = y.damagesOutputTo;
    0 !== L && (v = g[L], v && (v.addInterceptionDamages(y.damagesOutput), x[L] = !0));
  }
}
if (g.hasOwnProperty(_)) {
  y = g[_], C.addLifeStealingDamagesReceived(y.lifeStealingDamagesGiven);
  var L = y.damagesOutputTo;
  0 !== L && (v = g[L], v && (v.addInterceptionDamages(y.damagesOutput), x[L] = !0));
}
for (_ in x) {
  g.hasOwnProperty(_) && g[_].computeSpellDamage();
}
for (_ in g) {
  g.hasOwnProperty(_) && (this._allSpellDamageInfo[_] = this._allSpellDamageInfo[_] || [], this._allSpellDamageInfo[_].push(g[_]));
}
if (this._allSpellDamageInfo[e]) {
  for (var i = 0; i < this._allSpellDamageInfo[e].length; i++) {
    var n = this._allSpellDamageInfo[e][i].finalSpellDamage.damage;
    n && (t.min += n.min, t.max += n.max, t.minCritical += n.minCritical, t.maxCritical += n.maxCritical);
  }
}
for (var i = 0; i < this._allSpellDamageInfo[e].length; i++) {
  var n = this._allSpellDamageInfo[e][i].finalSpellDamage.damage;
  n && (t.min += n.min, t.max += n.max, t.minCritical += n.minCritical, t.maxCritical += n.maxCritical);
}
if (!t) {
  return o || s;
}
if (o) {
  return o[t];
}
if (s) {
  return s[t];
}
if (!r) {
  return !1;
}
for (var l = 0; l < i.length; l++) {
  var c = i[l],
    u = c.data;
  if (u) {
    var h = a(u);
    if (h === n && u.markCell === r.cellId && u.type === d.MARK.BOMB) {
      return !0;
    }
  }
}
if (u) {
  var h = a(u);
  if (h === n && u.markCell === r.cellId && u.type === d.MARK.BOMB) {
    return !0;
  }
}
if (h === n && u.markCell === r.cellId && u.type === d.MARK.BOMB) {
  return !0;
}
for (var e in this._temporaryUsedMark) {
  if (this._temporaryUsedMark.hasOwnProperty(e)) {
    this._alreadyUsedMark[e] || (this._alreadyUsedMark[e] = []);
    for (var t in this._temporaryUsedMark[e]) {
      this._temporaryUsedMark[e].hasOwnProperty(t) && (this._alreadyUsedMark[e][t] = !0);
    }
  }
}
if (this._temporaryUsedMark.hasOwnProperty(e)) {
  this._alreadyUsedMark[e] || (this._alreadyUsedMark[e] = []);
  for (var t in this._temporaryUsedMark[e]) {
    this._temporaryUsedMark[e].hasOwnProperty(t) && (this._alreadyUsedMark[e][t] = !0);
  }
}
for (var t in this._temporaryUsedMark[e]) {
  this._temporaryUsedMark[e].hasOwnProperty(t) && (this._alreadyUsedMark[e][t] = !0);
}
for (var t in this.transposition) {
  if (this.transposition.hasOwnProperty(t) && (t = parseInt(t, 10), this.transposition[t] === e)) {
    return t;
  }
}
if (this.transposition.hasOwnProperty(t) && (t = parseInt(t, 10), this.transposition[t] === e)) {
  return t;
}
for (var t = [], i = 0; i < e.length; i++) {
  var n = e[i],
    o = n.castingSpell ? n.castingSpell.spell.id : -1;
  t[o] || (t[o] = []), t[o].push(n);
}
if (!i || 0 === i.length) {
  return 0;
}
for (var o = 0; o < i.length; o++) {
  var a = i[o];
  if ((a.isDamageEffect() || s.isHealingEffect(a) || 5 === a.effectId) && a.order && a.isDirectEffect() && s.verifySpellEffectMask(a, e, t)) {
    if (n === -1) {
      n = a.order;
      continue;
    }
    n = Math.min(a.order, n);
  }
}
if ((a.isDamageEffect() || s.isHealingEffect(a) || 5 === a.effectId) && a.order && a.isDirectEffect() && s.verifySpellEffectMask(a, e, t)) {
  if (n === -1) {
    n = a.order;
    continue;
  }
  n = Math.min(a.order, n);
}
if (n === -1) {
  n = a.order;
  continue;
}
if (!s.playerData.isFighting) {
  return console.warn("We are not in a fight");
}
if (!l) {
  return console.warn("Actor " + o + " does not exist");
}
if (!d) {
  return console.warn("Actor " + n + " does not exist");
}
if (!u) {
  return console.warn("Fighter " + o + " does not exist");
}
if (!h) {
  return console.warn("Fighter " + n + " does not exist");
}
if (this.spellId = e.id, this.spellLevel = e.level, this.isCriticalEffect = a.isCriticalEffect, this.spellCenterCellId = i, this.triggeredBy = a.triggeredBy, this.isGlyph = a.isGlyph, this.isTrap = a.isTrap, this.isWeapon = e.isItem, this.effectMaskOptions = {
  triggeredBy: a.triggeredBy
}, this.caster = new c(n, a.statsBonus), this.target = new c(o, {}), this.caster.retrieveStats(), this.target.retrieveStats(), this.isAccurate = this.caster.isAccurate, this.caster.comboBonus = a.comboBonus || 0, this.caster.cellId = t, a.casterLifeLost && (this.caster.lifeLost = a.casterLifeLost), a.targetLifeLost && (this.target.lifeLost = a.targetLifeLost), this.effectInstances = this.isCriticalEffect ? e.getEffectInstances().criticalEffects : e.getEffectInstances().effects, this.isWeapon && this.isCriticalEffect) {
  var p = s.playerData.inventory.getCurrentWeapon();
  this.spellWeaponCriticalBonus = p.item.criticalHitBonus;
}
for (var m in this.baseDamages) {
  if (this.baseDamages.hasOwnProperty(m)) {
    var f = this.baseDamages[m];
    this.maximizeEffect ? (f.damage.min = f.damage.max, f.erosionPercent.min = f.erosionPercent.max, f.lifePointsAdded.min = f.lifePointsAdded.max) : this.minimizeEffect && (f.damage.max = f.damage.min, f.erosionPercent.max = f.erosionPercent.min, f.lifePointsAdded.max = f.lifePointsAdded.min);
  }
}
if (this.baseDamages.hasOwnProperty(m)) {
  var f = this.baseDamages[m];
  this.maximizeEffect ? (f.damage.min = f.damage.max, f.erosionPercent.min = f.erosionPercent.max, f.lifePointsAdded.min = f.lifePointsAdded.max) : this.minimizeEffect && (f.damage.max = f.damage.min, f.erosionPercent.max = f.erosionPercent.min, f.lifePointsAdded.max = f.lifePointsAdded.min);
}
if (!n) {
  return console.warn("Fighter " + this.caster.id + " does not exist"), !1;
}
if (!o) {
  return console.warn("Fighter " + this.target.id + " does not exist"), !1;
}
for (c = 0; c < this.caster.buffs.length; c++) {
  var h = this.caster.buffs[c],
    p = h.castingSpell && h.castingSpell.spell && h.castingSpell.spell.id;
  h.statName && h.source === this.caster.id && p === e.id && (u[h.actionId] = (u[h.actionId] || 0) + h.stack.length);
}
for (c = 0; c < this.effectInstances.length; c++) {
  var v = this.effectInstances[c],
    y = s.isInZoneEffect(v, this.target.cellId),
    w = s.getElementEffect(this.caster, v.effect);
  if (f = this.caster.id + "-" + this.spellId + "-" + c + "-" + v.targetMask + "-" + v.effectId, v.isDirectEffect() && y && (!this.isWeapon || this.caster.id !== this.target.id) && (0 === this.spellId || s.verifySpellEffectMask(v, this.caster.id, this.target.id, this.effectMaskOptions))) {
    var b = s.getShapeEfficiency(this.isWeapon ? i.playerData.inventory.getCurrentWeapon().item.type.rawZone : v.rawZone, this.spellCenterCellId, this.target.cellId);
    if (v.isDamageEffect() && !s.isHealingEffect(v) && w !== -1) {
      this.baseDamages[f] = new r(f, v.effectId, w, v.random || -1), m = this.baseDamages[f], m.efficiencyMultiplier = b, this.caster.id === this.target.id && "C" === v.targetMask && "I" === v.triggers && (m.efficiencyMultiplier = 1);
      var M = l.EFFECTS_IDS.TARGET_EROSION_DAMAGE[v.effectId],
        T = l.EFFECTS_IDS.CASTER_EROSION_DAMAGE[v.effectId];
      M || T ? (m.type = l.TYPE.EROSION, m.erosionLifePoints = M ? this.target.erosionLifePoints : this.caster.erosionLifePoints, m.erosionPercent.normal = v.diceNum) : (g = s.getMinMaxDamageFromRawEffect(v), this.isGlyph ? m.origin = l.ORIGIN.GLYPH : this.isTrap && (m.origin = l.ORIGIN.TRAP), m.damage.min = g.min + this.spellWeaponCriticalBonus, m.damage.max = g.max + this.spellWeaponCriticalBonus);
    } else if (s.isHealingEffect(v)) {
      this.baseDamages[f] = new r(f, v.effectId, -1, v.random), m = this.baseDamages[f], m.efficiencyMultiplier = b, m.type = l.TYPE.HEAL;
      var C = n.data.stats.lifePoints,
        I = o.data.stats.maxLifePoints;
      v.effectId === d.ACTION_CHARACTER_DISPATCH_LIFE_POINTS_PERCENT ? this.target.id !== this.caster.id ? m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * C / 100 : (m.type = l.TYPE.FIXED, m.damage.normal = v.diceNum * C / 100) : v.effectId === d.ACTION_FIGHT_LIFE_POINTS_WIN_PERCENT ? m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * I / 100 : (g = s.getMinMaxDamageFromRawEffect(v), m.lifePointsAdded.min = g.min + this.spellWeaponCriticalBonus, m.lifePointsAdded.max = g.max + this.spellWeaponCriticalBonus);
    } else if (l.EFFECT_ADD_STATS_PROPERTY[v.effectId] && v.order < _ && !t(v.effectId)) {
      var A;
      A = this.isCriticalEffect ? l.EFFECT_ADD_STATS_PROPERTY_CRITICAL[v.effectId] : l.EFFECT_ADD_STATS_PROPERTY[v.effectId], this.caster.newStatsBonus[A] = this.caster.newStatsBonus[A] || 0, this.caster.newStatsBonus[A] += v.diceNum;
    }
    v.effectId === d.ACTION_CHARACTER_SHORTEN_ACTIVE_EFFECTS_DURATION && (_ === -1 || v.order < _) && (this.spellTargetEffectsDurationReduction = v.diceNum);
  }
}
if (f = this.caster.id + "-" + this.spellId + "-" + c + "-" + v.targetMask + "-" + v.effectId, v.isDirectEffect() && y && (!this.isWeapon || this.caster.id !== this.target.id) && (0 === this.spellId || s.verifySpellEffectMask(v, this.caster.id, this.target.id, this.effectMaskOptions))) {
  var b = s.getShapeEfficiency(this.isWeapon ? i.playerData.inventory.getCurrentWeapon().item.type.rawZone : v.rawZone, this.spellCenterCellId, this.target.cellId);
  if (v.isDamageEffect() && !s.isHealingEffect(v) && w !== -1) {
    this.baseDamages[f] = new r(f, v.effectId, w, v.random || -1), m = this.baseDamages[f], m.efficiencyMultiplier = b, this.caster.id === this.target.id && "C" === v.targetMask && "I" === v.triggers && (m.efficiencyMultiplier = 1);
    var M = l.EFFECTS_IDS.TARGET_EROSION_DAMAGE[v.effectId],
      T = l.EFFECTS_IDS.CASTER_EROSION_DAMAGE[v.effectId];
    M || T ? (m.type = l.TYPE.EROSION, m.erosionLifePoints = M ? this.target.erosionLifePoints : this.caster.erosionLifePoints, m.erosionPercent.normal = v.diceNum) : (g = s.getMinMaxDamageFromRawEffect(v), this.isGlyph ? m.origin = l.ORIGIN.GLYPH : this.isTrap && (m.origin = l.ORIGIN.TRAP), m.damage.min = g.min + this.spellWeaponCriticalBonus, m.damage.max = g.max + this.spellWeaponCriticalBonus);
  } else if (s.isHealingEffect(v)) {
    this.baseDamages[f] = new r(f, v.effectId, -1, v.random), m = this.baseDamages[f], m.efficiencyMultiplier = b, m.type = l.TYPE.HEAL;
    var C = n.data.stats.lifePoints,
      I = o.data.stats.maxLifePoints;
    v.effectId === d.ACTION_CHARACTER_DISPATCH_LIFE_POINTS_PERCENT ? this.target.id !== this.caster.id ? m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * C / 100 : (m.type = l.TYPE.FIXED, m.damage.normal = v.diceNum * C / 100) : v.effectId === d.ACTION_FIGHT_LIFE_POINTS_WIN_PERCENT ? m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * I / 100 : (g = s.getMinMaxDamageFromRawEffect(v), m.lifePointsAdded.min = g.min + this.spellWeaponCriticalBonus, m.lifePointsAdded.max = g.max + this.spellWeaponCriticalBonus);
  } else if (l.EFFECT_ADD_STATS_PROPERTY[v.effectId] && v.order < _ && !t(v.effectId)) {
    var A;
    A = this.isCriticalEffect ? l.EFFECT_ADD_STATS_PROPERTY_CRITICAL[v.effectId] : l.EFFECT_ADD_STATS_PROPERTY[v.effectId], this.caster.newStatsBonus[A] = this.caster.newStatsBonus[A] || 0, this.caster.newStatsBonus[A] += v.diceNum;
  }
  v.effectId === d.ACTION_CHARACTER_SHORTEN_ACTIVE_EFFECTS_DURATION && (_ === -1 || v.order < _) && (this.spellTargetEffectsDurationReduction = v.diceNum);
}
if (v.isDamageEffect() && !s.isHealingEffect(v) && w !== -1) {
  this.baseDamages[f] = new r(f, v.effectId, w, v.random || -1), m = this.baseDamages[f], m.efficiencyMultiplier = b, this.caster.id === this.target.id && "C" === v.targetMask && "I" === v.triggers && (m.efficiencyMultiplier = 1);
  var M = l.EFFECTS_IDS.TARGET_EROSION_DAMAGE[v.effectId],
    T = l.EFFECTS_IDS.CASTER_EROSION_DAMAGE[v.effectId];
  M || T ? (m.type = l.TYPE.EROSION, m.erosionLifePoints = M ? this.target.erosionLifePoints : this.caster.erosionLifePoints, m.erosionPercent.normal = v.diceNum) : (g = s.getMinMaxDamageFromRawEffect(v), this.isGlyph ? m.origin = l.ORIGIN.GLYPH : this.isTrap && (m.origin = l.ORIGIN.TRAP), m.damage.min = g.min + this.spellWeaponCriticalBonus, m.damage.max = g.max + this.spellWeaponCriticalBonus);
} else if (s.isHealingEffect(v)) {
  this.baseDamages[f] = new r(f, v.effectId, -1, v.random), m = this.baseDamages[f], m.efficiencyMultiplier = b, m.type = l.TYPE.HEAL;
  var C = n.data.stats.lifePoints,
    I = o.data.stats.maxLifePoints;
  v.effectId === d.ACTION_CHARACTER_DISPATCH_LIFE_POINTS_PERCENT ? this.target.id !== this.caster.id ? m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * C / 100 : (m.type = l.TYPE.FIXED, m.damage.normal = v.diceNum * C / 100) : v.effectId === d.ACTION_FIGHT_LIFE_POINTS_WIN_PERCENT ? m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * I / 100 : (g = s.getMinMaxDamageFromRawEffect(v), m.lifePointsAdded.min = g.min + this.spellWeaponCriticalBonus, m.lifePointsAdded.max = g.max + this.spellWeaponCriticalBonus);
} else if (l.EFFECT_ADD_STATS_PROPERTY[v.effectId] && v.order < _ && !t(v.effectId)) {
  var A;
  A = this.isCriticalEffect ? l.EFFECT_ADD_STATS_PROPERTY_CRITICAL[v.effectId] : l.EFFECT_ADD_STATS_PROPERTY[v.effectId], this.caster.newStatsBonus[A] = this.caster.newStatsBonus[A] || 0, this.caster.newStatsBonus[A] += v.diceNum;
}
if (s.isHealingEffect(v)) {
  this.baseDamages[f] = new r(f, v.effectId, -1, v.random), m = this.baseDamages[f], m.efficiencyMultiplier = b, m.type = l.TYPE.HEAL;
  var C = n.data.stats.lifePoints,
    I = o.data.stats.maxLifePoints;
  v.effectId === d.ACTION_CHARACTER_DISPATCH_LIFE_POINTS_PERCENT ? this.target.id !== this.caster.id ? m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * C / 100 : (m.type = l.TYPE.FIXED, m.damage.normal = v.diceNum * C / 100) : v.effectId === d.ACTION_FIGHT_LIFE_POINTS_WIN_PERCENT ? m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * I / 100 : (g = s.getMinMaxDamageFromRawEffect(v), m.lifePointsAdded.min = g.min + this.spellWeaponCriticalBonus, m.lifePointsAdded.max = g.max + this.spellWeaponCriticalBonus);
} else if (l.EFFECT_ADD_STATS_PROPERTY[v.effectId] && v.order < _ && !t(v.effectId)) {
  var A;
  A = this.isCriticalEffect ? l.EFFECT_ADD_STATS_PROPERTY_CRITICAL[v.effectId] : l.EFFECT_ADD_STATS_PROPERTY[v.effectId], this.caster.newStatsBonus[A] = this.caster.newStatsBonus[A] || 0, this.caster.newStatsBonus[A] += v.diceNum;
}
if (l.EFFECT_ADD_STATS_PROPERTY[v.effectId] && v.order < _ && !t(v.effectId)) {
  var A;
  A = this.isCriticalEffect ? l.EFFECT_ADD_STATS_PROPERTY_CRITICAL[v.effectId] : l.EFFECT_ADD_STATS_PROPERTY[v.effectId], this.caster.newStatsBonus[A] = this.caster.newStatsBonus[A] || 0, this.caster.newStatsBonus[A] += v.diceNum;
}
for (f in this.baseDamages) {
  this.baseDamages.hasOwnProperty(f) && (m = this.baseDamages[f], this.caster.id === i.playerData.characters.controlledCharacterId && s.applySpellModificationsOnEffect(m, e));
}
for (var t in e) {
  if (e.hasOwnProperty(t)) {
    for (var i = e[t], n = 0; n < i.length; n++) {
      var a = i[n];
      if (a.effect.effect.category === l.DAMAGE_EFFECT_CATEGORY) {
        var c = a.effect;
        if (a.castingSpell.spell.id === this.spellId) {
          for (var u = 0; u < this.effectInstances.length; u++) {
            if (this.effectInstances[u].effectId === a.effect.effectId) {
              c = this.effectInstances[u];
              break;
            }
          }
        }
        if (!s.verifySpellEffectMask(c, this.caster.id, this.target.id, this.effectMaskOptions) || !this.verifyBuffTrigger(a) || this.caster.id === this.target.id) {
          continue;
        }
        var h = s.getElementEffect(this.caster, c.effect),
          p = "buff-" + this.caster.id + "-" + a.castingSpell.spell.id + "-" + c.targetMask + "-" + c.effectId;
        this.baseDamages[p] = new r(p, c.effectId, h, c.random), this.baseDamages[p].type = l.TYPE.BUFF;
        var m = s.getMinMaxDamageFromRawEffect(c);
        this.baseDamages[p].damage.min = m.min, this.baseDamages[p].damage.max = m.max, this.baseDamages[p].efficiencyMultiplier = s.getShapeEfficiency(c.rawZone, this.target.cellId, this.target.cellId);
      } else {
        l.BUFF_ADD_DAMAGES[a.actionId] ? this.caster[l.BUFF_ADD_DAMAGES[a.actionId]] += a.getParam1() : a.actionId === d.ACTION_CHARACTER_UNLUCKY ? this.minimizeEffect = !0 : a.actionId === d.ACTION_CHARACTER_BOOST_PERMANENT_DAMAGE_PERCENT && (this.caster.erosionPercentBonus += a.getParam1());
      }
    }
  }
}
if (e.hasOwnProperty(t)) {
  for (var i = e[t], n = 0; n < i.length; n++) {
    var a = i[n];
    if (a.effect.effect.category === l.DAMAGE_EFFECT_CATEGORY) {
      var c = a.effect;
      if (a.castingSpell.spell.id === this.spellId) {
        for (var u = 0; u < this.effectInstances.length; u++) {
          if (this.effectInstances[u].effectId === a.effect.effectId) {
            c = this.effectInstances[u];
            break;
          }
        }
      }
      if (!s.verifySpellEffectMask(c, this.caster.id, this.target.id, this.effectMaskOptions) || !this.verifyBuffTrigger(a) || this.caster.id === this.target.id) {
        continue;
      }
      var h = s.getElementEffect(this.caster, c.effect),
        p = "buff-" + this.caster.id + "-" + a.castingSpell.spell.id + "-" + c.targetMask + "-" + c.effectId;
      this.baseDamages[p] = new r(p, c.effectId, h, c.random), this.baseDamages[p].type = l.TYPE.BUFF;
      var m = s.getMinMaxDamageFromRawEffect(c);
      this.baseDamages[p].damage.min = m.min, this.baseDamages[p].damage.max = m.max, this.baseDamages[p].efficiencyMultiplier = s.getShapeEfficiency(c.rawZone, this.target.cellId, this.target.cellId);
    } else {
      l.BUFF_ADD_DAMAGES[a.actionId] ? this.caster[l.BUFF_ADD_DAMAGES[a.actionId]] += a.getParam1() : a.actionId === d.ACTION_CHARACTER_UNLUCKY ? this.minimizeEffect = !0 : a.actionId === d.ACTION_CHARACTER_BOOST_PERMANENT_DAMAGE_PERCENT && (this.caster.erosionPercentBonus += a.getParam1());
    }
  }
}
for (var i = e[t], n = 0; n < i.length; n++) {
  var a = i[n];
  if (a.effect.effect.category === l.DAMAGE_EFFECT_CATEGORY) {
    var c = a.effect;
    if (a.castingSpell.spell.id === this.spellId) {
      for (var u = 0; u < this.effectInstances.length; u++) {
        if (this.effectInstances[u].effectId === a.effect.effectId) {
          c = this.effectInstances[u];
          break;
        }
      }
    }
    if (!s.verifySpellEffectMask(c, this.caster.id, this.target.id, this.effectMaskOptions) || !this.verifyBuffTrigger(a) || this.caster.id === this.target.id) {
      continue;
    }
    var h = s.getElementEffect(this.caster, c.effect),
      p = "buff-" + this.caster.id + "-" + a.castingSpell.spell.id + "-" + c.targetMask + "-" + c.effectId;
    this.baseDamages[p] = new r(p, c.effectId, h, c.random), this.baseDamages[p].type = l.TYPE.BUFF;
    var m = s.getMinMaxDamageFromRawEffect(c);
    this.baseDamages[p].damage.min = m.min, this.baseDamages[p].damage.max = m.max, this.baseDamages[p].efficiencyMultiplier = s.getShapeEfficiency(c.rawZone, this.target.cellId, this.target.cellId);
  } else {
    l.BUFF_ADD_DAMAGES[a.actionId] ? this.caster[l.BUFF_ADD_DAMAGES[a.actionId]] += a.getParam1() : a.actionId === d.ACTION_CHARACTER_UNLUCKY ? this.minimizeEffect = !0 : a.actionId === d.ACTION_CHARACTER_BOOST_PERMANENT_DAMAGE_PERCENT && (this.caster.erosionPercentBonus += a.getParam1());
  }
}
if (a.effect.effect.category === l.DAMAGE_EFFECT_CATEGORY) {
  var c = a.effect;
  if (a.castingSpell.spell.id === this.spellId) {
    for (var u = 0; u < this.effectInstances.length; u++) {
      if (this.effectInstances[u].effectId === a.effect.effectId) {
        c = this.effectInstances[u];
        break;
      }
    }
  }
  if (!s.verifySpellEffectMask(c, this.caster.id, this.target.id, this.effectMaskOptions) || !this.verifyBuffTrigger(a) || this.caster.id === this.target.id) {
    continue;
  }
  var h = s.getElementEffect(this.caster, c.effect),
    p = "buff-" + this.caster.id + "-" + a.castingSpell.spell.id + "-" + c.targetMask + "-" + c.effectId;
  this.baseDamages[p] = new r(p, c.effectId, h, c.random), this.baseDamages[p].type = l.TYPE.BUFF;
  var m = s.getMinMaxDamageFromRawEffect(c);
  this.baseDamages[p].damage.min = m.min, this.baseDamages[p].damage.max = m.max, this.baseDamages[p].efficiencyMultiplier = s.getShapeEfficiency(c.rawZone, this.target.cellId, this.target.cellId);
} else {
  l.BUFF_ADD_DAMAGES[a.actionId] ? this.caster[l.BUFF_ADD_DAMAGES[a.actionId]] += a.getParam1() : a.actionId === d.ACTION_CHARACTER_UNLUCKY ? this.minimizeEffect = !0 : a.actionId === d.ACTION_CHARACTER_BOOST_PERMANENT_DAMAGE_PERCENT && (this.caster.erosionPercentBonus += a.getParam1());
}
if (a.castingSpell.spell.id === this.spellId) {
  for (var u = 0; u < this.effectInstances.length; u++) {
    if (this.effectInstances[u].effectId === a.effect.effectId) {
      c = this.effectInstances[u];
      break;
    }
  }
}
for (var u = 0; u < this.effectInstances.length; u++) {
  if (this.effectInstances[u].effectId === a.effect.effectId) {
    c = this.effectInstances[u];
    break;
  }
}
if (this.effectInstances[u].effectId === a.effect.effectId) {
  c = this.effectInstances[u];
  break;
}
if (!s.verifySpellEffectMask(c, this.caster.id, this.target.id, this.effectMaskOptions) || !this.verifyBuffTrigger(a) || this.caster.id === this.target.id) {
  continue;
}
for (var e = 0; e < this.target.buffs.length; e++) {
  var t = this.target.buffs[e];
  if (!t.trigger && t.effect.effectId === d.ACTION_FIGHT_DISABLE_STATE) {
    switch (t.effect.getParams()[0]) {
      case u.STATE_INVULNERABLE:
      case u.STATE_INVULNERABLE_COPY:
        this.target.isInvulnerable = !1;
        break;
      case u.STATE_INCURABLE:
        this.target.isUnhealable = !1;
    }
  }
  t.actionId === d.ACTION_CHARACTER_MAXIMIZE_ROLL && (this.maximizeEffect = !0);
  var i = t.getParam1();
  i && t.actionId === d.ACTION_CHARACTER_BOOST_PERMANENT_DAMAGE_PERCENT && (this.target.erosionPercentBonus += i);
}
if (!t.trigger && t.effect.effectId === d.ACTION_FIGHT_DISABLE_STATE) {
  switch (t.effect.getParams()[0]) {
    case u.STATE_INVULNERABLE:
    case u.STATE_INVULNERABLE_COPY:
      this.target.isInvulnerable = !1;
      break;
    case u.STATE_INCURABLE:
      this.target.isUnhealable = !1;
  }
}
for (var n = y.background.zones, o = 0; o < n.length; o++) {
  var a = n[o];
  if (a.data.type === u.MARK.GLYPH && a.data.sourceId === e && a.data.spellId === t) {
    if (a.data.markSize > 0) {
      return a.data.markSize >= s.getDistance(i, a.data.markCell);
    }
    if (i === a.data.markCell) {
      return !0;
    }
  }
}
if (a.data.type === u.MARK.GLYPH && a.data.sourceId === e && a.data.spellId === t) {
  if (a.data.markSize > 0) {
    return a.data.markSize >= s.getDistance(i, a.data.markCell);
  }
  if (i === a.data.markCell) {
    return !0;
  }
}
if (a.data.markSize > 0) {
  return a.data.markSize >= s.getDistance(i, a.data.markCell);
}
if (i === a.data.markCell) {
  return !0;
}
if (!e) {
  return null;
}
for (var a = 0; a < u.WALL_MAX_SIZE; a++) {
  if (i = r.getNearestCellInDirection(i, o), !i) {
    return null;
  }
  var s = t.getActorOnCell(i.cellId);
  if (t.isBombOf(s, n, e)) {
    return s.actorId;
  }
}
if (i = r.getNearestCellInDirection(i, o), !i) {
  return null;
}
if (t.isBombOf(s, n, e)) {
  return s.actorId;
}
for (var s = r.fromCellId(i), l = y.background.zones, c = [], d = 0; d < l.length; d++) {
  var h = l[d];
  h.data && h.data.markCell && h.data.type === u.MARK.BOMB && (c[h.data.markCell] = h.data);
}
if (!o(c[i], n, e)) {
  return null;
}
for (var i in c.actors) {
  if (c.actors.hasOwnProperty(i)) {
    i = parseInt(i, 10);
    var n = c.actors[i],
      o = n.getFighter(),
      d = s.getDistance(t.cellId, n.cellId);
    !o.isBomb || d > u.BOMB_ZONE_SIZE || o.data.stats.summoner !== e || h.indexOf(i) !== -1 || (h.push(i), a(n), l(r.fromCellId(n.cellId), -1, n.data.creatureGenericId));
  }
}
if (c.actors.hasOwnProperty(i)) {
  i = parseInt(i, 10);
  var n = c.actors[i],
    o = n.getFighter(),
    d = s.getDistance(t.cellId, n.cellId);
  !o.isBomb || d > u.BOMB_ZONE_SIZE || o.data.stats.summoner !== e || h.indexOf(i) !== -1 || (h.push(i), a(n), l(r.fromCellId(n.cellId), -1, n.data.creatureGenericId));
}
if (i) {
  var d = f[i.cellId];
  s !== -1 && (o(d, c, e) || n(i.cellId)) && l(r.getNearestCellInDirection(i, s), s, c);
  var u = t.getActorOnCell(i.cellId);
  t.isBombOf(u, c, e) && (h.indexOf(u.actorId) === -1 && (h.push(u.actorId), a(u)), s !== p.DIRECTION_NORTH_WEST && l(r.getNearestCellInDirection(i, p.DIRECTION_SOUTH_EAST), p.DIRECTION_SOUTH_EAST, c), s !== p.DIRECTION_NORTH_EAST && l(r.getNearestCellInDirection(i, p.DIRECTION_SOUTH_WEST), p.DIRECTION_SOUTH_WEST, c), s !== p.DIRECTION_SOUTH_EAST && l(r.getNearestCellInDirection(i, p.DIRECTION_NORTH_WEST), p.DIRECTION_NORTH_WEST, c), s !== p.DIRECTION_SOUTH_WEST && l(r.getNearestCellInDirection(i, p.DIRECTION_NORTH_EAST), p.DIRECTION_NORTH_EAST, c));
}
if (!m) {
  return h;
}
for (var f = [], g = 0; g < d.length; g++) {
  var _ = d[g];
  _.data && _.data.markCell && _.data.type === u.MARK.BOMB && (f[_.data.markCell] = _.data);
}
for (var i = y.actorManager, n = 0, o = 0; o < e.length; o++) {
  var a = i.getActor(e[o]);
  if (a && (!t || a.data.creatureGenericId === t)) {
    for (var s = a.getFighter(), r = 0; r < s.buffs.length; r++) {
      var l = s.buffs[r];
      l instanceof v && l.actionId === c.ACTION_BOMB_COMBO_BONUS && (n += l.effect.diceNum);
    }
  }
}
if (a && (!t || a.data.creatureGenericId === t)) {
  for (var s = a.getFighter(), r = 0; r < s.buffs.length; r++) {
    var l = s.buffs[r];
    l instanceof v && l.actionId === c.ACTION_BOMB_COMBO_BONUS && (n += l.effect.diceNum);
  }
}
for (var s = a.getFighter(), r = 0; r < s.buffs.length; r++) {
  var l = s.buffs[r];
  l instanceof v && l.actionId === c.ACTION_BOMB_COMBO_BONUS && (n += l.effect.diceNum);
}
if (n) {
  var o = n.value.getTotalStat();
  e.damage.min += e.damage.min > 0 ? o : 0, e.damage.max += e.damage.max > 0 ? o : 0;
}
if (!s || !r) {
  return !1;
}
if (!l || !d) {
  return !1;
}
if (!e.targetMask || t === i && 0 === e.effect.category && "C" === e.targetMask) {
  return !0;
}
if (u) {
  if (e.effectId === c.ACTION_CHARACTER_DISPATCH_LIFE_POINTS_PERCENT) {
    return !0;
  }
  if (e.targetMask.indexOf("g") !== -1) {
    return !1;
  }
  _ = "caC";
} else {
  if (p && e.rawZone.indexOf("A") !== -1 && e.rawZone.indexOf("a") !== -1) {
    return !1;
  }
  _ = d.isSummon() && 0 === d.data.stats.maxMovementPoints ? h ? "agsj" : "ASJ" : d.isSummon() ? h ? "agij" : "AIJ" : "GameFightCompanionInformations" === d.data._type ? h ? "agdl" : "ADL" : "GameFightMonsterInformations" === d.data._type ? h ? "agm" : "AM" : h ? "gahl" : "AHL";
}
if (e.effectId === c.ACTION_CHARACTER_DISPATCH_LIFE_POINTS_PERCENT) {
  return !0;
}
if (e.targetMask.indexOf("g") !== -1) {
  return !1;
}
if (p && e.rawZone.indexOf("A") !== -1 && e.rawZone.indexOf("a") !== -1) {
  return !1;
}
if (!v || !v.length) {
  return !1;
}
if (!b || !b.length) {
  return !0;
}
for (var M = !1, T = [], C = 0; C < b.length; C++) {
  var I = b[C],
    A = !1;
  "*" === I.charAt(0) && (A = !0, I = I.substr(1));
  var S = I.charAt(0),
    E = I.substr(1),
    N = ~~E;
  switch (S) {
    case "e":
      M = A ? !m || m.indexOf(N) === -1 : !f || f.indexOf(N) === -1;
      break;
    case "E":
      M = !0, A ? T.E = T.E || m && m.indexOf(N) !== -1 : T.E = T.E || f && f.indexOf(N) !== -1;
      break;
    case "f":
      M = !r.data.creatureGenericId || r.data.creatureGenericId !== ~~E;
      break;
    case "F":
      M = !0, T.F = T.F || r.data.creatureGenericId === ~~E;
      break;
    case "o":
    case "O":
      M = n.triggeredBy === i;
      break;
    case "p":
      M = !g;
      break;
    case "P":
      M = g;
      break;
    case "v":
      M = d.data.stats.lifePoints / d.data.stats.maxLifePoints * 100 > ~~E;
      break;
    case "V":
      M = d.data.stats.lifePoints / d.data.stats.maxLifePoints * 100 <= ~~E;
  }
  if (!M) {
    return !1;
  }
}
if (!M) {
  return !1;
}
for (var x in T) {
  if (!T.hasOwnProperty(x) || !T[x]) {
    return !1;
  }
}
if (!T.hasOwnProperty(x) || !T[x]) {
  return !1;
}
if (!e) {
  return 0;
}
if (!e) {
  return !1;
}
if (!t || !e) {
  return -1;
}
for (var a = _.EARTH, s = 2; s < 5; s++) {
  n[a] === n[s] && o[a] < o[s] ? a = s : n[a] < n[s] && (a = s);
}
if (u.EFFECTS_IDS.BEST_ELEMENT[t.id]) {
  return a;
}
for (var n in e) {
  if (t.hasOwnProperty(n)) {
    var a = o[n] || new d();
    o[n] = a;
    for (var s = 0; s < e[n].length; s++) {
      var r = e[n][s];
      a.isAccurate = a.isAccurate && (!r.finalSpellDamage.doesDamageOrHeal() || r.isAccurate), a.invulnerableState = a.invulnerableState || r.target.isInvulnerable, a.unhealableState = a.unhealableState || r.target.isUnhealable;
      for (var l = 0; l < r.finalSpellDamage.effectDamages.length; l++) {
        var c = r.finalSpellDamage.effectDamages[l];
        i.critical ? (c.damage.convertToCritical(), c.lifePointsAdded.convertToCritical()) : (c.damage.resetCritical(), c.lifePointsAdded.resetCritical());
        var u = c.element + "," + c.random,
          h = a.getEffectDamageByNameId(u);
        h ? (h.damage.addFromDamage(c.damage), h.lifePointsAdded.addFromDamage(c.lifePointsAdded)) : (c.nameId = u, a.addEffectDamage(c));
      }
    }
  }
}
if (t.hasOwnProperty(n)) {
  var a = o[n] || new d();
  o[n] = a;
  for (var s = 0; s < e[n].length; s++) {
    var r = e[n][s];
    a.isAccurate = a.isAccurate && (!r.finalSpellDamage.doesDamageOrHeal() || r.isAccurate), a.invulnerableState = a.invulnerableState || r.target.isInvulnerable, a.unhealableState = a.unhealableState || r.target.isUnhealable;
    for (var l = 0; l < r.finalSpellDamage.effectDamages.length; l++) {
      var c = r.finalSpellDamage.effectDamages[l];
      i.critical ? (c.damage.convertToCritical(), c.lifePointsAdded.convertToCritical()) : (c.damage.resetCritical(), c.lifePointsAdded.resetCritical());
      var u = c.element + "," + c.random,
        h = a.getEffectDamageByNameId(u);
      h ? (h.damage.addFromDamage(c.damage), h.lifePointsAdded.addFromDamage(c.lifePointsAdded)) : (c.nameId = u, a.addEffectDamage(c));
    }
  }
}
for (var s = 0; s < e[n].length; s++) {
  var r = e[n][s];
  a.isAccurate = a.isAccurate && (!r.finalSpellDamage.doesDamageOrHeal() || r.isAccurate), a.invulnerableState = a.invulnerableState || r.target.isInvulnerable, a.unhealableState = a.unhealableState || r.target.isUnhealable;
  for (var l = 0; l < r.finalSpellDamage.effectDamages.length; l++) {
    var c = r.finalSpellDamage.effectDamages[l];
    i.critical ? (c.damage.convertToCritical(), c.lifePointsAdded.convertToCritical()) : (c.damage.resetCritical(), c.lifePointsAdded.resetCritical());
    var u = c.element + "," + c.random,
      h = a.getEffectDamageByNameId(u);
    h ? (h.damage.addFromDamage(c.damage), h.lifePointsAdded.addFromDamage(c.lifePointsAdded)) : (c.nameId = u, a.addEffectDamage(c));
  }
}
for (var l = 0; l < r.finalSpellDamage.effectDamages.length; l++) {
  var c = r.finalSpellDamage.effectDamages[l];
  i.critical ? (c.damage.convertToCritical(), c.lifePointsAdded.convertToCritical()) : (c.damage.resetCritical(), c.lifePointsAdded.resetCritical());
  var u = c.element + "," + c.random,
    h = a.getEffectDamageByNameId(u);
  h ? (h.damage.addFromDamage(c.damage), h.lifePointsAdded.addFromDamage(c.lifePointsAdded)) : (c.nameId = u, a.addEffectDamage(c));
}
for (var s in o) {
  if (o.hasOwnProperty(s)) {
    s = parseInt(s, 10);
    var r = o[s];
    r.updateDamage();
    var l = n.getFighter(s).data.stats,
      c = l.maxLifePoints - l.lifePoints,
      u = new f(c + r.damage.min, c + r.damage.max, c + r.damage.minCritical, c + r.damage.maxCritical);
    a[s] = r.toData(u);
  }
}
if (o.hasOwnProperty(s)) {
  s = parseInt(s, 10);
  var r = o[s];
  r.updateDamage();
  var l = n.getFighter(s).data.stats,
    c = l.maxLifePoints - l.lifePoints,
    u = new f(c + r.damage.min, c + r.damage.max, c + r.damage.minCritical, c + r.damage.maxCritical);
  a[s] = r.toData(u);
}
for (var e, t = 0, i = 0, n = 0, o = 0; o < s; o++) {
  for (e = 0; e < a; e++) {
    r[n] = {
      x: t + e,
      y: i + e
    }, n++;
  }
  for (t++, e = 0; e < a; e++) {
    r[n] = {
      x: t + e,
      y: i + e
    }, n++;
  }
  i--;
}
for (e = 0; e < a; e++) {
  r[n] = {
    x: t + e,
    y: i + e
  }, n++;
}
for (t++, e = 0; e < a; e++) {
  r[n] = {
    x: t + e,
    y: i + e
  }, n++;
}
if (void 0 === t) {
  throw new Error("Cell identifier out of bounds");
}
if (t.x === e.x && t.y === e.y) {
  return 1;
}
if (void 0 !== i.fourDir && null !== i.fourDir && (n = i.fourDir), !e || !t || e.cellId === t.cellId) {
  return 0;
}
for (var e = new l(-1, -1, -1, -1), t = 0; t < this.effectDamages.length; t++) {
  var i = this.effectDamages[t];
  i.random > 0 ? (e.damage.min = e.damage.min > 0 ? Math.min(e.damage.min, i.damage.min) : i.damage.min, e.damage.max = Math.max(e.damage.max, i.damage.max), e.damage.minCritical = e.damage.minCritical > 0 ? Math.min(e.damage.minCritical, i.damage.minCritical) : i.damage.minCritical, e.damage.maxCritical = Math.max(e.damage.maxCritical, i.damage.maxCritical), e.lifePointsAdded.min = e.lifePointsAdded.min > 0 ? Math.min(e.lifePointsAdded.min, i.lifePointsAdded.min) : i.lifePointsAdded.min, e.lifePointsAdded.max = Math.max(e.lifePointsAdded.max, i.lifePointsAdded.max), e.lifePointsAdded.minCritical = e.lifePointsAdded.minCritical > 0 ? Math.min(e.lifePointsAdded.minCritical, i.lifePointsAdded.minCritical) : i.lifePointsAdded.minCritical, e.lifePointsAdded.maxCritical = Math.max(e.lifePointsAdded.maxCritical, i.lifePointsAdded.maxCritical), e.lifePointsAddedBasedOnLifePercent.normal = e.lifePointsAddedBasedOnLifePercent.normal > 0 ? Math.min(e.lifePointsAddedBasedOnLifePercent.normal, i.lifePointsAddedBasedOnLifePercent.normal) : i.lifePointsAddedBasedOnLifePercent.normal) : this.updateFromEffectDamage(i);
}
for (var t = 0; t < this.effectDamages.length; t++) {
  if (this.effectDamages[t].nameId === e) {
    return this.effectDamages[t];
  }
}
if (this.effectDamages[t].nameId === e) {
  return this.effectDamages[t];
}
for (var t = [], i = new c(), n = null, l = !1, d = 0; d < this.effectDamages.length; d++) {
  var u = this.effectDamages[d];
  if (!this.invulnerableState && u.random > 0 && u.doesDamage() && t.push({
    color: o(u.element),
    content: this.getEffectString(u.damage, u.random)
  }), u.random <= 0) {
    var h = u.element;
    u.effectId === r.ACTION_CHARACTER_PUSH && (h = s.PUSH), h === -1 || h !== n && null !== n ? h !== -1 && h !== n && (n = -1) : n = h, i.min += u.damage.min, i.max += u.damage.max, i.minCritical += u.damage.minCritical, i.maxCritical += u.damage.maxCritical;
  }
  u.type !== a.TYPE.HEAL && (l = !0);
}
if (!this.invulnerableState && u.random > 0 && u.doesDamage() && t.push({
  color: o(u.element),
  content: this.getEffectString(u.damage, u.random)
}), u.random <= 0) {
  var h = u.element;
  u.effectId === r.ACTION_CHARACTER_PUSH && (h = s.PUSH), h === -1 || h !== n && null !== n ? h !== -1 && h !== n && (n = -1) : n = h, i.min += u.damage.min, i.max += u.damage.max, i.minCritical += u.damage.minCritical, i.maxCritical += u.damage.maxCritical;
}
if (e && (m.min = Math.min(m.min, e.min), m.max = Math.min(m.max, e.max), m.minCritical = Math.min(m.minCritical, e.minCritical), m.maxCritical = Math.min(m.maxCritical, e.maxCritical)), m.min > 0 || m.max > 0 || m.minCritical > 0 || m.maxCritical > 0) {
  var f = this.getEffectString(m, -1);
  t.push({
    color: p,
    content: this.unhealableState ? window.gui.databases.SpellStates[76].nameId : f
  });
}
if (!n) {
  return console.warn("Actor " + this.id + " does not exist");
}
if (!o) {
  return console.warn("Fighter " + this.id + " does not exist");
}
for (d in l) {
  0 === this[d] && (this[d] = l[d]);
}
if (this.id === i || (this.isAccurate = !1, c)) {
  this.isBomb && (this.isAccurate = !0);
  var u = e.playerData.characters.getControlledCharacter().characteristics;
  for (d in u) {
    if (0 === this[d]) {
      var h = u[d];
      this[d] = c ? h.getBasePts() + h.getEquipmentPts() : h.getTotalStat();
    }
  }
}
for (d in u) {
  if (0 === this[d]) {
    var h = u[d];
    this[d] = c ? h.getBasePts() + h.getEquipmentPts() : h.getTotalStat();
  }
}
if (0 === this[d]) {
  var h = u[d];
  this[d] = c ? h.getBasePts() + h.getEquipmentPts() : h.getTotalStat();
}
if (!t || !t.length || !e) {
  return 0;
}
for (var i = 0, n = 0; n < t.length; n++) {
  var o = window.gui.fightManager.getFighter(t[n]);
  if (o) {
    var a = o.data.stats[e];
    o.data._type === w.FIGHT_CHARACTER_TYPE && e.indexOf(w.RESISTANCE_NAME) !== -1 && (a = Math.min(w.MAX_RESISTANCE, a)), i += a;
  }
}
if (o) {
  var a = o.data.stats[e];
  o.data._type === w.FIGHT_CHARACTER_TYPE && e.indexOf(w.RESISTANCE_NAME) !== -1 && (a = Math.min(w.MAX_RESISTANCE, a)), i += a;
}
if (i === -1) {
  var n = t.effect.triggers || "";
  n.indexOf("DA") !== -1 ? i = M.AIR : n.indexOf("DE") !== -1 ? i = M.EARTH : n.indexOf("DF") !== -1 ? i = M.FIRE : n.indexOf("DN") !== -1 ? i = M.NEUTRAL : n.indexOf("DW") !== -1 && (i = M.WATER);
}
if (!i) {
  return 0;
}
for (var n = 0, o = 0; o < i.buffs.length; o++) {
  var a = i.buffs[o],
    s = a.canBeDispell() && a.duration - this.spellTargetEffectsDurationReduction <= 0,
    r = u(this.caster, a);
  if (!s && (e.element === r || r === -1) && (a.actionId === m.ACTION_CHARACTER_LIFE_LOST_CASTER_MODERATOR || a.actionId === m.ACTION_CHARACTER_LIFE_LOST_MODERATOR) && this.verifyEffectDamageTrigger(e, a.effect.triggers, {
    isWeapon: this.isWeapon,
    targetId: t
  })) {
    var l = window.gui.fightManager.getFighter(a.source),
      c = l ? l.level : 1;
    n += (c / 20 + 1) * a.effect.value;
  }
}
if (!s && (e.element === r || r === -1) && (a.actionId === m.ACTION_CHARACTER_LIFE_LOST_CASTER_MODERATOR || a.actionId === m.ACTION_CHARACTER_LIFE_LOST_MODERATOR) && this.verifyEffectDamageTrigger(e, a.effect.triggers, {
  isWeapon: this.isWeapon,
  targetId: t
})) {
  var l = window.gui.fightManager.getFighter(a.source),
    c = l ? l.level : 1;
  n += (c / 20 + 1) * a.effect.value;
}
for (var i = 0, n = 0; n < t.length; n++) {
  var o = t[n];
  i += this.getBuffElementReduction(e, o);
}
for (var n = 0; n < this.sharedDamages.length; n++) {
  for (var o = this.sharedDamages[n], a = 0; a < o.effectDamages.length; a++) {
    var s = o.effectDamages[a];
    if (s.doesDamage() || s.type === w.TYPE.EROSION) {
      var r;
      if (_.isLifeStealingEffect(s)) {
        var l = this._computeSharedDamages(s, .5);
        l.convertDamageToHeal(), r = "sharedsteal" + s.element + "-" + s.effectId, t[r] ? t[r].lifePointsAdded.addFromDamage(l.lifePointsAdded) : t[r] = l;
      }
      if (!i.onlyShareableEffects) {
        var c = this._computeSharedDamages(s, 1);
        c.type = w.TYPE.SHARED, r = "shared" + s.element + "-" + s.effectId, e[r] ? e[r].damage.addFromDamage(c.damage) : e[r] = c;
      }
    }
  }
}
for (var o = this.sharedDamages[n], a = 0; a < o.effectDamages.length; a++) {
  var s = o.effectDamages[a];
  if (s.doesDamage() || s.type === w.TYPE.EROSION) {
    var r;
    if (_.isLifeStealingEffect(s)) {
      var l = this._computeSharedDamages(s, .5);
      l.convertDamageToHeal(), r = "sharedsteal" + s.element + "-" + s.effectId, t[r] ? t[r].lifePointsAdded.addFromDamage(l.lifePointsAdded) : t[r] = l;
    }
    if (!i.onlyShareableEffects) {
      var c = this._computeSharedDamages(s, 1);
      c.type = w.TYPE.SHARED, r = "shared" + s.element + "-" + s.effectId, e[r] ? e[r].damage.addFromDamage(c.damage) : e[r] = c;
    }
  }
}
if (s.doesDamage() || s.type === w.TYPE.EROSION) {
  var r;
  if (_.isLifeStealingEffect(s)) {
    var l = this._computeSharedDamages(s, .5);
    l.convertDamageToHeal(), r = "sharedsteal" + s.element + "-" + s.effectId, t[r] ? t[r].lifePointsAdded.addFromDamage(l.lifePointsAdded) : t[r] = l;
  }
  if (!i.onlyShareableEffects) {
    var c = this._computeSharedDamages(s, 1);
    c.type = w.TYPE.SHARED, r = "shared" + s.element + "-" + s.effectId, e[r] ? e[r].damage.addFromDamage(c.damage) : e[r] = c;
  }
}
if (_.isLifeStealingEffect(s)) {
  var l = this._computeSharedDamages(s, .5);
  l.convertDamageToHeal(), r = "sharedsteal" + s.element + "-" + s.effectId, t[r] ? t[r].lifePointsAdded.addFromDamage(l.lifePointsAdded) : t[r] = l;
}
if (!i.onlyShareableEffects) {
  var c = this._computeSharedDamages(s, 1);
  c.type = w.TYPE.SHARED, r = "shared" + s.element + "-" + s.effectId, e[r] ? e[r].damage.addFromDamage(c.damage) : e[r] = c;
}
for (var n in this.baseDamages) {
  if (this.baseDamages.hasOwnProperty(n)) {
    switch (i = this.baseDamages[n], i.type) {
      case w.TYPE.NORMAL:
      case w.TYPE.EROSION:
        e[n] = this._computeDamage(i);
        break;
      case w.TYPE.FIXED:
        e[n] = i.clone();
    }
    _.isLifeStealingEffect(i) && (t[n] = this._computeDamage(i, {
      extraMultiplier: .5
    }));
  }
}
if (this.baseDamages.hasOwnProperty(n)) {
  switch (i = this.baseDamages[n], i.type) {
    case w.TYPE.NORMAL:
    case w.TYPE.EROSION:
      e[n] = this._computeDamage(i);
      break;
    case w.TYPE.FIXED:
      e[n] = i.clone();
  }
  _.isLifeStealingEffect(i) && (t[n] = this._computeDamage(i, {
    extraMultiplier: .5
  }));
}
for (var o = 0; o < this.splashDamages.length; o++) {
  i = this.splashDamages[o], i = this._computeDamage(i, {
    ignoreCasterStats: !0
  }), e["splash" + i.element + "-" + i.effectId] = i, i.type = w.TYPE.SPLASH;
}
for (var n in this.baseDamages) {
  this.baseDamages.hasOwnProperty(n) && this.baseDamages[n].type === w.TYPE.HEAL && (i = this.baseDamages[n], t.lifePointsAdded.min += (Math.floor(i.lifePointsAdded.min * (100 + e) / 100) + (i.lifePointsAdded.min > 0 ? this.caster.healBonus : 0)) * i.efficiencyMultiplier, t.lifePointsAdded.max += (Math.floor(i.lifePointsAdded.max * (100 + e) / 100) + (i.lifePointsAdded.max > 0 ? this.caster.healBonus : 0)) * i.efficiencyMultiplier, t.lifePointsAdded.min += i.lifePointsAddedBasedOnLifePercent.normal, t.lifePointsAdded.max += i.lifePointsAddedBasedOnLifePercent.normal);
}
for (var o = 0; o < this.splashDamages.length; o++) {
  i = this.splashDamages[o], t.lifePointsAdded.addFromDamage(i.lifePointsAdded);
}
if (e.doesDamage()) {
  var i = new y(-1, e.effectId, e.element, e.random),
    n = u.getResistancePercent(e.element),
    o = u.getReduction(e.element),
    a = (t - o) * n / 100;
  i.damage.max = Math.min(a, e.damage.max), i.damage.min = Math.min(a, e.damage.min), i.type = e.type, i.origin = e.origin, u.counteredDamagesGiven.push(i);
}
if (e.doesDamage() || 0 !== e.erosionPercent.min) {
  var i = new y(e.nameId, e.effectId, e.element, e.random);
  if (i.damage.min = e.damage.min, i.damage.max = e.damage.max, i.origin = e.origin, e.type === w.TYPE.EROSION) {
    var o = (10 + u.target.erosionPercentBonus) / 100,
      a = u.target.lifeLost.clone();
    a.applyMultiplier(o), a.addFrom(t.data.stats.baseMaxLifePoints - t.data.stats.maxLifePoints), a.addFromDamage(u.target.spellErosionLifePoints), i.damage = n(a, e.erosionPercent, 100, 1), i.damageWithoutResist = i.damage.clone(), i = u.applyResistanceAndReduction(i);
  }
  u.damagesOutput.push(i);
}
if (i.damage.min = e.damage.min, i.damage.max = e.damage.max, i.origin = e.origin, e.type === w.TYPE.EROSION) {
  var o = (10 + u.target.erosionPercentBonus) / 100,
    a = u.target.lifeLost.clone();
  a.applyMultiplier(o), a.addFrom(t.data.stats.baseMaxLifePoints - t.data.stats.maxLifePoints), a.addFromDamage(u.target.spellErosionLifePoints), i.damage = n(a, e.erosionPercent, 100, 1), i.damageWithoutResist = i.damage.clone(), i = u.applyResistanceAndReduction(i);
}
for (var d, u = this, h = window.gui.fightManager, p = window.gui.damagePreview.damagePreviewManager, f = [], g = 0; g < this.target.buffs.length; g++) {
  var v,
    b = this.target.buffs[g],
    M = b.canBeDispell() && b.duration - this.spellTargetEffectsDurationReduction <= 0 && b.duration !== -1e3,
    C = !(b instanceof T && b.statName);
  if (!b.delay && C && this.verifyBuffTrigger(b) && !M) {
    switch (f[b.actionId] = f[b.actionId] || 0, f[b.actionId]++, b.actionId) {
      case m.ACTION_FIGHT_SET_STATE:
        b.effect.trigger && (p.triggeredStates[this.target.id] = p.triggeredStates[this.target.id] || [], p.triggeredStates[this.target.id].push(b.effect.getParams()[0]));
        break;
      case m.ACTION_CHARACTER_MULTIPLY_RECEIVED_HEAL:
        i.applyHealMultiplier(b.getParam1() / 100);
        break;
      case m.ACTION_CHARACTER_MULTIPLY_RECEIVED_DAMAGE:
        var I = b.getParam1() / 100;
        for (d in e) {
          e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.SPLASH || e[d].applyDamageMultiplier(I));
        }
        for (d in t) {
          t.hasOwnProperty(d) && t[d].applyDamageMultiplier(I);
        }
        break;
      case m.ACTION_CHARACTER_LIFE_LOST_REFLECTOR:
        if (v = h.getFighter(b.source), !v) {
          break;
        }
        var A = v.isSummon() && h.getFighter(v.data.stats.summoner),
          S = A ? A.level : v.level,
          E = a(b.effect.value, S);
        this.counteredDamagesGiven = [];
        for (d in e) {
          e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.SHARED && e[d].type !== w.TYPE.SPLASH || r(e[d], E));
        }
        break;
      case m.ACTION_CHARACTER_PUNISHMENT:
        if (b.effect.diceNum !== m.ACTION_CHARACTER_LIFE_POINTS_WIN_NO_BOOST) {
          break;
        }
        var N = new y(-1, -1, -1, -1);
        for (d in e) {
          e.hasOwnProperty(d) && (e[d].type === w.TYPE.NORMAL || e[d].type === w.TYPE.EROSION ? l(e[d], N, b.effect.diceSide, 1) : e[d].type === w.TYPE.SPLASH && l(e[d], N, b.effect.diceSide, 2));
        }
        o.addEffectDamage(N);
        break;
      case m.ACTION_CHARACTER_SACRIFY:
        if (v = h.getFighter(b.source), b.source === this.caster.id && (this.counteredDamagesGiven = []), this.sharedDamages.length > 0 || f[b.actionId] > 1 || !v) {
          break;
        }
        for (d in t) {
          delete t[d];
        }
        this.damagesOutputTo = b.source, this.damagesOutput = [];
        for (d in e) {
          e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.COUNTERED && e[d].type !== w.TYPE.SPLASH || c(e[d], v));
        }
    }
    if (b.effect.effect.category === w.DAMAGE_EFFECT_CATEGORY && !_.isHealingEffect(b.effect)) {
      var x = _.getElementEffect(this.caster, b.effect.effect),
        L = _.getBuffMinMaxDamageFromRawEffect(b.effect),
        O = b.effect.duration,
        R = new y(-1, b.effect.effectId, x, -1);
      R.damage.min = O - this.spellTargetEffectsDurationReduction > 0 ? L.min : 0, R.damage.max = O - this.spellTargetEffectsDurationReduction > 0 ? L.max : 0, R.type = w.TYPE.BUFF;
      var D,
        P = 0,
        B = [];
      for (D = 0; D < this.damagesInput.length; D++) {
        (w.EFFECTS_IDS.TARGET_EROSION_DAMAGE[this.damagesInput[D].effectId] || w.EFFECTS_IDS.CASTER_EROSION_DAMAGE[this.damagesInput[D].effectId] || this.verifyEffectDamageTrigger(this.damagesInput[D], b.effect.triggers, {
          isWeapon: this.isWeapon
        })) && (this.damagesInput[D].nameId !== -1 && (B[this.damagesInput[D].nameId] = !0), P++);
      }
      for (d in e) {
        if (e.hasOwnProperty(d) && !B[d]) {
          var k = e[d].type,
            F = this.verifyEffectDamageTrigger(e[d], b.effect.triggers, {
              isWeapon: this.isWeapon
            });
          (k === w.TYPE.EROSION || F && k === w.TYPE.NORMAL) && P++;
        }
      }
      for (D = 0; D < o.effectDamages.length; D++) {
        var H = o.effectDamages[D];
        H.effectId === m.ACTION_CHARACTER_PUSH && this.verifyEffectDamageTrigger(H, b.effect.triggers) && P++;
      }
      for (P += this.splashDamages.length, D = 0; D < P; D++) {
        if (w.EFFECTS_IDS.TARGET_HP_BASED_DAMAGE[b.actionId] || w.EFFECTS_IDS.HP_BASED_DAMAGE[b.actionId]) {
          s.push(R);
        } else {
          var z = this._computeDamage(R, {
            efficiencyMultiplier: 1,
            isBuffDamage: !0
          });
          o.addEffectDamage(z);
        }
      }
    }
  }
}
if (!b.delay && C && this.verifyBuffTrigger(b) && !M) {
  switch (f[b.actionId] = f[b.actionId] || 0, f[b.actionId]++, b.actionId) {
    case m.ACTION_FIGHT_SET_STATE:
      b.effect.trigger && (p.triggeredStates[this.target.id] = p.triggeredStates[this.target.id] || [], p.triggeredStates[this.target.id].push(b.effect.getParams()[0]));
      break;
    case m.ACTION_CHARACTER_MULTIPLY_RECEIVED_HEAL:
      i.applyHealMultiplier(b.getParam1() / 100);
      break;
    case m.ACTION_CHARACTER_MULTIPLY_RECEIVED_DAMAGE:
      var I = b.getParam1() / 100;
      for (d in e) {
        e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.SPLASH || e[d].applyDamageMultiplier(I));
      }
      for (d in t) {
        t.hasOwnProperty(d) && t[d].applyDamageMultiplier(I);
      }
      break;
    case m.ACTION_CHARACTER_LIFE_LOST_REFLECTOR:
      if (v = h.getFighter(b.source), !v) {
        break;
      }
      var A = v.isSummon() && h.getFighter(v.data.stats.summoner),
        S = A ? A.level : v.level,
        E = a(b.effect.value, S);
      this.counteredDamagesGiven = [];
      for (d in e) {
        e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.SHARED && e[d].type !== w.TYPE.SPLASH || r(e[d], E));
      }
      break;
    case m.ACTION_CHARACTER_PUNISHMENT:
      if (b.effect.diceNum !== m.ACTION_CHARACTER_LIFE_POINTS_WIN_NO_BOOST) {
        break;
      }
      var N = new y(-1, -1, -1, -1);
      for (d in e) {
        e.hasOwnProperty(d) && (e[d].type === w.TYPE.NORMAL || e[d].type === w.TYPE.EROSION ? l(e[d], N, b.effect.diceSide, 1) : e[d].type === w.TYPE.SPLASH && l(e[d], N, b.effect.diceSide, 2));
      }
      o.addEffectDamage(N);
      break;
    case m.ACTION_CHARACTER_SACRIFY:
      if (v = h.getFighter(b.source), b.source === this.caster.id && (this.counteredDamagesGiven = []), this.sharedDamages.length > 0 || f[b.actionId] > 1 || !v) {
        break;
      }
      for (d in t) {
        delete t[d];
      }
      this.damagesOutputTo = b.source, this.damagesOutput = [];
      for (d in e) {
        e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.COUNTERED && e[d].type !== w.TYPE.SPLASH || c(e[d], v));
      }
  }
  if (b.effect.effect.category === w.DAMAGE_EFFECT_CATEGORY && !_.isHealingEffect(b.effect)) {
    var x = _.getElementEffect(this.caster, b.effect.effect),
      L = _.getBuffMinMaxDamageFromRawEffect(b.effect),
      O = b.effect.duration,
      R = new y(-1, b.effect.effectId, x, -1);
    R.damage.min = O - this.spellTargetEffectsDurationReduction > 0 ? L.min : 0, R.damage.max = O - this.spellTargetEffectsDurationReduction > 0 ? L.max : 0, R.type = w.TYPE.BUFF;
    var D,
      P = 0,
      B = [];
    for (D = 0; D < this.damagesInput.length; D++) {
      (w.EFFECTS_IDS.TARGET_EROSION_DAMAGE[this.damagesInput[D].effectId] || w.EFFECTS_IDS.CASTER_EROSION_DAMAGE[this.damagesInput[D].effectId] || this.verifyEffectDamageTrigger(this.damagesInput[D], b.effect.triggers, {
        isWeapon: this.isWeapon
      })) && (this.damagesInput[D].nameId !== -1 && (B[this.damagesInput[D].nameId] = !0), P++);
    }
    for (d in e) {
      if (e.hasOwnProperty(d) && !B[d]) {
        var k = e[d].type,
          F = this.verifyEffectDamageTrigger(e[d], b.effect.triggers, {
            isWeapon: this.isWeapon
          });
        (k === w.TYPE.EROSION || F && k === w.TYPE.NORMAL) && P++;
      }
    }
    for (D = 0; D < o.effectDamages.length; D++) {
      var H = o.effectDamages[D];
      H.effectId === m.ACTION_CHARACTER_PUSH && this.verifyEffectDamageTrigger(H, b.effect.triggers) && P++;
    }
    for (P += this.splashDamages.length, D = 0; D < P; D++) {
      if (w.EFFECTS_IDS.TARGET_HP_BASED_DAMAGE[b.actionId] || w.EFFECTS_IDS.HP_BASED_DAMAGE[b.actionId]) {
        s.push(R);
      } else {
        var z = this._computeDamage(R, {
          efficiencyMultiplier: 1,
          isBuffDamage: !0
        });
        o.addEffectDamage(z);
      }
    }
  }
}
for (d in e) {
  e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.SPLASH || e[d].applyDamageMultiplier(I));
}
for (d in t) {
  t.hasOwnProperty(d) && t[d].applyDamageMultiplier(I);
}
if (v = h.getFighter(b.source), !v) {
  break;
}
for (d in e) {
  e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.SHARED && e[d].type !== w.TYPE.SPLASH || r(e[d], E));
}
if (b.effect.diceNum !== m.ACTION_CHARACTER_LIFE_POINTS_WIN_NO_BOOST) {
  break;
}
for (d in e) {
  e.hasOwnProperty(d) && (e[d].type === w.TYPE.NORMAL || e[d].type === w.TYPE.EROSION ? l(e[d], N, b.effect.diceSide, 1) : e[d].type === w.TYPE.SPLASH && l(e[d], N, b.effect.diceSide, 2));
}
if (v = h.getFighter(b.source), b.source === this.caster.id && (this.counteredDamagesGiven = []), this.sharedDamages.length > 0 || f[b.actionId] > 1 || !v) {
  break;
}
for (d in t) {
  delete t[d];
}
for (d in e) {
  e.hasOwnProperty(d) && (e[d].type !== w.TYPE.NORMAL && e[d].type !== w.TYPE.EROSION && e[d].type !== w.TYPE.COUNTERED && e[d].type !== w.TYPE.SPLASH || c(e[d], v));
}
if (b.effect.effect.category === w.DAMAGE_EFFECT_CATEGORY && !_.isHealingEffect(b.effect)) {
  var x = _.getElementEffect(this.caster, b.effect.effect),
    L = _.getBuffMinMaxDamageFromRawEffect(b.effect),
    O = b.effect.duration,
    R = new y(-1, b.effect.effectId, x, -1);
  R.damage.min = O - this.spellTargetEffectsDurationReduction > 0 ? L.min : 0, R.damage.max = O - this.spellTargetEffectsDurationReduction > 0 ? L.max : 0, R.type = w.TYPE.BUFF;
  var D,
    P = 0,
    B = [];
  for (D = 0; D < this.damagesInput.length; D++) {
    (w.EFFECTS_IDS.TARGET_EROSION_DAMAGE[this.damagesInput[D].effectId] || w.EFFECTS_IDS.CASTER_EROSION_DAMAGE[this.damagesInput[D].effectId] || this.verifyEffectDamageTrigger(this.damagesInput[D], b.effect.triggers, {
      isWeapon: this.isWeapon
    })) && (this.damagesInput[D].nameId !== -1 && (B[this.damagesInput[D].nameId] = !0), P++);
  }
  for (d in e) {
    if (e.hasOwnProperty(d) && !B[d]) {
      var k = e[d].type,
        F = this.verifyEffectDamageTrigger(e[d], b.effect.triggers, {
          isWeapon: this.isWeapon
        });
      (k === w.TYPE.EROSION || F && k === w.TYPE.NORMAL) && P++;
    }
  }
  for (D = 0; D < o.effectDamages.length; D++) {
    var H = o.effectDamages[D];
    H.effectId === m.ACTION_CHARACTER_PUSH && this.verifyEffectDamageTrigger(H, b.effect.triggers) && P++;
  }
  for (P += this.splashDamages.length, D = 0; D < P; D++) {
    if (w.EFFECTS_IDS.TARGET_HP_BASED_DAMAGE[b.actionId] || w.EFFECTS_IDS.HP_BASED_DAMAGE[b.actionId]) {
      s.push(R);
    } else {
      var z = this._computeDamage(R, {
        efficiencyMultiplier: 1,
        isBuffDamage: !0
      });
      o.addEffectDamage(z);
    }
  }
}
for (D = 0; D < this.damagesInput.length; D++) {
  (w.EFFECTS_IDS.TARGET_EROSION_DAMAGE[this.damagesInput[D].effectId] || w.EFFECTS_IDS.CASTER_EROSION_DAMAGE[this.damagesInput[D].effectId] || this.verifyEffectDamageTrigger(this.damagesInput[D], b.effect.triggers, {
    isWeapon: this.isWeapon
  })) && (this.damagesInput[D].nameId !== -1 && (B[this.damagesInput[D].nameId] = !0), P++);
}
for (d in e) {
  if (e.hasOwnProperty(d) && !B[d]) {
    var k = e[d].type,
      F = this.verifyEffectDamageTrigger(e[d], b.effect.triggers, {
        isWeapon: this.isWeapon
      });
    (k === w.TYPE.EROSION || F && k === w.TYPE.NORMAL) && P++;
  }
}
if (e.hasOwnProperty(d) && !B[d]) {
  var k = e[d].type,
    F = this.verifyEffectDamageTrigger(e[d], b.effect.triggers, {
      isWeapon: this.isWeapon
    });
  (k === w.TYPE.EROSION || F && k === w.TYPE.NORMAL) && P++;
}
for (D = 0; D < o.effectDamages.length; D++) {
  var H = o.effectDamages[D];
  H.effectId === m.ACTION_CHARACTER_PUSH && this.verifyEffectDamageTrigger(H, b.effect.triggers) && P++;
}
for (P += this.splashDamages.length, D = 0; D < P; D++) {
  if (w.EFFECTS_IDS.TARGET_HP_BASED_DAMAGE[b.actionId] || w.EFFECTS_IDS.HP_BASED_DAMAGE[b.actionId]) {
    s.push(R);
  } else {
    var z = this._computeDamage(R, {
      efficiencyMultiplier: 1,
      isBuffDamage: !0
    });
    o.addEffectDamage(z);
  }
}
if (w.EFFECTS_IDS.TARGET_HP_BASED_DAMAGE[b.actionId] || w.EFFECTS_IDS.HP_BASED_DAMAGE[b.actionId]) {
  s.push(R);
} else {
  var z = this._computeDamage(R, {
    efficiencyMultiplier: 1,
    isBuffDamage: !0
  });
  o.addEffectDamage(z);
}
for (t = 0; t < this.lifeStealingDamagesReceived.length; t++) {
  n = this.lifeStealingDamagesReceived[t], n.convertDamageToHeal(), a.addEffectDamage(n);
}
if (!e.onlyShareableEffects) {
  for (t = 0; t < this.pushedEntities.length; t++) {
    var c = this.pushedEntities[t],
      d = o(this.caster, this.target, c.force, c.pushedIndexes[0]);
    if (d && !c.mark && c.doesDamage) {
      var u = new y(-1, m.ACTION_CHARACTER_PUSH, -1, -1);
      u.damage.addFrom(~~d), a.addEffectDamage(u);
    }
  }
}
for (t = 0; t < this.pushedEntities.length; t++) {
  var c = this.pushedEntities[t],
    d = o(this.caster, this.target, c.force, c.pushedIndexes[0]);
  if (d && !c.mark && c.doesDamage) {
    var u = new y(-1, m.ACTION_CHARACTER_PUSH, -1, -1);
    u.damage.addFrom(~~d), a.addEffectDamage(u);
  }
}
if (d && !c.mark && c.doesDamage) {
  var u = new y(-1, m.ACTION_CHARACTER_PUSH, -1, -1);
  u.damage.addFrom(~~d), a.addEffectDamage(u);
}
for (i in s) {
  s.hasOwnProperty(i) && s[i].type === w.TYPE.NORMAL && s[i].applyDamageMultiplier(_);
}
for (i in r) {
  r.hasOwnProperty(i) && r[i].applyDamageMultiplier(_);
}
for (t = 0; t < this.counteredDamagesReceived.length; t++) {
  n = this.counteredDamagesReceived[t], n = n.type !== w.TYPE.SHARED ? this.applyResistanceAndReduction(n) : n.clone(), n.type = w.TYPE.COUNTERED, s["countered-" + t + "-" + n.effectId] = n;
}
for (i in s) {
  s.hasOwnProperty(i) && a.addEffectDamage(s[i]);
}
if (0 !== this.damagesOutputTo) {
  for (t = 0; t < a.effectDamages.length; t++) {
    n = a.effectDamages[t], n.effectId !== m.ACTION_CHARACTER_PUSH && (n.damage.reset(), n.damageWithoutResist.reset(), n.erosionPercent.reset());
  }
}
for (t = 0; t < a.effectDamages.length; t++) {
  n = a.effectDamages[t], n.effectId !== m.ACTION_CHARACTER_PUSH && (n.damage.reset(), n.damageWithoutResist.reset(), n.erosionPercent.reset());
}
for (t = 0; t < this.damagesInput.length; t++) {
  a.addEffectDamage(this.damagesInput[t]);
}
if (!e.onlyShareableEffects) {
  a.updateDamage(), this.caster.lifePointsAfterDamages.substractFromDamage(a.damage);
  for (i in this.baseDamages) {
    if (this.baseDamages.hasOwnProperty(i) && this.baseDamages[i].type === w.TYPE.BUFF) {
      var b = this._computeDamage(this.baseDamages[i], {
        efficiencyMultiplier: 1,
        ignoreCasterStats: !1
      });
      a.addEffectDamage(b), this.caster.lifePointsAfterDamages.substractFromDamage(b.damage);
    }
  }
}
for (i in this.baseDamages) {
  if (this.baseDamages.hasOwnProperty(i) && this.baseDamages[i].type === w.TYPE.BUFF) {
    var b = this._computeDamage(this.baseDamages[i], {
      efficiencyMultiplier: 1,
      ignoreCasterStats: !1
    });
    a.addEffectDamage(b), this.caster.lifePointsAfterDamages.substractFromDamage(b.damage);
  }
}
if (this.baseDamages.hasOwnProperty(i) && this.baseDamages[i].type === w.TYPE.BUFF) {
  var b = this._computeDamage(this.baseDamages[i], {
    efficiencyMultiplier: 1,
    ignoreCasterStats: !1
  });
  a.addEffectDamage(b), this.caster.lifePointsAfterDamages.substractFromDamage(b.damage);
}
if (v.length > 0 && !e.onlyShareableEffects && 0 === this.damagesOutputTo) {
  for (a.updateDamage(), this.target.lifePointsAfterDamages.substractFromDamage(a.damage), t = 0; t < v.length; t++) {
    var M = this._computeDamage(v[t], {
      efficiencyMultiplier: 1,
      ignoreCasterStats: !1,
      isBuffDamage: !0
    });
    a.addEffectDamage(M), this.target.lifePointsAfterDamages.substractFromDamage(M.damage);
  }
}
for (a.updateDamage(), this.target.lifePointsAfterDamages.substractFromDamage(a.damage), t = 0; t < v.length; t++) {
  var M = this._computeDamage(v[t], {
    efficiencyMultiplier: 1,
    ignoreCasterStats: !1,
    isBuffDamage: !0
  });
  a.addEffectDamage(M), this.target.lifePointsAfterDamages.substractFromDamage(M.damage);
}
if (a.updateDamage(), this.caster.states.indexOf(f.STATE_PACIFIST) !== -1) {
  for (t = 0; t < a.effectDamages.length; t++) {
    a.effectDamages[t].damage.reset(), a.effectDamages[t].damageWithoutResist.reset();
  }
}
for (t = 0; t < a.effectDamages.length; t++) {
  a.effectDamages[t].damage.reset(), a.effectDamages[t].damageWithoutResist.reset();
}
if (!this.sharedFighters.length) {
  return e;
}
if (!E) {
  return console.warn("Fighter " + this.caster.id + " does not exist"), e.clone();
}
if (t.ignoreCasterStats && (u = 0, a = 0, r = 0, T = 0, _ = 0, p = 0), !t.ignoreCasterStats && e.element !== -1) {
  var k = this.caster.damagesBonusPercent + (this.caster.newStatsBonus.damagesBonusPercent || 0);
  o = u + .8 * k + C, o += this.isWeapon || !this.spellId ? this.caster.weaponDamagesBonus : this.caster.spellDamagesBonus;
}
if (w.EFFECTS_IDS.HP_BASED_DAMAGE[P] || w.EFFECTS_IDS.TARGET_HP_BASED_DAMAGE[P]) {
  switch (P) {
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_MIDLIFE:
      z.normal = l(e.damage.max, N.stats, H);
      break;
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_MISSING_FROM_WATER:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_MISSING_FROM_EARTH:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_MISSING_FROM_AIR:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_MISSING_FROM_FIRE:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_MISSING_FROM_BEST_ELEMENT:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_MISSING:
      z.min = s(e.damage.min, N.stats.maxLifePoints - L, H), z.max = s(e.damage.max, N.stats.maxLifePoints - O, H);
      break;
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_FROM_WATER:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_FROM_EARTH:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_FROM_AIR:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_FROM_FIRE:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE_FROM_BEST_ELEMENT:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_CASTER_LIFE:
      if (!t.isBuffDamage) {
        z.min = s(e.damage.min, L, H), z.max = s(e.damage.max, O, H);
        break;
      }
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_TARGET_LIFE_FROM_AIR:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_TARGET_LIFE_FROM_WATER:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_TARGET_LIFE_FROM_FIRE:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_TARGET_LIFE_FROM_EARTH:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_TARGET_LIFE_FROM_BEST_ELEMENT:
    case m.ACTION_CHARACTER_LIFE_POINTS_LOST_BASED_ON_TARGET_LIFE:
      z.min = s(e.damage.min, R, H), z.max = s(e.damage.max, D, H);
  }
} else {
  var W = this.caster.comboBonus;
  z.min = d(e.damage.min, {
    ignoreStats: t.ignoreCasterStats,
    stat: o,
    statBonus: a,
    baseDamageBonus: b,
    damageBonus: T,
    dealtDamageMultiplierBonus: A,
    allDamagesBonus: _,
    efficiencyPercent: H,
    comboBonus: W
  }), z.max = d(e.damage.max, {
    ignoreStats: t.ignoreCasterStats,
    stat: o,
    statBonus: a,
    baseDamageBonus: b,
    damageBonus: T,
    dealtDamageMultiplierBonus: A,
    allDamagesBonus: _,
    efficiencyPercent: H,
    comboBonus: W
  });
}
if (!t.isBuffDamage) {
  z.min = s(e.damage.min, L, H), z.max = s(e.damage.max, O, H);
  break;
}
for (var n = 0; n < e.length; n++) {
  var o = e[n];
  if (this.verifyEffectTrigger(o, t, i)) {
    return !0;
  }
}
if (this.verifyEffectTrigger(o, t, i)) {
  return !0;
}
for (i = 0; i < this.damagesInput.length; i++) {
  if (n = this.damagesInput[i], this.verifyEffectDamageTrigger(n, e, t)) {
    return !0;
  }
}
if (n = this.damagesInput[i], this.verifyEffectDamageTrigger(n, e, t)) {
  return !0;
}
for (i = 0; i < this.counteredDamagesReceived.length; i++) {
  if (n = this.counteredDamagesReceived[i], this.verifyEffectDamageTrigger(n, e, {
    isWeapon: t.isWeapon,
    isCountered: !0
  })) {
    return !0;
  }
}
if (n = this.counteredDamagesReceived[i], this.verifyEffectDamageTrigger(n, e, {
  isWeapon: t.isWeapon,
  isCountered: !0
})) {
  return !0;
}
for (i = 0; i < this.sharedDamages.length; i++) {
  for (var o = this.sharedDamages[i], a = 0; a < o.effectDamages.length; a++) {
    if (n = o.effectDamages[a], this.verifyEffectDamageTrigger(n, e, t)) {
      return !0;
    }
  }
}
for (var o = this.sharedDamages[i], a = 0; a < o.effectDamages.length; a++) {
  if (n = o.effectDamages[a], this.verifyEffectDamageTrigger(n, e, t)) {
    return !0;
  }
}
if (n = o.effectDamages[a], this.verifyEffectDamageTrigger(n, e, t)) {
  return !0;
}
if (i = i || {}, t = t || "", !e) {
  return !1;
}
if (!o) {
  return console.warn("Fighter " + this.caster.id + " does not exist"), !1;
}
if (!a) {
  return console.warn("Fighter " + n.id + " does not exist"), !1;
}
for (var s, r = o.data, l = a.data, c = l.teamId === r.teamId, d = g.getDistance(this.caster.cellId, n.cellId), u = e.element, h = e.doesDamage(), p = !1, f = t.split("|"), _ = 0; _ < f.length; _++) {
  var v = f[_];
  switch (v.substr(0, 3)) {
    case "D":
      p = h;
      break;
    case "DA":
      p = h && u === M.AIR;
      break;
    case "DBA":
      p = c && h, s = parseInt(v.substr(3, 1), 10), s && (p = p && u === s);
      break;
    case "DBE":
      p = !c && h, s = parseInt(v.substr(3, 1), 10), s && (p = p && u === s);
      break;
    case "DC":
      p = i.isWeapon && h;
      break;
    case "DE":
      p = h && u === M.EARTH;
      break;
    case "DF":
      p = h && u === M.FIRE;
      break;
    case "DG":
      p = h && e.origin === w.ORIGIN.GLYPH;
      break;
    case "DI":
      p = h && r.stats.summoned;
      break;
    case "DM":
      p = h && d <= 1;
      break;
    case "DN":
      p = h && u === M.NEUTRAL;
      break;
    case "DP":
      p = h && e.origin === w.ORIGIN.TRAP;
      break;
    case "DR":
      p = h && d > 1;
      break;
    case "Dr":
      p = i.isCountered;
      break;
    case "DS":
      p = h && !i.isWeapon;
      break;
    case "DW":
      p = h && u === M.WATER;
      break;
    case "H":
      p = e.doesHeal();
      break;
    case "HA":
      p = c && e.doesHeal();
      break;
    case "HE":
      p = !c && e.doesHeal();
      break;
    case "MD":
    case "MDM":
      p = h && e.effectId === m.ACTION_CHARACTER_PUSH;
      break;
    case "MDP":
      p = !h && e.effectId === m.ACTION_CHARACTER_PUSH || e.effectId === m.ACTION_FIGHT_PUSH_NO_DAMAGE;
      break;
    case "MP":
      p = e.effectId === m.ACTION_CHARACTER_PUSH || e.effectId === m.ACTION_FIGHT_PUSH_NO_DAMAGE;
  }
  if (p) {
    return !0;
  }
}
if (p) {
  return !0;
}
if (i = i || {}, t = t || "", !e) {
  return !1;
}
if (!n) {
  return console.warn("Fighter " + this.caster.id + " does not exist"), !1;
}
if (!a) {
  return console.warn("Fighter " + this.target.id + " does not exist"), !1;
}
for (var w, b = !1, T = t.split("|"), C = 0; C < T.length; C++) {
  var I = T[C];
  switch (I.substr(0, 3)) {
    case "I":
      b = !0;
      break;
    case "D":
      b = p;
      break;
    case "DA":
      b = p && d === M.AIR;
      break;
    case "DBA":
      b = l && p, w = parseInt(I.substr(3, 1), 10), w && (b = b && d === w);
      break;
    case "DBE":
      b = !l && p, w = parseInt(I.substr(3, 1), 10), w && (b = b && d === w);
      break;
    case "DC":
      b = this.isWeapon && p;
      break;
    case "DE":
      b = p && d === M.EARTH;
      break;
    case "DF":
      b = p && d === M.FIRE;
      break;
    case "DG":
      b = p && this.isGlyph;
      break;
    case "DI":
      b = p && s.stats.summoned;
      break;
    case "DM":
      b = p && c <= 1;
      break;
    case "DN":
      b = p && d === M.NEUTRAL;
      break;
    case "DP":
      b = p && this.isTrap;
      break;
    case "DR":
      b = p && c > 1;
      break;
    case "DS":
      b = p && !this.isWeapon;
      break;
    case "DW":
      b = p && d === M.WATER;
      break;
    case "H":
      b = f;
      break;
    case "HA":
      b = l && f;
      break;
    case "HE":
      b = !l && f;
      break;
    case "MD":
    case "MDM":
      b = e.effectId === m.ACTION_CHARACTER_PUSH && y;
      break;
    case "MDP":
      b = e.effectId === m.ACTION_CHARACTER_PUSH && !y || e.effectId === m.ACTION_FIGHT_PUSH_NO_DAMAGE;
      break;
    case "MP":
      b = e.effectId === m.ACTION_CHARACTER_PUSH || e.effectId === m.ACTION_FIGHT_PUSH_NO_DAMAGE;
      break;
    case "X":
      b = h && e.effectId === m.ACTION_CHARACTER_KILL;
      break;
    case "A":
      b = h && e.effectId === m.ACTION_CHARACTER_ACTION_POINTS_LOST;
      break;
    case "m":
      b = h && e.effectId === m.ACTION_CHARACTER_MOVEMENT_POINTS_LOST;
  }
  if (b) {
    return !0;
  }
}
if (b) {
  return !0;
}
for (var i = this.getSpellDamage({
    onlyShareableEffects: !0
  }), n = 0; n < this.target.buffs.length; n++) {
  var o = this.target.buffs[n],
    a = o.source;
  o.actionId === r.ACTION_CHARACTER_SHARE_DAMAGES && (t[a] || (t[a] = [], e[a] = []), t.indexOf(this.target.id) === -1 && t[a].push(this.target.id), this.verifyBuffTrigger(o) && i && e[a].push(i), this.sharedDamages = e[a], this.sharedFighters = t[a]);
}
for (var t = 0; t < this.effectInstances.length; t++) {
  var i = this.effectInstances[t],
    n = o.EFFECTS_IDS.SPLASH[i.effectId],
    r = o.EFFECTS_IDS.SPLASH_HEAL[i.effectId],
    l = o.EFFECTS_IDS.SPLASH_FINAL[i.effectId];
  if (i.isDirectEffect() && (n || r || l) && a.isInZoneEffect(i, this.target.cellId) && a.verifySpellEffectMask(i, this.caster.id, this.target.id, this.effectMaskOptions)) {
    for (var c = a.getShapeEfficiency(i.rawZone, this.spellCenterCellId, this.target.cellId), d = 0; d < e.length; d++) {
      var u = e[d];
      if (!(!u.finalSpellDamageWithoutBuff || d > 0 && !u.isGlyph)) {
        for (var h = u.caster.damageBoostPercent > 0 ? (100 + u.caster.damageBoostPercent) / 100 : 1, p = u.caster.damageDeboostPercent > 0 ? Math.max(0, (100 - u.caster.damageDeboostPercent) / 100) : 1, m = 1 / (h * p), f = u.finalSpellDamageWithoutBuff, g = 0; g < f.effectDamages.length; g++) {
          var _ = f.effectDamages[g],
            v = n ? _.damageWithoutResist.clone() : _.damage.clone();
          if (v.applyMultiplier(m), (v.min || v.max) && 5 !== _.effectId) {
            v.applyMultiplier(i.diceNum / 100);
            var y = "splash-" + u.caster.id + "-" + u.spellId + "-" + i.targetMask + "-" + i.effectId;
            _ = new s(y, _.effectId, _.element, _.random), _.damage = v, _.efficiencyMultiplier = c, r && _.convertDamageToHeal(), this.splashDamages.push(_);
          }
        }
      }
    }
    this.isAccurate = !0;
  }
}
if (i.isDirectEffect() && (n || r || l) && a.isInZoneEffect(i, this.target.cellId) && a.verifySpellEffectMask(i, this.caster.id, this.target.id, this.effectMaskOptions)) {
  for (var c = a.getShapeEfficiency(i.rawZone, this.spellCenterCellId, this.target.cellId), d = 0; d < e.length; d++) {
    var u = e[d];
    if (!(!u.finalSpellDamageWithoutBuff || d > 0 && !u.isGlyph)) {
      for (var h = u.caster.damageBoostPercent > 0 ? (100 + u.caster.damageBoostPercent) / 100 : 1, p = u.caster.damageDeboostPercent > 0 ? Math.max(0, (100 - u.caster.damageDeboostPercent) / 100) : 1, m = 1 / (h * p), f = u.finalSpellDamageWithoutBuff, g = 0; g < f.effectDamages.length; g++) {
        var _ = f.effectDamages[g],
          v = n ? _.damageWithoutResist.clone() : _.damage.clone();
        if (v.applyMultiplier(m), (v.min || v.max) && 5 !== _.effectId) {
          v.applyMultiplier(i.diceNum / 100);
          var y = "splash-" + u.caster.id + "-" + u.spellId + "-" + i.targetMask + "-" + i.effectId;
          _ = new s(y, _.effectId, _.element, _.random), _.damage = v, _.efficiencyMultiplier = c, r && _.convertDamageToHeal(), this.splashDamages.push(_);
        }
      }
    }
  }
  this.isAccurate = !0;
}
for (var c = a.getShapeEfficiency(i.rawZone, this.spellCenterCellId, this.target.cellId), d = 0; d < e.length; d++) {
  var u = e[d];
  if (!(!u.finalSpellDamageWithoutBuff || d > 0 && !u.isGlyph)) {
    for (var h = u.caster.damageBoostPercent > 0 ? (100 + u.caster.damageBoostPercent) / 100 : 1, p = u.caster.damageDeboostPercent > 0 ? Math.max(0, (100 - u.caster.damageDeboostPercent) / 100) : 1, m = 1 / (h * p), f = u.finalSpellDamageWithoutBuff, g = 0; g < f.effectDamages.length; g++) {
      var _ = f.effectDamages[g],
        v = n ? _.damageWithoutResist.clone() : _.damage.clone();
      if (v.applyMultiplier(m), (v.min || v.max) && 5 !== _.effectId) {
        v.applyMultiplier(i.diceNum / 100);
        var y = "splash-" + u.caster.id + "-" + u.spellId + "-" + i.targetMask + "-" + i.effectId;
        _ = new s(y, _.effectId, _.element, _.random), _.damage = v, _.efficiencyMultiplier = c, r && _.convertDamageToHeal(), this.splashDamages.push(_);
      }
    }
  }
}
if (!(!u.finalSpellDamageWithoutBuff || d > 0 && !u.isGlyph)) {
  for (var h = u.caster.damageBoostPercent > 0 ? (100 + u.caster.damageBoostPercent) / 100 : 1, p = u.caster.damageDeboostPercent > 0 ? Math.max(0, (100 - u.caster.damageDeboostPercent) / 100) : 1, m = 1 / (h * p), f = u.finalSpellDamageWithoutBuff, g = 0; g < f.effectDamages.length; g++) {
    var _ = f.effectDamages[g],
      v = n ? _.damageWithoutResist.clone() : _.damage.clone();
    if (v.applyMultiplier(m), (v.min || v.max) && 5 !== _.effectId) {
      v.applyMultiplier(i.diceNum / 100);
      var y = "splash-" + u.caster.id + "-" + u.spellId + "-" + i.targetMask + "-" + i.effectId;
      _ = new s(y, _.effectId, _.element, _.random), _.damage = v, _.efficiencyMultiplier = c, r && _.convertDamageToHeal(), this.splashDamages.push(_);
    }
  }
}
for (var h = u.caster.damageBoostPercent > 0 ? (100 + u.caster.damageBoostPercent) / 100 : 1, p = u.caster.damageDeboostPercent > 0 ? Math.max(0, (100 - u.caster.damageDeboostPercent) / 100) : 1, m = 1 / (h * p), f = u.finalSpellDamageWithoutBuff, g = 0; g < f.effectDamages.length; g++) {
  var _ = f.effectDamages[g],
    v = n ? _.damageWithoutResist.clone() : _.damage.clone();
  if (v.applyMultiplier(m), (v.min || v.max) && 5 !== _.effectId) {
    v.applyMultiplier(i.diceNum / 100);
    var y = "splash-" + u.caster.id + "-" + u.spellId + "-" + i.targetMask + "-" + i.effectId;
    _ = new s(y, _.effectId, _.element, _.random), _.damage = v, _.efficiencyMultiplier = c, r && _.convertDamageToHeal(), this.splashDamages.push(_);
  }
}
if (v.applyMultiplier(m), (v.min || v.max) && 5 !== _.effectId) {
  v.applyMultiplier(i.diceNum / 100);
  var y = "splash-" + u.caster.id + "-" + u.spellId + "-" + i.targetMask + "-" + i.effectId;
  _ = new s(y, _.effectId, _.element, _.random), _.damage = v, _.efficiencyMultiplier = c, r && _.convertDamageToHeal(), this.splashDamages.push(_);
}
for (var t in e) {
  this.lifeStealingDamagesReceived.push(e[t]);
}
for (var t = 0; t < e.length; t++) {
  this.counteredDamagesReceived.push(e[t]);
}
for (var t = 0; t < e.length; t++) {
  for (var i = e[t], n = !1, o = 0; o < this.damagesInput.length; o++) {
    var a = this.damagesInput[o];
    if (a.nameId === i.nameId) {
      a.damage.addFromDamage(i.damage), n = !0;
      break;
    }
  }
  n || this.damagesInput.push(i);
}
for (var i = e[t], n = !1, o = 0; o < this.damagesInput.length; o++) {
  var a = this.damagesInput[o];
  if (a.nameId === i.nameId) {
    a.damage.addFromDamage(i.damage), n = !0;
    break;
  }
}
if (a.nameId === i.nameId) {
  a.damage.addFromDamage(i.damage), n = !0;
  break;
}
for (var t = window.gui.damagePreview.damagePreviewManager, i = window.gui.playerData.characters, n = [], a = !1, r = 0; r < this.pushedEntities.length; r++) {
  var l = this.pushedEntities[r],
    c = window.actorManager.getActor(l.id);
  if (c) {
    for (var d = 0; d < l.marks.length; d++) {
      var u = l.marks[d],
        h = u.sourceId;
      if (u.type === o.MARK.TRAP) {
        n[u.spellId] = n[u.spellId] || [];
        var p = i.mainCharacter.spellData.spells[u.spellId],
          m = c.getFighter().spells[u.spellId],
          f = m ? m.level : 1;
        p && i.mainCharacterId === h && (f = p.level), n[u.spellId].push({
          caster: h,
          target: l.id,
          casterCellId: u.markCell,
          targetCellId: u.markCell,
          level: f
        }), t.affectedByMark(c.actorId, u), a = !0;
      }
    }
  }
}
if (c) {
  for (var d = 0; d < l.marks.length; d++) {
    var u = l.marks[d],
      h = u.sourceId;
    if (u.type === o.MARK.TRAP) {
      n[u.spellId] = n[u.spellId] || [];
      var p = i.mainCharacter.spellData.spells[u.spellId],
        m = c.getFighter().spells[u.spellId],
        f = m ? m.level : 1;
      p && i.mainCharacterId === h && (f = p.level), n[u.spellId].push({
        caster: h,
        target: l.id,
        casterCellId: u.markCell,
        targetCellId: u.markCell,
        level: f
      }), t.affectedByMark(c.actorId, u), a = !0;
    }
  }
}
for (var d = 0; d < l.marks.length; d++) {
  var u = l.marks[d],
    h = u.sourceId;
  if (u.type === o.MARK.TRAP) {
    n[u.spellId] = n[u.spellId] || [];
    var p = i.mainCharacter.spellData.spells[u.spellId],
      m = c.getFighter().spells[u.spellId],
      f = m ? m.level : 1;
    p && i.mainCharacterId === h && (f = p.level), n[u.spellId].push({
      caster: h,
      target: l.id,
      casterCellId: u.markCell,
      targetCellId: u.markCell,
      level: f
    }), t.affectedByMark(c.actorId, u), a = !0;
  }
}
if (u.type === o.MARK.TRAP) {
  n[u.spellId] = n[u.spellId] || [];
  var p = i.mainCharacter.spellData.spells[u.spellId],
    m = c.getFighter().spells[u.spellId],
    f = m ? m.level : 1;
  p && i.mainCharacterId === h && (f = p.level), n[u.spellId].push({
    caster: h,
    target: l.id,
    casterCellId: u.markCell,
    targetCellId: u.markCell,
    level: f
  }), t.affectedByMark(c.actorId, u), a = !0;
}
if (i) {
  return e(i);
}
for (var r in o) {
  if (o.hasOwnProperty(r)) {
    var l = o[r].spellLevel.effects[0];
    if (l && l.effectId === s.ACTION_FIGHT_ADD_TRAP_CASTING_SPELL) {
      var c = l.diceNum;
      a[c] = n[r];
    }
  }
}
if (o.hasOwnProperty(r)) {
  var l = o[r].spellLevel.effects[0];
  if (l && l.effectId === s.ACTION_FIGHT_ADD_TRAP_CASTING_SPELL) {
    var c = l.diceNum;
    a[c] = n[r];
  }
}
if (l && l.effectId === s.ACTION_FIGHT_ADD_TRAP_CASTING_SPELL) {
  var c = l.diceNum;
  a[c] = n[r];
}
if (t) {
  return e(t);
}
for (var o in i) {
  if (i.hasOwnProperty(o)) {
    for (var s = 0; s < a[o].length; s++) {
      var r = a[o][s],
        l = i[o].clone();
      l.setLevel(r.level), l.ownerId = r.caster, n.push({
        spell: l,
        casterCellId: r.casterCellId,
        targetCellId: r.targetCellId,
        target: r.target
      });
    }
  }
}
if (i.hasOwnProperty(o)) {
  for (var s = 0; s < a[o].length; s++) {
    var r = a[o][s],
      l = i[o].clone();
    l.setLevel(r.level), l.ownerId = r.caster, n.push({
      spell: l,
      casterCellId: r.casterCellId,
      targetCellId: r.targetCellId,
      target: r.target
    });
  }
}
for (var s = 0; s < a[o].length; s++) {
  var r = a[o][s],
    l = i[o].clone();
  l.setLevel(r.level), l.ownerId = r.caster, n.push({
    spell: l,
    casterCellId: r.casterCellId,
    targetCellId: r.targetCellId,
    target: r.target
  });
}
if (this.caster.isBomb) {
  return e();
}
for (d = 0; d < this.pushedEntities.length; d++) {
  var g = this.pushedEntities[d],
    _ = t.getActor(g.id);
  if (_) {
    for (u = 0; u < g.marks.length; u++) {
      var v = g.marks[u];
      if (v.type === o.MARK.BOMB) {
        var y = o.MARK_TO_BOMB[v.spellId],
          w = a.getBombFromWall(v.sourceId, v.markCell, y),
          b = i.getFighter(w);
        if (b && !a.isBombOf(_, y, v.sourceId)) {
          p = a.getChainReactionBomb(v.sourceId, w), m = a.getComboCoeffBomb(p, y);
          var M = n.getVirtualCellFromRealCell(_.cellId);
          l[v.spellId] = l[v.spellId] || [], l[v.spellId].push({
            caster: b.data.stats.summoner,
            target: g.id,
            casterCellId: M,
            targetCellId: M,
            level: b.level,
            comboBonus: m
          }), n.affectedByMark(_.actorId, v), c = !0;
        }
      }
    }
  }
}
if (_) {
  for (u = 0; u < g.marks.length; u++) {
    var v = g.marks[u];
    if (v.type === o.MARK.BOMB) {
      var y = o.MARK_TO_BOMB[v.spellId],
        w = a.getBombFromWall(v.sourceId, v.markCell, y),
        b = i.getFighter(w);
      if (b && !a.isBombOf(_, y, v.sourceId)) {
        p = a.getChainReactionBomb(v.sourceId, w), m = a.getComboCoeffBomb(p, y);
        var M = n.getVirtualCellFromRealCell(_.cellId);
        l[v.spellId] = l[v.spellId] || [], l[v.spellId].push({
          caster: b.data.stats.summoner,
          target: g.id,
          casterCellId: M,
          targetCellId: M,
          level: b.level,
          comboBonus: m
        }), n.affectedByMark(_.actorId, v), c = !0;
      }
    }
  }
}
for (u = 0; u < g.marks.length; u++) {
  var v = g.marks[u];
  if (v.type === o.MARK.BOMB) {
    var y = o.MARK_TO_BOMB[v.spellId],
      w = a.getBombFromWall(v.sourceId, v.markCell, y),
      b = i.getFighter(w);
    if (b && !a.isBombOf(_, y, v.sourceId)) {
      p = a.getChainReactionBomb(v.sourceId, w), m = a.getComboCoeffBomb(p, y);
      var M = n.getVirtualCellFromRealCell(_.cellId);
      l[v.spellId] = l[v.spellId] || [], l[v.spellId].push({
        caster: b.data.stats.summoner,
        target: g.id,
        casterCellId: M,
        targetCellId: M,
        level: b.level,
        comboBonus: m
      }), n.affectedByMark(_.actorId, v), c = !0;
    }
  }
}
if (v.type === o.MARK.BOMB) {
  var y = o.MARK_TO_BOMB[v.spellId],
    w = a.getBombFromWall(v.sourceId, v.markCell, y),
    b = i.getFighter(w);
  if (b && !a.isBombOf(_, y, v.sourceId)) {
    p = a.getChainReactionBomb(v.sourceId, w), m = a.getComboCoeffBomb(p, y);
    var M = n.getVirtualCellFromRealCell(_.cellId);
    l[v.spellId] = l[v.spellId] || [], l[v.spellId].push({
      caster: b.data.stats.summoner,
      target: g.id,
      casterCellId: M,
      targetCellId: M,
      level: b.level,
      comboBonus: m
    }), n.affectedByMark(_.actorId, v), c = !0;
  }
}
if (b && !a.isBombOf(_, y, v.sourceId)) {
  p = a.getChainReactionBomb(v.sourceId, w), m = a.getComboCoeffBomb(p, y);
  var M = n.getVirtualCellFromRealCell(_.cellId);
  l[v.spellId] = l[v.spellId] || [], l[v.spellId].push({
    caster: b.data.stats.summoner,
    target: g.id,
    casterCellId: M,
    targetCellId: M,
    level: b.level,
    comboBonus: m
  }), n.affectedByMark(_.actorId, v), c = !0;
}
for (d = 0; d < this.effectInstances.length; d++) {
  var T = this.effectInstances[d];
  if (T.isDirectEffect() && this.spellCenterCellId === this.target.cellId && a.isInZoneEffect(T, this.target.cellId) && a.verifySpellEffectMask(T, this.caster.id, this.target.id, this.effectMaskOptions) && (this.verifyAllEffectsTrigger(this.effectInstances, T.triggers, this.effectMaskOptions) || this.verifyExternalDamagesTrigger(T.triggers, {
    isWeapon: !1
  }))) {
    if (T.effectId === s.ACTION_SUMMON_BOMB) {
      if (f = T.diceNum, h = r[f], !h) {
        continue;
      }
      l[h.instantSpellId] = l[h.instantSpellId] || [], l[h.instantSpellId].push({
        caster: this.caster.id,
        casterCellId: this.caster.cellId,
        targetCellId: this.target.cellId,
        level: this.spellLevel,
        comboBonus: 0
      }), c = !0;
      break;
    }
    if (this.target.isBomb && T.effectId === s.ACTION_CHARACTER_ACTIVATE_BOMB) {
      var C = t.getActor(this.target.id),
        I = i.getFighter(this.caster.id);
      if (h = r[C ? C.data.creatureGenericId : 0], !h) {
        continue;
      }
      var A = I.isSummon() ? I.data.stats.summoner : this.caster.id;
      for (p = a.getChainReactionBomb(A, this.target.id), m = a.getComboCoeffBomb(p), u = 0; u < p.length; u++) {
        f = p[u];
        var S = t.getActor(f);
        if (S && r[S.data.creatureGenericId]) {
          var E = r[S.data.creatureGenericId];
          l[E.explodSpellId] = l[E.explodSpellId] || [], l[E.explodSpellId].push({
            caster: f,
            casterCellId: S.cellId,
            targetCellId: S.cellId,
            level: S.getFighter().level,
            comboBonus: m
          });
        }
      }
      c = !0;
      break;
    }
  }
}
if (T.isDirectEffect() && this.spellCenterCellId === this.target.cellId && a.isInZoneEffect(T, this.target.cellId) && a.verifySpellEffectMask(T, this.caster.id, this.target.id, this.effectMaskOptions) && (this.verifyAllEffectsTrigger(this.effectInstances, T.triggers, this.effectMaskOptions) || this.verifyExternalDamagesTrigger(T.triggers, {
  isWeapon: !1
}))) {
  if (T.effectId === s.ACTION_SUMMON_BOMB) {
    if (f = T.diceNum, h = r[f], !h) {
      continue;
    }
    l[h.instantSpellId] = l[h.instantSpellId] || [], l[h.instantSpellId].push({
      caster: this.caster.id,
      casterCellId: this.caster.cellId,
      targetCellId: this.target.cellId,
      level: this.spellLevel,
      comboBonus: 0
    }), c = !0;
    break;
  }
  if (this.target.isBomb && T.effectId === s.ACTION_CHARACTER_ACTIVATE_BOMB) {
    var C = t.getActor(this.target.id),
      I = i.getFighter(this.caster.id);
    if (h = r[C ? C.data.creatureGenericId : 0], !h) {
      continue;
    }
    var A = I.isSummon() ? I.data.stats.summoner : this.caster.id;
    for (p = a.getChainReactionBomb(A, this.target.id), m = a.getComboCoeffBomb(p), u = 0; u < p.length; u++) {
      f = p[u];
      var S = t.getActor(f);
      if (S && r[S.data.creatureGenericId]) {
        var E = r[S.data.creatureGenericId];
        l[E.explodSpellId] = l[E.explodSpellId] || [], l[E.explodSpellId].push({
          caster: f,
          casterCellId: S.cellId,
          targetCellId: S.cellId,
          level: S.getFighter().level,
          comboBonus: m
        });
      }
    }
    c = !0;
    break;
  }
}
if (T.effectId === s.ACTION_SUMMON_BOMB) {
  if (f = T.diceNum, h = r[f], !h) {
    continue;
  }
  l[h.instantSpellId] = l[h.instantSpellId] || [], l[h.instantSpellId].push({
    caster: this.caster.id,
    casterCellId: this.caster.cellId,
    targetCellId: this.target.cellId,
    level: this.spellLevel,
    comboBonus: 0
  }), c = !0;
  break;
}
if (f = T.diceNum, h = r[f], !h) {
  continue;
}
if (this.target.isBomb && T.effectId === s.ACTION_CHARACTER_ACTIVATE_BOMB) {
  var C = t.getActor(this.target.id),
    I = i.getFighter(this.caster.id);
  if (h = r[C ? C.data.creatureGenericId : 0], !h) {
    continue;
  }
  var A = I.isSummon() ? I.data.stats.summoner : this.caster.id;
  for (p = a.getChainReactionBomb(A, this.target.id), m = a.getComboCoeffBomb(p), u = 0; u < p.length; u++) {
    f = p[u];
    var S = t.getActor(f);
    if (S && r[S.data.creatureGenericId]) {
      var E = r[S.data.creatureGenericId];
      l[E.explodSpellId] = l[E.explodSpellId] || [], l[E.explodSpellId].push({
        caster: f,
        casterCellId: S.cellId,
        targetCellId: S.cellId,
        level: S.getFighter().level,
        comboBonus: m
      });
    }
  }
  c = !0;
  break;
}
if (h = r[C ? C.data.creatureGenericId : 0], !h) {
  continue;
}
for (p = a.getChainReactionBomb(A, this.target.id), m = a.getComboCoeffBomb(p), u = 0; u < p.length; u++) {
  f = p[u];
  var S = t.getActor(f);
  if (S && r[S.data.creatureGenericId]) {
    var E = r[S.data.creatureGenericId];
    l[E.explodSpellId] = l[E.explodSpellId] || [], l[E.explodSpellId].push({
      caster: f,
      casterCellId: S.cellId,
      targetCellId: S.cellId,
      level: S.getFighter().level,
      comboBonus: m
    });
  }
}
if (S && r[S.data.creatureGenericId]) {
  var E = r[S.data.creatureGenericId];
  l[E.explodSpellId] = l[E.explodSpellId] || [], l[E.explodSpellId].push({
    caster: f,
    casterCellId: S.cellId,
    targetCellId: S.cellId,
    level: S.getFighter().level,
    comboBonus: m
  });
}
if (t) {
  return e(t);
}
for (var o in i) {
  if (i.hasOwnProperty(o)) {
    for (d = 0; d < l[o].length; d++) {
      var a = l[o][d],
        s = i[o].clone();
      s.setLevel(a.level), s.ownerId = a.caster, n.push({
        spell: s,
        casterCellId: a.casterCellId,
        targetCellId: a.targetCellId,
        comboBonus: a.comboBonus,
        target: a.target
      });
    }
  }
}
if (i.hasOwnProperty(o)) {
  for (d = 0; d < l[o].length; d++) {
    var a = l[o][d],
      s = i[o].clone();
    s.setLevel(a.level), s.ownerId = a.caster, n.push({
      spell: s,
      casterCellId: a.casterCellId,
      targetCellId: a.targetCellId,
      comboBonus: a.comboBonus,
      target: a.target
    });
  }
}
for (d = 0; d < l[o].length; d++) {
  var a = l[o][d],
    s = i[o].clone();
  s.setLevel(a.level), s.ownerId = a.caster, n.push({
    spell: s,
    casterCellId: a.casterCellId,
    targetCellId: a.targetCellId,
    comboBonus: a.comboBonus,
    target: a.target
  });
}
for (var t = window.gui.damagePreview.damagePreviewManager, i = [], n = !1, r = 0; r < this.effectInstances.length; r++) {
  var l = this.effectInstances[r];
  if (l.effectId === s.ACTION_FORCE_GLYPH_TRIGGER && l.isDirectEffect() && a.verifySpellEffectMask(l, this.caster.id, this.target.id, this.effectMaskOptions) && (this.verifyAllEffectsTrigger(this.effectInstances, l.triggers, this.effectMaskOptions) || this.verifyExternalDamagesTrigger(l.triggers, {
    isWeapon: !1
  }))) {
    for (var c = window.background.zones, d = 0; d < c.length; d++) {
      var u = c[d],
        h = u.data.sourceId,
        p = window.gui.fightManager.getFighter(h),
        m = u.data.spellId,
        f = u.data.markCell;
      if (a.isInGlyph(this.caster.id, m, this.caster.cellId) && u.data.type === o.MARK.GLYPH && h === this.caster.id && !i[m]) {
        var g = p && p.spells[m] ? p.spells[m].level : 1;
        i[m] = {
          casterId: h,
          level: g,
          targetCellId: f
        }, n = !0;
      }
    }
  }
}
if (l.effectId === s.ACTION_FORCE_GLYPH_TRIGGER && l.isDirectEffect() && a.verifySpellEffectMask(l, this.caster.id, this.target.id, this.effectMaskOptions) && (this.verifyAllEffectsTrigger(this.effectInstances, l.triggers, this.effectMaskOptions) || this.verifyExternalDamagesTrigger(l.triggers, {
  isWeapon: !1
}))) {
  for (var c = window.background.zones, d = 0; d < c.length; d++) {
    var u = c[d],
      h = u.data.sourceId,
      p = window.gui.fightManager.getFighter(h),
      m = u.data.spellId,
      f = u.data.markCell;
    if (a.isInGlyph(this.caster.id, m, this.caster.cellId) && u.data.type === o.MARK.GLYPH && h === this.caster.id && !i[m]) {
      var g = p && p.spells[m] ? p.spells[m].level : 1;
      i[m] = {
        casterId: h,
        level: g,
        targetCellId: f
      }, n = !0;
    }
  }
}
for (var c = window.background.zones, d = 0; d < c.length; d++) {
  var u = c[d],
    h = u.data.sourceId,
    p = window.gui.fightManager.getFighter(h),
    m = u.data.spellId,
    f = u.data.markCell;
  if (a.isInGlyph(this.caster.id, m, this.caster.cellId) && u.data.type === o.MARK.GLYPH && h === this.caster.id && !i[m]) {
    var g = p && p.spells[m] ? p.spells[m].level : 1;
    i[m] = {
      casterId: h,
      level: g,
      targetCellId: f
    }, n = !0;
  }
}
if (a.isInGlyph(this.caster.id, m, this.caster.cellId) && u.data.type === o.MARK.GLYPH && h === this.caster.id && !i[m]) {
  var g = p && p.spells[m] ? p.spells[m].level : 1;
  i[m] = {
    casterId: h,
    level: g,
    targetCellId: f
  }, n = !0;
}
if (t) {
  return e(t);
}
for (var a in n) {
  if (n.hasOwnProperty(a)) {
    var s = n[a];
    s.setLevel(i[a].level), s.ownerId = i[a].casterId, o.push({
      spell: s,
      casterId: i[a].casterId,
      targetCellId: i[a].targetCellId
    });
  }
}
if (n.hasOwnProperty(a)) {
  var s = n[a];
  s.setLevel(i[a].level), s.ownerId = i[a].casterId, o.push({
    spell: s,
    casterId: i[a].casterId,
    targetCellId: i[a].targetCellId
  });
}
for (var t = this, i = window.gui.damagePreview.damagePreviewManager, n = [], s = !1, r = 0; r < this.effectInstances.length; r++) {
  var l = this.effectInstances[r],
    c = l.getParams();
  l.isDirectEffect() && o.EFFECTS_IDS.GLYPH_TRIGGERING_SPELLS[l.effectId] && a.isInZoneEffect(l, this.spellCenterCellId) && (n[c[0]] = {
    level: c[1]
  }, s = !0);
}
if (i) {
  return e(i);
}
for (var s in o) {
  if (o.hasOwnProperty(s)) {
    var r = o[s];
    r.setLevel(n[s].level), r.ownerId = t.caster.id, a.push({
      spell: r,
      casterId: t.caster.id
    });
  }
}
if (o.hasOwnProperty(s)) {
  var r = o[s];
  r.setLevel(n[s].level), r.ownerId = t.caster.id, a.push({
    spell: r,
    casterId: t.caster.id
  });
}
for (var t = this, i = window.actorManager, n = window.gui.damagePreview.damagePreviewManager, s = [], r = i.getActor(this.target.id).cellId, l = !1, c = 0; c < this.effectInstances.length; c++) {
  var d = this.effectInstances[c],
    u = d.getParams(),
    h = o.EFFECTS_IDS.TRIGGERING_SPELL[d.effectId];
  void 0 !== h && d.isDirectEffect() && a.isInZoneEffect(d, r) && a.verifySpellEffectMask(d, this.caster.id, this.target.id, this.effectMaskOptions) && (this.verifyAllEffectsTrigger(this.effectInstances, d.triggers, this.effectMaskOptions) || this.verifyExternalDamagesTrigger(d.triggers, {
    isWeapon: !1
  })) && (s[u[0]] = {
    spellType: h,
    level: u[1]
  }, l = !0);
}
if (o) {
  return e(o);
}
for (var l in a) {
  var c = a[l],
    d = s[l].spellType,
    u = 2 & d ? t.target.id : t.caster.id,
    h = 1 & d ? t.target.id : t.caster.id,
    p = n.getVirtualCellFromRealCell(i.getActor(h).cellId),
    m = n.getVirtualCellFromRealCell(i.getActor(u).cellId);
  c.setLevel(s[l].level), c.ownerId = h, r.push({
    spell: c,
    casterId: h,
    targetId: u,
    casterCellId: p,
    targetCellId: m
  });
}
for (var i = this, n = window.actorManager, a = window.gui.damagePreview.damagePreviewManager, s = [], r = !1, l = 0; l < this.target.buffs.length; l++) {
  var c = this.target.buffs[l],
    d = o.EFFECTS_IDS.TRIGGERING_SPELL[c.effect.effectId];
  if (!e[c.uid] && void 0 !== d && this.verifyBuffTrigger(c)) {
    var u = c.effect.getParams();
    s[u[0]] = {
      spellType: d,
      level: u[1]
    }, r = !0, e[c.uid] = !0;
  }
}
if (!e[c.uid] && void 0 !== d && this.verifyBuffTrigger(c)) {
  var u = c.effect.getParams();
  s[u[0]] = {
    spellType: d,
    level: u[1]
  }, r = !0, e[c.uid] = !0;
}
if (e) {
  return t(e);
}
for (var l in o) {
  var c = o[l],
    d = s[l].spellType,
    u = 2 & d ? i.target.id : i.caster.id,
    h = 1 & d ? i.target.id : i.caster.id,
    p = a.getVirtualCellFromRealCell(n.getActor(h).cellId),
    m = a.getVirtualCellFromRealCell(n.getActor(u).cellId);
  c.setLevel(s[l].level), c.ownerId = h, r.push({
    spell: c,
    casterId: h,
    targetId: u,
    casterCellId: p,
    targetCellId: m
  });
}
if (!a && i) {
  var s = f.fromCellId(t),
    r = f.fromCellId(e),
    l = f.orientationTo(r, s);
  if (l % 2 === 0) {
    var c, d;
    switch (l) {
      case p.DIRECTION_EAST:
        c = f.getNearestCellInDirection(r, p.DIRECTION_NORTH_WEST), d = f.getNearestCellInDirection(r, p.DIRECTION_SOUTH_WEST);
        break;
      case p.DIRECTION_SOUTH:
        c = f.getNearestCellInDirection(r, p.DIRECTION_NORTH_WEST), d = f.getNearestCellInDirection(r, p.DIRECTION_NORTH_EAST);
        break;
      case p.DIRECTION_WEST:
        c = f.getNearestCellInDirection(r, p.DIRECTION_NORTH_EAST), d = f.getNearestCellInDirection(r, p.DIRECTION_SOUTH_EAST);
        break;
      case p.DIRECTION_NORTH:
        c = f.getNearestCellInDirection(r, p.DIRECTION_SOUTH_WEST), d = f.getNearestCellInDirection(r, p.DIRECTION_SOUTH_EAST);
    }
    a = c && n(c.cellId, e, !1) || d && n(d.cellId, e, !1);
  }
}
if (l % 2 === 0) {
  var c, d;
  switch (l) {
    case p.DIRECTION_EAST:
      c = f.getNearestCellInDirection(r, p.DIRECTION_NORTH_WEST), d = f.getNearestCellInDirection(r, p.DIRECTION_SOUTH_WEST);
      break;
    case p.DIRECTION_SOUTH:
      c = f.getNearestCellInDirection(r, p.DIRECTION_NORTH_WEST), d = f.getNearestCellInDirection(r, p.DIRECTION_NORTH_EAST);
      break;
    case p.DIRECTION_WEST:
      c = f.getNearestCellInDirection(r, p.DIRECTION_NORTH_EAST), d = f.getNearestCellInDirection(r, p.DIRECTION_SOUTH_EAST);
      break;
    case p.DIRECTION_NORTH:
      c = f.getNearestCellInDirection(r, p.DIRECTION_SOUTH_WEST), d = f.getNearestCellInDirection(r, p.DIRECTION_SOUTH_EAST);
  }
  a = c && n(c.cellId, e, !1) || d && n(d.cellId, e, !1);
}
if (n.cellId === a.cellId) {
  return 0;
}
for (var o, a = !1, s = f.fromCellId(e); s && !a;) {
  if (o = s, s = f.getNearestCellInDirection(s, i), !s) {
    return !0;
  }
  if (a = n(s.cellId, o.cellId), s.cellId === t) {
    break;
  }
}
if (o = s, s = f.getNearestCellInDirection(s, i), !s) {
  return !0;
}
if (a = n(s.cellId, o.cellId), s.cellId === t) {
  break;
}
for (var n = f.fromCellId(e), o = 0; o < t; o++) {
  if (n = f.getNearestCellInDirection(n, i), !n) {
    return -1;
  }
}
if (n = f.getNearestCellInDirection(n, i), !n) {
  return -1;
}
for (var n = [], o = f.fromCellId(e), a = f.getNearestCellInDirection(o, i), s = 0; a && s < t;) {
  var r = g.getActorOnCell(a.cellId);
  r && n.push(r), a = f.getNearestCellInDirection(a, i), s++;
}
for (var d, u, h, p, m, _ = window.isoEngine.mapRenderer.map.cells, w = window.actorManager, b = g.getActorOnCell(n), M = a.isCriticalEffect ? e.getEffectInstances().criticalEffects : e.getEffectInstances().effects, T = 0; T < M.length; T++) {
  var C = M[T];
  if (C.isDirectEffect()) {
    var I = C.effectId === y.ACTION_CHARACTER_PUSH,
      A = C.effectId === y.ACTION_FIGHT_PUSH_NO_DAMAGE,
      S = C.effectId === y.ACTION_CHARACTER_GET_PUSHED;
    if (I || A || S) {
      var E = C.diceNum,
        N = C.getZoneEffect(),
        x = N.zoneShape;
      if (0 === E) {
        continue;
      }
      var L = S ? i : n,
        O = o(_, i, L, N),
        R = c(x) || S ? n : i;
      u = f.fromCellId(R);
      for (var D = b && g.verifySpellEffectMask(C, t, b.actorId, a), P = 0; P < O.length; P++) {
        var B = O[P];
        if (B !== i || i !== n) {
          d = g.getActorOnCell(B);
          var k = d && g.verifySpellEffectMask(C, t, d.actorId, a);
          if (k && (!S || D)) {
            h = f.advancedOrientationTo(f.fromCellId(B), u, {
              fourDir: !1
            });
            var F = this._getPushForce(B, d.getFighter(), M, C),
              H = this._retrievePushedEntitiesInLine(d, F, h, O, !A);
            H.length && (this.changePosition(H[0].id, H[0].newCellId), s.push.apply(s, H));
          }
        }
      }
    }
    if (C.effectId === y.ACTION_CHARACTER_PUSH_UP_TO) {
      var z = f.fromCellId(n);
      u = f.fromCellId(i), h = f.advancedOrientationTo(z, u, {
        fourDir: !1
      });
      var W = r(i, 1, h);
      if (d = W[0], !l(d)) {
        continue;
      }
      var G = f.getNearestCellInDirection(f.fromCellId(d.cellId), h);
      if (p = new v(d.actorId, 0, 0, !1, G.cellId), s.push(p), m = this.hasPathAMark(d, d.cellId, n, h, [n]), !m) {
        continue;
      }
      p.newCellId = m.cellId, p.marks = m.marks;
    }
    if (C.effectId === y.ACTION_THROW_CARRIED_CHARACTER) {
      d = w.getActor(t);
      var U = d && d.carriedActor;
      if (!U) {
        continue;
      }
      p = new v(U.actorId, 0, 0, !1, n), s.push(p), m = this.getMarksCell(U.actorId, n), m.length && (p.marks = m);
    }
  }
}
if (C.isDirectEffect()) {
  var I = C.effectId === y.ACTION_CHARACTER_PUSH,
    A = C.effectId === y.ACTION_FIGHT_PUSH_NO_DAMAGE,
    S = C.effectId === y.ACTION_CHARACTER_GET_PUSHED;
  if (I || A || S) {
    var E = C.diceNum,
      N = C.getZoneEffect(),
      x = N.zoneShape;
    if (0 === E) {
      continue;
    }
    var L = S ? i : n,
      O = o(_, i, L, N),
      R = c(x) || S ? n : i;
    u = f.fromCellId(R);
    for (var D = b && g.verifySpellEffectMask(C, t, b.actorId, a), P = 0; P < O.length; P++) {
      var B = O[P];
      if (B !== i || i !== n) {
        d = g.getActorOnCell(B);
        var k = d && g.verifySpellEffectMask(C, t, d.actorId, a);
        if (k && (!S || D)) {
          h = f.advancedOrientationTo(f.fromCellId(B), u, {
            fourDir: !1
          });
          var F = this._getPushForce(B, d.getFighter(), M, C),
            H = this._retrievePushedEntitiesInLine(d, F, h, O, !A);
          H.length && (this.changePosition(H[0].id, H[0].newCellId), s.push.apply(s, H));
        }
      }
    }
  }
  if (C.effectId === y.ACTION_CHARACTER_PUSH_UP_TO) {
    var z = f.fromCellId(n);
    u = f.fromCellId(i), h = f.advancedOrientationTo(z, u, {
      fourDir: !1
    });
    var W = r(i, 1, h);
    if (d = W[0], !l(d)) {
      continue;
    }
    var G = f.getNearestCellInDirection(f.fromCellId(d.cellId), h);
    if (p = new v(d.actorId, 0, 0, !1, G.cellId), s.push(p), m = this.hasPathAMark(d, d.cellId, n, h, [n]), !m) {
      continue;
    }
    p.newCellId = m.cellId, p.marks = m.marks;
  }
  if (C.effectId === y.ACTION_THROW_CARRIED_CHARACTER) {
    d = w.getActor(t);
    var U = d && d.carriedActor;
    if (!U) {
      continue;
    }
    p = new v(U.actorId, 0, 0, !1, n), s.push(p), m = this.getMarksCell(U.actorId, n), m.length && (p.marks = m);
  }
}
if (I || A || S) {
  var E = C.diceNum,
    N = C.getZoneEffect(),
    x = N.zoneShape;
  if (0 === E) {
    continue;
  }
  var L = S ? i : n,
    O = o(_, i, L, N),
    R = c(x) || S ? n : i;
  u = f.fromCellId(R);
  for (var D = b && g.verifySpellEffectMask(C, t, b.actorId, a), P = 0; P < O.length; P++) {
    var B = O[P];
    if (B !== i || i !== n) {
      d = g.getActorOnCell(B);
      var k = d && g.verifySpellEffectMask(C, t, d.actorId, a);
      if (k && (!S || D)) {
        h = f.advancedOrientationTo(f.fromCellId(B), u, {
          fourDir: !1
        });
        var F = this._getPushForce(B, d.getFighter(), M, C),
          H = this._retrievePushedEntitiesInLine(d, F, h, O, !A);
        H.length && (this.changePosition(H[0].id, H[0].newCellId), s.push.apply(s, H));
      }
    }
  }
}
if (0 === E) {
  continue;
}
for (var D = b && g.verifySpellEffectMask(C, t, b.actorId, a), P = 0; P < O.length; P++) {
  var B = O[P];
  if (B !== i || i !== n) {
    d = g.getActorOnCell(B);
    var k = d && g.verifySpellEffectMask(C, t, d.actorId, a);
    if (k && (!S || D)) {
      h = f.advancedOrientationTo(f.fromCellId(B), u, {
        fourDir: !1
      });
      var F = this._getPushForce(B, d.getFighter(), M, C),
        H = this._retrievePushedEntitiesInLine(d, F, h, O, !A);
      H.length && (this.changePosition(H[0].id, H[0].newCellId), s.push.apply(s, H));
    }
  }
}
if (B !== i || i !== n) {
  d = g.getActorOnCell(B);
  var k = d && g.verifySpellEffectMask(C, t, d.actorId, a);
  if (k && (!S || D)) {
    h = f.advancedOrientationTo(f.fromCellId(B), u, {
      fourDir: !1
    });
    var F = this._getPushForce(B, d.getFighter(), M, C),
      H = this._retrievePushedEntitiesInLine(d, F, h, O, !A);
    H.length && (this.changePosition(H[0].id, H[0].newCellId), s.push.apply(s, H));
  }
}
if (k && (!S || D)) {
  h = f.advancedOrientationTo(f.fromCellId(B), u, {
    fourDir: !1
  });
  var F = this._getPushForce(B, d.getFighter(), M, C),
    H = this._retrievePushedEntitiesInLine(d, F, h, O, !A);
  H.length && (this.changePosition(H[0].id, H[0].newCellId), s.push.apply(s, H));
}
if (C.effectId === y.ACTION_CHARACTER_PUSH_UP_TO) {
  var z = f.fromCellId(n);
  u = f.fromCellId(i), h = f.advancedOrientationTo(z, u, {
    fourDir: !1
  });
  var W = r(i, 1, h);
  if (d = W[0], !l(d)) {
    continue;
  }
  var G = f.getNearestCellInDirection(f.fromCellId(d.cellId), h);
  if (p = new v(d.actorId, 0, 0, !1, G.cellId), s.push(p), m = this.hasPathAMark(d, d.cellId, n, h, [n]), !m) {
    continue;
  }
  p.newCellId = m.cellId, p.marks = m.marks;
}
if (d = W[0], !l(d)) {
  continue;
}
if (p = new v(d.actorId, 0, 0, !1, G.cellId), s.push(p), m = this.hasPathAMark(d, d.cellId, n, h, [n]), !m) {
  continue;
}
if (C.effectId === y.ACTION_THROW_CARRIED_CHARACTER) {
  d = w.getActor(t);
  var U = d && d.carriedActor;
  if (!U) {
    continue;
  }
  p = new v(U.actorId, 0, 0, !1, n), s.push(p), m = this.getMarksCell(U.actorId, n), m.length && (p.marks = m);
}
if (!U) {
  continue;
}
for (var d = window.isoEngine.mapRenderer.map.cells, u = g.getActorOnCell(a), h = s.isCriticalEffect ? e.getEffectInstances().criticalEffects : e.getEffectInstances().effects, p = 0; p < h.length; p++) {
  var m = h[p],
    _ = m.effectId === y.ACTION_CHARACTER_PULL,
    w = m.effectId === y.ACTION_CHARACTER_GET_PULLED;
  if (m.isDirectEffect() && (_ || w)) {
    var b = m.diceNum,
      M = m.getZoneEffect(),
      T = M.zoneShape;
    if (0 !== b) {
      for (var C = w ? i : a, I = o(d, i, C, M, {
          reverseSort: !0
        }), A = c(T) || w ? a : i, S = f.fromCellId(A), E = u && g.verifySpellEffectMask(m, t, u.actorId, s), N = 0; N < I.length; N++) {
        var x = I[N];
        if (x !== i || i !== a) {
          var L = g.getActorOnCell(x),
            O = L && g.verifySpellEffectMask(m, t, L.actorId, s);
          if (O && (!w || E) && l(L)) {
            var R = f.fromCellId(x),
              D = f.advancedOrientationTo(S, R, {
                fourDir: !1
              }),
              P = new v(L.actorId, 0, 0, !1, x);
            r.push(P), this.changePosition(L.actorId, x);
            for (var B = 0; B < b; B++) {
              var k = R;
              if (R = f.getNearestCellInDirection(k, D), n(R.cellId, k.cellId)) {
                break;
              }
              for (var F = !1, H = 0; H < r.length; H++) {
                var z = r[H];
                if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
                  F = !0;
                  break;
                }
              }
              if (!F) {
                P.newCellId = R.cellId, this.changePosition(L.actorId, R.cellId);
                var W = this.getMarksCell(L.actorId, R.cellId);
                if (W.length) {
                  P.marks = W;
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}
if (m.isDirectEffect() && (_ || w)) {
  var b = m.diceNum,
    M = m.getZoneEffect(),
    T = M.zoneShape;
  if (0 !== b) {
    for (var C = w ? i : a, I = o(d, i, C, M, {
        reverseSort: !0
      }), A = c(T) || w ? a : i, S = f.fromCellId(A), E = u && g.verifySpellEffectMask(m, t, u.actorId, s), N = 0; N < I.length; N++) {
      var x = I[N];
      if (x !== i || i !== a) {
        var L = g.getActorOnCell(x),
          O = L && g.verifySpellEffectMask(m, t, L.actorId, s);
        if (O && (!w || E) && l(L)) {
          var R = f.fromCellId(x),
            D = f.advancedOrientationTo(S, R, {
              fourDir: !1
            }),
            P = new v(L.actorId, 0, 0, !1, x);
          r.push(P), this.changePosition(L.actorId, x);
          for (var B = 0; B < b; B++) {
            var k = R;
            if (R = f.getNearestCellInDirection(k, D), n(R.cellId, k.cellId)) {
              break;
            }
            for (var F = !1, H = 0; H < r.length; H++) {
              var z = r[H];
              if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
                F = !0;
                break;
              }
            }
            if (!F) {
              P.newCellId = R.cellId, this.changePosition(L.actorId, R.cellId);
              var W = this.getMarksCell(L.actorId, R.cellId);
              if (W.length) {
                P.marks = W;
                break;
              }
            }
          }
        }
      }
    }
  }
}
if (0 !== b) {
  for (var C = w ? i : a, I = o(d, i, C, M, {
      reverseSort: !0
    }), A = c(T) || w ? a : i, S = f.fromCellId(A), E = u && g.verifySpellEffectMask(m, t, u.actorId, s), N = 0; N < I.length; N++) {
    var x = I[N];
    if (x !== i || i !== a) {
      var L = g.getActorOnCell(x),
        O = L && g.verifySpellEffectMask(m, t, L.actorId, s);
      if (O && (!w || E) && l(L)) {
        var R = f.fromCellId(x),
          D = f.advancedOrientationTo(S, R, {
            fourDir: !1
          }),
          P = new v(L.actorId, 0, 0, !1, x);
        r.push(P), this.changePosition(L.actorId, x);
        for (var B = 0; B < b; B++) {
          var k = R;
          if (R = f.getNearestCellInDirection(k, D), n(R.cellId, k.cellId)) {
            break;
          }
          for (var F = !1, H = 0; H < r.length; H++) {
            var z = r[H];
            if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
              F = !0;
              break;
            }
          }
          if (!F) {
            P.newCellId = R.cellId, this.changePosition(L.actorId, R.cellId);
            var W = this.getMarksCell(L.actorId, R.cellId);
            if (W.length) {
              P.marks = W;
              break;
            }
          }
        }
      }
    }
  }
}
for (var C = w ? i : a, I = o(d, i, C, M, {
    reverseSort: !0
  }), A = c(T) || w ? a : i, S = f.fromCellId(A), E = u && g.verifySpellEffectMask(m, t, u.actorId, s), N = 0; N < I.length; N++) {
  var x = I[N];
  if (x !== i || i !== a) {
    var L = g.getActorOnCell(x),
      O = L && g.verifySpellEffectMask(m, t, L.actorId, s);
    if (O && (!w || E) && l(L)) {
      var R = f.fromCellId(x),
        D = f.advancedOrientationTo(S, R, {
          fourDir: !1
        }),
        P = new v(L.actorId, 0, 0, !1, x);
      r.push(P), this.changePosition(L.actorId, x);
      for (var B = 0; B < b; B++) {
        var k = R;
        if (R = f.getNearestCellInDirection(k, D), n(R.cellId, k.cellId)) {
          break;
        }
        for (var F = !1, H = 0; H < r.length; H++) {
          var z = r[H];
          if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
            F = !0;
            break;
          }
        }
        if (!F) {
          P.newCellId = R.cellId, this.changePosition(L.actorId, R.cellId);
          var W = this.getMarksCell(L.actorId, R.cellId);
          if (W.length) {
            P.marks = W;
            break;
          }
        }
      }
    }
  }
}
if (x !== i || i !== a) {
  var L = g.getActorOnCell(x),
    O = L && g.verifySpellEffectMask(m, t, L.actorId, s);
  if (O && (!w || E) && l(L)) {
    var R = f.fromCellId(x),
      D = f.advancedOrientationTo(S, R, {
        fourDir: !1
      }),
      P = new v(L.actorId, 0, 0, !1, x);
    r.push(P), this.changePosition(L.actorId, x);
    for (var B = 0; B < b; B++) {
      var k = R;
      if (R = f.getNearestCellInDirection(k, D), n(R.cellId, k.cellId)) {
        break;
      }
      for (var F = !1, H = 0; H < r.length; H++) {
        var z = r[H];
        if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
          F = !0;
          break;
        }
      }
      if (!F) {
        P.newCellId = R.cellId, this.changePosition(L.actorId, R.cellId);
        var W = this.getMarksCell(L.actorId, R.cellId);
        if (W.length) {
          P.marks = W;
          break;
        }
      }
    }
  }
}
if (O && (!w || E) && l(L)) {
  var R = f.fromCellId(x),
    D = f.advancedOrientationTo(S, R, {
      fourDir: !1
    }),
    P = new v(L.actorId, 0, 0, !1, x);
  r.push(P), this.changePosition(L.actorId, x);
  for (var B = 0; B < b; B++) {
    var k = R;
    if (R = f.getNearestCellInDirection(k, D), n(R.cellId, k.cellId)) {
      break;
    }
    for (var F = !1, H = 0; H < r.length; H++) {
      var z = r[H];
      if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
        F = !0;
        break;
      }
    }
    if (!F) {
      P.newCellId = R.cellId, this.changePosition(L.actorId, R.cellId);
      var W = this.getMarksCell(L.actorId, R.cellId);
      if (W.length) {
        P.marks = W;
        break;
      }
    }
  }
}
for (var B = 0; B < b; B++) {
  var k = R;
  if (R = f.getNearestCellInDirection(k, D), n(R.cellId, k.cellId)) {
    break;
  }
  for (var F = !1, H = 0; H < r.length; H++) {
    var z = r[H];
    if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
      F = !0;
      break;
    }
  }
  if (!F) {
    P.newCellId = R.cellId, this.changePosition(L.actorId, R.cellId);
    var W = this.getMarksCell(L.actorId, R.cellId);
    if (W.length) {
      P.marks = W;
      break;
    }
  }
}
if (R = f.getNearestCellInDirection(k, D), n(R.cellId, k.cellId)) {
  break;
}
for (var F = !1, H = 0; H < r.length; H++) {
  var z = r[H];
  if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
    F = !0;
    break;
  }
}
if (z.actorId !== L.actorId && z.newCellId === R.cellId) {
  F = !0;
  break;
}
if (!F) {
  P.newCellId = R.cellId, this.changePosition(L.actorId, R.cellId);
  var W = this.getMarksCell(L.actorId, R.cellId);
  if (W.length) {
    P.marks = W;
    break;
  }
}
if (W.length) {
  P.marks = W;
  break;
}
if (!i) {
  return !1;
}
for (var i = window.background.zones, n = [], o = 0; o < i.length; o++) {
  var a = i[o],
    s = a.data;
  if (s) {
    var r = s.markCell,
      l = s.markSize;
    (r === t && s.type === _.MARK.BOMB && !this.hasAlreadyBeenAffectedByMark(s, e) || l >= m.getDistance(t, r) && s.type === _.MARK.TRAP && !this.hasAlreadyBeenAffectedByMark(s)) && n.push(s);
  }
}
if (s) {
  var r = s.markCell,
    l = s.markSize;
  (r === t && s.type === _.MARK.BOMB && !this.hasAlreadyBeenAffectedByMark(s, e) || l >= m.getDistance(t, r) && s.type === _.MARK.TRAP && !this.hasAlreadyBeenAffectedByMark(s)) && n.push(s);
}
for (w = 0; w < u.length; w++) {
  if (y = u[w], y.id === e) {
    return y;
  }
}
if (y = u[w], y.id === e) {
  return y;
}
if (!h) {
  return u;
}
for (w = 0; w < t; w++) {
  if (M) {
    if (n(M.cellId, p ? p.cellId : d)) {
      break;
    }
    T--, p = M, M = f.getNearestCellInDirection(M, i);
  }
}
if (M) {
  if (n(M.cellId, p ? p.cellId : d)) {
    break;
  }
  T--, p = M, M = f.getNearestCellInDirection(M, i);
}
if (n(M.cellId, p ? p.cellId : d)) {
  break;
}
if (T <= 0 && p) {
  return y = new v(e.actorId, 0, 0, r, p.cellId), u.push(y), m = this.hasPathAMark(e, d, p.cellId, i, o), m && (y.marks = m.marks, y.newCellId = m.cellId), u;
}
if (_ = s(b.cellId, t, i), m = this.hasPathAMark(e, b.cellId, _, i, o)) {
  return A.marks = m.marks, A.newCellId = m.cellId, A.force = 0, u;
}
for (var E = 0; E < t && (0 === E ? (p = b, M = f.getNearestCellInDirection(b, i)) : M && (p = M, M = f.getNearestCellInDirection(M, i)), M); E++) {
  var N = s(b.cellId, t, i);
  if (n(M.cellId, p.cellId)) {
    C = g.getActorOnCell(M.cellId);
    var x = !1;
    if (C) {
      x = this.isEntityInSpellZone(C.actorId, o);
      var L = l(C);
      if (L) {
        _ = s(M.cellId, t, i);
        var O = a(M.cellId, _, i),
          R = this.hasPathAMark(C, M.cellId, _, i, o);
        if (x && !O && !R) {
          A.newCellId = _, A.force = 0;
          break;
        }
      }
      if (y = c(C.actorId), y ? (y.pushedIndexes.push(S), y.newCellId = M.cellId) : (y = new v(C.actorId, S, t, r, M.cellId), y.pushingEntity = u[0], u.push(y)), S++, !L) {
        break;
      }
    } else if (0 === E) {
      A.newCellId = p.cellId;
      break;
    }
    if (!x) {
      var D = f.getNearestCellInDirection(M, i);
      if (D && !n(D.cellId, M.cellId)) {
        break;
      }
    }
  } else {
    E === t - 1 || C && C.actorId !== e.actorId || !a(M.cellId, N, i) ? a(b.cellId, N, i) || (A.force = 0) : I && I.indexOf(M.cellId) === -1 && (A.newCellId = M.cellId, I.push(M.cellId));
  }
  if (0 === A.force || A.mark) {
    break;
  }
}
if (n(M.cellId, p.cellId)) {
  C = g.getActorOnCell(M.cellId);
  var x = !1;
  if (C) {
    x = this.isEntityInSpellZone(C.actorId, o);
    var L = l(C);
    if (L) {
      _ = s(M.cellId, t, i);
      var O = a(M.cellId, _, i),
        R = this.hasPathAMark(C, M.cellId, _, i, o);
      if (x && !O && !R) {
        A.newCellId = _, A.force = 0;
        break;
      }
    }
    if (y = c(C.actorId), y ? (y.pushedIndexes.push(S), y.newCellId = M.cellId) : (y = new v(C.actorId, S, t, r, M.cellId), y.pushingEntity = u[0], u.push(y)), S++, !L) {
      break;
    }
  } else if (0 === E) {
    A.newCellId = p.cellId;
    break;
  }
  if (!x) {
    var D = f.getNearestCellInDirection(M, i);
    if (D && !n(D.cellId, M.cellId)) {
      break;
    }
  }
} else {
  E === t - 1 || C && C.actorId !== e.actorId || !a(M.cellId, N, i) ? a(b.cellId, N, i) || (A.force = 0) : I && I.indexOf(M.cellId) === -1 && (A.newCellId = M.cellId, I.push(M.cellId));
}
if (C) {
  x = this.isEntityInSpellZone(C.actorId, o);
  var L = l(C);
  if (L) {
    _ = s(M.cellId, t, i);
    var O = a(M.cellId, _, i),
      R = this.hasPathAMark(C, M.cellId, _, i, o);
    if (x && !O && !R) {
      A.newCellId = _, A.force = 0;
      break;
    }
  }
  if (y = c(C.actorId), y ? (y.pushedIndexes.push(S), y.newCellId = M.cellId) : (y = new v(C.actorId, S, t, r, M.cellId), y.pushingEntity = u[0], u.push(y)), S++, !L) {
    break;
  }
} else if (0 === E) {
  A.newCellId = p.cellId;
  break;
}
if (L) {
  _ = s(M.cellId, t, i);
  var O = a(M.cellId, _, i),
    R = this.hasPathAMark(C, M.cellId, _, i, o);
  if (x && !O && !R) {
    A.newCellId = _, A.force = 0;
    break;
  }
}
if (x && !O && !R) {
  A.newCellId = _, A.force = 0;
  break;
}
if (y = c(C.actorId), y ? (y.pushedIndexes.push(S), y.newCellId = M.cellId) : (y = new v(C.actorId, S, t, r, M.cellId), y.pushingEntity = u[0], u.push(y)), S++, !L) {
  break;
}
if (0 === E) {
  A.newCellId = p.cellId;
  break;
}
if (!x) {
  var D = f.getNearestCellInDirection(M, i);
  if (D && !n(D.cellId, M.cellId)) {
    break;
  }
}
if (D && !n(D.cellId, M.cellId)) {
  break;
}
if (0 === A.force || A.mark) {
  break;
}
if (P > 0) {
  for (w = 0; w < u.length; w++) {
    u[w].force -= P;
  }
}
for (w = 0; w < u.length; w++) {
  u[w].force -= P;
}
for (s = 0; s < i.length; s++) {
  var d = i[s];
  if (d.isDirectEffect() && d.effectId === y.ACTION_CHARACTER_PULL) {
    c = s, a = d;
    break;
  }
}
if (d.isDirectEffect() && d.effectId === y.ACTION_CHARACTER_PULL) {
  c = s, a = d;
  break;
}
if (t && c !== -1 && c < r && l(h)) {
  var p = a.diceNum,
    m = this.getVirtualCellFromRealCell(t.data.disposition.cellId),
    g = f.fromCellId(m),
    _ = f.fromCellId(e),
    v = g,
    w = f.advancedOrientationTo(_, g, {
      fourDir: !1
    }),
    b = 0;
  for (s = 0; s < p; s++) {
    var M = f.getNearestCellInDirection(v, w);
    if (!M || n(M.cellId, v.cellId)) {
      break;
    }
    b++, v = M;
  }
  return u - b;
}
for (s = 0; s < p; s++) {
  var M = f.getNearestCellInDirection(v, w);
  if (!M || n(M.cellId, v.cellId)) {
    break;
  }
  b++, v = M;
}
if (!M || n(M.cellId, v.cellId)) {
  break;
}
for (var s, r = f.fromCellId(t); r.cellId !== i && (s = r, r = f.getNearestCellInDirection(r, o));) {
  var l = g.getActorOnCell(r.cellId),
    c = l && this.isEntityInSpellZone(l.actorId, a) && !this.hasPathAMark(l, r.cellId, i, o, a);
  if (n(r.cellId, s.cellId) && !c) {
    break;
  }
  var d = this.getMarksCell(e.actorId, r.cellId);
  if (d.length) {
    return {
      marks: d,
      cellId: r.cellId
    };
  }
}
if (n(r.cellId, s.cellId) && !c) {
  break;
}
if (d.length) {
  return {
    marks: d,
    cellId: r.cellId
  };
}
if (!r || !o || !i || i.length <= 0) {
  return void this.hide();
}
if (u.createChild("div", {
  className: "shieldPoints",
  text: "+ " + l
}), u.createChild("div", {
  className: ["iconDamageTooltip", "iconShieldPoints"]
}), u.toggleDisplay(l > 0), c.appendChild(this._damageDataToDom(i)), this.insideConfirmBox) {
  return this.hide(), void window.foreground.confirmBox.changeDamage(c);
}
for (var t = new a("div"), i = 0; i < e.length; i++) {
  var n = e[i],
    o = t.createChild("div");
  o.setStyles({
    color: n.color
  }), o.setHtml(n.content);
}
for (var o = 0, a = e.length; o < a; o++) {
  var s = e[o];
  if (!s.hidden) {
    var r = {
      index: o,
      value: s.value
    };
    s.disabled && (r.disabled = !0), this._addEntry(s.text, r);
  }
}
if (!s.hidden) {
  var r = {
    index: o,
    value: s.value
  };
  s.disabled && (r.disabled = !0), this._addEntry(s.text, r);
}
if (o < a.height && e.top > .6 * s.screenHeight) {
  var r = e.top - 5;
  o = Math.min(a.height, r - p), n = r - o;
}
for (var t in this.markers) {
  var i = this.markers[t];
  i.setVisibility(e);
}
for (var t in this.markers) {
  var i = this.markers[t];
  i.prepareRendering(), i.isVisible() && e.push(i);
}
for (var n = 0; n < e.length; n++) {
  e[n].render(this._withFlashyAnim);
}
if (!r.autoGpsPhoenixes) {
  for (var e in this.markers) {
    var t = this.markers[e];
    "phoenix" === t.getArrowType() && t.setVisibility(!1);
  }
}
for (var e in this.markers) {
  var t = this.markers[e];
  "phoenix" === t.getArrowType() && t.setVisibility(!1);
}
for (e in this.markers) {
  if (t = this.markers[e], "phoenix" === t.getArrowType()) {
    t.setVisibility(!1);
    var o = t.getDistance();
    o < n ? (n = o, i = [e]) : o === n && i.push(e);
  }
}
if (t = this.markers[e], "phoenix" === t.getArrowType()) {
  t.setVisibility(!1);
  var o = t.getDistance();
  o < n ? (n = o, i = [e]) : o === n && i.push(e);
}
for (var a = 0; a < i.length; a++) {
  t = this.markers[i[a]], t.setVisibility(!0);
}
if (!(e.length < 2)) {
  n = n || o, e.sort(t);
  var r,
    l = [],
    c = null,
    d = !0,
    u = null;
  for (r = 0; r < e.length; r++) {
    u = new i(e[r].getAngle(), u), l.push(u), c = c || u, d = d && u.distance(c) < n;
  }
  if (d) {
    if (e[e.length - 1].getAngle() - e[0].getAngle() > n) {
      for (r = 1; r < e.length; r++) {
        if (e[r].getAngle() - e[0].getAngle() > n) {
          l[r - 1].right = null, l[r].left = null;
          break;
        }
      }
      l[0].left = u, u.right = l[0];
    }
  } else {
    l[0].left = u, u.right = l[0];
  }
  for (var h = 1 / 0, p = a * e.length, m = 0; h > p && !(++m >= s);) {
    for (h = 0, r = 0; r < l.length; r++) {
      l[r].updateForces(n);
    }
    for (r = 0; r < l.length; r++) {
      h += l[r].updateValue();
    }
  }
  for (r = 0; r < e.length; r++) {
    e[r].setCorrectedAngle(l[r].value);
  }
}
for (r = 0; r < e.length; r++) {
  u = new i(e[r].getAngle(), u), l.push(u), c = c || u, d = d && u.distance(c) < n;
}
if (d) {
  if (e[e.length - 1].getAngle() - e[0].getAngle() > n) {
    for (r = 1; r < e.length; r++) {
      if (e[r].getAngle() - e[0].getAngle() > n) {
        l[r - 1].right = null, l[r].left = null;
        break;
      }
    }
    l[0].left = u, u.right = l[0];
  }
} else {
  l[0].left = u, u.right = l[0];
}
if (e[e.length - 1].getAngle() - e[0].getAngle() > n) {
  for (r = 1; r < e.length; r++) {
    if (e[r].getAngle() - e[0].getAngle() > n) {
      l[r - 1].right = null, l[r].left = null;
      break;
    }
  }
  l[0].left = u, u.right = l[0];
}
for (r = 1; r < e.length; r++) {
  if (e[r].getAngle() - e[0].getAngle() > n) {
    l[r - 1].right = null, l[r].left = null;
    break;
  }
}
if (e[r].getAngle() - e[0].getAngle() > n) {
  l[r - 1].right = null, l[r].left = null;
  break;
}
for (var h = 1 / 0, p = a * e.length, m = 0; h > p && !(++m >= s);) {
  for (h = 0, r = 0; r < l.length; r++) {
    l[r].updateForces(n);
  }
  for (r = 0; r < l.length; r++) {
    h += l[r].updateValue();
  }
}
for (h = 0, r = 0; r < l.length; r++) {
  l[r].updateForces(n);
}
for (r = 0; r < l.length; r++) {
  h += l[r].updateValue();
}
for (r = 0; r < e.length; r++) {
  e[r].setCorrectedAngle(l[r].value);
}
if (!e) {
  return 1 / 0;
}
if (!this._isVisible) {
  return void (this._markerDom && this.remove());
}
if (this._isVisible) {
  var t = null;
  this._markerDom ? t = s.MOVE : (this._markerDom = new a(this._compass, this._arrowType || this._id, this._tooltip), t = e ? s.APPEAR_CENTER : s.APPEAR), this._markerDom.updateDisplay(this._angle, this._distance, t);
}
if (o && (this._createDom(), this._attachToDom()), 0 === this._distance) {
  if (this._isOnSameMap) {
    return;
  }
  return this._startAppearSameMapTransition(o);
}
if (this._isOnSameMap) {
  return;
}
if (this._isOnSameMap) {
  return this._startLeaveSameMapTransition();
}
if (Math.abs(n) >= h) {
  return this._startWideMoveTransition();
}
if (s || (s = new u({
  actor: "ui.shield.tutorialNPC"
}), s.allowDomEvents(), s.on("dom.touchstart", o), s.setCloseButton(), s.open()), "string" == typeof e) {
  var t = new p("span");
  t.setHtml(e), e = t;
}
if ("equipment" === i) {
  e._shieldSelected = !1, e._isQuestFilter = !1, e._isContextMenuOpen = !1;
} else if ("shieldWindow" === i) {
  e._isContextMenuOpen = !1, e._isShieldSpellDisplayed = !1, e._isRuneSelected = !1;
  var n = c.getWindow("shieldWindow");
  e._isShieldWindowOpened || (n.getShieldSpellSlot().on("tooltipOut", e.shieldSpellSlotHandler), e._isShieldWindowOpened = !0);
}
if ("shieldWindow" === i) {
  e._isContextMenuOpen = !1, e._isShieldSpellDisplayed = !1, e._isRuneSelected = !1;
  var n = c.getWindow("shieldWindow");
  e._isShieldWindowOpened || (n.getShieldSpellSlot().on("tooltipOut", e.shieldSpellSlotHandler), e._isShieldWindowOpened = !0);
}
if (this._hideArrows(), e.isOnShieldTutorial() && !e.isShieldTutorialFortified()) {
  var t = this;
  switch (c.getLastFocusedWindowId()) {
    case "confirm":
      break;
    case "shieldWindow":
      if (this._isRuneSelected && this._isShieldSpellDisplayed) {
        a(m("ui.shield.tutorialStep6")), d.pointToShieldValidateButton();
        break;
      }
      if (this._isShieldSpellDisplayed) {
        a(m("ui.shield.tutorialStep5")), d.pointToShieldStorageFirstSlotBox();
        break;
      }
      a(m("ui.shield.tutorialStep4")), d.pointToShieldSpellSlot();
      break;
    case "equipment":
      if (this._isContextMenuOpen) {
        d.pointToEntryManageShield();
        break;
      }
      if (this._shieldSelected) {
        o(), d.pointToActionButton();
        break;
      }
      if (this._isQuestFilter) {
        a(m("ui.shield.tutorialStep3")), d.pointToStorageFirstSlotBox();
        break;
      }
      a(m("ui.shield.tutorialStep2")), d.pointToQuestFilterIcon();
      break;
    default:
      a(m("ui.shield.tutorialStep1")), t._shieldSelected = !1, t._isQuestFilter = !1, d.pointToMenuIcon("Bag");
  }
}
if (this._isRuneSelected && this._isShieldSpellDisplayed) {
  a(m("ui.shield.tutorialStep6")), d.pointToShieldValidateButton();
  break;
}
if (this._isShieldSpellDisplayed) {
  a(m("ui.shield.tutorialStep5")), d.pointToShieldStorageFirstSlotBox();
  break;
}
if (this._isContextMenuOpen) {
  d.pointToEntryManageShield();
  break;
}
if (this._shieldSelected) {
  o(), d.pointToActionButton();
  break;
}
if (this._isQuestFilter) {
  a(m("ui.shield.tutorialStep3")), d.pointToStorageFirstSlotBox();
  break;
}
if (!this._hasAlreadyHaveCloseButton) {
  var e = this._header.appendChild(new r("div", {
    className: "tutorialPopupCloseBtn"
  }));
  e.appendChild(new r("div", {
    className: "btnIcon"
  })), this._hasAlreadyHaveCloseButton = !0;
}
if (t) {
  for (var i = C[e], o = n(i.trigger), a = A[o], s = a.eventsList || [], r = 0; r < s.length; r += 1) {
    var l = s[r];
    l.listener.removeListener(l.eventId, t);
  }
  delete S[e];
}
for (var i = C[e], o = n(i.trigger), a = A[o], s = a.eventsList || [], r = 0; r < s.length; r += 1) {
  var l = s[r];
  l.listener.removeListener(l.eventId, t);
}
for (var e = Object.keys(S), t = 0; t < e.length; t += 1) {
  var i = e[t];
  o(i);
}
for (var e = 0; e < E.length; e += 1) {
  window.gui.notificationBar.removeNotification(E[e]);
}
if (!n.isNotificationOpen(i) && !I[t]) {
  var a = {
    type: n.notificationType.TUTORIAL,
    title: e.titleId,
    wuidom: w.process(e.messageId),
    onClose: function () {
      window.dofus.sendMessage("NotificationUpdateFlagMessage", {
        index: t
      }), I[t] = !0, r(i);
    }
  };
  n.newNotification(i, a), E.push(i), o(t);
}
for (var e in C) {
  var t = C[e],
    i = n(t.trigger),
    o = A[i];
  if (i && o && !I[e]) {
    if ("GameStart" !== i) {
      for (var a = o.eventsList || [], s = 0; s < a.length; s += 1) {
        var r = a[s],
          c = r.listener,
          d = r.eventId;
        if (!S[e]) {
          var u = o.customFunc || l;
          S[e] = u.bind(null, t);
        }
        var h = S[e];
        c.on(d, h);
      }
    } else {
      l(t);
    }
  }
}
if (i && o && !I[e]) {
  if ("GameStart" !== i) {
    for (var a = o.eventsList || [], s = 0; s < a.length; s += 1) {
      var r = a[s],
        c = r.listener,
        d = r.eventId;
      if (!S[e]) {
        var u = o.customFunc || l;
        S[e] = u.bind(null, t);
      }
      var h = S[e];
      c.on(d, h);
    }
  } else {
    l(t);
  }
}
if ("GameStart" !== i) {
  for (var a = o.eventsList || [], s = 0; s < a.length; s += 1) {
    var r = a[s],
      c = r.listener,
      d = r.eventId;
    if (!S[e]) {
      var u = o.customFunc || l;
      S[e] = u.bind(null, t);
    }
    var h = S[e];
    c.on(d, h);
  }
} else {
  l(t);
}
for (var a = o.eventsList || [], s = 0; s < a.length; s += 1) {
  var r = a[s],
    c = r.listener,
    d = r.eventId;
  if (!S[e]) {
    var u = o.customFunc || l;
    S[e] = u.bind(null, t);
  }
  var h = S[e];
  c.on(d, h);
}
if (!S[e]) {
  var u = o.customFunc || l;
  S[e] = u.bind(null, t);
}
for (var i = t.results || [], n = 0; n < i.length; n += 1) {
  var o = i[n];
  if (o.id === window.gui.playerData.id && o.outcome === v.RESULT_VICTORY) {
    return l(e);
  }
}
if (o.id === window.gui.playerData.id && o.outcome === v.RESULT_VICTORY) {
  return l(e);
}
for (var i = t.actors || [], n = 0; n < i.length; n += 1) {
  if ("GameRolePlayGroupMonsterInformations" === i[n]._type) {
    return l(e);
  }
}
if ("GameRolePlayGroupMonsterInformations" === i[n]._type) {
  return l(e);
}
for (var t = 0; t < e.length; t += 1) {
  for (var i = e[t], n = 0; n < 32; n += 1) {
    I[n + 32 * t] = !!(1 & i), i >>= 1;
  }
}
for (var i = e[t], n = 0; n < 32; n += 1) {
  I[n + 32 * t] = !!(1 & i), i >>= 1;
}
if (e) {
  return console.error(e);
}
for (var i in e) {
  t._addItem(e[i]);
}
for (var i in e) {
  t._addItem(e[i]);
}
for (var i in e) {
  t._removeItem(e[i]);
}
if (o(e)) {
  var t = e.objectUID,
    i = this._itemSlotMap[t];
  i || (i = this._itemSlotMap[t] = new r({
    itemData: e,
    enableContextMenu: !1,
    descriptionOptions: {
      averagePrice: !1,
      showCategory: !1,
      showWeight: !1
    }
  }), this.itemSlotBox.appendChild(i), this.show(), this.emit("resized"));
}
if (i) {
  return i.setEndTime(t), void this._refreshDisplay();
}
if (!(t - h.now() < 0)) {
  i = this._timedBuffMap[e] = new l(e, t);
  var n = this;
  i.on("onTimerFinished", function () {
    delete n._timedBuffMap[e], n.timedBuffSlotBox.removeChild(i), n._refreshDisplay();
  }), this.timedBuffSlotBox.appendChild(i), this.show(), this._refreshDisplay();
}
if (e < 0) {
  return void this._onFinished();
}
if (t.text = a.processText.apply(null, [t.text].concat(t.parameters)), "ADMIN_DEBUG" === t.parameters[0]) {
  return console.warn(t.text);
}
if (t !== this.previousConvertedKamaAmount) {
  return this.previousConvertedKamaAmount = null, !0;
}
for (var e in p) {
  this.lockStatus[e] = {
    base: null,
    customLockedReasons: null,
    windowId: p[e].windowId,
    tabId: p[e].tabId
  };
}
if (!this.lockStatus[e] || !this.lockStatus[e].customLockedReasons) {
  return -1;
}
for (var i = 0; i < this.lockStatus[e].customLockedReasons.length; i++) {
  if (this.lockStatus[e].customLockedReasons[i].id === t) {
    return i;
  }
}
if (this.lockStatus[e].customLockedReasons[i].id === t) {
  return i;
}
for (var e in p) {
  this.updateFeatureId(e);
}
for (var n in this.lockStatus) {
  if (i.lockStatus.hasOwnProperty(n)) {
    var o = i.lockStatus[n];
    if (o.windowId === e && (!t || t && o.tabId === t)) {
      return i.isFeatureLocked(n);
    }
  }
}
if (i.lockStatus.hasOwnProperty(n)) {
  var o = i.lockStatus[n];
  if (o.windowId === e && (!t || t && o.tabId === t)) {
    return i.isFeatureLocked(n);
  }
}
if (o.windowId === e && (!t || t && o.tabId === t)) {
  return i.isFeatureLocked(n);
}
for (var t in p) {
  var i = p[t];
  if (i.menuButtonId === e) {
    return t;
  }
}
if (i.menuButtonId === e) {
  return t;
}
if (i) {
  if (this.lockStatus[i].base && p[i].lockedReasonDescription) {
    if ("Spouse" === e) {
      var n = window.gui.playerData.characterBaseInformations.sex;
      t.push(l(p[i].lockedReasonDescription, n));
    } else {
      t.push(l(p[i].lockedReasonDescription));
    }
  }
  if (this.lockStatus[i].customLockedReasons) {
    for (var o = this.lockStatus[i].customLockedReasons, a = 0; a < o.length; a++) {
      t.push(o[a].description);
    }
  }
} else {
  console.error(new Error("UiLocker.getMenuButtonLockedReason: no feature is matching the menuButtonId" + e));
}
if (this.lockStatus[i].base && p[i].lockedReasonDescription) {
  if ("Spouse" === e) {
    var n = window.gui.playerData.characterBaseInformations.sex;
    t.push(l(p[i].lockedReasonDescription, n));
  } else {
    t.push(l(p[i].lockedReasonDescription));
  }
}
if ("Spouse" === e) {
  var n = window.gui.playerData.characterBaseInformations.sex;
  t.push(l(p[i].lockedReasonDescription, n));
} else {
  t.push(l(p[i].lockedReasonDescription));
}
if (this.lockStatus[i].customLockedReasons) {
  for (var o = this.lockStatus[i].customLockedReasons, a = 0; a < o.length; a++) {
    t.push(o[a].description);
  }
}
for (var o = this.lockStatus[i].customLockedReasons, a = 0; a < o.length; a++) {
  t.push(o[a].description);
}
for (var i in p) {
  var n = p[i];
  if (n.windowId === e && n.tabId === t) {
    return this.isFeatureAvailable(i);
  }
}
if (n.windowId === e && n.tabId === t) {
  return this.isFeatureAvailable(i);
}
if (!o) {
  return console.error(new Error("UiLocker._setStatus: featureId " + e + " unknown"));
}
if (i) {
  var l = -1;
  if (s.customLockedReasons && (l = this._getCustomReasonIndex(e, i)), t) {
    if (l === -1) {
      s.customLockedReasons || (s.customLockedReasons = []);
      var c = {
        id: i,
        description: n
      };
      s.customLockedReasons.push(c);
    }
  } else {
    l !== -1 && (s.customLockedReasons.splice(l, 1), 0 === s.customLockedReasons.length && (s.customLockedReasons = null)), s.base = o.evaluateCurrent();
  }
} else {
  s.base = t;
}
if (s.customLockedReasons && (l = this._getCustomReasonIndex(e, i)), t) {
  if (l === -1) {
    s.customLockedReasons || (s.customLockedReasons = []);
    var c = {
      id: i,
      description: n
    };
    s.customLockedReasons.push(c);
  }
} else {
  l !== -1 && (s.customLockedReasons.splice(l, 1), 0 === s.customLockedReasons.length && (s.customLockedReasons = null)), s.base = o.evaluateCurrent();
}
if (l === -1) {
  s.customLockedReasons || (s.customLockedReasons = []);
  var c = {
    id: i,
    description: n
  };
  s.customLockedReasons.push(c);
}
for (var i in this.lockStatus) {
  this.lockStatus.hasOwnProperty(i) && this.lockFeature(i, e, t);
}
for (var n in this.lockStatus) {
  this.lockStatus.hasOwnProperty(n) && (e.indexOf(n) < 0 ? this.lockFeature(n, t, i) : this.unlockFeature(n, t));
}
if (!e) {
  return console.error(new Error("UiLocker.unlockAllFeatures: a reasonKey is required to unlock features"));
}
for (var t in this.lockStatus) {
  this.lockStatus.hasOwnProperty(t) && this.unlockFeature(t, e);
}
if (!this.enableLookAllObjects && e.position !== D) {
  return !1;
}
if (0 === t) {
  return !1;
}
if (this.filteringOptions.usable && !e.item.usable) {
  return !1;
}
if (!this.filterCategories[i]) {
  return !1;
}
if (i !== this.filteringOptions.filterId && o) {
  return !1;
}
if (e.item.typeId !== this.filteringOptions.subFilterId && a) {
  return !1;
}
if (n && e.isFullSoulStone()) {
  for (var s = 0; s < e.effects.length; s++) {
    if (m.simplifyString(e.effects[s].description).indexOf(n) !== -1) {
      return !0;
    }
  }
}
for (var s = 0; s < e.effects.length; s++) {
  if (m.simplifyString(e.effects[s].description).indexOf(n) !== -1) {
    return !0;
  }
}
if (m.simplifyString(e.effects[s].description).indexOf(n) !== -1) {
  return !0;
}
for (var i in g.categories) {
  this.filterCategories[g.categories[i]] = !0;
}
for (var o = 0; o < e.length; o++) {
  var a = e[o],
    s = P[a] || l,
    r = s(i, n, a, t);
  if (0 !== r) {
    return "ASC" === t ? r : -r;
  }
}
if (0 !== r) {
  return "ASC" === t ? r : -r;
}
if (i.slotsPerPage) {
  var n = Math.ceil(this.displayedSlotCount / i.slotsPerPage) || 1;
  (n !== this.pageCount || t) && (this.pageCount = n, this._displayPage(0, t), this.pagination.setPageCount(n));
}
if (!e) {
  return !1;
}
if (r <= 0) {
  return !1;
}
if (i.dragSourceData.source = this.id, n.tapSelectedEmitsDoubleTap = t.tapSelectedEmitsDoubleTap, n.prepareForDragFunction = t.prepareForDragFunction, i._disconneting = !1, i.contextParams = t.contextParams || {}, i.enableAveragePrice = !t.hasOwnProperty("enableAveragePrice") || t.enableAveragePrice, i.enableSlotContext = !t.hasOwnProperty("enableSlotContext") || t.enableSlotContext, i.noExtraMargin = Boolean(t.noExtraMargin), i.domIsCreated || (i._createDom(), i.domIsCreated = !0), i.contentInitiated || i._spinner.addSpinner("loading"), i.averagePrice.toggleDisplay(!!i.enableAveragePrice), t.manualOpening || e.windowBody.appendChild(i.storageUI), e.availableSlotBoxWidth ? i._updatePageSystem() : i.slotsBox.hide(), i.currentOpenedWindow !== i.lastOpenedWindow) {
  i.leftArrow.toggleDisplay(!!t.leftArrow), i.rightArrow.toggleDisplay(!!t.rightArrow), i.slotsMask.toggleClassName("hoverable", !!t.showHoverFrame);
  var o;
  if (!i.listUpdateRequested) {
    for (o in i.slotList) {
      var a = i.slotList[o];
      a.data && (i.contextParams.item = a.data, a.setContextMenu("item", i.contextParams), a.enableContextMenu(!!i.enableSlotContext));
    }
  }
  i._itemFilter.setAvailableCategories(t.filters);
}
if (!i.listUpdateRequested) {
  for (o in i.slotList) {
    var a = i.slotList[o];
    a.data && (i.contextParams.item = a.data, a.setContextMenu("item", i.contextParams), a.enableContextMenu(!!i.enableSlotContext));
  }
}
for (o in i.slotList) {
  var a = i.slotList[o];
  a.data && (i.contextParams.item = a.data, a.setContextMenu("item", i.contextParams), a.enableContextMenu(!!i.enableSlotContext));
}
for (var s = 0, r = this._filters.length; s < r; s += 1) {
  var l = this._filters[s];
  if (!l.call(this, e, t, i, n, o, a)) {
    return !1;
  }
}
if (!l.call(this, e, t, i, n, o, a)) {
  return !1;
}
if (!t) {
  if (this.currentPage === e || !this.currentOpenedWindow) {
    return;
  }
  if (e < 0 || e > this.pageCount - 1) {
    return;
  }
}
if (this.currentPage === e || !this.currentOpenedWindow) {
  return;
}
if (e < 0 || e > this.pageCount - 1) {
  return;
}
for (var t = 0, i = e.length; t < i; t += 1) {
  this._filters.push(e[t]);
}
for (var t in this._filteredItemList) {
  var i = this.itemList[t];
  if (i) {
    var n = i.getItem();
    if (n) {
      var o = n.averagePrice === -1 ? 0 : n.averagePrice;
      e += o * this.itemsQuantityList[t];
    } else {
      console.error(new Error("no item ref for " + (i.id || i.objectGID) + ", is an instance? " + i.isItemInstance + ", is yet initialised? " + i.isInitialised));
    }
  }
}
if (i) {
  var n = i.getItem();
  if (n) {
    var o = n.averagePrice === -1 ? 0 : n.averagePrice;
    e += o * this.itemsQuantityList[t];
  } else {
    console.error(new Error("no item ref for " + (i.id || i.objectGID) + ", is an instance? " + i.isItemInstance + ", is yet initialised? " + i.isInitialised));
  }
}
if (n) {
  var o = n.averagePrice === -1 ? 0 : n.averagePrice;
  e += o * this.itemsQuantityList[t];
} else {
  console.error(new Error("no item ref for " + (i.id || i.objectGID) + ", is an instance? " + i.isItemInstance + ", is yet initialised? " + i.isInitialised));
}
for (var t in this._filteredItemList) {
  var i = this._filteredItemList[t];
  if (i.position === D && this.itemsQuantityList[t] > 0) {
    if (!i.item) {
      console.error(new Error('Missing the property "item" for itemInstance: ' + i.id));
      continue;
    }
    e[i.item.typeId] = !0;
  }
}
if (i.position === D && this.itemsQuantityList[t] > 0) {
  if (!i.item) {
    console.error(new Error('Missing the property "item" for itemInstance: ' + i.id));
    continue;
  }
  e[i.item.typeId] = !0;
}
if (!i.item) {
  console.error(new Error('Missing the property "item" for itemInstance: ' + i.id));
  continue;
}
if (t) {
  var i = this.filteringOptions.search ? m.simplifyString(this.filteringOptions.search) : null,
    n = this.filteringOptions.filterId !== v.filters.all,
    o = this.filteringOptions.subFilterId !== v.subFilters.all,
    a = g.getItemTypeMap(),
    s = a[e.item.typeId].category,
    r = this.itemsQuantityList[e.objectUID],
    l = r && this._filter(e, r, s, i, n, o);
  this._setDisplayedSlotCount(i, n, o), t.isVisible() && (this.displayedSlotCount -= 1), l ? this.displayedSlotCount += 1 : this.unSelectSlot(e.objectUID), this._updatePageSystem(), this.enableAveragePrice && this._updateAveragePrice();
}
for (var o in this.itemList) {
  var a = this.itemList[o];
  if (a.isInitialised) {
    var s = n[a.item.typeId].category,
      r = this._filter(a, this.itemsQuantityList[o], s, e, t, i);
    r ? (this.displayedSlotCount += 1, this._filteredItemList[o] = a) : this.unSelectSlot(a.objectUID);
  }
}
if (a.isInitialised) {
  var s = n[a.item.typeId].category,
    r = this._filter(a, this.itemsQuantityList[o], s, e, t, i);
  r ? (this.displayedSlotCount += 1, this._filteredItemList[o] = a) : this.unSelectSlot(a.objectUID);
}
for (var e = [], t = this._sortedItemList, i = 0; i < t.length; i += 1) {
  var n = parseInt(t[i], 10);
  e.push(n);
}
if (!t || !t.slotsPerPage) {
  return void (this.slotToShow = e);
}
for (var i = this.slotsBox.getChildren(), n = 0, o = 0; o < i.length; o++) {
  var a = i[o];
  if (a.isVisible()) {
    if (a === e) {
      return void this._displayPage(~~(n / t.slotsPerPage));
    }
    n++;
  }
}
if (a.isVisible()) {
  if (a === e) {
    return void this._displayPage(~~(n / t.slotsPerPage));
  }
  n++;
}
if (a === e) {
  return void this._displayPage(~~(n / t.slotsPerPage));
}
if (i) {
  var n = this._filteredItemList,
    o = this,
    a = this.slotsBox.getChildren();
  a.forEach(function (e) {
    o.slotsBox.rootElement && e && o.slotsBox.removeChild(e);
  });
  var s = i._storageViewer;
  if (e && n) {
    this.sortingCriterias = e, this.sortingOrder = t;
    var r = Object.keys(n).sort(function (i, o) {
      return c(e, t, n[i], n[o]);
    });
    this._sortedItemList = r;
    for (var l = this.currentPage ? this.currentPage * s.slotsPerPage : 0, d = this.pageCount > this.currentPage && r.length > s.slotsPerPage ? (this.currentPage + 1) * s.slotsPerPage : r.length, u = l; u < d; u += 1) {
      var h = this.slotList[r[u]];
      if (!h) {
        var p = parseInt(r[u], 10),
          m = this.itemList[p];
        if (!m) {
          continue;
        }
        this.slotList[p] = this._createSlot(m), this.itemsQuantityList[p] = m.quantity, h = this.slotList[r[u]];
      }
      this.slotsBox.appendChild(h);
    }
    this._spinner.removeSpinner("sorting"), this._getAvailableSpaceAndUpdatePageSystem(), this._showTagBar();
  }
}
if (e && n) {
  this.sortingCriterias = e, this.sortingOrder = t;
  var r = Object.keys(n).sort(function (i, o) {
    return c(e, t, n[i], n[o]);
  });
  this._sortedItemList = r;
  for (var l = this.currentPage ? this.currentPage * s.slotsPerPage : 0, d = this.pageCount > this.currentPage && r.length > s.slotsPerPage ? (this.currentPage + 1) * s.slotsPerPage : r.length, u = l; u < d; u += 1) {
    var h = this.slotList[r[u]];
    if (!h) {
      var p = parseInt(r[u], 10),
        m = this.itemList[p];
      if (!m) {
        continue;
      }
      this.slotList[p] = this._createSlot(m), this.itemsQuantityList[p] = m.quantity, h = this.slotList[r[u]];
    }
    this.slotsBox.appendChild(h);
  }
  this._spinner.removeSpinner("sorting"), this._getAvailableSpaceAndUpdatePageSystem(), this._showTagBar();
}
for (var l = this.currentPage ? this.currentPage * s.slotsPerPage : 0, d = this.pageCount > this.currentPage && r.length > s.slotsPerPage ? (this.currentPage + 1) * s.slotsPerPage : r.length, u = l; u < d; u += 1) {
  var h = this.slotList[r[u]];
  if (!h) {
    var p = parseInt(r[u], 10),
      m = this.itemList[p];
    if (!m) {
      continue;
    }
    this.slotList[p] = this._createSlot(m), this.itemsQuantityList[p] = m.quantity, h = this.slotList[r[u]];
  }
  this.slotsBox.appendChild(h);
}
if (!h) {
  var p = parseInt(r[u], 10),
    m = this.itemList[p];
  if (!m) {
    continue;
  }
  this.slotList[p] = this._createSlot(m), this.itemsQuantityList[p] = m.quantity, h = this.slotList[r[u]];
}
if (!m) {
  continue;
}
for (var e in this.itemList) {
  var t = this.itemsQuantityList[e] = this.itemList[e].quantity;
  this.slotList[e] && this.slotList[e].setQuantity(t);
}
for (var t in this.itemList) {
  var i = this.itemList[t];
  this.itemsQuantityList[t] = i.quantity;
}
if (this.contentInitiated) {
  var t = e.objectUID,
    i = this.slotList[t];
  i && (this.unSelectSlot(t), i.destroy(), delete this.slotList[t]), this.slotList[t] = this._createSlot(e), this.itemList[t] = e, this.itemsQuantityList[t] = e.quantity, this._filterItem(e), this.filterList(), this._displayPage(this.currentPage, !0), this.currentOpenedWindow && this.currentOpenedWindow.emit("itemModified", e);
}
if (this.contentInitiated) {
  var t = e.objectUID,
    i = this.slotList[t];
  i || (this.slotList[t] = this._createSlot(e)), this._filterItem(e), this._updateFilter(), this.currentOpenedWindow && this.currentOpenedWindow.emit("itemMoved", e), this.filterList(), this._displayPage(this.currentPage, !0);
}
if (this.itemsQuantityList[e] = t, i && this.contentInitiated) {
  var n = this.slotList[e],
    o = this.itemList[e];
  return n || o ? void (n && (n.setQuantity(t), this._filterItem(this.itemList[e]), this._updateFilter(), this.filterList(), this._displayPage(this.currentPage, !0), this.currentOpenedWindow && this.currentOpenedWindow.emit("itemQuantity", this.itemList[e], t))) : void console.error(new Error("No slot with item UID " + e));
}
if (this.contentInitiated) {
  for (var t in e) {
    var i = this.slotList[t],
      n = this.itemList[t],
      o = e[t];
    if (!i && !n) {
      return void console.error(new Error("No slot with item UID " + t));
    }
    i && (i.setQuantity(o), this.itemsQuantityList[t] = o, this._filterItem(this.itemList[t]));
  }
  this._updateFilter(), this.filterList(), this._displayPage(this.currentPage, !0), this.currentOpenedWindow && this.currentOpenedWindow.emit("itemsQuantity", e);
}
for (var t in e) {
  var i = this.slotList[t],
    n = this.itemList[t],
    o = e[t];
  if (!i && !n) {
    return void console.error(new Error("No slot with item UID " + t));
  }
  i && (i.setQuantity(o), this.itemsQuantityList[t] = o, this._filterItem(this.itemList[t]));
}
if (!i && !n) {
  return void console.error(new Error("No slot with item UID " + t));
}
for (var e in this.itemList) {
  this.resetItemQuantity(e);
}
if (this.contentInitiated) {
  for (var t in e) {
    var i = e[t];
    this._addItem(i), this._filterItem(i);
  }
  this.filterList(), this._displayPage(this.currentPage, !0), this._updateFilter(), this.currentOpenedWindow && this.currentOpenedWindow.emit("itemsAdded", e);
}
for (var t in e) {
  var i = e[t];
  this._addItem(i), this._filterItem(i);
}
if (this.contentInitiated) {
  for (var t = 0, i = e.length; t < i; t += 1) {
    this._removeItem(e[t]);
  }
  this._updateFilter(), this.currentOpenedWindow && this.currentOpenedWindow.emit("itemsRemoved", e), this.filterList(), this._displayPage(this.currentPage, !0);
}
for (var t = 0, i = e.length; t < i; t += 1) {
  this._removeItem(e[t]);
}
for (var t in this.slotList) {
  var i = this.itemList[t];
  if (i.getProperty("id") === e && this._selectSlotAndDisplayPage(this.slotList[t])) {
    return i;
  }
}
if (i.getProperty("id") === e && this._selectSlotAndDisplayPage(this.slotList[t])) {
  return i;
}
if (void 0 === e) {
  return void (this.selectedSlot && (this.selectedSlot.unselect(), this.selectedSlot = null));
}
if ("remove" === t) {
  var s = L.setSlotsBox.selectedSlot && L.setSlotsBox.selectedSlot.preset;
  if (!s) {
    return void console.error(new Error("PresetBox#setDeleteContextMenu: selectedPreset is missing for pos " + n + " mountModel " + o + " type " + a));
  }
  var r = i.getName && i.getName();
  return r ? void A(r, s.presetId, function (t) {
    t === _.YES ? L.saveCustom = !0 : e.setItem(i);
  }) : void console.error(new Error("PresetBox#setDeleteContextMenu: itemNameId is missing for pos " + n + " mountModel " + o + " type " + a));
}
if (!s) {
  return void console.error(new Error("PresetBox#setDeleteContextMenu: selectedPreset is missing for pos " + n + " mountModel " + o + " type " + a));
}
for (var e = 0; e < y; e += 1) {
  var t = L.setSlotsBox.appendChild(new u({
    name: "setSlot" + e
  }));
  d(t), p(t), t.dragUI = {
    width: M,
    height: M,
    onDragClassName: "slot"
  }, l.setDraggable(t, t.dragUI, "presets", {
    type: v
  });
}
for (var e = 0; e < T.length; e += 1) {
  var t = L.setItemSlotsBox.appendChild(new h({
    name: "setItemSlot" + T[e],
    errorIcon: !0
  }));
  t.addClassNames("pos" + T[e]), d(t), m(t);
}
for (var e = [], t = 0; t < b; t += 1) {
  e.push("gfx/presets/small_" + t + ".png");
  var i = L.setIconsBox.appendChild(new u({
    name: "setIconSlot" + t
  }));
  d(i);
}
for (var t = 0; t < e.length; t += 1) {
  var i = L.setIconsBox.getChild("setIconSlot" + t);
  i.setImage(e[t]);
}
for (var e = L.setSlotsBox.getChildren(), t = 0; t < e.length; t += 1) {
  var i = e[t];
  i.preset && L._deleteSet(i.preset.presetId);
}
for (var o in n) {
  L._updateSetSlot(o);
}
if (L.delClassNames("spinner"), i) {
  return e(), N(i);
}
if (L.delClassNames("spinner"), t) {
  return N(t);
}
if (e) {
  for (var t = e.objects || e, i = window.gui.playerData.inventory, n = {}, o = 0; o < t.length; o += 1) {
    var a,
      s = t[o].objUid || t[o].objectUID,
      r = t[o].position;
    if (s) {
      a = i.objects[s];
    } else {
      var l = t[o].objGid;
      a = d.items[l];
    }
    n[r] = a;
  }
  return n;
}
for (var t = e.objects || e, i = window.gui.playerData.inventory, n = {}, o = 0; o < t.length; o += 1) {
  var a,
    s = t[o].objUid || t[o].objectUID,
    r = t[o].position;
  if (s) {
    a = i.objects[s];
  } else {
    var l = t[o].objGid;
    a = d.items[l];
  }
  n[r] = a;
}
if (s) {
  a = i.objects[s];
} else {
  var l = t[o].objGid;
  a = d.items[l];
}
if (!e) {
  return !1;
}
if (e.mountLocation) {
  var t = window.gui.playerData.equippedMount;
  return !t;
}
if (!e) {
  return this._resetItemSlots(this.setItemSlotsBox.getChildren());
}
for (var t = 0; t < w; t += 1) {
  var i = e[t],
    o = this.setItemSlotsBox.getChild("setItemSlot" + t);
  o && (o.unset(), o.delClassNames("unavailable"), i && (i.model ? n(o, i) : o.setItem(i), o.toggleClassName("unavailable", !!this._getIsItemUnavailable(i))));
}
for (var t = 0; t < e.length; t += 1) {
  e[t].unset();
}
if (e) {
  n = e.symbolId, e.mount && (i[C] = t.equippedMount || {
    model: I,
    mountLocation: "placeholder"
  });
} else {
  var o = this.setIconsBox.getChildren(),
    a = this._getNextAvailableSlot(o);
  n = o.indexOf(a);
}
for (var t = this.setSlotsBox.getChildren(), i = 0; i < t.length; i += 1) {
  var n = t[i];
  if (n.preset && n.preset.presetId === e) {
    delete n.preset, n.unset(), l.disableDrag(n), this._resetItemSlots(this.setItemSlotsBox.getChildren());
    break;
  }
}
if (n.preset && n.preset.presetId === e) {
  delete n.preset, n.unset(), l.disableDrag(n), this._resetItemSlots(this.setItemSlotsBox.getChildren());
  break;
}
for (var n in t) {
  t.hasOwnProperty(n) && (i[n] = t[n]);
}
if (o.preset) {
  var s = n[o.preset.symbolId];
  delete s.preset;
}
if (this.saveCustom) {
  for (var c = [], d = [], u = 0; u < i.length; u += 1) {
    var h = i[u].itemInstance;
    if (h) {
      c.push(h.position), d.push(h.objectUID || h.mountLocation && h.id);
    } else {
      var p = i[u].data;
      p && p.mountLocation && (c.push(C), d.push(p.id));
    }
  }
  r = {
    presetId: t.indexOf(o),
    symbolId: n.indexOf(a),
    itemsPositions: c,
    itemsUids: d
  }, l = "InventoryPresetSaveCustomMessage";
} else {
  r = {
    presetId: t.indexOf(o),
    symbolId: n.indexOf(a),
    saveEquipment: this.shouldSaveEquipment
  }, l = "InventoryPresetSaveMessage";
}
for (var c = [], d = [], u = 0; u < i.length; u += 1) {
  var h = i[u].itemInstance;
  if (h) {
    c.push(h.position), d.push(h.objectUID || h.mountLocation && h.id);
  } else {
    var p = i[u].data;
    p && p.mountLocation && (c.push(C), d.push(p.id));
  }
}
if (h) {
  c.push(h.position), d.push(h.objectUID || h.mountLocation && h.id);
} else {
  var p = i[u].data;
  p && p.mountLocation && (c.push(C), d.push(p.id));
}
for (var t = 0; t < e.length; t += 1) {
  var i = e[t];
  if (!i.preset) {
    return i;
  }
}
if (!i.preset) {
  return i;
}
if (t) {
  var i = this._getNextAvailableSlot(this.setIconsBox.getChildren());
  t.emit("tap"), i.emit("tap"), this._confirmIconPopup(function (t) {
    return t !== _.YES ? e.addSetButton.enable() : (e._importSet(), void e._saveSet());
  });
}
if (this._domCreated || this.createDom(), this.message.clearContent(), t = t || {}, this.windowTitle.setText(e.title || l("ui.common.confirm")), this.message.appendChild(c.process(e.message, {
  isNonChat: !0
})), this._buttonYesLabel = e.buttonYesLabel || l("ui.common.yes"), this._buttonYes.setText(this._buttonYesLabel), this._buttonNo.setText(e.buttonNoLabel || l("ui.common.no")), h.height = e.heightPixel || u, s.positionWindow(this.id, h), this.cb = e.cb, this.cb && "function" == typeof this.cb || (console.error(new Error("missing cb")), this.cb = function () {}), this.keepDialog = t.keepDialog, this._buttonNo.toggleDisplay(!e.noDisable), this.closeButton.toggleDisplay(Boolean(e.enableCloseCross)), this._buttonIgnore.toggleDisplay(Boolean(t.ignoreEnable)), e.timer) {
  var n = e.timer;
  this._buttonYes.setText(this._buttonYesLabel + " (" + n + ")"), this._buttonYes.disable();
  var o = setInterval(function () {
    n--, n <= 0 ? (i._buttonYes.setText(i._buttonYesLabel), i._buttonYes.enable(), clearInterval(o)) : i._buttonYes.setText(i._buttonYesLabel + " (" + n + ")");
  }, 1e3);
} else {
  this._buttonYes.enable();
}
if (!this.domCreated) {
  var e = this,
    t = this.windowBody,
    i = t.createChild("div", {
      className: "topDom"
    }),
    n = i.createChild("div", {
      className: "upDownContainer"
    }),
    o = n.appendChild(new r({
      text: "Next cmd",
      className: ["greenButton", "upAndDown"]
    }));
  o.on("tap", function () {
    e.nextCmd();
  });
  var a = n.appendChild(new r({
    text: "Reset",
    className: ["greenButton", "upAndDown"]
  }));
  a.on("tap", function () {
    e._reset();
  });
  var s = n.appendChild(new r({
    text: "Previous cmd",
    className: ["greenButton", "upAndDown"]
  }));
  s.on("tap", function () {
    e.previousCmd();
  }), this.autoScrollCheckbox = n.appendChild(new p("autoscroll", {
    defaultValue: !0
  })), this.autoScrollCheckbox.addClassNames("upAndDown"), this.autoScrollCheckbox.on("change", function (t) {
    e.autoScroll = t;
  });
  var u = i.createChild("form", {
      attr: {
        action: "#_",
        method: "post"
      }
    }),
    m = u.createChild("table", {
      className: "cmdInputBar"
    }),
    f = m.createChild("td"),
    g = this.cmdInput = new l({
      className: "cmdInput",
      attr: {
        id: "cmdInput"
      }
    });
  f.appendChild(g), f = m.createChild("td", {
    className: "buttonSend"
  });
  var _ = this._buttonSend = f.appendChild(new r({
      text: d("ui.social.reportSend"),
      className: ["greenButton"]
    })),
    v = this._preloadBox = t.createChild("div", {
      className: "preloadBox",
      hidden: !0
    });
  this._preloadPB = v.appendChild(new c({
    className: ["preloadPB", "green"]
  })), this._preloadCount = v.createChild("div", {
    className: "preloadCount"
  }), this._preloadPercent = v.createChild("div", {
    className: "preloadPercent"
  }), this._preloadEstimate = v.createChild("div", {
    className: "preloadEstimate"
  }), this.logScroller = t.appendChild(new h({
    className: "logBox"
  })), this.log = this.logScroller.content, _.on("tap", function () {
    var t = g.getValue();
    g.setValue(""), e.runMultipleCommands(t);
  }), g.rootElement.addEventListener("keydown", function (t) {
    if (t) {
      var i = t.keyCode;
      40 === i ? (t.preventDefault(), e.nextCmd()) : 38 === i && (t.preventDefault(), e.previousCmd());
    }
  }), u.rootElement.addEventListener("submit", function (e) {
    e.preventDefault(), _.emit("tap");
  }), this.domCreated = !0;
}
if (t) {
  var i = t.keyCode;
  40 === i ? (t.preventDefault(), e.nextCmd()) : 38 === i && (t.preventDefault(), e.previousCmd());
}
if (!(this.historyPointer < 1)) {
  this.historyPointer -= 1;
  var e = this.history[this.historyPointer];
  this.cmdInput.setValue(e);
}
if (!(this.historyPointer > this.history.length - 1)) {
  this.historyPointer += 1;
  var e = this.history[this.historyPointer] || "";
  this.cmdInput.setValue(e);
}
for (var o, a, s = n.rootElement.getElementsByTagName("a"), r = 0; r < s.length; r++) {
  o = s[r], a = o.href, t(o, a);
}
if (this._createDom(), this.log.getChildCount() > I) {
  var i = this.log.getChildren();
  Array.isArray(i) && i[0] && i[0].destroy();
}
for (var t = e.split(";"), i = 0; i < t.length; i += 1) {
  var n = t[i];
  this.runCommand(n);
}
if (this.logMessage(e, "Command"), "help" === e || "/help" === e || "" === e) {
  return this.logMessage("\n" + this.helpInfo.descriptions.join(""), "Debug"), this.logMessage("<hr/>Client admin commands:", "Debug"), void this.logMessage("\n" + this._adminCmdManager.helpList().join("\n"), "Debug");
}
if (i = this._adminCmdManager.runCommand.apply(this._adminCmdManager, n), !i && window.gui.playerData.isAdmin()) {
  if ("preload" === n[0]) {
    n.shift(), this.cmdInput.disable(), this._buttonSend.disable(), this._preloadBox.show(), this._preloadPB.setValue(0);
    var a = n[0];
    return a = a === N ? x : parseInt(a, 10), E.preloadAreas([a]);
  }
  if ("autotest" === n[0] && o.run) {
    return n.shift(), o.run(n.join(" "));
  }
  if ("gridcolor" === n[0]) {
    return n.shift(), 4 !== n.length ? this.logMessage("4 arguments required: gridcolor [red] [green] [blue] [alpha]", "Debug") : n[0] > 1 ? this.logMessage("Red   component has to be in range [0, 1]", "Debug") : n[1] > 1 ? this.logMessage("Green component has to be in range [0, 1]", "Debug") : n[2] > 1 ? this.logMessage("Blue  component has to be in range [0, 1]", "Debug") : n[3] > 1 ? this.logMessage("Alpha has to be in range [0, 1]", "Debug") : (window.isoEngine.background.setGridColor(n), this.logMessage("Grid color changed!", "Debug"));
  }
  if ("haapi" === n[0]) {
    var s = T.getHaapiConfig();
    return s ? this.logMessage(s.getHostname(), "Debug") : (C.error(new Error("Config is missing.")), this.logMessage("Error: config error", "Error"));
  }
  if ("setanimation" === n[0]) {
    n.shift();
    var r = {
      animationString: n[0],
      direction: n[1]
    };
    return void window.actorManager.userActor.testAnimation(r, function (e) {
      t.logMessage(e, "Debug");
    });
  }
  if ("tutorial" === n[0]) {
    n.shift();
    var l = "Done";
    return 1 !== n.length || "start" !== n[0] ? l = "Wrong parameter, allowed parameters: start" : window.dofus.sendMessage("GuidedModeReturnRequestMessage"), this.logMessage(l, "Debug");
  }
}
if ("preload" === n[0]) {
  n.shift(), this.cmdInput.disable(), this._buttonSend.disable(), this._preloadBox.show(), this._preloadPB.setValue(0);
  var a = n[0];
  return a = a === N ? x : parseInt(a, 10), E.preloadAreas([a]);
}
if ("autotest" === n[0] && o.run) {
  return n.shift(), o.run(n.join(" "));
}
if ("gridcolor" === n[0]) {
  return n.shift(), 4 !== n.length ? this.logMessage("4 arguments required: gridcolor [red] [green] [blue] [alpha]", "Debug") : n[0] > 1 ? this.logMessage("Red   component has to be in range [0, 1]", "Debug") : n[1] > 1 ? this.logMessage("Green component has to be in range [0, 1]", "Debug") : n[2] > 1 ? this.logMessage("Blue  component has to be in range [0, 1]", "Debug") : n[3] > 1 ? this.logMessage("Alpha has to be in range [0, 1]", "Debug") : (window.isoEngine.background.setGridColor(n), this.logMessage("Grid color changed!", "Debug"));
}
if ("haapi" === n[0]) {
  var s = T.getHaapiConfig();
  return s ? this.logMessage(s.getHostname(), "Debug") : (C.error(new Error("Config is missing.")), this.logMessage("Error: config error", "Error"));
}
if ("setanimation" === n[0]) {
  n.shift();
  var r = {
    animationString: n[0],
    direction: n[1]
  };
  return void window.actorManager.userActor.testAnimation(r, function (e) {
    t.logMessage(e, "Debug");
  });
}
if ("tutorial" === n[0]) {
  n.shift();
  var l = "Done";
  return 1 !== n.length || "start" !== n[0] ? l = "Wrong parameter, allowed parameters: start" : window.dofus.sendMessage("GuidedModeReturnRequestMessage"), this.logMessage(l, "Debug");
}
if (!i && window.gui.playerData.isModeratorOrMore() && "setadminmenu" === n[0]) {
  var c = !1,
    d = n[1];
  return c = !d || "help" === d || !window.gui.playerData.adminMenu.setAdminMenuId(d), void (c && (this.logMessage("setadminmenu &lt;menuId&gt;: menuId must be one of the following:", "Debug"), this.logMessage(window.gui.playerData.adminMenu.helpToString(), "Debug")));
}
if (!e) {
  return null;
}
for (var i = 0; i < t.length; i++) {
  if (t[i] === e) {
    return !0;
  }
}
if (t[i] === e) {
  return !0;
}
if (i === m.EMPTY_JSON) {
  return console.error("preload: map id " + e + " missing for preload."), t();
}
for (var o = i.midgroundLayer, s = Object.keys(o), r = 0; r < s.length; r++) {
  for (var l = s[r], c = o[l], d = 0; d < c.length; d++) {
    var u = c[d],
      h = u.g;
    if (h) {
      var g = u.jpg ? "jpg" : "png",
        y = g + "/" + h + "." + g;
      n.push(f + y);
    }
  }
}
for (var l = s[r], c = o[l], d = 0; d < c.length; d++) {
  var u = c[d],
    h = u.g;
  if (h) {
    var g = u.jpg ? "jpg" : "png",
      y = g + "/" + h + "." + g;
    n.push(f + y);
  }
}
if (h) {
  var g = u.jpg ? "jpg" : "png",
    y = g + "/" + h + "." + g;
  n.push(f + y);
}
for (var i = 0; i < e.length; i++) {
  t.hasOwnProperty(e[i]) || (t[e[i]] = !0);
}
if (i) {
  return t(i);
}
for (var a in n) {
  if (n.hasOwnProperty(a)) {
    var s = n[a],
      l = s.mapIds || [];
    if (e.indexOf(s.areaId) === -1) {
      continue;
    }
    r(l, o);
  }
}
if (n.hasOwnProperty(a)) {
  var s = n[a],
    l = s.mapIds || [];
  if (e.indexOf(s.areaId) === -1) {
    continue;
  }
  r(l, o);
}
if (e.indexOf(s.areaId) === -1) {
  continue;
}
if (!a) {
  return i._onEnd({
    elapsedSecond: 0
  });
}
if (s) {
  return d(s);
}
for (var o in n) {
  if (n.hasOwnProperty(o)) {
    var a = n[o];
    i += a.nameId + " ( id: " + a.id + " )\n";
  }
}
if (n.hasOwnProperty(o)) {
  var a = n[o];
  i += a.nameId + " ( id: " + a.id + " )\n";
}
if (!i) {
  return !1;
}
for (var t in this._cmdMap) {
  if (this._cmdMap.hasOwnProperty(t)) {
    var i = this._cmdMap[t];
    e.push("<b>" + t + "</b>: " + i.description);
  }
}
if (this._cmdMap.hasOwnProperty(t)) {
  var i = this._cmdMap[t];
  e.push("<b>" + t + "</b>: " + i.description);
}
if (!e) {
  return -1;
}
for (var t = this.table.getRows(), i = 0; i < t.length; i++) {
  if (t[i].id === e) {
    return i;
  }
}
if (t[i].id === e) {
  return i;
}
if (!t) {
  return this.setNewLeader(null), this.partyId = null, void this.addThisPlayerRow();
}
for (var n in i) {
  this.addMemberRow(i[n].name, ~~n);
}
if (this.enableOrDisableLeaveArenaButton(), this.isLeader) {
  this.registerBtn.enable();
  var e = this;
  window.gui.openConfirmPopup({
    title: l("ui.common.confirm"),
    message: l("ui.party.arenaPopupReinscription"),
    cb: function (t) {
      t && e.registerInArena();
    }
  });
}
for (var d = this.breedData.id, u = n(d).favSpells || [], h = 0; h < u.length; h++) {
  var p = this.favSpells[h] = c.createChild("div", {
    className: "spell",
    hidden: !0
  });
  p.spellId = u[h];
}
for (var i = [], n = this.loadedSpells, o = 0; o < e.length; o += 1) {
  n[e[o]] || i.push(e[o]);
}
if (e) {
  return t(e);
}
for (var o = 0; o < i.length; o += 1) {
  var a = i[o];
  n[a.id] = a;
}
for (var s = 0; s < o.length; s += 1) {
  var r = this.spellsContainer.appendChild(new u({
    tooltipOptions: {
      longTapExplanation: !0
    }
  }));
  t = this.loadedSpells[o[s]], r.setSpell(t, m), r.toggleDisplay(Boolean(t));
}
for (var l = 0; l < this.favSpells.length; l += 1) {
  var d = this.favSpells[l];
  t = this.loadedSpells[d.spellId], t ? (d.slot = d.appendChild(new u({
    tooltipOptions: {
      longTapExplanation: !0
    }
  })), d.slot.setSpell(t, m), d.appendChild(new c({
    spell: t
  }, f)), d.show()) : p.error(new Error("Cannot find spell id " + d.spellId + " for breed id " + this.breedData.id));
}
for (var e in this.rooms) {
  this.rooms[e].reset();
}
if (t.waitingGauge.hideGauge(), e === d.MOUNT_PADDOCK_ERROR) {
  var i = h("ui.exchange.cantExchangeMountPaddockError");
  window.gui.openSimplePopup(i);
}
for (var t = 0; t < e.length; t += 1) {
  var i = e[t],
    n = i.id,
    o = this.rooms[n] = new y(this, n, i.name, i.capacity);
  i.hidden || (this.displayedRooms[n] = o);
}
for (var r in this.rooms) {
  if (this.displayedRooms[r]) {
    var l = this.rooms[r],
      c = l.createBox(n);
    o.addTab(l.name, c, r);
    var d = o.getTabsMap()[r].tab;
    d.setStyles({
      width: a + "px",
      top: s + "px"
    }), s += a, d.title = d.createChild("div", {
      className: "title",
      text: l.name
    }), d.statusLabel = d.createChild("div", {
      className: "statusLabel"
    }), this._updateRoomTab(l);
  }
}
if (this.displayedRooms[r]) {
  var l = this.rooms[r],
    c = l.createBox(n);
  o.addTab(l.name, c, r);
  var d = o.getTabsMap()[r].tab;
  d.setStyles({
    width: a + "px",
    top: s + "px"
  }), s += a, d.title = d.createChild("div", {
    className: "title",
    text: l.name
  }), d.statusLabel = d.createChild("div", {
    className: "statusLabel"
  }), this._updateRoomTab(l);
}
for (var i = 0; i < this.sorters.length; i += 1) {
  var n = this.sorters[i];
  t.addOption(n.name, n.property), t.toggleOption(i, !0);
}
for (var a in this.rooms) {
  o.push(a);
  var s = this.roomTabs.getTabsMap()[a];
  if (s) {
    var r = this.roomTabs.getTabsMap()[a].tab;
    l.setDroppable(r, [A]), r.id = a, r.on("drop", e), r.on("dragEnter", t), r.on("dragLeave", i);
  }
}
if (s) {
  var r = this.roomTabs.getTabsMap()[a].tab;
  l.setDroppable(r, [A]), r.id = a, r.on("drop", e), r.on("dragEnter", t), r.on("dragLeave", i);
}
for (var c = 0; c < o.length; c += 1) {
  a = o[c];
  var d = this.dropZones[a] = new I("div", {
    className: ["dropZone", a, "transition"]
  });
  d.id = a;
  var u = this.rooms[a];
  "equip" === a ? (this.equipBox.box.appendChild(d), d.addClassNames("equip")) : (this.roomDropZones.appendChild(d), d.addClassNames("room")), d.createChild("div", {
    className: "amount",
    name: "amount"
  }), d.createChild("div", {
    className: "label",
    text: u.name,
    name: "label"
  }), l.setDroppable(d, [A]), d.on("drop", e), d.on("dragEnter", t), d.on("dragLeave", i);
}
if (!this.isWindowSizeFull) {
  return this.debugCheckTimeout = window.setTimeout(function (e) {
    e.mountFilterBox || console.error("Absence of MountFilterBox after 2 seconds");
  }, 2e3, this), this.once("opened", this._setupMountFilterBox.bind(this, e));
}
if (!this.certificateQueue.length) {
  return (t = this._findTileInRooms(i)) ? (t.mountData = this._prepareMountForRoom(e, t.room), this._refreshTile(t), void (t === this.focusedTile && this._displayMountDetails(e))) : console.error("Received data about unknown mount ", e);
}
if (this.mountDataFromCertifId[o] = this._prepareMountForRoom(e, this.rooms.certificate), e.isNewborn && (this.babyMap[o] = this.babyMap[i]), t = this.rooms.certificate.getTile(o), t.mountData.receivedData = e, this._refreshTile(t), t.setSpinnerVisible(!1), this.certificateTilePendingSelection === t && (this.certificateTilePendingSelection = null, this._selectTile(this.rooms.certificate, t)), this.nonLoadedCertifCount--, this.certifAreRequested && this.waitingGauge.refreshGauge(this.nonLoadedCertifCount), !F) {
  var a = this.certificateQueue[0];
  if (a) {
    return this._requestMountData(a);
  }
}
if (a) {
  return this._requestMountData(a);
}
for (var t in e) {
  this.mountDataFromCertifId[t] || this._requestOneCertificate(e[t].certificate);
}
for (var t in this.babyMap) {
  e - this.babyMap[t] > H && delete this.babyMap[t];
}
for (var i = t.length, n = 0; n < i; n++) {
  e.addMount(this._prepareMountForRoom(t[n], e));
}
for (var o = 0; o < t.length; o += 1) {
  e.removeMount(t[o]);
}
for (var t = this._extractCertificates(e), i = [], n = 0; n < t.length; n++) {
  var o = t[n],
    a = o.mountInfo,
    s = S + o.objectUID,
    r = this.mountDataFromCertifId[s];
  r || this.nonLoadedCertifCount++, i.push({
    id: s,
    certificate: o,
    model: a.modelId,
    name: a.name,
    receivedData: r
  });
}
for (var t = [], i = 0; i < e.length; i += 1) {
  var n = S + e[i].objectUID,
    o = this.mountDataFromCertifId[n];
  o ? delete this.mountDataFromCertifId[n] : this.nonLoadedCertifCount--, t.push(n);
}
for (var t = window.gui.playerData.inventory, i = [], n = 0; n < e.length; n += 1) {
  var o = e[n],
    a = o.objectUID ? o : t.objects[o],
    s = m.getMountInfoFromCertificate(a);
  s && (a.effectsMap[O] || (this._enrichCertificateData(a, s), i.push(a)));
}
if (t) {
  var i = t.tab.statusLabel,
    n = '(<span class="highlight">' + e.numMounts;
  n += void 0 !== e.capacity && e.capacity !== Number.POSITIVE_INFINITY ? "</span> / " + e.capacity + ")" : "</span>)", i.setHtml(n);
}
if (this.selectionRoom) {
  var a = this.selectionRoom.getNumSelected();
  a > 0 && (o = h("tablet.common.selection") + h("ui.common.colon") + a);
}
if (this.isMultiselect && t.room !== this.selectionRoom && this._setMultiselect(!1), this.isMultiselect) {
  if (e.setMountSelected(t.id, !t.selected), 0 === e.getNumSelected()) {
    return this._setMultiselect(!1);
  }
} else {
  if (t === i) {
    return;
  }
  i && i.room.setMountSelected(i.id, !1), e.setHightlightedMount(t.id);
}
if (e.setMountSelected(t.id, !t.selected), 0 === e.getNumSelected()) {
  return this._setMultiselect(!1);
}
if (t === i) {
  return;
}
if (t && this._prepareMountForRoom(t, this.rooms.equip), this.equipBox.updateMount(t), !e) {
  var i = this.focusedTile === this.equipBox.tile;
  t ? i ? this._displayMountDetails(t) : this._selectTile(this.rooms.equip, this.equipBox.tile) : i && this._hideMountDetails();
}
if (e.certificate && (e = e.receivedData, !e)) {
  return this._hideMountDetails();
}
for (this.waitingGauge.showGauge(o, h("tablet.mount.moving", n), k), this.numMassRemove = this.numMassAdd = n; n > 0; n--) {
  var a = this._getIdForExchange(e, i.pop());
  this._requestExchangeBetweenRooms(e, t, a);
}
for (var e in i.dropZones) {
  var t = i.dropZones[e];
  if (t.isEnabled = e !== o.id && ("equip" !== t.id || a <= 1), t.toggleClassName("enable", t.isEnabled), t.isEnabled) {
    var n = i.rooms[e],
      s = n.capacity - n.numMounts,
      r = "";
    a > s && (r = s > 0 ? h("tablet.mount.roomLeft", s) : h("tablet.mount.roomFullShort")), t.toggleClassName("warning", !!r && s > 0), t.toggleClassName("full", !!r && s <= 0), t.getChild("amount").setText(r);
  }
}
if (t.isEnabled = e !== o.id && ("equip" !== t.id || a <= 1), t.toggleClassName("enable", t.isEnabled), t.isEnabled) {
  var n = i.rooms[e],
    s = n.capacity - n.numMounts,
    r = "";
  a > s && (r = s > 0 ? h("tablet.mount.roomLeft", s) : h("tablet.mount.roomFullShort")), t.toggleClassName("warning", !!r && s > 0), t.toggleClassName("full", !!r && s <= 0), t.getChild("amount").setText(r);
}
for (var t in this.dropZones) {
  var i = this.dropZones[t];
  i.delClassNames("enable", "dragEnter");
  var n = this.roomTabs.getTabsMap()[t];
  if (n) {
    var o = n.tab;
    o.delClassNames("dragEnter");
  }
}
if (n) {
  var o = n.tab;
  o.delClassNames("dragEnter");
}
if (this.roomDropZones.delClassNames("enable"), l.isLostDrop && this.focusedTile) {
  var a = this.focusedTile.mountData;
  a.certificate && !a.receivedData && this._clearSelection();
}
if (n) {
  var o = n.tab;
  o.toggleClassName("dragEnter", t && i.isEnabled);
}
if (o !== a) {
  var s = this.rooms[o],
    r = this.rooms[a],
    l = "equip" !== a ? r.capacity - r.numMounts : r.capacity,
    c = "equip" !== a ? s.getSelection() : [n.id],
    d = c.length;
  if (l <= 0) {
    window.gui.openSimplePopup(h("tablet.mount.roomFull"));
  } else if (l < d) {
    var u = this;
    window.gui.openConfirmPopup({
      title: h("ui.popup.warning"),
      message: h("tablet.mount.partialMoveMounts", l),
      cb: function (e) {
        e && u._moveMounts(o, a, c, l);
      }
    });
  } else {
    this._moveMounts(o, a, c);
  }
}
if (l <= 0) {
  window.gui.openSimplePopup(h("tablet.mount.roomFull"));
} else if (l < d) {
  var u = this;
  window.gui.openConfirmPopup({
    title: h("ui.popup.warning"),
    message: h("tablet.mount.partialMoveMounts", l),
    cb: function (e) {
      e && u._moveMounts(o, a, c, l);
    }
  });
} else {
  this._moveMounts(o, a, c);
}
if (l < d) {
  var u = this;
  window.gui.openConfirmPopup({
    title: h("ui.popup.warning"),
    message: h("tablet.mount.partialMoveMounts", l),
    cb: function (e) {
      e && u._moveMounts(o, a, c, l);
    }
  });
} else {
  this._moveMounts(o, a, c);
}
for (var t in this.rooms) {
  var i = this.rooms[t].getTile(e);
  if (i) {
    return i;
  }
}
if (i) {
  return i;
}
for (var n = i, o = t - 1; o >= 0; o--) {
  n = n.createChild("div", {
    className: "emptyFrame"
  });
}
if (i > 1) {
  t.addClassNames("multiselect");
  var o = n(i);
  t.insertAsFirstChild(o), this.wElement.once("dragEnd", function () {
    t.removeChild(o), t.delClassNames("multiselect");
  });
}
if (n.mountBox = null, g(n, {
  doubletapTimeout: 1
}), n.on("tap", o), n.dragInfo = new c(e.breedingWindow, n), n._mountName = n.createChild("div", {
  className: "mountName"
}), n._mountImg = n.createChild("div", {
  className: "mountImg"
}), t) {
  n._certifValidity = n.createChild("div", {
    className: "certifValidity"
  });
  var r = n.createChild("div", {
    className: "certifImg"
  });
  g(r, {
    doubletapTimeout: 1
  }), r.foreground = n, r.on("tap", a), r.on("longtap", s);
} else {
  n._level = n.createChild("div", {
    className: "level"
  }), n._fertileIcon = n.appendChild(new f("fertile"));
  var l = n.gaugeDiv = n.createChild("div", {
      className: ["gaugeDiv", "partial"]
    }),
    u = l.createChild("div", {
      className: "iconGaugeBar"
    });
  n._staminaGauge = u.appendChild(new d("stamina", null, {
    size: y,
    withoutLabel: !0
  })), n._maturityGauge = u.appendChild(new d("maturity", null, {
    size: y,
    withoutLabel: !0
  })), n._loveGauge = u.appendChild(new d("love", null, {
    size: y,
    withoutLabel: !0
  })), n._serenityGauge = l.appendChild(new m({
    isMini: !0
  })), n._serenityGauge.resize();
}
for (var i = I[e.id], n = t - i.length, o = 0; o < n; o++) {
  var a = e.box.appendChild(r(e));
  i.push(a);
}
if (t.index !== e) {
  var i = this.room,
    n = i.numColumns,
    o = Math.floor(e / n) * i.rowHeight,
    a = e % n * i.columnWidth;
  t.index = e, t.setStyle("webkitTransform", "translate3d(" + a + "px, " + o + "px, 0)");
}
if (t) {
  this.detailLevel = e;
  var i = this.mountData;
  if (t._mountName.setText(i.name || u("ui.common.noName")), t._mountName.toggleClassName("noName", !i.name), i.certificate) {
    var n = i.receivedData;
    t._mountName.toggleClassName("sexUnknown", !n), t._mountName.toggleClassName("female", !!n && n.sex);
    var o = i.certificate.mountInfo;
    this._setValidity(t._certifValidity, o.validityDays, o.validityHours, o.validityMinutes);
  } else {
    t._mountName.toggleClassName("female", !!i.sex), t._level.setText(u("ui.common.short.level") + " " + i.level);
    var a = p.getFertilityState(i);
    t._fertileIcon.setFertileIcon(a), e === C ? (t._staminaGauge.setValue(i.stamina, i.staminaMax), t._maturityGauge.setValue(i.maturity, i.maturityForAdult), t._loveGauge.setValue(i.love, i.loveMax), t._serenityGauge.setValue(i.serenity), t.gaugeDiv.delClassNames("partial")) : t.gaugeDiv.addClassNames("partial");
  }
  t.dragInfo.setMount(i, t._mountImg), this._retrieveMountImgUrl(t._mountImg, i.model), t.show();
}
if (t._mountName.setText(i.name || u("ui.common.noName")), t._mountName.toggleClassName("noName", !i.name), i.certificate) {
  var n = i.receivedData;
  t._mountName.toggleClassName("sexUnknown", !n), t._mountName.toggleClassName("female", !!n && n.sex);
  var o = i.certificate.mountInfo;
  this._setValidity(t._certifValidity, o.validityDays, o.validityHours, o.validityMinutes);
} else {
  t._mountName.toggleClassName("female", !!i.sex), t._level.setText(u("ui.common.short.level") + " " + i.level);
  var a = p.getFertilityState(i);
  t._fertileIcon.setFertileIcon(a), e === C ? (t._staminaGauge.setValue(i.stamina, i.staminaMax), t._maturityGauge.setValue(i.maturity, i.maturityForAdult), t._loveGauge.setValue(i.love, i.loveMax), t._serenityGauge.setValue(i.serenity), t.gaugeDiv.delClassNames("partial")) : t.gaugeDiv.addClassNames("partial");
}
if (t !== e.currentModel) {
  e.currentModel = t;
  var i = this,
    n = A[t];
  return n ? e.setStyle("backgroundImage", n) : void l.preloadImage("gfx/mounts/" + t + ".png", function (n) {
    A[t] = n, e.currentModel === t && (i._hasBeenDestroyed || e.setStyle("backgroundImage", n));
  });
}
if (this.renderingForeground && this.renderingForeground.index < 0 && this._moveTile(e), 1 === t) {
  if (this.detailLevel >= T) {
    return !1;
  }
  this._createTile(), this._moveTile(e), this._updateTileContent(T);
} else if (2 === t) {
  if (this.detailLevel === C) {
    return !1;
  }
  this._updateTileContent(C);
}
if (this.detailLevel >= T) {
  return !1;
}
if (2 === t) {
  if (this.detailLevel === C) {
    return !1;
  }
  this._updateTileContent(C);
}
if (this.detailLevel === C) {
  return !1;
}
for (var t = I[e.id], i = t.length - 1; i >= 0; i--) {
  t[i].hide();
}
if (t !== this.abilityId) {
  var n = this.filterName,
    o = this.mountFilterBox;
  this.abilityId && (o._delFilterButton(n), o.mountFilters.removeFilter(n)), this.abilityId = t, t ? (o.mountFilters.addBehaviorFilter(n, t, !0), o._addFilterButton(n, i), this.setLabel(i), this.selectState(N)) : (this.setLabel(this.emptyLabel), this.selectState(E)), o._updateFilter();
}
for (var t in C) {
  this[t].reset();
}
for (t in A) {
  this[t].reset();
}
for (var i = 0; i < t.length; i++) {
  var n = t[i];
  if (!(n.indexOf(e) < 0)) {
    for (var o = 0; o < n.length; o++) {
      n[o] !== e && this[n[o]].reset();
    }
  }
}
if (!(n.indexOf(e) < 0)) {
  for (var o = 0; o < n.length; o++) {
    n[o] !== e && this[n[o]].reset();
  }
}
for (var o = 0; o < n.length; o++) {
  n[o] !== e && this[n[o]].reset();
}
for (var e in this.serenityFlagMap) {
  this.serenity[e].toggleClassName("active", this.serenityFlagMap[e]);
}
if (e.colorId && (this._delFilterButton(n), o.removeFilter(n)), e.colorId = t, t) {
  var a = null;
  t !== S ? (a = o.getSingleColorMap()[t].colors[0], o.addColorFilter(n, t)) : (i = u, o.addPureColorFilter(n)), this._addFilterButton(n, i), e.colorTile.setStyle("backgroundColor", a), e.setLabel(i), e.setIcon(t !== S ? e.colorTile : null), e.selectState(N);
  var s = e === this.colorB ? this.colorA : this.colorB;
  t === s.colorId && o.isRealColor(t) && this._setColorButtonValue(s, S, u);
} else {
  e.setLabel(e.emptyLabel), e.setIcon(null), e.selectState(E);
}
for (var d in a) {
  c.push({
    id: ~~d,
    caption: a[d].singleColorName,
    cb: l
  });
}
for (var d in a) {
  r.push({
    id: ~~d,
    caption: a[d].nameId,
    cb: s
  });
}
for (var t = 0; t < this.filterButtons.length; t++) {
  var i = this.filterButtons[t];
  if (i.filterName === e) {
    return void this.filterButtons.splice(t, 1);
  }
}
if (i.filterName === e) {
  return void this.filterButtons.splice(t, 1);
}
if (this.buttonBar) {
  for (var e = new M("div"), t = 0; t < this.filterButtons.length; t++) {
    var i = this.filterButtons[t];
    e.appendChild(i);
  }
  this.buttonBar.clearContent(), this.buttonBar.appendChild(e);
}
for (var e = new M("div"), t = 0; t < this.filterButtons.length; t++) {
  var i = this.filterButtons[t];
  e.appendChild(i);
}
for (var e = this._getFilterDefinitions(), t = 0; t < e.length; t++) {
  var i = e[t];
  this.filterMap[i.id] = i;
}
if (i.singleColorName) {
  return t === e;
}
for (var i in t) {
  var n = t[i];
  if (!n["do"].apply(e, n.args)) {
    return !1;
  }
}
if (!n["do"].apply(e, n.args)) {
  return !1;
}
if (i) {
  return console.error(i);
}
for (var o = 0; o < n.length; o++) {
  var a = n[o];
  w[a.id] = a, a.colors = p.parseColorsFromLook(a.id, a.look), b.indexOf(a.id) !== -1 && (a.singleColorName = l(a.nameId), t[a.id] = a);
}
if (n <= i) {
  return 0;
}
for (var c = 0, d = s; d !== r && (!t[d].prepareToShow(d, e) || (c++, !a || c !== a)); d += l) {
  ;
}
for (var e = this.allVisibleTiles, t = 0; t < e.length; t++) {
  var i = e[t];
  i.selected || (this.selectedTiles[i.id] = i, i.setTileSelected(!0));
}
for (var e in this.selectedTiles) {
  var t = this.selectedTiles[e];
  t.setTileSelected(!1);
}
if (!t) {
  return console.warn("removeMount: invalid ID:", e);
}
for (var a = o.length - 1; a >= n; a--) {
  o[a].markForReorder();
}
for (var o = this.allTiles, a = 0; a < o.length; a++) {
  this.box.appendChild(o[a]);
}
if (!t || !this.hasNoFilter || this.needRefilter) {
  this.needsScrollerRefresh = !0, this.hasNoFilter = t, this.needRefilter = !1, this._hideAllTiles(), this.allVisibleTiles = [];
  for (var i = this.allTiles, n = 0; n < i.length; n++) {
    var o = i[n],
      a = o.mountData;
    a.receivedData && (a = a.receivedData), e.isMatch(a) && (this.allVisibleTiles.push(o), o.showTile());
  }
}
for (var i = this.allTiles, n = 0; n < i.length; n++) {
  var o = i[n],
    a = o.mountData;
  a.receivedData && (a = a.receivedData), e.isMatch(a) && (this.allVisibleTiles.push(o), o.showTile());
}
if (this.allVisibleTiles.length) {
  var e = this.scroller.getParent().rootElement,
    t = e.clientWidth,
    i = e.clientHeight,
    n = this.allVisibleTiles[0];
  n.setStyle("opacity", 0);
  var o = n.rootElement.clientWidth,
    a = this.columnWidth = o + 2 * u;
  this.rowHeight = n.rootElement.clientHeight + 2 * u, n.setStyle("opacity", null);
  var s = Math.floor(t / a),
    r = t - s * a - p;
  r < h && s > 1 && (s--, r += a), this.numColumns = s;
  var l = Math.ceil(i / this.rowHeight) + 1;
  this.tilesPerPage = l * this.numColumns, this.extraTilesTopOrBottom = this.tilesPerPage, c.prepareTilePool(this, Math.min(this.numMounts, this.tilesPerPage + 2 * this.extraTilesTopOrBottom)), this.scrollGrip.setStyle("width", r + "px"), this.scroller.refresh(), this._refreshView(!0);
}
if (!(this.isRefreshComplete && !e && Math.abs(t - this.lastRenderedScrollY) < this.rowHeight)) {
  var i = t - this.lastRenderedScrollY > 0;
  this.isRefreshComplete = !1;
  for (var n = this.allVisibleTiles, o = n.length, a = Math.floor(-t / this.rowHeight) * this.numColumns, s = a, r = Math.min(a + this.tilesPerPage, o), c = this.extraTilesTopOrBottom, d = Math.max(0, a - c), u = Math.min(a + this.tilesPerPage + c, o), h = 0; h < o; h++) {
    h >= d && h < u || n[h].prepareToGoOffScreen();
  }
  var p = e ? 1 / 0 : this.numColumns * _,
    m = l(1, n, s, r, i, p);
  p -= m, m && !e || (m = l(2, n, s, r, i, p)), e && (m += l(1, n, d, u)), 0 === m && (this.isRefreshComplete = !0, this.lastRenderedScrollY = t);
}
for (var n = this.allVisibleTiles, o = n.length, a = Math.floor(-t / this.rowHeight) * this.numColumns, s = a, r = Math.min(a + this.tilesPerPage, o), c = this.extraTilesTopOrBottom, d = Math.max(0, a - c), u = Math.min(a + this.tilesPerPage + c, o), h = 0; h < o; h++) {
  h >= d && h < u || n[h].prepareToGoOffScreen();
}
for (var e = this.allVisibleTiles, t = 0; t < e.length; t++) {
  e[t].hideTile();
}
for (var e = this.allVisibleTiles, t = 0; t < e.length; t++) {
  e[t].showTile();
}
if (i && i.tab.toggleDisplay(t), this.curentTabId === e && !i.tab.isVisible()) {
  var n = this.tabsOrderIds[0];
  e === n ? this.close() : this.openTab(n);
}
if (i.forceOpen || !n) {
  "number" == typeof e && (e = this.tabsOrderIds[e]);
  var o = this.tabsMap[e];
  if (!o) {
    return console.error("openTab - invalid tab ID given: " + e);
  }
  n || this.close(), o.tab.addClassNames("on"), this.toggleTabNotification(e, !1);
  var a = o.target;
  a && (a.emit("open", t), a.show(), i.delayOpenedEvent || a.emit("opened", t)), this.curentTabId = e, this.emit("openTab", e);
}
if (!o) {
  return console.error("openTab - invalid tab ID given: " + e);
}
if (this.curentTabId || "number" == typeof this.curentTabId) {
  var e = this.tabsMap[this.curentTabId];
  e.tab.delClassNames("on");
  var t = e.target;
  t && (t.hide(), t.emit("close"));
}
if (i) {
  var n = i.tab;
  void 0 === t && (t = !n._isDisable), n.setEnable(t);
}
if (this.gauge.isVisible()) {
  var t = (this.goal - e) / this.goal;
  this.progressCircle.setValue(t, 1), this.valueElement.setText(Math.round(100 * t) + "%");
}
if (o.stats) {
  var t = o.stats[o.key],
    i = f("ui.common.base") + "+" + f("tablet.common.additional");
  i += f("ui.common.colon"), i += t.getBaseWithoutAdditionalPts() + "+" + t.getAdditionalPts();
  var n = f("ui.common.equipement") + f("ui.common.colon");
  n += l(t.getEquipmentPts());
  var a = f("ui.common.gifts") + "+" + f("ui.common.boost") + f("ui.common.colon");
  a += l(t.getBonusPts()), e.createChild("div", {
    className: "toolTipLabel",
    text: i
  }), e.createChild("div", {
    className: "toolTipLabel",
    text: n
  }), e.createChild("div", {
    className: "toolTipLabel",
    text: a
  });
}
if (w("PLUS_BUTTON"), o.stats) {
  var e = "statsPointsFor" + i[0].toUpperCase() + i.substring(1),
    n = window.gui.playerData.characterBreed[e];
  _.open("characUpdate", {
    additionalPtsRemaining: o.stats.getRemainingAdditionalPts(),
    characteristicName: i,
    costSteps: n,
    initialLevel: o.stats[i].getBaseWithoutAdditionalPts(),
    initialAdditionalPts: o.stats[i].getAdditionalPts(),
    label: t,
    pointsRemaining: o.stats.statsPoints
  });
}
for (var i = "statsPointsFor" + e[0].toUpperCase() + e.substring(1), n = window.gui.playerData.characterBreed[i], o = 0, a = t, s = n.length - 1; s >= 0; s--) {
  var r = n[s][0],
    l = n[s][1],
    c = a - r;
  c > 0 && (o += c * l, a -= c);
}
if (window.gui.playerData.isFighting) {
  return window.gui.openSimplePopup(f("ui.error.cantDoInFight")), !1;
}
if (t) {
  e();
  var i = [];
  n.summary.forEach(function (e) {
    e.resetCheckbox.isActivate() && i.push(A[e.key]);
  }), window.dofus.sendMessage("StatsResetRequestMessage", {
    statIds: i
  });
}
if (n.stats) {
  e = f("ui.stats.statPoints") + " " + String(n.stats.statsPoints);
  var t = n.stats.getRemainingAdditionalPts();
  t > 0 && (e += " + " + String(t)), e += "\n\n" + d.characteristics;
}
if (this._initialized) {
  this.stats = e, this.energy.update(e.energyPoints, e.maxEnergyPoints), this.experience.update(e.experience - e.experienceLevelFloor, e.experienceNextLevelFloor - e.experienceLevelFloor), this.lifePoints.update(e.lifePoints + " / " + e.maxLifePoints), this.actionPoints.update(e.actionPoints.getTotalStat()), this.movementPoints.update(e.movementPoints.getTotalStat()), this.summary.forEach(function (t) {
    t.update(e);
  });
  var t = e.initiative.getTotalStat(),
    i = Math.floor(t * e.lifePoints / e.maxLifePoints);
  this.initiative.update(i + " / " + t), this.prospecting.update(e.prospecting.getTotalStat()), this.range.update(e.range.getTotalStat()), this.summonableCreatures.update(e.summonableCreaturesBoost.getTotalStat());
  var n = e.getRemainingAdditionalPts();
  this.capitalValueDom.setText(e.statsPoints + n), this.pointCapital.toggleClassName("haveAdditionalPts", n > 0), this.additionalPtsLineHelp.toggleDisplay(n > 0), this.refreshRefundedPts(), this.advanced.forEach(function (t) {
    t.update(e);
  });
}
if (this._initialized) {
  var e = 0;
  this.summary.forEach(function (t) {
    t.resetCheckbox.isActivate() && (e += t.getRefundedPts());
  }), this.refundedCapitalValueDom.setText(e);
}
if (e) {
  var t = u(i + "~000000000000000000");
  window.dofus.sendMessage("CharacterDeletionRequestMessage", {
    characterId: i,
    secretAnswerHash: t
  });
}
for (var t = 1, i = 0, n = e.length; i < n; i++) {
  for (var o = 1, a = 0; a < n; a++) {
    e[a].id !== e[i].id && e[a].level > e[i].level && o < 4 && o++;
  }
  e[i].bonusXp = o, e[i].level > 1 && t++;
}
for (var o = 1, a = 0; a < n; a++) {
  e[a].id !== e[i].id && e[a].level > e[i].level && o < 4 && o++;
}
for (var n = window.gui.databases.Breeds, a = 0; a < e.length; a++) {
  var s = e[a],
    r = s.breed || 0,
    l = s.name + " (" + n[r].shortNameId + " " + s.level + ")",
    c = this.charactersTable.addRow({
      name: l
    }, {
      data: s
    }),
    u = s.bonusXp;
  u > 1 && c.getChildren()[1].addClassNames(["x" + u]);
}
for (var r = t.bytesToWords(e), l = 8 * e.length, c = 1732584193, d = -271733879, u = -1732584194, h = 271733878, p = 0; p < r.length; p++) {
  r[p] = 16711935 & (r[p] << 8 | r[p] >>> 24) | 4278255360 & (r[p] << 24 | r[p] >>> 8);
}
for (var m = s._ff, f = s._gg, g = s._hh, _ = s._ii, p = 0; p < r.length; p += 16) {
  var v = c,
    y = d,
    w = u,
    b = h;
  c = m(c, d, u, h, r[p + 0], 7, -680876936), h = m(h, c, d, u, r[p + 1], 12, -389564586), u = m(u, h, c, d, r[p + 2], 17, 606105819), d = m(d, u, h, c, r[p + 3], 22, -1044525330), c = m(c, d, u, h, r[p + 4], 7, -176418897), h = m(h, c, d, u, r[p + 5], 12, 1200080426), u = m(u, h, c, d, r[p + 6], 17, -1473231341), d = m(d, u, h, c, r[p + 7], 22, -45705983), c = m(c, d, u, h, r[p + 8], 7, 1770035416), h = m(h, c, d, u, r[p + 9], 12, -1958414417), u = m(u, h, c, d, r[p + 10], 17, -42063), d = m(d, u, h, c, r[p + 11], 22, -1990404162), c = m(c, d, u, h, r[p + 12], 7, 1804603682), h = m(h, c, d, u, r[p + 13], 12, -40341101), u = m(u, h, c, d, r[p + 14], 17, -1502002290), d = m(d, u, h, c, r[p + 15], 22, 1236535329), c = f(c, d, u, h, r[p + 1], 5, -165796510), h = f(h, c, d, u, r[p + 6], 9, -1069501632), u = f(u, h, c, d, r[p + 11], 14, 643717713), d = f(d, u, h, c, r[p + 0], 20, -373897302), c = f(c, d, u, h, r[p + 5], 5, -701558691), h = f(h, c, d, u, r[p + 10], 9, 38016083), u = f(u, h, c, d, r[p + 15], 14, -660478335), d = f(d, u, h, c, r[p + 4], 20, -405537848), c = f(c, d, u, h, r[p + 9], 5, 568446438), h = f(h, c, d, u, r[p + 14], 9, -1019803690), u = f(u, h, c, d, r[p + 3], 14, -187363961), d = f(d, u, h, c, r[p + 8], 20, 1163531501), c = f(c, d, u, h, r[p + 13], 5, -1444681467), h = f(h, c, d, u, r[p + 2], 9, -51403784), u = f(u, h, c, d, r[p + 7], 14, 1735328473), d = f(d, u, h, c, r[p + 12], 20, -1926607734), c = g(c, d, u, h, r[p + 5], 4, -378558), h = g(h, c, d, u, r[p + 8], 11, -2022574463), u = g(u, h, c, d, r[p + 11], 16, 1839030562), d = g(d, u, h, c, r[p + 14], 23, -35309556), c = g(c, d, u, h, r[p + 1], 4, -1530992060), h = g(h, c, d, u, r[p + 4], 11, 1272893353), u = g(u, h, c, d, r[p + 7], 16, -155497632), d = g(d, u, h, c, r[p + 10], 23, -1094730640), c = g(c, d, u, h, r[p + 13], 4, 681279174), h = g(h, c, d, u, r[p + 0], 11, -358537222), u = g(u, h, c, d, r[p + 3], 16, -722521979), d = g(d, u, h, c, r[p + 6], 23, 76029189), c = g(c, d, u, h, r[p + 9], 4, -640364487), h = g(h, c, d, u, r[p + 12], 11, -421815835), u = g(u, h, c, d, r[p + 15], 16, 530742520), d = g(d, u, h, c, r[p + 2], 23, -995338651), c = _(c, d, u, h, r[p + 0], 6, -198630844), h = _(h, c, d, u, r[p + 7], 10, 1126891415), u = _(u, h, c, d, r[p + 14], 15, -1416354905), d = _(d, u, h, c, r[p + 5], 21, -57434055), c = _(c, d, u, h, r[p + 12], 6, 1700485571), h = _(h, c, d, u, r[p + 3], 10, -1894986606), u = _(u, h, c, d, r[p + 10], 15, -1051523), d = _(d, u, h, c, r[p + 1], 21, -2054922799), c = _(c, d, u, h, r[p + 8], 6, 1873313359), h = _(h, c, d, u, r[p + 15], 10, -30611744), u = _(u, h, c, d, r[p + 6], 15, -1560198380), d = _(d, u, h, c, r[p + 13], 21, 1309151649), c = _(c, d, u, h, r[p + 4], 6, -145523070), h = _(h, c, d, u, r[p + 11], 10, -1120210379), u = _(u, h, c, d, r[p + 2], 15, 718787259), d = _(d, u, h, c, r[p + 9], 21, -343485551), c = c + v >>> 0, d = d + y >>> 0, u = u + w >>> 0, h = h + b >>> 0;
}
if ("undefined" != typeof e) {
  var n = t.wordsToBytes(s(e, i));
  return i && i.asBytes ? n : i && i.asString ? a.bytesToString(n) : t.bytesToHex(n);
}
if (e.constructor == Number) {
  return 16711935 & i.rotl(e, 8) | 4278255360 & i.rotl(e, 24);
}
for (var t = 0; t < e.length; t++) {
  e[t] = i.endian(e[t]);
}
for (var t = []; e > 0; e--) {
  t.push(Math.floor(256 * Math.random()));
}
for (var t = [], i = 0, n = 0; i < e.length; i++, n += 8) {
  t[n >>> 5] |= e[i] << 24 - n % 32;
}
for (var t = [], i = 0; i < 32 * e.length; i += 8) {
  t.push(e[i >>> 5] >>> 24 - i % 32 & 255);
}
for (var t = [], i = 0; i < e.length; i++) {
  t.push((e[i] >>> 4).toString(16)), t.push((15 & e[i]).toString(16));
}
for (var t = [], i = 0; i < e.length; i += 2) {
  t.push(parseInt(e.substr(i, 2), 16));
}
for (var i = [], n = 0; n < e.length; n += 3) {
  for (var o = e[n] << 16 | e[n + 1] << 8 | e[n + 2], a = 0; a < 4; a++) {
    8 * n + 6 * a <= 8 * e.length ? i.push(t.charAt(o >>> 6 * (3 - a) & 63)) : i.push("=");
  }
}
for (var o = e[n] << 16 | e[n + 1] << 8 | e[n + 2], a = 0; a < 4; a++) {
  8 * n + 6 * a <= 8 * e.length ? i.push(t.charAt(o >>> 6 * (3 - a) & 63)) : i.push("=");
}
for (var i = [], n = 0, o = 0; n < e.length; o = ++n % 4) {
  0 != o && i.push((t.indexOf(e.charAt(n - 1)) & Math.pow(2, -2 * o + 8) - 1) << 2 * o | t.indexOf(e.charAt(n)) >>> 6 - 2 * o);
}
for (var t = [], i = 0; i < e.length; i++) {
  t.push(255 & e.charCodeAt(i));
}
for (var t = [], i = 0; i < e.length; i++) {
  t.push(String.fromCharCode(e[i]));
}
for (var r = Math.sqrt(a * a + s * s), l = 0; l < z.length; l++) {
  t(z[l], a, s, r, o);
}
for (var p = 0; p < d; p++) {
  i = h * Math.random(), n = .5 * i, o = 2 * Math.PI * Math.random(), a = i * Math.sin(o), s = n * Math.cos(o), l = Math.cos(r), c = Math.sin(r), z.push({
    x: e + a * l - s * c,
    y: t + a * c + s * l
  });
}
for (var i = 1; i < e.points.length; i++) {
  b(e.points[i].x, e.points[i].y, e.points[i - 1], 60 * i, t);
}
for (var t = 0; t < 1e3;) {
  setTimeout(function () {
    D.globalAlpha -= .01, o(e);
  }, t), t += 20;
}
for (; t < 1250;) {
  setTimeout(function () {
    D.globalAlpha -= .01, o(e);
  }, t), t += 10;
}
for (; t < 1375;) {
  setTimeout(function () {
    D.globalAlpha -= .01, o(e);
  }, t), t += 5;
}
if (i && i.length > 0) {
  for (var l = 0; l < i.length; l++) {
    a = i[l].model;
    var c = h[a],
      d = m(c),
      p = !1;
    if (d || (p = !(t.schema.length !== c.schema.length || 0 === c.schema.length)), !d && p) {
      var f = u.rescale(r, c);
      if (F = u.compareStrokes(f, c)) {
        var v = {
          elemId: i[l].element,
          skillInstanceUid: s.calligraphyElements[i[l].element].enabledSkills[0].skillInstanceUid
        };
        break;
      }
    }
  }
}
for (var l = 0; l < i.length; l++) {
  a = i[l].model;
  var c = h[a],
    d = m(c),
    p = !1;
  if (d || (p = !(t.schema.length !== c.schema.length || 0 === c.schema.length)), !d && p) {
    var f = u.rescale(r, c);
    if (F = u.compareStrokes(f, c)) {
      var v = {
        elemId: i[l].element,
        skillInstanceUid: s.calligraphyElements[i[l].element].enabledSkills[0].skillInstanceUid
      };
      break;
    }
  }
}
if (d || (p = !(t.schema.length !== c.schema.length || 0 === c.schema.length)), !d && p) {
  var f = u.rescale(r, c);
  if (F = u.compareStrokes(f, c)) {
    var v = {
      elemId: i[l].element,
      skillInstanceUid: s.calligraphyElements[i[l].element].enabledSkills[0].skillInstanceUid
    };
    break;
  }
}
if (F = u.compareStrokes(f, c)) {
  var v = {
    elemId: i[l].element,
    skillInstanceUid: s.calligraphyElements[i[l].element].enabledSkills[0].skillInstanceUid
  };
  break;
}
if (e !== O.id) {
  var t = e.split(" > ", 1);
  s.close(t[0]);
}
if (G) {
  Y.x = U, Y.y = q, n(e), i(U, q, Y);
  var t = P.schema[B],
    o = t.points.length,
    a = {
      x: o > 1 ? t.points[o - 2].x : 0,
      y: o > 1 ? t.points[o - 2].y : 0
    },
    s = {
      x: t.points[o - 1].x,
      y: t.points[o - 1].y
    },
    r = 20,
    l = (a.x - U) * (s.y - a.y) / (s.x - a.x) + a.y - q === 0,
    c = Math.sqrt(Math.pow(U - s.x, 2) + Math.pow(q - s.y, 2));
  1 === t.points.length ? (t.points.push({
    x: U,
    y: q
  }), S(U, q, P, t)) : !l && c > r && (t.points.push({
    x: U,
    y: q
  }), S(U, q, P, t));
}
if (G) {
  n(e);
  var t = P.schema[B];
  t.points.push({
    x: U,
    y: q
  }), S(U, q, P, t), G = !1, B++;
}
if (!H && 0 !== B) {
  if (m(e.calligraphyElements) || !p[e.mapId]) {
    return window.gui.chat.logMsg(y("ui.chat.calligraphyNothingToDo")), A(P);
  }
  for (var t = p[e.mapId], i = !1, n = 0; n < t.length; n++) {
    if (e.calligraphyElements[t[n].element].enabledSkills.length > 0) {
      i = !0;
      break;
    }
  }
  return i ? void A(P, t) : (window.gui.chat.logMsg(y("ui.chat.calligraphyBadContext")), A(P));
}
if (m(e.calligraphyElements) || !p[e.mapId]) {
  return window.gui.chat.logMsg(y("ui.chat.calligraphyNothingToDo")), A(P);
}
for (var t = p[e.mapId], i = !1, n = 0; n < t.length; n++) {
  if (e.calligraphyElements[t[n].element].enabledSkills.length > 0) {
    i = !0;
    break;
  }
}
if (e.calligraphyElements[t[n].element].enabledSkills.length > 0) {
  i = !0;
  break;
}
for (var a = [], s = 0, r = 0, l = i.points.length, c = 1; c < l; c++) {
  var d = i.points[c - 1].x,
    u = i.points[c - 1].y,
    h = i.points[c].x,
    p = i.points[c].y,
    m = p - u,
    f = -(h - d),
    g = -m * h - f * p;
  (d >= n && n >= h || d <= n && n <= h) && 0 !== f && (r = (m * n + g) / -f, a.push({
    x: n,
    y: r
  })), (u >= o && o >= p || u <= o && o <= p) && 0 !== m && (s = (f * o + g) / -m, a.push({
    x: s,
    y: o
  }));
}
for (var i = e[0], n = Math.sqrt(Math.pow(i.x - t.x, 2) + Math.pow(i.y - t.y, 2)), o = 0; o < e.length; o += 1) {
  var a = e[o],
    s = Math.sqrt(Math.pow(a.x - t.x, 2) + Math.pow(a.y - t.y, 2));
  s < n && (i = a, n = s);
}
if (!(e.max.x && e.max.y && t.max.x && t.max.y && e.max.x - e.min.x !== 0 && e.max.y - e.min.y !== 0)) {
  return e;
}
if (!e.max.x || !e.max.y || e.max.x - e.min.x === 0 || e.max.y - e.min.y === 0) {
  return e;
}
if (i.stroke = e[0], i.modelStroke = t[0], e.length < 2) {
  return i;
}
for (var n = Math.sqrt(Math.pow(i.stroke.points[0].x - i.modelStroke.points[0].x, 2) + Math.pow(i.stroke.points[0].y - i.modelStroke.points[0].y, 2)), o = Math.sqrt(Math.pow(i.stroke.points[i.stroke.points.length - 1].x - i.modelStroke.points[i.modelStroke.points.length - 1].x, 2) + Math.pow(i.stroke.points[i.stroke.points.length - 1].y - i.modelStroke.points[i.modelStroke.points.length - 1].y, 2)), a = n + o, s = 1; s < e.length; s += 1) {
  var r = e[s],
    l = t[s];
  n = Math.sqrt(Math.pow(r.points[0].x - l.points[0].x, 2) + Math.pow(r.points[0].y - l.points[0].y, 2)), o = Math.sqrt(Math.pow(r.points[r.points.length - 1].x - l.points[l.points.length - 1].x, 2) + Math.pow(r.points[r.points.length - 1].y - l.points[l.points.length - 1].y, 2));
  var c = n + o;
  c < a && (a = c, i.stroke = e[s], i.modelStroke = t[s]);
}
if (e.schema.length !== t.schema.length || 0 === t.schema.length) {
  return !1;
}
for (var i = [], s = {}; i.length !== t.schema.length;) {
  i.push(!1);
}
for (var n = e.points.length, r = e.points[0], c = e.points[n - 1], d = [r, c], u = {
    x: c.x - r.x,
    y: c.y - r.y
  }, h = 0; h < t.schema.length; h++) {
  var p = {};
  if (i[h] !== !0) {
    var m = t.schema[h],
      f = m.points.length,
      g = {},
      _ = {},
      v = !1,
      y = a(d, m.points[0]),
      w = a(d, m.points[f - 1]),
      b = y.x === r.x && y.y === r.y,
      M = w.x === c.x && w.y === c.y;
    if (b && o(r, m.points[0])) {
      if (g = m.points[0], !M || !o(c, m.points[f - 1])) {
        continue;
      }
      _ = m.points[f - 1];
    } else {
      if (M || !o(r, m.points[f - 1])) {
        continue;
      }
      if (g = m.points[f - 1], b || !o(c, m.points[0])) {
        continue;
      }
      _ = m.points[0], v = !0, p = JSON.parse(JSON.stringify(m)), p.points.reverse();
    }
    var T = {
      x: _.x - g.x,
      y: _.y - g.y
    };
    l(u, T, {
      big: !0
    }) && (void 0 === s[h] ? (s[h] = {}, s[h].stroke = [], s[h].strokeModel = [], s[h].stroke.push(e), s[h].strokeModel.push(v ? p : m)) : (s[h].stroke.push(e), s[h].strokeModel.push(v ? p : m)));
  }
}
if (i[h] !== !0) {
  var m = t.schema[h],
    f = m.points.length,
    g = {},
    _ = {},
    v = !1,
    y = a(d, m.points[0]),
    w = a(d, m.points[f - 1]),
    b = y.x === r.x && y.y === r.y,
    M = w.x === c.x && w.y === c.y;
  if (b && o(r, m.points[0])) {
    if (g = m.points[0], !M || !o(c, m.points[f - 1])) {
      continue;
    }
    _ = m.points[f - 1];
  } else {
    if (M || !o(r, m.points[f - 1])) {
      continue;
    }
    if (g = m.points[f - 1], b || !o(c, m.points[0])) {
      continue;
    }
    _ = m.points[0], v = !0, p = JSON.parse(JSON.stringify(m)), p.points.reverse();
  }
  var T = {
    x: _.x - g.x,
    y: _.y - g.y
  };
  l(u, T, {
    big: !0
  }) && (void 0 === s[h] ? (s[h] = {}, s[h].stroke = [], s[h].strokeModel = [], s[h].stroke.push(e), s[h].strokeModel.push(v ? p : m)) : (s[h].stroke.push(e), s[h].strokeModel.push(v ? p : m)));
}
if (b && o(r, m.points[0])) {
  if (g = m.points[0], !M || !o(c, m.points[f - 1])) {
    continue;
  }
  _ = m.points[f - 1];
} else {
  if (M || !o(r, m.points[f - 1])) {
    continue;
  }
  if (g = m.points[f - 1], b || !o(c, m.points[0])) {
    continue;
  }
  _ = m.points[0], v = !0, p = JSON.parse(JSON.stringify(m)), p.points.reverse();
}
if (g = m.points[0], !M || !o(c, m.points[f - 1])) {
  continue;
}
if (M || !o(r, m.points[f - 1])) {
  continue;
}
if (g = m.points[f - 1], b || !o(c, m.points[0])) {
  continue;
}
for (var r = {}, c = {}, u = 0; u < t.schema.length && s[u]; u++) {
  for (var h = d(s[u].stroke, s[u].strokeModel), p = h.modelStroke, m = h.stroke, f = p.points[0], g = !1, _ = 0; _ < p.points.length - 1; _++) {
    var v = p.points[_],
      y = p.points[_ + 1],
      w = {
        x: y.x - v.x,
        y: y.y - v.y
      },
      b = {};
    r = {};
    var M = (y.y - f.y) * ((m.max.y - m.min.y) / (p.max.y - p.min.y)),
      T = (v.y - f.y) * ((m.max.y - m.min.y) / (p.max.y - p.min.y)),
      C = (y.x - f.x) * ((m.max.x - m.min.x) / (p.max.x - p.min.x)),
      I = (v.x - f.x) * ((m.max.x - m.min.x) / (p.max.x - p.min.x));
    if (r = a(n(C, M, m), y), c = a(n(I, T, m), v), b = {
      x: y.x - v.x,
      y: r.y - c.y
    }, !l(b, w)) {
      g = !1;
      break;
    }
    g = !0;
  }
  if (!g) {
    break;
  }
  i[u] = !0;
}
for (var h = d(s[u].stroke, s[u].strokeModel), p = h.modelStroke, m = h.stroke, f = p.points[0], g = !1, _ = 0; _ < p.points.length - 1; _++) {
  var v = p.points[_],
    y = p.points[_ + 1],
    w = {
      x: y.x - v.x,
      y: y.y - v.y
    },
    b = {};
  r = {};
  var M = (y.y - f.y) * ((m.max.y - m.min.y) / (p.max.y - p.min.y)),
    T = (v.y - f.y) * ((m.max.y - m.min.y) / (p.max.y - p.min.y)),
    C = (y.x - f.x) * ((m.max.x - m.min.x) / (p.max.x - p.min.x)),
    I = (v.x - f.x) * ((m.max.x - m.min.x) / (p.max.x - p.min.x));
  if (r = a(n(C, M, m), y), c = a(n(I, T, m), v), b = {
    x: y.x - v.x,
    y: r.y - c.y
  }, !l(b, w)) {
    g = !1;
    break;
  }
  g = !0;
}
if (r = a(n(C, M, m), y), c = a(n(I, T, m), v), b = {
  x: y.x - v.x,
  y: r.y - c.y
}, !l(b, w)) {
  g = !1;
  break;
}
if (!g) {
  break;
}
if (e.openState) {
  var i = e._giftList[e._giftListIndex];
  i && t.actionId === i.uid && (e._charactersSpace.setAssignLoading(!1), e._nextGift());
}
if (!this._hasDom) {
  var t = this.windowBody,
    i = t.createChild("div", {
      className: "left"
    });
  this._itemSpace = i.appendChild(new r());
  var n = t.createChild("div", {
    className: "right"
  });
  this._charactersSpace = n.appendChild(new l()), this._charactersSpace.on("selectTile", function (t) {
    e._selectedCharaId = t;
  });
  var o = t.createChild("div", {
    className: "buttonSpace"
  });
  o.appendChild(new c(s("ui.connection.notNow"), {
    scaleOnPress: !0,
    className: "buttonSpaceButton"
  }, function () {
    e._nextGift();
  })), this._assignBtn = o.appendChild(new c(s("ui.connection.assignGift"), {
    scaleOnPress: !0,
    className: "buttonSpaceButton"
  }, function () {
    e._charactersSpace.setAssignLoading(!0), e._assignGift();
  })), this._hasDom = !0;
}
if (t) {
  return this.close();
}
if (this._selectedCharaId) {
  var e = this._giftList[this._giftListIndex];
  e && window.gui.gifts.assignGift(e.uid, this._selectedCharaId);
}
for (var o = 0, a = i.length; o < a; o += 1) {
  var s = i[o];
  this._rewardBoxes.addItemInstance(s);
}
for (var m = {
    colIds: ["info"],
    minRows: isNaN(e.minRows) ? G : e.minRows
  }, g = 0, _ = p.length; g < _; g += 1) {
  var v = p[g];
  this.panelCollection[v.name] = this.itemInfoPanels.appendChild(new x(m)), this.itemInfoTabs.addTab(v.title, this.panelCollection[v.name]);
}
if (t) {
  for (var i = y.exoticEffects, n = 0; n < t.length; n += 1) {
    var o = t[n],
      a = o.effect;
    if (a.id !== z) {
      var s = o.description;
      if (s) {
        var r = e.addRow([s]);
        i[a.id] ? r.addClassNames("exotic") : a.bonusType === -1 ? r.addClassNames("malus") : 1 === a.bonusType && r.addClassNames("bonus");
      }
    }
  }
}
for (var i = y.exoticEffects, n = 0; n < t.length; n += 1) {
  var o = t[n],
    a = o.effect;
  if (a.id !== z) {
    var s = o.description;
    if (s) {
      var r = e.addRow([s]);
      i[a.id] ? r.addClassNames("exotic") : a.bonusType === -1 ? r.addClassNames("malus") : 1 === a.bonusType && r.addClassNames("bonus");
    }
  }
}
if (a.id !== z) {
  var s = o.description;
  if (s) {
    var r = e.addRow([s]);
    i[a.id] ? r.addClassNames("exotic") : a.bonusType === -1 ? r.addClassNames("malus") : 1 === a.bonusType && r.addClassNames("bonus");
  }
}
if (s) {
  var r = e.addRow([s]);
  i[a.id] ? r.addClassNames("exotic") : a.bonusType === -1 ? r.addClassNames("malus") : 1 === a.bonusType && r.addClassNames("bonus");
}
for (var i = 0; i < e.length; i++) {
  var n = e[i],
    o = n.text;
  if ("string" == typeof o) {
    h(o, n.isMalus, t);
  } else {
    for (var a = 0; a < o.length; a++) {
      var s = o[a];
      h(s, n.isMalus, t);
    }
  }
}
if ("string" == typeof o) {
  h(o, n.isMalus, t);
} else {
  for (var a = 0; a < o.length; a++) {
    var s = o[a];
    h(s, n.isMalus, t);
  }
}
for (var a = 0; a < o.length; a++) {
  var s = o[a];
  h(s, n.isMalus, t);
}
for (var i = 0; i < e.length; i++) {
  t.addRow([e[i]]);
}
if (this.showItemActions && e) {
  this.itemActionContainer.show(), this.bestiaryBtn.toggleDisplay(!!e.getProperty("dropMonsterIds").length), this.setButton.toggleDisplay(e.getProperty("itemSetId") !== -1);
  var t = !e.isItemInstance || !(e.isLinked() || e.isLinkedCharacter());
  this.bidHouseBtn.toggleDisplay(t), this.destroyButton.toggleDisplay(!!e.isItemInstance);
} else {
  this.itemActionContainer.hide();
}
if (e !== this._mountData) {
  t = t || {}, this._mountData = e, this.item = null, this.itemInstance = null, this.showTitle = t.hasOwnProperty("showTitle") ? t.showTitle : this.showTitle, this.showDescription = t.hasOwnProperty("showDescription") ? t.showDescription : this.showDescription, this.weight.setText(M("ui.common.short.weight", 0)), this.twoHandedIcon.hide(), this.durabilityBar.hide();
  var i = this;
  if (g.preloadImage("gfx/mounts/" + e.model + ".png", function (t) {
    e === i._mountData && i.image.setStyle("backgroundImage", t);
  }), w(this.image, !1), this._toggleItemActions(null), this._canDisplayDescription()) {
    this.categoryText.setText(M("ui.common.category") + M("ui.common.colon") + M("ui.common.ride"));
    var n = M("ui.mount.description", e.name, e.level, e.xpRatio);
    this.descriptionText.setText(n), this.itemDescriptionContainer.show(), this.itemDescriptionContainer.refresh();
  } else {
    this.itemDescriptionContainer.hide();
  }
  this._itemTitle.toggleDisplay(!!this.showTitle), this.showTitle && (N.getData("Mounts", e.model, function (t, n) {
    return t ? console.error(t) : void (e === i._mountData && i._name.setText(n.nameId));
  }), this._level.setText(M("ui.common.short.level") + " " + e.level));
  for (var o in this.panelCollection) {
    this.panelCollection[o].clearContent();
  }
  this.itemInfoTabs.toggleTabDisplay(2, !1), v.createEffectInstances(e.effectList, function (t, n) {
    if (t) {
      return console.error(t);
    }
    if (e === i._mountData) {
      var o = y.sortEffects(n);
      u(i.panelCollection.effects, o);
    }
  });
}
if (g.preloadImage("gfx/mounts/" + e.model + ".png", function (t) {
  e === i._mountData && i.image.setStyle("backgroundImage", t);
}), w(this.image, !1), this._toggleItemActions(null), this._canDisplayDescription()) {
  this.categoryText.setText(M("ui.common.category") + M("ui.common.colon") + M("ui.common.ride"));
  var n = M("ui.mount.description", e.name, e.level, e.xpRatio);
  this.descriptionText.setText(n), this.itemDescriptionContainer.show(), this.itemDescriptionContainer.refresh();
} else {
  this.itemDescriptionContainer.hide();
}
for (var o in this.panelCollection) {
  this.panelCollection[o].clearContent();
}
if (t) {
  return console.error(t);
}
if (e === i._mountData) {
  var o = y.sortEffects(n);
  u(i.panelCollection.effects, o);
}
if (!(e instanceof I || e instanceof A)) {
  return console.error(new Error("ItemBox: item is not Item nor ItemInstance"));
}
if (t = t || {}, this.showTitle = t.hasOwnProperty("showTitle") ? t.showTitle : this.showTitle, this.showDescription = t.hasOwnProperty("showDescription") ? t.showDescription : this.showDescription, this.itemInstance = e.getItemInstance(), this.item = e, this._mountData = null, e.isItemInstance && !e.isInitialised) {
  return e.once("initialised", function () {
    i.item === e && i.displayItem(e, t);
  });
}
if (this.itemId = e.getProperty("id"), this.weight.setText(M("ui.common.short.weight", e.getProperty("weight"))), this.twoHandedIcon.toggleDisplay(!!e.getProperty("twoHanded")), this.image.setStyle("backgroundImage", e.getProperty("image")), w(this.image, !0), this.tooltipItemDescription.updateUI(e), this._toggleItemActions(e), this._canDisplayDescription()) {
  var n = C.getItemTypeMap()[e.getProperty("typeId")].nameId;
  this.categoryText.setText(M("ui.common.category") + M("ui.common.colon") + n), this.descriptionText.setText(e.getProperty("descriptionId")), this.itemDescriptionContainer.show(), window.setTimeout(function () {
    i.itemDescriptionContainer.refresh();
  }, 0);
} else {
  this.itemDescriptionContainer.hide();
}
for (var o in this.panelCollection) {
  this.panelCollection[o].clearContent();
}
if (s) {
  this.panelCollection.effects.addRow([M("ui.set.secretBonus")]);
} else {
  var r = y.getSortedEffectInstances(e);
  u(this.panelCollection.effects, r);
}
for (var e = 0; e < this._NB_REWARDS; e += 1) {
  this._slotList.push(this._content.appendChild(new o()));
}
if (!(this._rewardNextSlot >= this._NB_REWARDS)) {
  var i = this._slotList[this._rewardNextSlot];
  i.addClassNames("spinner"), this._rewardNextSlot += 1;
  var n = new l({
    itemData: e,
    quantity: e.quantity
  });
  n.on("tap", function () {
    t.emit("tapSlot", e);
  }), n.insertBefore(i), i.destroy();
}
for (var n = 0, o = e.length; n < o; n += 1) {
  var a = e[n],
    r = this._scrollContent.appendChild(new s(a.id, a.name, a.level, a.entityLook));
  i._tiles.push(r), r.on("select", t);
}
for (var e = 0, t = this._tiles.length; e < t; e += 1) {
  var i = this._tiles[e];
  i.delClassNames("selected");
}
if (t._charaUpdateModule.canAssignAdditionalPts()) {
  var h = s("tablet.charaSheet.boostAdditionnalPoints") + s("ui.common.colon"),
    f = this.windowBody.appendChild(new o({
      scaleOnPress: !1
    }, function () {
      t.updateContent({
        label: e.label,
        characteristicName: e.characteristicName,
        additionalPtsRemaining: e.additionalPtsRemaining,
        pointsRemaining: e.pointsRemaining,
        initialLevel: e.initialLevel,
        initialAdditionalPts: e.initialAdditionalPts,
        isAdditionalPtsAssign: !t._charaUpdateModule.isAdditionalPtsAssignMode(),
        costSteps: e.costSteps
      });
    }));
  r = f.createChild("div", {
    className: ["points", "pointsRemainingLine"]
  }), r.createChild("span", {
    text: n
  }), l = f.createChild("div", {
    className: ["points", "additionalPtsRemainingLine"]
  }), l.createChild("span", {
    text: h
  });
  var g = this._charaUpdateModule.isAdditionalPtsAssignMode();
  r.toggleClassName("on", !g), l.toggleClassName("on", g);
} else {
  r = this.windowBody.createChild("div", {
    className: "points"
  }), r.createChild("span", {
    text: n
  });
}
if (t._charaUpdateModule.getSpentPts() <= 0) {
  return d("GEN_BUTTON");
}
for (var e = ["title"], t = [s("ui.common.level")], i = [s("ui.common.cost")], n = this._charaUpdateModule.getCostSteps(), o = 0; o < n.length; o++) {
  e.push("l" + o), t.push("> " + n[o][f]), i.push(n[o][g]);
}
if (this._charaUpdateModule.isAdditionalPtsAssignMode() ? this._additionalPtsRemainingElt.setText(String(t.additional - i)) : this._pointsRemainingElt.setText(String(t.base - i)), this._pointsLineAdded.setValue(i), this._levelAddedElt.setText(String(e.getCharacIncreasePts())), this._finalLevelElt.setText(String(e.getInitialLevel() + e.getCharacIncreasePts())), n !== this._previousCostStep) {
  if (void 0 !== this._previousCostStep) {
    var o = this._table.getHeaderCol("l" + this._previousCostStep),
      a = this._table.getCol(0, "l" + this._previousCostStep);
    o.delClassNames("selected"), a.delClassNames("selected");
  }
  this._previousCostStep = n;
  var s = this._table.getHeaderCol("l" + n),
    r = this._table.getCol(0, "l" + n);
  s.addClassNames("selected"), r.addClassNames("selected");
}
if (void 0 !== this._previousCostStep) {
  var o = this._table.getHeaderCol("l" + this._previousCostStep),
    a = this._table.getCol(0, "l" + this._previousCostStep);
  o.delClassNames("selected"), a.delClassNames("selected");
}
for (var t = 0; t < e.length; t++) {
  this.getInitialLevel() >= e[t][s] && (this._currentCostStep = t);
}
if (e - this._pointsSpent > 0) {
  for (; this._pointsSpent < e;) {
    var i = t[this._currentCostStep][r];
    if (this._pointsSpent + i > e) {
      break;
    }
    if (!this.incrementPts()) {
      break;
    }
  }
} else {
  for (; this._pointsSpent > e && this.decrementPts();) {
    ;
  }
}
for (; this._pointsSpent < e;) {
  var i = t[this._currentCostStep][r];
  if (this._pointsSpent + i > e) {
    break;
  }
  if (!this.incrementPts()) {
    break;
  }
}
if (this._pointsSpent + i > e) {
  break;
}
if (!this.incrementPts()) {
  break;
}
for (; this._pointsSpent > e && this.decrementPts();) {
  ;
}
if (e > 0) {
  if (this._pointsSpent + n > this.getMaxRemainingPts()) {
    return !1;
  }
  if (this._isAdditionalPtsAssignMode && this.getInitialLevel() + this._addedLevel >= a.MAX_ADDITIONNAL_PER_CARAC) {
    return !1;
  }
  this._pointsSpent += n, i.length > 2 ? this._addedLevel += i[2] : this._addedLevel++;
  var o = t[this._currentCostStep + 1];
  o && this.getInitialLevel() + this._addedLevel >= o[s] && this._currentCostStep++;
} else {
  if (!this._pointsSpent) {
    return !1;
  }
  this.getInitialLevel() + this._addedLevel <= i[s] && (this._currentCostStep--, i = t[this._currentCostStep], n = i[r]), this._pointsSpent -= n, i.length > 2 ? this._addedLevel -= i[2] : this._addedLevel--;
}
if (this._pointsSpent + n > this.getMaxRemainingPts()) {
  return !1;
}
if (this._isAdditionalPtsAssignMode && this.getInitialLevel() + this._addedLevel >= a.MAX_ADDITIONNAL_PER_CARAC) {
  return !1;
}
if (!this._pointsSpent) {
  return !1;
}
if (this._title = e.titleId, this._page = e.contentId, this._image = this._getImageData(this._page), this.toggleClassName("zombieIsland", e.id === h), !this._page) {
  return console.error("Scroll content is empty for document id", e.id), this.close();
}
if (this._hasText = o(this._page), !this._image) {
  return this._initScroll(), e();
}
if (!i) {
  return null;
}
for (var n, o = i[2], a = new RegExp(h), s = {}; null !== (n = a.exec(o));) {
  n.index === a.lastIndex && a.lastIndex++, s[n[1]] = n[2] || n[3];
}
for (var t, i = [], n = new RegExp(c); null !== (t = n.exec(e));) {
  i.push(this._getImageData(t[0]));
}
for (var t, i = [], n = new RegExp(u); null !== (t = n.exec(e));) {
  i.push({
    text: t[2],
    href: t[1].replace("event:", ""),
    original: t[0]
  });
}
for (var a = n.rootElement.getElementsByTagName("a"), s = 0, c = a.length; s < c; s++) {
  var d = a[s],
    u = d.href.replace("event:", "");
  u.indexOf(g) !== -1 ? t(d, u.split(",")[1], !0) : (t(d, u), d.href = "#");
}
for (var o, s = this.styleTag.sheet, r = new RegExp(a); null !== (o = r.exec(e));) {
  o.index === r.lastIndex && r.lastIndex++, t && ("body" === o[1] ? o[1] = t : o[1] = t + " " + o[1]), n(s, o[1], o[2], 0);
}
for (var t = 0; t < i.length; t++) {
  o.imageMap[i[t].imageId] = e[t];
}
if (this._currentIndex < this._nbPages) {
  this.pageRight.isVisible() || this.pageRight.show();
  var e = "";
  e = this._styleSheet && this._currentIndex !== -1 ? this._formatText(this._pages[this._currentIndex]) : this._pages[this._currentIndex], this._insertContent(this.pageRight, e), this.lblPageNumberRight.setText(this._currentIndex + 2);
} else {
  this.pageRight.hide(), this.lblPageNumberRight.setText("");
}
if (e.indexOf(u) !== -1) {
  var t = parseInt(e.substr(u.length), 10);
  return this._selectPage(t);
}
if (i.length) {
  for (var n = 0; n < i.length; n++) {
    var o = i[n];
    o.before && e.appendChild(this._formatLinks(o.before)), this._addTextureOnPage(e, o), t = t.replace(o.regExpResult, "");
  }
  t && e.appendChild(this._formatLinks(t));
} else {
  e.appendChild(this._formatLinks(t));
}
for (var n = 0; n < i.length; n++) {
  var o = i[n];
  o.before && e.appendChild(this._formatLinks(o.before)), this._addTextureOnPage(e, o), t = t.replace(o.regExpResult, "");
}
if (this.drawer) {
  return this.drawer.getSlots();
}
if (this.data) {
  if (this.data.mountLocation) {
    window.dofus.sendMessage("MountToggleRidingRequestMessage");
  } else {
    if (!this.data.isInitialised) {
      return;
    }
    window.gui.playerData.inventory.unEquipItem(this.data.objectUID);
  }
}
if (this.data.mountLocation) {
  window.dofus.sendMessage("MountToggleRidingRequestMessage");
} else {
  if (!this.data.isInitialised) {
    return;
  }
  window.gui.playerData.inventory.unEquipItem(this.data.objectUID);
}
if (!this.data.isInitialised) {
  return;
}
if (!i) {
  return !1;
}
for (var m in b) {
  for (var f = b[m], g = i[m], _ = 0, v = f.length; _ < v; _ += 1) {
    this._createSlot(g, f[_]);
  }
}
for (var f = b[m], g = i[m], _ = 0, v = f.length; _ < v; _ += 1) {
  this._createSlot(g, f[_]);
}
if (i) {
  if (t.mountLocation) {
    i.setData(t), f.preloadImage("gfx/mounts/" + t.model + ".png", function (e) {
      i.setImage(e);
    });
  } else {
    i.setItem(t), i.itemUI.backgroundImage = i.getImage(), c.enableDrag(i);
    var n = this._slots[w.weapon],
      o = this._slots[w.shield],
      a = n.itemInstance && n.itemInstance.item;
    a && a.twoHanded ? o.lock() : o.itemInstance || o.unset();
  }
}
if (t.mountLocation) {
  i.setData(t), f.preloadImage("gfx/mounts/" + t.model + ".png", function (e) {
    i.setImage(e);
  });
} else {
  i.setItem(t), i.itemUI.backgroundImage = i.getImage(), c.enableDrag(i);
  var n = this._slots[w.weapon],
    o = this._slots[w.shield],
    a = n.itemInstance && n.itemInstance.item;
  a && a.twoHanded ? o.lock() : o.itemInstance || o.unset();
}
for (e in this._slots) {
  var n = i[e];
  n ? this._setSlot(e, n) : this._unsetSlot(e);
}
for (var t = 0; t < e.length; t += 1) {
  var i = e[t];
  this._slots[i].addClassNames("selected");
}
for (var e in this._slots) {
  this._slots[e].delClassNames("selected");
}
for (var i = {}, n = {}, o = 0; o < e.length; o++) {
  i[e[o].modelId] = !0, n[e[o].subAreaId] = !0;
}
if (i) {
  return t(i);
}
for (var a = window.gui.databases.Areas, s = [], r = 0; r < e.length; r++) {
  var l = e[r],
    c = n[l.subAreaId],
    d = o[l.modelId];
  s.push({
    type: "house",
    gfxId: d.gfxId,
    name: d.nameId,
    areaName: a[c.areaId].nameId,
    price: p.kamasToString(l.price),
    rooms: l.nbRoom,
    chests: l.nbChest,
    skillsCount: l.skillListIds.length,
    subAreaName: c.nameId,
    ownerName: l.ownerName,
    ownerConnected: l.ownerConnected,
    worldX: l.worldX,
    worldY: l.worldY
  });
}
for (var i = {}, n = 0; n < e.length; n++) {
  i[e[n].subAreaId] = !0;
}
if (i) {
  return t(i);
}
for (var o = [], a = window.gui.databases.Areas, s = 0; s < e.length; s++) {
  var r = e[s],
    l = n[r.subAreaId];
  o.push({
    type: "paddock",
    name: g("ui.mount.paddockWithRoom", r.nbObject),
    areaName: a[l.areaId].nameId,
    price: p.kamasToString(r.price),
    mounts: r.nbMount,
    objects: r.nbObject,
    subAreaName: l.nameId,
    ownerName: r.guildOwner ? r.guildOwner : "?",
    worldX: r.worldX,
    worldY: r.worldY
  });
}
for (var i = 1; i <= t; i++) {
  this.roomSelector.addOption(g("ui.estate.filter.nbRoom", i), i);
}
for (var i = 1; i <= t; i++) {
  this.chestSelector.addOption(g("ui.estate.filter.nbChest", i), i);
}
for (var n = i; n <= t; n += i) {
  this.mountSelector.addOption(g("ui.estate.filter.nbMount", n), n);
}
for (var n = i; n <= t; n += i) {
  this.breedingSelector.addOption(g("ui.estate.filter.nbMachine", n), n);
}
for (var t = f.getAreasWithHouseOrPaddock("house"), i = 0; i < t.length; i++) {
  e.housingAreaSelector.addOption(t[i].nameId, t[i].id);
}
for (var t = f.getAreasWithHouseOrPaddock("paddock"), i = 0; i < t.length; i++) {
  e.paddocksAreaSelector.addOption(t[i].nameId, t[i].id);
}
if (t) {
  return console.error("Failed to retrieve skill list", t);
}
for (var n = 0; n < i.length; n++) {
  e.skillSelector.addOption(i[n].nameId, i[n].id);
}
if (e) {
  return console.error("Failed to retrieve data", e);
}
for (var n = [], o = 0; o < i.length; o++) {
  var a = i[o];
  n.push({
    name: a.name,
    subarea: a.areaName,
    price: a.price,
    button: a
  });
}
if (a) {
  return t ? s : a;
}
for (var o in i) {
  var r = i[o];
  if (r.containPaddocks || r.containHouses) {
    var l = {
      id: o,
      nameId: r.nameId
    };
    r.containPaddocks && s.push(l), r.containHouses && a.push(l);
  }
}
if (r.containPaddocks || r.containHouses) {
  var l = {
    id: o,
    nameId: r.nameId
  };
  r.containPaddocks && s.push(l), r.containHouses && a.push(l);
}
if (t) {
  return e(t);
}
for (var o in i) {
  var a = i[o];
  a.availableInHouse && r.push({
    id: a.id,
    nameId: a.nameId
  });
}
if (this.worldX = e.worldX, this.worldY = e.worldY, this.price.setText(e.price), this.coordinate.setText(e.worldX + "," + e.worldY), this.ownerName.setText("?" === e.ownerName ? s("ui.common.none") : e.ownerName), "?" !== e.ownerName && e.hasOwnProperty("ownerConnected")) {
  var i = s(e.ownerConnected ? "ui.server.state.online" : "ui.server.state.offline");
  this.ownerStatus.setText(" (" + i + ")");
} else {
  this.ownerStatus.setText("");
}
if (this.image.setStyle("backgroundImage", "none"), c.preloadImage(o, function (e) {
  t.image.setStyle("backgroundImage", e);
}), "house" === e.type) {
  this.mountsContainer.hide(), this.breedingContainer.hide(), this.roomsContainer.show(), this.chestContainer.show(), this.nameTxt = e.name, this.name.setText(e.name), this.roomCount.setText(e.rooms), this.chestCount.setText(e.chests);
  var a;
  return a = e.skillsCount > 0 ? s("ui.estate.houseSkills", e.skillsCount) : s("ui.estate.noSkill"), this.skills.setText(a), void this.skills.show();
}
if (i === v.RESULT_LOST || i === v.RESULT_VICTORY ? (n.push("outcome", "outcome" + i), t.addClassNames("title")) : "dead" === i && n.push(i), n.length) {
  return new f("div", {
    className: n
  });
}
if (i.createChild("div", {
  className: "nameText",
  text: t
}), o(e)) {
  i.createChild("div", {
    className: "isMeArrow"
  });
} else if (e.beFriend) {
  var n = i.appendChild(new I({
    className: ["addFriend", "Button", "scaleOnPress"]
  }));
  n.on("tap", function () {
    window.gui.openConfirmPopup({
      title: w("ui.popup.warning"),
      message: w("ui.social.confirmAddFriend", t),
      cb: function (e) {
        e && (window.dofus.sendMessage("FriendAddRequestMessage", {
          name: t
        }), n.hide());
      }
    });
  });
}
if (e.beFriend) {
  var n = i.appendChild(new I({
    className: ["addFriend", "Button", "scaleOnPress"]
  }));
  n.on("tap", function () {
    window.gui.openConfirmPopup({
      title: w("ui.popup.warning"),
      message: w("ui.social.confirmAddFriend", t),
      cb: function (e) {
        e && (window.dofus.sendMessage("FriendAddRequestMessage", {
          name: t
        }), n.hide());
      }
    });
  });
}
if (i.length && i[0]) {
  var s = i[0],
    r = s.experienceFightDelta,
    c = s.experienceLevelFloor,
    u = s.experience - c,
    h = s.experienceNextLevelFloor - c,
    p = Math.floor(r * (d.BONUS_PACK_XP / 100)),
    m = t && p > 1 && !window.gui.playerData.isSubscriberAtMinLevel(A.NORMAL),
    _ = Math.max(0, (u - r) / h),
    v = u / h,
    y = m ? (u + p) / h : 0,
    b = new f("div", {
      className: "xpBox"
    }),
    T = b.appendChild(new g({
      valueClassNames: ["oldXp", "gainedXp", "extraXp"]
    }));
  t ? (T.setValues([_, v, y]), y >= 1 && T.createChild("div", {
    className: "reached100"
  })) : T.setValues([_, v]);
  var C = Math.floor(100 * v) + "% (" + M.intToString(u) + " / " + M.intToString(h) + ")";
  l.addTooltip(T, C, {
    longTapExplanation: !0
  });
  var I = b.createChild("div", {
      className: "underGauge"
    }),
    S = I.createChild("div", {
      className: "xpTextDiv"
    });
  if (S.createChild("div", {
    className: "gainedXpText",
    text: M.intToString(r)
  }), m) {
    var E = S.createChild("div", {
        className: "extraXpDiv"
      }),
      N = M.intToString(p),
      x = w("tablet.shop.xpBonusPoints", N);
    E.createChild("div", {
      className: "ifBonusPack",
      text: " + " + N
    }), E.createChild("div", {
      className: "unlockIcon"
    }), l.addTooltip(b, x), b.on("tap", a), b.getMorePointsMsg = x;
  } else {
    l.addTooltip(S, n(s));
  }
  var L = s.rerollExperienceMul;
  if (L > 1) {
    I.addClassNames("withXpBonusIcon");
    var O = I.createChild("div", {
      className: ["xpBonusIcon", "bonus" + L]
    });
    l.addTooltip(O, w("ui.common.experiencePoint") + " x " + L + "\n\n" + w("ui.information.xpFamilyBonus"));
  }
  return b;
}
if (S.createChild("div", {
  className: "gainedXpText",
  text: M.intToString(r)
}), m) {
  var E = S.createChild("div", {
      className: "extraXpDiv"
    }),
    N = M.intToString(p),
    x = w("tablet.shop.xpBonusPoints", N);
  E.createChild("div", {
    className: "ifBonusPack",
    text: " + " + N
  }), E.createChild("div", {
    className: "unlockIcon"
  }), l.addTooltip(b, x), b.on("tap", a), b.getMorePointsMsg = x;
} else {
  l.addTooltip(S, n(s));
}
if (L > 1) {
  I.addClassNames("withXpBonusIcon");
  var O = I.createChild("div", {
    className: ["xpBonusIcon", "bonus" + L]
  });
  l.addTooltip(O, w("ui.common.experiencePoint") + " x " + L + "\n\n" + w("ui.information.xpFamilyBonus"));
}
if (t.length) {
  for (var i, n, o = [], a = {}, s = 0; s < t.length; s += 1) {
    s % 2 === 0 && (i = t[s], n = t[s + 1] || 0, o.push(i), a[i] = n);
  }
  if (o.length) {
    var r = new f("div", {
      className: ["dropRow", "spinner"]
    });
    return y(o, function (t, i) {
      if (t) {
        return console.warn("Error while getting items", t);
      }
      if (r.rootElement) {
        i.sort(function (e, t) {
          var i = e.averagePrice * a[e.id],
            n = t.averagePrice * a[t.id];
          return n - i;
        });
        var n, o;
        for (n = 0; n < i.length && (o = i[n], n !== E); n += 1) {
          r.appendChild(new T({
            itemData: o,
            quantity: a[o.id],
            tooltipOptions: {
              openOnTap: !0
            }
          }));
        }
        if (i.length > E) {
          var s = r.appendChild(new I({
              className: "moreButton"
            }, function () {
              _.getWindow("fightEndRewards").updateContent(e.name, i, a), _.open("fightEndRewards");
            })),
            c = "";
          for (n = 0; n < i.length; n += 1) {
            o = i[n], c += a[o.id] + " x " + o.nameId + "\n";
          }
          l.addTooltip(s, c);
        }
        r.delClassNames("spinner");
      }
    }), r;
  }
}
for (var i, n, o = [], a = {}, s = 0; s < t.length; s += 1) {
  s % 2 === 0 && (i = t[s], n = t[s + 1] || 0, o.push(i), a[i] = n);
}
if (o.length) {
  var r = new f("div", {
    className: ["dropRow", "spinner"]
  });
  return y(o, function (t, i) {
    if (t) {
      return console.warn("Error while getting items", t);
    }
    if (r.rootElement) {
      i.sort(function (e, t) {
        var i = e.averagePrice * a[e.id],
          n = t.averagePrice * a[t.id];
        return n - i;
      });
      var n, o;
      for (n = 0; n < i.length && (o = i[n], n !== E); n += 1) {
        r.appendChild(new T({
          itemData: o,
          quantity: a[o.id],
          tooltipOptions: {
            openOnTap: !0
          }
        }));
      }
      if (i.length > E) {
        var s = r.appendChild(new I({
            className: "moreButton"
          }, function () {
            _.getWindow("fightEndRewards").updateContent(e.name, i, a), _.open("fightEndRewards");
          })),
          c = "";
        for (n = 0; n < i.length; n += 1) {
          o = i[n], c += a[o.id] + " x " + o.nameId + "\n";
        }
        l.addTooltip(s, c);
      }
      r.delClassNames("spinner");
    }
  }), r;
}
if (t) {
  return console.warn("Error while getting items", t);
}
if (r.rootElement) {
  i.sort(function (e, t) {
    var i = e.averagePrice * a[e.id],
      n = t.averagePrice * a[t.id];
    return n - i;
  });
  var n, o;
  for (n = 0; n < i.length && (o = i[n], n !== E); n += 1) {
    r.appendChild(new T({
      itemData: o,
      quantity: a[o.id],
      tooltipOptions: {
        openOnTap: !0
      }
    }));
  }
  if (i.length > E) {
    var s = r.appendChild(new I({
        className: "moreButton"
      }, function () {
        _.getWindow("fightEndRewards").updateContent(e.name, i, a), _.open("fightEndRewards");
      })),
      c = "";
    for (n = 0; n < i.length; n += 1) {
      o = i[n], c += a[o.id] + " x " + o.nameId + "\n";
    }
    l.addTooltip(s, c);
  }
  r.delClassNames("spinner");
}
for (n = 0; n < i.length && (o = i[n], n !== E); n += 1) {
  r.appendChild(new T({
    itemData: o,
    quantity: a[o.id],
    tooltipOptions: {
      openOnTap: !0
    }
  }));
}
if (i.length > E) {
  var s = r.appendChild(new I({
      className: "moreButton"
    }, function () {
      _.getWindow("fightEndRewards").updateContent(e.name, i, a), _.open("fightEndRewards");
    })),
    c = "";
  for (n = 0; n < i.length; n += 1) {
    o = i[n], c += a[o.id] + " x " + o.nameId + "\n";
  }
  l.addTooltip(s, c);
}
for (n = 0; n < i.length; n += 1) {
  o = i[n], c += a[o.id] + " x " + o.nameId + "\n";
}
for (var a in o) {
  this.addChallenge(o[a].iconUrl, o[a].success, o[a].name, o[a].description, o[a].dropBonus, o[a].xpBonus, o[a].points);
}
for (var l, d, u, h = [], p = [], m = 0; m < e.results.length; m += 1) {
  if (l = e.results[m], d = l.id, u = l.outcome, u !== v.RESULT_DEFENDER_GROUP) {
    if (d === window.gui.playerData.id) {
      this.outcomeSummary.setText(r[u] || "");
      var f = S[u];
      if (f && c.playSound("ui", f), u === v.RESULT_VICTORY) {
        var g = void 0 !== e.score && null !== e.score ? e.score : -1;
        g > -1 && window.gui.openPopup({
          title: w("ui.common.score"),
          message: w("tablet.toa.scoreInChat", g)
        });
      }
    }
    h[u] || (p.push({
      outcome: u,
      name: s[u]
    }), h[u] = !0);
    var _ = t[d];
    if (_) {
      var y = _.name,
        b = window.gui.playerData.socialData.friendsList,
        T = d > 0;
      for (var C in b) {
        var I = b[C].playerId;
        if (I === d) {
          T = !1;
          break;
        }
      }
      p.push({
        id: l.id,
        outcome: l.alive ? "" : "dead",
        name: y,
        beFriend: T,
        level: l.level || t[l.id].level,
        additional: l.additional,
        kamas: M.intToString(l.rewards.kamas),
        drops: l.rewards.objects
      });
    }
  } else {
    console.warn("Hardcode loots not handled (skipped)", l.rewards);
  }
}
if (l = e.results[m], d = l.id, u = l.outcome, u !== v.RESULT_DEFENDER_GROUP) {
  if (d === window.gui.playerData.id) {
    this.outcomeSummary.setText(r[u] || "");
    var f = S[u];
    if (f && c.playSound("ui", f), u === v.RESULT_VICTORY) {
      var g = void 0 !== e.score && null !== e.score ? e.score : -1;
      g > -1 && window.gui.openPopup({
        title: w("ui.common.score"),
        message: w("tablet.toa.scoreInChat", g)
      });
    }
  }
  h[u] || (p.push({
    outcome: u,
    name: s[u]
  }), h[u] = !0);
  var _ = t[d];
  if (_) {
    var y = _.name,
      b = window.gui.playerData.socialData.friendsList,
      T = d > 0;
    for (var C in b) {
      var I = b[C].playerId;
      if (I === d) {
        T = !1;
        break;
      }
    }
    p.push({
      id: l.id,
      outcome: l.alive ? "" : "dead",
      name: y,
      beFriend: T,
      level: l.level || t[l.id].level,
      additional: l.additional,
      kamas: M.intToString(l.rewards.kamas),
      drops: l.rewards.objects
    });
  }
} else {
  console.warn("Hardcode loots not handled (skipped)", l.rewards);
}
if (d === window.gui.playerData.id) {
  this.outcomeSummary.setText(r[u] || "");
  var f = S[u];
  if (f && c.playSound("ui", f), u === v.RESULT_VICTORY) {
    var g = void 0 !== e.score && null !== e.score ? e.score : -1;
    g > -1 && window.gui.openPopup({
      title: w("ui.common.score"),
      message: w("tablet.toa.scoreInChat", g)
    });
  }
}
if (f && c.playSound("ui", f), u === v.RESULT_VICTORY) {
  var g = void 0 !== e.score && null !== e.score ? e.score : -1;
  g > -1 && window.gui.openPopup({
    title: w("ui.common.score"),
    message: w("tablet.toa.scoreInChat", g)
  });
}
if (_) {
  var y = _.name,
    b = window.gui.playerData.socialData.friendsList,
    T = d > 0;
  for (var C in b) {
    var I = b[C].playerId;
    if (I === d) {
      T = !1;
      break;
    }
  }
  p.push({
    id: l.id,
    outcome: l.alive ? "" : "dead",
    name: y,
    beFriend: T,
    level: l.level || t[l.id].level,
    additional: l.additional,
    kamas: M.intToString(l.rewards.kamas),
    drops: l.rewards.objects
  });
}
for (var C in b) {
  var I = b[C].playerId;
  if (I === d) {
    T = !1;
    break;
  }
}
if (I === d) {
  T = !1;
  break;
}
for (var t = e.valueClassNames || [""], i = t.length - 1; i >= 0; i--) {
  this.currentValues[i] = this.previousValues[i] = 0, this.colorBars[i] = this._newColorBar(t[i]);
}
if (o) {
  var r = u + (0 === i ? h : 0);
  s = "calc(" + Math.round(100 * i) + "% + " + r + "px)";
} else {
  s = a ? "calc(100% - " + (u + h) + "px)" : Math.round(100 * t) + "%";
}
if (t.colorBars) {
  var i = t.colorBars[0].rootElement,
    n = t.isVertical ? i.offsetHeight : i.offsetWidth;
  0 !== n && (t.pixelValue = 1 / n, t.mustRecompute = !0), t.hasTriedToGetPixelValue = !0, e.call(t);
}
for (var t = 0; t < this.colorBars.length; t++) {
  this._setGaugeLogicalValue(t, Math.max(Math.min(e[t] || 0, 1), 0)), this._computeGaugePhysicalValue(t);
}
for (var e = 0; e < this.colorBars.length; e++) {
  this._computeGaugePhysicalValue(e);
}
for (var e = 0; e < this.colorBars.length; e++) {
  this._setColorBarPos(this.colorBars[e], this.maskSizes[e]), this.previousValues[e] = this.currentValues[e];
}
for (var n = 0; n < this.colorBars.length; n++) {
  this._setGaugeLogicalValue(n, Math.max(Math.min(e[n] || 0, 1), 0)), this._computeGaugePhysicalValue(n);
}
if (this.shouldGetPixelValue) {
  var o = this;
  return this._tryAndGetPixelValue(function () {
    o._recompute(), o._startAnim(i);
  });
}
if (this.colorBars) {
  var e = this.currentAnimBarIndex;
  this.currentAnimBarIndex++;
  var t = this.colorBars[e],
    i = this.maskSizes[e],
    n = e === this.currentValues.length - 1 ? this.endAnimCb : this.nextAnimFunc,
    o = e >= 1 ? this.currentValues[e - 1] : 0,
    s = Math.max(this.previousValues[e], o),
    r = this.currentValues[e],
    c = this.previousValues[e];
  this.previousValues[e] = r;
  var d = ~~(Math.abs(r - s) * this.animTimeInMs);
  if (d < 15) {
    return this._setColorBarPos(t, i), n && n();
  }
  s !== c && (this._setColorBarPos(t, Math.round(100 * s) + "%"), a.forceReflow(t));
  var u = {};
  u[m] = this._getMaskSizeStyle(i), this.tweener = l.tween(t, u, {
    time: d,
    easing: "linear"
  }, n);
}
if (d < 15) {
  return this._setColorBarPos(t, i), n && n();
}
if (t.teamSide >= 0) {
  switch (t.teamSide) {
    case r.ALIGNMENT_NEUTRAL:
      i += "Neutre";
      break;
    case r.ALIGNMENT_ANGEL:
      i += "Bonta";
      break;
    case r.ALIGNMENT_EVIL:
      i += "Brakmar";
      break;
    case r.ALIGNMENT_MERCENARY:
      i += "Seriane";
  }
} else {
  switch (t.teamTypeId) {
    case f.TEAM_TYPE_MONSTER:
      i += "Monstre";
      break;
    case f.TEAM_TYPE_TAXCOLLECTOR:
      i += "Perco";
      break;
    default:
      i += "Neutre";
  }
}
for (var e = U.fightListTable.getRows(), t = 0; t < e.length; t += 1) {
  e[t].durationTimeoutId && clearTimeout(e[t].durationTimeoutId);
}
if (!t) {
  return i.setText("-");
}
for (var t = U.fightListTable.getRows(), i = 0; i < t.length; i += 1) {
  var n = t[i].fight || {};
  if (e === n.fightId) {
    return i;
  }
}
if (e === n.fightId) {
  return i;
}
if (!(e.playerId < 0)) {
  var t = {
    playerName: e.playerName,
    playerId: e.playerId,
    guildId: e.guildId
  };
  window.gui.openContextualMenu("player", t);
}
for (var d = 0; d < j.length; d += 1) {
  var u = j[d],
    p = C(u);
  c.appendChild(p), o.gameFightOptions[u] = p;
}
if (q && q.fightId) {
  var e = q.fightTeams[o.teamId].leaderId;
  window.dofus.sendMessage("GameFightJoinRequestMessage", {
    fightId: q.fightId,
    fighterId: e
  }), _.close(U.id);
}
for (var i in t) {
  D(e.teamId, i, !1);
}
if (!q) {
  return void t.disable();
}
if (t) {
  var n = U["col" + (e + 1)],
    o = n.gameFightOptions[t];
  o && n && o.toggleDisplay(i);
}
if (q) {
  for (var n in Y) {
    if (Y[n] === t) {
      var o = q.fightTeamsOptions[e];
      o[n] = i;
      break;
    }
  }
}
for (var n in Y) {
  if (Y[n] === t) {
    var o = q.fightTeamsOptions[e];
    o[n] = i;
    break;
  }
}
if (Y[n] === t) {
  var o = q.fightTeamsOptions[e];
  o[n] = i;
  break;
}
if (t >= 0) {
  var i = U.fightListTable.getRow(t);
  i.fight.fightSpectatorLocked = e.state;
  var n = U.fightListTable.getCol(t, "spectatorLocked"),
    a = n.getChild("spectatorLocked");
  a.toggleDisplay(e.state);
}
if (t = t || [], e.table.clearContent(), e.averageLevelContainer.toggleDisplay(!!t.length), A(e), t.length) {
  var i = e.teamId,
    n = q.fightTeamsOptions[i];
  for (var o in n) {
    if (Y.hasOwnProperty(o)) {
      var a = Y[o],
        s = n[o];
      D(i, a, s);
    }
  }
  for (var r = 0, l = t.length, c = 0; c < l; c++) {
    var d = t[c];
    T(e, d), r += d.level;
  }
  e.averageLevel.setText(Math.round(r / l));
}
for (var o in n) {
  if (Y.hasOwnProperty(o)) {
    var a = Y[o],
      s = n[o];
    D(i, a, s);
  }
}
if (Y.hasOwnProperty(o)) {
  var a = Y[o],
    s = n[o];
  D(i, a, s);
}
for (var r = 0, l = t.length, c = 0; c < l; c++) {
  var d = t[c];
  T(e, d), r += d.level;
}
if (t.length < 1) {
  return void x();
}
for (t.forEach(function (e) {
  d.push(e.fightId);
}), a = 0; a < c.length; a += 1) {
  var u = c[a];
  d.indexOf(u) < 0 && (r = o(u), U.fightListTable.delRow(r));
}
for (a = 0; a < t.length; a++) {
  var h = t[a],
    p = M(h);
  r = o(h.fightId), s = r >= 0 ? U.fightListTable.updateRow(r, p, {
    fight: h
  }) : U.fightListTable.addRow(p, {
    fight: h
  }), n(s, h.fightStart);
}
if (q && q.fightId) {
  var m = y(q.fightId);
  if (m) {
    return void m.tap();
  }
}
if (m) {
  return void m.tap();
}
if (e) {
  r.close("global");
  var t = !window.gui.playerData.isModeratorOrMore();
  window.dofus.disconnect(), !window.developmentMode && t && window.location.reload();
}
if (this.multiCharacterSelector.setEnable(i), i) {
  var n = window.gui.databases.Breeds;
  this.multiCharacterSelector.clearContent();
  for (var o = 0; o < e.length; o++) {
    var a = e[o],
      s = a.name + " (" + n[a.breed].shortNameId + " " + a.level + ")";
    this.multiCharacterSelector.addOption(s, a.id);
  }
  var r = !0;
  this.multiCharacterSelector.select(window.gui.playerData.id, r);
}
for (var o = 0; o < e.length; o++) {
  var a = e[o],
    s = a.name + " (" + n[a.breed].shortNameId + " " + a.level + ")";
  this.multiCharacterSelector.addOption(s, a.id);
}
if (t.windowId === e.id && t.tabId) {
  return e.tabs.getTabsMap()[t.tabId] ? void e.tabs.toggleTabAvailability(t.tabId, !t.locked) : console.error(new Error("Unknown tab id `" + t.tabId + "` in `" + e.id + "` window."));
}
if (i = i || "", !e || !t) {
  return console.error("Missing informations to add a tab");
}
if (this.tabs) {
  for (var e in this.tabs.getTabsMap()) {
    var t = window.gui.uiLocker.isTabAvailable(this.id, e);
    this.tabs.toggleTabAvailability(e, t);
  }
}
for (var e in this.tabs.getTabsMap()) {
  var t = window.gui.uiLocker.isTabAvailable(this.id, e);
  this.tabs.toggleTabAvailability(e, t);
}
if (this.tabs) {
  var e = this,
    t = window.gui.playerData;
  this._openedTimestampTabs = {}, this._scBalanceWhenOpenTabs = {}, this._hcBalanceWhenOpenTabs = {}, this.tabs.tabsOrderIds.forEach(function (i) {
    e.tabs.tabsMap[i].target.on("open", function () {
      e._openedTimestampTabs[i] = l.now(), e._scBalanceWhenOpenTabs[i] = t.inventory.kamas, e._hcBalanceWhenOpenTabs[i] = t.inventory.goultines;
    }), e.tabs.tabsMap[i].target.on("close", function () {
      e.prepareKPI(i, e._openedTimestampTabs[i], e._scBalanceWhenOpenTabs[i], e._hcBalanceWhenOpenTabs[i]), e._resetWindowKPI(i);
    });
  });
}
if (this.specialisations.clearContent(), 0 !== i.alignmentSide) {
  for (var n = 0; n < t.alignmentRanks.length; n++) {
    var o = t.alignmentRanks[n];
    o.orderId === e && this.specialisations.addRow([o.nameId, o.minimumAlignment]);
  }
}
for (var n = 0; n < t.alignmentRanks.length; n++) {
  var o = t.alignmentRanks[n];
  o.orderId === e && this.specialisations.addRow([o.nameId, o.minimumAlignment]);
}
if (this.characterDisplay) {
  var i = this;
  0 === t.alignmentSide ? (this.rightColumn.addClassNames("disabled"), this.pvpButton.hide()) : (this.rightColumn.delClassNames("disabled"), this.pvpButton.show()), this._displayPvpInformations();
  var n = e.getNameId();
  i.alignmentName.setText(c("ui.common.alignment") + " " + n), e.getRank(function (n, o) {
    return n ? console.error("Failed to get alignment rank", n) : (i.alignmentLevel.setText(o.nameId + " - " + c("ui.common.level") + " " + t.alignmentValue), i._displaySpecialisations(o.orderId), void e.getOrder(o, function (t, n) {
      return t ? console.error("Failed to get AlignmentOrder", t) : (i.title.setText(n.nameId), e.getAlignmentImageUrl(function (e) {
        i.alignmentImage.setStyle("backgroundImage", e);
      }), void e.getOrderImageUrl(n.id, function (e) {
        i.icon.setStyle("backgroundImage", e);
      }));
    }));
  });
}
if (a.setValue(n.categoriesTotalPercentage[t]), this.progressBarTooltip[t].setText(n.categoriesTotalCurrentAchievementCount[t] + " / " + n.categoriesTotalAchievementCount[t]), i) {
  var s = this.achievementsList.getItem(i);
  s && s.getChild(i).addClassNames("completed");
}
for (var n = 0; n < this.banners.length; n += 1) {
  this.banners[n].setStyles({
    height: t + "px"
  });
}
if (0 === t.parentId) {
  window.gui.playerData.achievements.getCategoryPercentage(t.id);
  var i = new a("div", {
    className: ["label", "noPadding"],
    name: "label"
  });
  i.createChild("div", {
    className: ["icon", t.icon]
  }), i.createChild("div", {
    className: "text",
    text: t.nameId
  }), window.gui.playerData.achievements.categoriesAchievementCount[t.id] && i.createChild("div", {
    className: "percentage",
    name: "percentage",
    text: (100 * window.gui.playerData.achievements.categoriesPercentage[t.id]).toFixed() + "%"
  }), l[t.id] = e.categoriesList.addItem({
    id: t.id,
    element: i,
    data: t
  });
} else {
  o.push(t);
}
for (var t = 0; t < n.banners.length; t += 1) {
  n.banners[t].setStyle("backgroundImage", e[t]);
}
if ("mainProgressBar" === e.id) {
  var s = this.progressBarTooltip[e.id] = new a("div", {
    text: window.gui.playerData.achievements.finishedAchievementsIds.length + " / " + window.gui.playerData.achievements.maximumNumberOfAchievements
  });
  return o.setValue(window.gui.playerData.achievements.getAchievementPercent() / 100), _.addTooltip(o, s), t.addClassNames("mainProgressBar");
}
if (e.length > 100 && t) {
  return window.gui.openSimplePopup(p("tablet.ui.search.tooManyResults"));
}
if (e) {
  return console.error("Achievements with achievementIds error", e);
}
for (var o = [], a = 0; a < t.length; a++) {
  for (var r = t[a].objectiveIds, l = 0; l < r.length; l++) {
    o.push(r[l]);
  }
}
for (var r = t[a].objectiveIds, l = 0; l < r.length; l++) {
  o.push(r[l]);
}
if (e) {
  return console.error("unable to retrieve data from AchievementObjectives", e);
}
for (var o = [], a = [], s = i.hideUnlockedChecked, r = 0, l = n.length; r < l; r++) {
  o.push("gfx/achievements/" + n[r].iconId + ".png");
  var c = i._addAchievement(n[r], t);
  a.push(c), s && !c.hasClassName("completed") && (s = !1);
}
for (var t = 0, i = e.length; t < i; t += 1) {
  var n = a[t].icon;
  n ? n.setImage(e[t]) : console.warn("Missing icon for achievement #" + t, a[t]);
}
if (i || !n) {
  return console.error("Failed getting Achievements #" + e + " error: " + i + " res: " + n);
}
if (s) {
  s.isSelected ? t.achievementsList.selectItem(e) : (t.openAchievementWithID = e, a.selectItem(n.categoryId));
} else {
  var r = a.getItems();
  for (var l in r) {
    if (r.hasOwnProperty(l)) {
      var c = r[l],
        d = c.sublist;
      if (d && (o = d.getItem(n.categoryId))) {
        o.isSelected ? t.achievementsList.selectItem(e) : (c.isSelected || a.selectItem(c.id), c.sublist.show(), t.openAchievementWithID = e, d.selectItem(n.categoryId));
        break;
      }
    }
  }
}
for (var l in r) {
  if (r.hasOwnProperty(l)) {
    var c = r[l],
      d = c.sublist;
    if (d && (o = d.getItem(n.categoryId))) {
      o.isSelected ? t.achievementsList.selectItem(e) : (c.isSelected || a.selectItem(c.id), c.sublist.show(), t.openAchievementWithID = e, d.selectItem(n.categoryId));
      break;
    }
  }
}
if (r.hasOwnProperty(l)) {
  var c = r[l],
    d = c.sublist;
  if (d && (o = d.getItem(n.categoryId))) {
    o.isSelected ? t.achievementsList.selectItem(e) : (c.isSelected || a.selectItem(c.id), c.sublist.show(), t.openAchievementWithID = e, d.selectItem(n.categoryId));
    break;
  }
}
if (d && (o = d.getItem(n.categoryId))) {
  o.isSelected ? t.achievementsList.selectItem(e) : (c.isSelected || a.selectItem(c.id), c.sublist.show(), t.openAchievementWithID = e, d.selectItem(n.categoryId));
  break;
}
if (null !== e && "" !== e) {
  if (e.length < 3) {
    return _.showNotification(p("ui.common.searchFilterTooltip"), this.searchBox);
  }
  e = f.simplifyString(e);
  var t = this;
  this.searchAchievementIds = [];
  var i = function (e, i) {
    for (var n in e) {
      if (e.hasOwnProperty(n)) {
        var o = e[n],
          a = i ? o.achievementId : o.id;
        t.searchAchievementIds.indexOf(a) === -1 && t.searchAchievementIds.push(a);
      }
    }
  };
  this.searchName ? s.searchDataMap("Achievements", {
    match: e
  }, function (e, n) {
    return t.hasSearchedName = !0, e ? console.error("AchievementsWindow achievements search", e) : (i(n), void t._searchResult());
  }) : this.hasSearchedName = !0, this.searchDescription ? s.searchDataMap("Achievements", {
    match: e,
    matchProp: "descriptionId"
  }, function (e, n) {
    return t.hasSearchedDescription = !0, e ? console.error("AchievementsWindow description search", e) : (i(n), void t._searchResult());
  }) : this.hasSearchedDescription = !0, this.searchObjective ? s.searchDataMap("AchievementObjectives", {
    match: e
  }, function (e, n) {
    return t.hasSearchedObjectives = !0, e ? console.error("AchievementsWindow objectives search", e) : (i(n, !0), void t._searchResult());
  }) : this.hasSearchedObjectives = !0, t._searchResult();
}
if (e.length < 3) {
  return _.showNotification(p("ui.common.searchFilterTooltip"), this.searchBox);
}
for (var n in e) {
  if (e.hasOwnProperty(n)) {
    var o = e[n],
      a = i ? o.achievementId : o.id;
    t.searchAchievementIds.indexOf(a) === -1 && t.searchAchievementIds.push(a);
  }
}
if (e.hasOwnProperty(n)) {
  var o = e[n],
    a = i ? o.achievementId : o.id;
  t.searchAchievementIds.indexOf(a) === -1 && t.searchAchievementIds.push(a);
}
if (l.length !== e.length) {
  return a("Achievement: Missing rewards data or images");
}
if (e) {
  return a(e);
}
for (var l = [], c = {}, d = 0; d < t.length; d += 1) {
  var u = s[t[d]],
    h = null !== n ? i + "/" + u[n] + ".png" : i;
  c[h] = {
    data: u,
    quantity: o[d] || null
  }, l.push(h);
}
for (var h = 0; h < e.objectiveIds.length; h++) {
  var p = e.objectiveIds[h],
    f = t[p];
  if (f && this.objectivesBox.rootElement) {
    var g = this.objectivesBox.createChild("div", {
        className: ["objective", f.id],
        name: f.id
      }),
      _ = 0 === f.criterion.indexOf("OA"),
      v = g.createChild("span", {
        className: "text"
      });
    if (v.setHtml(n(f) + (_ ? " " + u("ui.common.fakeLinkSee") : "")), _) {
      var w = Number(f.criterion.substr(3, f.criterion.length));
      isNaN(w) ? console.warn("Failed parsing achievementId of objective.criterion: " + f.criterion) : (g.achievementID = w, m(g), g.on("tap", a));
    }
  }
}
if (f && this.objectivesBox.rootElement) {
  var g = this.objectivesBox.createChild("div", {
      className: ["objective", f.id],
      name: f.id
    }),
    _ = 0 === f.criterion.indexOf("OA"),
    v = g.createChild("span", {
      className: "text"
    });
  if (v.setHtml(n(f) + (_ ? " " + u("ui.common.fakeLinkSee") : "")), _) {
    var w = Number(f.criterion.substr(3, f.criterion.length));
    isNaN(w) ? console.warn("Failed parsing achievementId of objective.criterion: " + f.criterion) : (g.achievementID = w, m(g), g.on("tap", a));
  }
}
if (v.setHtml(n(f) + (_ ? " " + u("ui.common.fakeLinkSee") : "")), _) {
  var w = Number(f.criterion.substr(3, f.criterion.length));
  isNaN(w) ? console.warn("Failed parsing achievementId of objective.criterion: " + f.criterion) : (g.achievementID = w, m(g), g.on("tap", a));
}
for (y.addTooltip(T, u("ui.achievement.achievedBySomeoneElse"), {
  longTapExplanation: !0
}), this.rewardList = b.createChild("div", {
  className: "rewardList"
}), h = 0; h < 6; h++) {
  this.rewardList.appendChild(new c({
    name: "icon" + h
  }));
}
for (var i = 0; i < e.length; i += 1) {
  var n = e[i];
  1 === n.maxValue ? (this.progression.hide(), this.objectivesBox.show()) : (this.progression.show(), this.objectivesBox.hide(), this.progressionText.setText(n.value + "/" + n.maxValue), this.progressionBar.setValue(n.value, n.maxValue));
}
for (i = 0; i < t.length; i += 1) {
  n = t[i];
  var a = this.objectivesBox.getChild(n.id);
  a && a.addClassNames("completed"), 1 === n.maxValue ? (this.progression.hide(), this.objectivesBox.show()) : (this.progression.show(), this.objectivesBox.hide(), this.progressionText.setText(n.maxValue + "/" + n.maxValue), this.progressionBar.setValue(n.maxValue, n.maxValue));
}
if (e) {
  if (console.error("Loaded static achievement data error", e), s._hasBeenDestroyed) {
    return;
  }
  return void s.spinner.hide();
}
if (console.error("Loaded static achievement data error", e), s._hasBeenDestroyed) {
  return;
}
for (var i = [], n = [], a = 0, r = t.length; a < r; a += 1) {
  t[a] && t[a].data && t[a].data._type && (n.push(t[a].data.id), i.push(t[a]));
}
for (a = 0, r = t.length; a < r; a += 1) {
  t[a] && t[a].data && !t[a].data._type && (n.push(t[a].data.id), i.push(t[a]));
}
if (e) {
  if (console.error("Failed to get items", e), s._hasBeenDestroyed) {
    return;
  }
  return void s.spinner.hide();
}
if (console.error("Failed to get items", e), s._hasBeenDestroyed) {
  return;
}
if (!s._hasBeenDestroyed) {
  for (var t = 0, a = n.length; t < a; t += 1) {
    var r = n[t],
      c = v.items[r],
      d = s.rewardList.getChild("icon" + t),
      p = i[t];
    if (!d) {
      return s.spinner.hide(), console.warn("Achievement: Missing icon" + t);
    }
    if (c && "Item" === p.data._type) {
      var m = u("ui.item.averageprice") + " : ",
        f = c.getProperty("averagePrice");
      m += f === -1 ? u("ui.item.averageprice.unavailable") : h.kamasToString(f), d.setContextMenu("item", {
        item: c
      });
    }
    var g = p.url,
      _ = p.quantity,
      y = p.data;
    d.setImage(g), _ && d.setQuantity(_);
    var w = new l("div");
    w.createChild("div", {
      text: y.nameId || o(y)
    }), m && "Item" === p.data._type && w.createChild("div", {
      text: m
    }), y.descriptionId && w.createChild("div", {
      text: y.descriptionId,
      className: "details"
    }), d.setTooltip(w);
  }
  s.spinner.hide();
}
for (var t = 0, a = n.length; t < a; t += 1) {
  var r = n[t],
    c = v.items[r],
    d = s.rewardList.getChild("icon" + t),
    p = i[t];
  if (!d) {
    return s.spinner.hide(), console.warn("Achievement: Missing icon" + t);
  }
  if (c && "Item" === p.data._type) {
    var m = u("ui.item.averageprice") + " : ",
      f = c.getProperty("averagePrice");
    m += f === -1 ? u("ui.item.averageprice.unavailable") : h.kamasToString(f), d.setContextMenu("item", {
      item: c
    });
  }
  var g = p.url,
    _ = p.quantity,
    y = p.data;
  d.setImage(g), _ && d.setQuantity(_);
  var w = new l("div");
  w.createChild("div", {
    text: y.nameId || o(y)
  }), m && "Item" === p.data._type && w.createChild("div", {
    text: m
  }), y.descriptionId && w.createChild("div", {
    text: y.descriptionId,
    className: "details"
  }), d.setTooltip(w);
}
if (!d) {
  return s.spinner.hide(), console.warn("Achievement: Missing icon" + t);
}
if (c && "Item" === p.data._type) {
  var m = u("ui.item.averageprice") + " : ",
    f = c.getProperty("averagePrice");
  m += f === -1 ? u("ui.item.averageprice.unavailable") : h.kamasToString(f), d.setContextMenu("item", {
    item: c
  });
}
if (!e.rewardIds.length) {
  return t(null, []);
}
if (!p) {
  return e ? (p = !0, t(e)) : (m = m.concat(i), d += i.length, u += 1, d === c || u === l.length ? t(null, m) : void 0);
}
if (o) {
  return t(o);
}
for (var l = ["Ornaments", "Items", "Spells", "Titles", "Emoticons"], c = 0, d = 0, u = 0, p = !1, m = [], f = window.gui.playerData.achievements.completedData(e.id), g = f.finishedlevel || window.gui.playerData.characterBaseInformations.level, _ = e.level, v = 0; v < n.length; v += 1) {
  var y = n[v],
    w = a[y];
  if (w) {
    var b = w.isLinkedToAccount && f.isAccountCompleted;
    if (w.experienceRatio) {
      var M = "0";
      if (!b) {
        var T = window.gui.playerData.achievements.getAchievementExperienceReward(w, _, g);
        M = h.intToString(T);
      }
      i._xpValue.setText(M);
    } else if (w.kamasRatio) {
      var C = "0";
      if (!b) {
        var I = window.gui.playerData.achievements.getAchievementKamasReward(w, _, g);
        C = h.intToString(I);
      }
      i._kamaValue.setText(C);
    }
    if (!(b || g && (w.levelMin !== -1 && g < w.levelMin || w.levelMax !== -1 && g > w.levelMax))) {
      var A = w.itemsReward,
        S = w.ornamentsReward,
        E = w.spellsReward,
        N = w.titlesReward,
        x = w.emotesReward;
      c += A.length + S.length + E.length + N.length + x.length, s(l[0], S, "gfx/ornaments", "iconId", [], r), s(l[1], A, "gfx/items", "iconId", w.itemsQuantityReward, r), s(l[2], E, "gfx/spells", "iconId", [], r), s(l[3], N, "gfx/illusUi/genericTitleIcon.png", null, [], r), s(l[4], x, "gfx/emotes", "id", [], r);
    }
  } else {
    console.error("Unable to find reward id " + y + " in AchievementRewards DB");
  }
}
if (w) {
  var b = w.isLinkedToAccount && f.isAccountCompleted;
  if (w.experienceRatio) {
    var M = "0";
    if (!b) {
      var T = window.gui.playerData.achievements.getAchievementExperienceReward(w, _, g);
      M = h.intToString(T);
    }
    i._xpValue.setText(M);
  } else if (w.kamasRatio) {
    var C = "0";
    if (!b) {
      var I = window.gui.playerData.achievements.getAchievementKamasReward(w, _, g);
      C = h.intToString(I);
    }
    i._kamaValue.setText(C);
  }
  if (!(b || g && (w.levelMin !== -1 && g < w.levelMin || w.levelMax !== -1 && g > w.levelMax))) {
    var A = w.itemsReward,
      S = w.ornamentsReward,
      E = w.spellsReward,
      N = w.titlesReward,
      x = w.emotesReward;
    c += A.length + S.length + E.length + N.length + x.length, s(l[0], S, "gfx/ornaments", "iconId", [], r), s(l[1], A, "gfx/items", "iconId", w.itemsQuantityReward, r), s(l[2], E, "gfx/spells", "iconId", [], r), s(l[3], N, "gfx/illusUi/genericTitleIcon.png", null, [], r), s(l[4], x, "gfx/emotes", "id", [], r);
  }
} else {
  console.error("Unable to find reward id " + y + " in AchievementRewards DB");
}
if (w.experienceRatio) {
  var M = "0";
  if (!b) {
    var T = window.gui.playerData.achievements.getAchievementExperienceReward(w, _, g);
    M = h.intToString(T);
  }
  i._xpValue.setText(M);
} else if (w.kamasRatio) {
  var C = "0";
  if (!b) {
    var I = window.gui.playerData.achievements.getAchievementKamasReward(w, _, g);
    C = h.intToString(I);
  }
  i._kamaValue.setText(C);
}
if (!b) {
  var T = window.gui.playerData.achievements.getAchievementExperienceReward(w, _, g);
  M = h.intToString(T);
}
if (w.kamasRatio) {
  var C = "0";
  if (!b) {
    var I = window.gui.playerData.achievements.getAchievementKamasReward(w, _, g);
    C = h.intToString(I);
  }
  i._kamaValue.setText(C);
}
if (!b) {
  var I = window.gui.playerData.achievements.getAchievementKamasReward(w, _, g);
  C = h.intToString(I);
}
if (!(b || g && (w.levelMin !== -1 && g < w.levelMin || w.levelMax !== -1 && g > w.levelMax))) {
  var A = w.itemsReward,
    S = w.ornamentsReward,
    E = w.spellsReward,
    N = w.titlesReward,
    x = w.emotesReward;
  c += A.length + S.length + E.length + N.length + x.length, s(l[0], S, "gfx/ornaments", "iconId", [], r), s(l[1], A, "gfx/items", "iconId", w.itemsQuantityReward, r), s(l[2], E, "gfx/spells", "iconId", [], r), s(l[3], N, "gfx/illusUi/genericTitleIcon.png", null, [], r), s(l[4], x, "gfx/emotes", "id", [], r);
}
for (var t = {
    min: {},
    max: {}
  }, i = ["level", "lifePoints", "actionPoints", "movementPoints", "earthResistance", "airResistance", "fireResistance", "waterResistance", "neutralResistance"], o = i.length, a = 0, s = e.length; a < s; a += 1) {
  for (var r = e[a], l = 0; l < o; l += 1) {
    var c = i[l];
    n(c, r, t);
  }
}
for (var r = e[a], l = 0; l < o; l += 1) {
  var c = i[l];
  n(c, r, t);
}
for (var t = {}, i = ["percentDropForGrade1", "percentDropForGrade2", "percentDropForGrade3", "percentDropForGrade4", "percentDropForGrade5"], n = 0, o = i.length; n < o; n += 1) {
  var a = e[i[n]];
  (void 0 === t.min || t.min > a) && (t.min = a), (void 0 === t.max || t.max < a) && (t.max = a);
}
for (var i = 0, n = 0; n < t.length; n += 1) {
  var o = t[n];
  if (e.indexOf(o.toString()) === -1) {
    i = o;
    break;
  }
}
if (e.indexOf(o.toString()) === -1) {
  i = o;
  break;
}
if (i) {
  for (var a = 0; a < e.length; a += 1) {
    var s = e[a];
    B.push("cp " + i + ".png " + s + ".png ; cp " + i + ".png copyToSources/" + s + ".png");
  }
  return i.toString();
}
for (var a = 0; a < e.length; a += 1) {
  var s = e[a];
  B.push("cp " + i + ".png " + s + ".png ; cp " + i + ".png copyToSources/" + s + ".png");
}
if ("" === e) {
  return void (this.searching = !1);
}
if (t.searching) {
  if (n) {
    return t.monsterList.delClassNames("spinner"), t.errorText.show(), console.error("BestiaryWindow items search", n);
  }
  var a = [];
  for (var s in o) {
    if (o.hasOwnProperty(s)) {
      var r = o[s];
      if (r.dropMonsterIds.length) {
        for (var l = 0; l < r.dropMonsterIds.length; l++) {
          var c = r.dropMonsterIds[l];
          a.indexOf(c) === -1 && a.push(c);
        }
      }
    }
  }
  g.searchDataMap("Monsters", {
    match: i
  }, function (i, n) {
    if (t.searching) {
      if (i) {
        return t.monsterList.delClassNames("spinner"), t.errorText.show(), console.error("BestiaryWindow monsters search", i);
      }
      for (var o in n) {
        if (n.hasOwnProperty(o)) {
          var s = n[o];
          a.indexOf(s.id) === -1 && a.push(s.id);
        }
      }
      t._showMonsters(a, e);
    }
  });
}
if (n) {
  return t.monsterList.delClassNames("spinner"), t.errorText.show(), console.error("BestiaryWindow items search", n);
}
for (var s in o) {
  if (o.hasOwnProperty(s)) {
    var r = o[s];
    if (r.dropMonsterIds.length) {
      for (var l = 0; l < r.dropMonsterIds.length; l++) {
        var c = r.dropMonsterIds[l];
        a.indexOf(c) === -1 && a.push(c);
      }
    }
  }
}
if (o.hasOwnProperty(s)) {
  var r = o[s];
  if (r.dropMonsterIds.length) {
    for (var l = 0; l < r.dropMonsterIds.length; l++) {
      var c = r.dropMonsterIds[l];
      a.indexOf(c) === -1 && a.push(c);
    }
  }
}
if (r.dropMonsterIds.length) {
  for (var l = 0; l < r.dropMonsterIds.length; l++) {
    var c = r.dropMonsterIds[l];
    a.indexOf(c) === -1 && a.push(c);
  }
}
for (var l = 0; l < r.dropMonsterIds.length; l++) {
  var c = r.dropMonsterIds[l];
  a.indexOf(c) === -1 && a.push(c);
}
if (t.searching) {
  if (i) {
    return t.monsterList.delClassNames("spinner"), t.errorText.show(), console.error("BestiaryWindow monsters search", i);
  }
  for (var o in n) {
    if (n.hasOwnProperty(o)) {
      var s = n[o];
      a.indexOf(s.id) === -1 && a.push(s.id);
    }
  }
  t._showMonsters(a, e);
}
if (i) {
  return t.monsterList.delClassNames("spinner"), t.errorText.show(), console.error("BestiaryWindow monsters search", i);
}
for (var o in n) {
  if (n.hasOwnProperty(o)) {
    var s = n[o];
    a.indexOf(s.id) === -1 && a.push(s.id);
  }
}
if (n.hasOwnProperty(o)) {
  var s = n[o];
  a.indexOf(s.id) === -1 && a.push(s.id);
}
if (e) {
  return i._clearAndRemoveSpinner(), i.errorText.show(), i.monsterList.refresh(), console.error("BestiaryWindow showMonsters error", e);
}
if (0 === n) {
  return i._clearAndRemoveSpinner(), i.noResultText.show(), void i.monsterList.refresh();
}
for (var o = [], a = 0; a < n; a += 1) {
  var s = t[a];
  o.push("gfx/monsters/" + s.id + ".png");
}
for (var o = 0; o < n; o += 1) {
  i.addMonster(t[o], e[o]);
}
if (t) {
  var n = new Error("integrity error: " + t);
  return N.error(n), e(n);
}
for (var c in i) {
  if (i.hasOwnProperty(c)) {
    var d = i[c],
      u = I.parseLook(N, d.look, "Monster " + d.id).bone;
    o["gfx/monsters/" + d.id + ".png"] = !0, a[d.id] = u, l[d.id] = d.look, s[u] ? s[u].push(d.id) : s[u] = [d.id];
  }
}
if (i.hasOwnProperty(c)) {
  var d = i[c],
    u = I.parseLook(N, d.look, "Monster " + d.id).bone;
  o["gfx/monsters/" + d.id + ".png"] = !0, a[d.id] = u, l[d.id] = d.look, s[u] ? s[u].push(d.id) : s[u] = [d.id];
}
if (i.length > 0) {
  for (var c, d = [], u = {}, h = 0; h < i.length; h += 1) {
    var p = i[h];
    N.error(p.error);
    var m = p.url || "",
      f = m.split("/").pop(),
      g = f.split(".")[0];
    c = a[g] || -1, c <= 1 ? d.push([g, l[g]]) : u[c] ? u[c].push(g) : u[c] = [g];
  }
  var _ = Object.keys(u).length,
    v = "[Bestiary integrity] Missing bones count: " + _;
  N.error(v), o.push(v);
  for (c in u) {
    if (u.hasOwnProperty(c)) {
      var y = u[c];
      v = 'Missing bones: "' + c + '" for monster id "' + y.join(",") + '"';
      var w = r(y, s[c]);
      w && (v += ' can steal from: "' + w + '"'), N.error(v), o.push(v);
    }
  }
  if (d.length > 0) {
    var b = d.length;
    o.push(""), v = "[Bestiary integrity] Missing bones 1 or null count: " + b, N.error(v), o.push(v);
    for (var M = 0, T = d.length; M < T; M += 1) {
      var C = d[M];
      v = 'Do something for monster "' + C[0] + '" with bones 1 or null and look: "', v += C[1] + '"', N.error(v), o.push(v);
    }
  }
  o.length && N.log(o.join("[LF]")), B.length && N.log("Command to do inside compiled gfx/monsters folder: mkdir copyToSources ; " + B.join(" ; "));
}
for (var c, d = [], u = {}, h = 0; h < i.length; h += 1) {
  var p = i[h];
  N.error(p.error);
  var m = p.url || "",
    f = m.split("/").pop(),
    g = f.split(".")[0];
  c = a[g] || -1, c <= 1 ? d.push([g, l[g]]) : u[c] ? u[c].push(g) : u[c] = [g];
}
for (c in u) {
  if (u.hasOwnProperty(c)) {
    var y = u[c];
    v = 'Missing bones: "' + c + '" for monster id "' + y.join(",") + '"';
    var w = r(y, s[c]);
    w && (v += ' can steal from: "' + w + '"'), N.error(v), o.push(v);
  }
}
if (u.hasOwnProperty(c)) {
  var y = u[c];
  v = 'Missing bones: "' + c + '" for monster id "' + y.join(",") + '"';
  var w = r(y, s[c]);
  w && (v += ' can steal from: "' + w + '"'), N.error(v), o.push(v);
}
if (d.length > 0) {
  var b = d.length;
  o.push(""), v = "[Bestiary integrity] Missing bones 1 or null count: " + b, N.error(v), o.push(v);
  for (var M = 0, T = d.length; M < T; M += 1) {
    var C = d[M];
    v = 'Do something for monster "' + C[0] + '" with bones 1 or null and look: "', v += C[1] + '"', N.error(v), o.push(v);
  }
}
for (var M = 0, T = d.length; M < T; M += 1) {
  var C = d[M];
  v = 'Do something for monster "' + C[0] + '" with bones 1 or null and look: "', v += C[1] + '"', N.error(v), o.push(v);
}
if (this.params = e || {}, this.updateRequired && this._updateSubAreaList(), e.search) {
  this._search(e.search);
} else if (e.monsterIds) {
  this._showMonsters(e.monsterIds, e.label);
} else if (!e.monsterIds) {
  var i = window.gui.playerData.position.area.id,
    n = window.gui.playerData.position.subAreaId;
  t.subAreas[n].monsters.length > 0 && setTimeout(function () {
    t._selectSubArea(i, n), t._showMonsters(t.subAreas[n].monsters, "");
  }, 0);
}
if (e.monsterIds) {
  this._showMonsters(e.monsterIds, e.label);
} else if (!e.monsterIds) {
  var i = window.gui.playerData.position.area.id,
    n = window.gui.playerData.position.subAreaId;
  t.subAreas[n].monsters.length > 0 && setTimeout(function () {
    t._selectSubArea(i, n), t._showMonsters(t.subAreas[n].monsters, "");
  }, 0);
}
if (!e.monsterIds) {
  var i = window.gui.playerData.position.area.id,
    n = window.gui.playerData.position.subAreaId;
  t.subAreas[n].monsters.length > 0 && setTimeout(function () {
    t._selectSubArea(i, n), t._showMonsters(t.subAreas[n].monsters, "");
  }, 0);
}
for (var e = this, t = 0, i = O.length; t < i; t += 1) {
  var n = O[t],
    o = new f("div", {
      className: "label"
    });
  o.createChild("div", {
    className: "arrow"
  }), o.createChild("div", {
    className: "text",
    text: n.nameId
  });
  var a = e.subAreaList.addItem({
    id: n.id,
    element: o
  }, {
    noRefresh: !0
  });
  a.hide(), a.sublist = a.appendChild(new f("div", {
    className: "sublist"
  })), a.sublist.hide();
}
for (var e = this, t = 0, i = D.length; t < i; t += 1) {
  var n = D[t],
    o = new f("div", {
      className: "label"
    });
  o.createChild("div", {
    className: "arrow"
  }), o.createChild("div", {
    className: "text",
    text: n.nameId
  });
  var a = e.raceList.addItem({
    id: n.id,
    element: o
  }, {
    noRefresh: !0
  });
  a.hide(), a.sublist = a.appendChild(new f("div", {
    className: "sublist"
  })), a.sublist.hide();
}
for (var t in e) {
  var i = e[t],
    n = i.monsterData,
    o = i.mapLocationDom;
  o.clearContent(), o.appendChild(b.createMapLocation(n.subareas, this.subAreas, n.favoriteSubareaId));
}
if (e.subAreas[t.id] = t, 0 !== e.subAreas[t.id].monsters.length && e.subAreaList.getItem(t.areaId)) {
  var i = new f("div", {
    className: "label",
    name: t.id
  });
  i.createChild("div", {
    className: "text",
    text: t.nameId
  }), e.subAreaList.getItem(t.areaId).sublist.appendChild(i), E(i), i.on("tap", function () {
    e._resetSelectedSubAreaElement(), i.addClassNames("selected"), e.selectedSubAreaElement = i, e._showMonsters(e.subAreas[t.id].monsters, "");
  });
}
if (t.monsters.length > 0) {
  var i = new f("div", {
    className: "label",
    name: t.id
  });
  i.createChild("div", {
    className: "text",
    text: t.nameId
  }), e.raceList.getItem(t.superRaceId).sublist.appendChild(i), E(i), i.on("tap", function () {
    e._resetSelectedRaceElement(), i.addClassNames("selected"), e.selectedRaceElement = i, e._showMonsters(e.races[t.id].monsters, "");
  }), e.races[t.id] = t;
}
if (0 === e || e) {
  var i = this.subAreaList.getItem(e);
  if (i) {
    this.subAreaList.selectItem(e);
    var n = i.sublist.getChild(t);
    n.tap(), this.subAreaList.showElement(n);
  }
}
if (i) {
  this.subAreaList.selectItem(e);
  var n = i.sublist.getChild(t);
  n.tap(), this.subAreaList.showElement(n);
}
for (var t, i, n, o = e.getItems(), a = !0, s = 0; s < o.length; s += 1) {
  t = o[s], i = t.sublist.getChildren(), a = !0;
  for (var r = 0; r < i.length; r += 1) {
    n = i[r], a = !1, n.show();
  }
  a ? t.hide() : t.show();
}
for (var r = 0; r < i.length; r += 1) {
  n = i[r], a = !1, n.show();
}
if (0 !== t.length) {
  e.more.createChild("div", {
    className: "subtitle",
    text: M("ui.common.loot")
  }), this.monsterList.refresh();
  var i = t.map(function (e) {
      return e.objectId;
    }),
    n = this;
  v.getItems(i, function (o) {
    if (o) {
      return console.error("Failed to get items", o);
    }
    for (var s = 0; s < i.length; s += 1) {
      var r = i[s],
        l = v.items[r];
      if (l) {
        if (window.gui.playerData.isAdmin() || l.typeId !== y.types.marker) {
          var c = new w();
          e.more.appendChild(c), c.itemDataElement = l;
          var u = a(t[s]);
          c.dropInfo = {
            findCeil: t[s].findCeil,
            dropMinPercent: u.min,
            dropMaxPercent: u.max,
            hasProspectionBonus: t[s].hasProspectionBonus,
            hasPackBonus: t[s].hasPackBonus
          }, c.setTooltip(d), c.toggleClassName("special", t[s].hasCriteria), c.setItem(l), c.setContextMenu("item", {
            item: l
          }), c.dropInfo.dropMinPercent < 2 ? c.addClassNames("rareDrop") : c.dropInfo.dropMinPercent < 10 && c.addClassNames("okDrop");
        }
      } else {
        console.warn("monster", e.monsterData.id, "contains invalid drop item in pos ", s);
      }
    }
    n.monsterList.refresh();
  });
}
if (o) {
  return console.error("Failed to get items", o);
}
for (var s = 0; s < i.length; s += 1) {
  var r = i[s],
    l = v.items[r];
  if (l) {
    if (window.gui.playerData.isAdmin() || l.typeId !== y.types.marker) {
      var c = new w();
      e.more.appendChild(c), c.itemDataElement = l;
      var u = a(t[s]);
      c.dropInfo = {
        findCeil: t[s].findCeil,
        dropMinPercent: u.min,
        dropMaxPercent: u.max,
        hasProspectionBonus: t[s].hasProspectionBonus,
        hasPackBonus: t[s].hasPackBonus
      }, c.setTooltip(d), c.toggleClassName("special", t[s].hasCriteria), c.setItem(l), c.setContextMenu("item", {
        item: l
      }), c.dropInfo.dropMinPercent < 2 ? c.addClassNames("rareDrop") : c.dropInfo.dropMinPercent < 10 && c.addClassNames("okDrop");
    }
  } else {
    console.warn("monster", e.monsterData.id, "contains invalid drop item in pos ", s);
  }
}
if (l) {
  if (window.gui.playerData.isAdmin() || l.typeId !== y.types.marker) {
    var c = new w();
    e.more.appendChild(c), c.itemDataElement = l;
    var u = a(t[s]);
    c.dropInfo = {
      findCeil: t[s].findCeil,
      dropMinPercent: u.min,
      dropMaxPercent: u.max,
      hasProspectionBonus: t[s].hasProspectionBonus,
      hasPackBonus: t[s].hasPackBonus
    }, c.setTooltip(d), c.toggleClassName("special", t[s].hasCriteria), c.setItem(l), c.setContextMenu("item", {
      item: l
    }), c.dropInfo.dropMinPercent < 2 ? c.addClassNames("rareDrop") : c.dropInfo.dropMinPercent < 10 && c.addClassNames("okDrop");
  }
} else {
  console.warn("monster", e.monsterData.id, "contains invalid drop item in pos ", s);
}
if (window.gui.playerData.isAdmin() || l.typeId !== y.types.marker) {
  var c = new w();
  e.more.appendChild(c), c.itemDataElement = l;
  var u = a(t[s]);
  c.dropInfo = {
    findCeil: t[s].findCeil,
    dropMinPercent: u.min,
    dropMaxPercent: u.max,
    hasProspectionBonus: t[s].hasProspectionBonus,
    hasPackBonus: t[s].hasPackBonus
  }, c.setTooltip(d), c.toggleClassName("special", t[s].hasCriteria), c.setItem(l), c.setContextMenu("item", {
    item: l
  }), c.dropInfo.dropMinPercent < 2 ? c.addClassNames("rareDrop") : c.dropInfo.dropMinPercent < 10 && c.addClassNames("okDrop");
}
for (var c = [], d = 0, m = -1, f = 0; f < e.length; f++) {
  var g = t[e[f]],
    _ = o[g.areaId],
    v = a[g.customWorldMap[0]],
    y = v && v.id || n[_.superAreaId].worldmapId;
  y === r ? c.push(e[f]) : (d++, g.areaId !== p && (m = g.areaId));
}
if (d) {
  if (r === u) {
    var C = c.length > 0 ? "tablet.area.andOutside" : "tablet.area.outside";
    b += " (" + s(C, M) + ")";
  } else if (T) {
    var I = c.length > 0 ? "tablet.area.andInside" : "tablet.area.inside";
    b += " (" + s(I, T) + ")";
  }
}
if (r === u) {
  var C = c.length > 0 ? "tablet.area.andOutside" : "tablet.area.outside";
  b += " (" + s(C, M) + ")";
} else if (T) {
  var I = c.length > 0 ? "tablet.area.andInside" : "tablet.area.inside";
  b += " (" + s(I, T) + ")";
}
if (T) {
  var I = c.length > 0 ? "tablet.area.andInside" : "tablet.area.inside";
  b += " (" + s(I, T) + ")";
}
if (l && l.nameId && c.indexOf(i) !== -1) {
  T = window.gui.databases.Areas[l.areaId].nameId;
  var A = l.nameId;
  l.nameId.indexOf(T) === -1 && T !== M && (A += " (" + T + ")"), b += e.length >= 2 ? " - " + s("tablet.area.favorite") + s("ui.common.colon") + A : s("ui.common.colon") + A;
} else {
  i = null;
}
if (i) {
  return console.error("Titles and Ornaments: failed getting data", i), e(i);
}
for (var a = n.Titles, s = n.Ornaments, r = ["ui/slot.png", "gfx/illusUi/tx_bgTitleOrnament.png"], l = {}, c = 0; c < s.length; c++) {
  var d = s[c].iconId;
  void 0 === l[d] && (r.push("gfx/ornaments/" + d + ".png"), l[d] = r.length - 1);
}
for (n = 0; n < a.length; n += 1) {
  o = a[n], t._addTitleElement({
    id: o.id,
    maleText: o.nameMaleId,
    femaleText: o.nameFemaleId,
    visible: o.visible
  });
}
for (n = 0; n < s.length; n++) {
  o = s[n], t._addOrnamentElement(o, i[l[o.iconId]]);
}
if (this._titlesAndOrnaments) {
  var e = this._getActiveTitleId(),
    t = this._getActiveOrnamentId();
  this._currentTitleId = e, this._currentOrnamentId = t, this.titleList.deselectAll(), this.ornamentList.deselectAll(), this.titleList.selectItem(e, {
    noEvent: !0,
    noSound: !0
  }), this.ornamentList.selectItem(t, {
    noEvent: !0,
    noSound: !0
  }), this._setCharacterTitleAndOrnament(e, t);
}
for (var e = m.getValue("dofus_titleOrnaments_display_all", !1), t = this.titleList.getItems(), i = 0, n = 0; n < t.length; n += 1) {
  var o = t[n],
    a = e && o.data.visible;
  o.toggleDisplay(a || o.data.isAvailable), o.isVisible() && (o.toggleClassName("odd", i % 2 === 0), i += 1);
}
if (this.titleList.refresh(), null !== this._currentTitleId) {
  var s = this.titleList.getItem(this._currentTitleId);
  s.data.isAvailable || this.titleList.selectItem(this._getActiveTitleId(), {
    noSound: !0
  });
}
for (var e = m.getValue("dofus_titleOrnaments_display_all", !1), t = this.ornamentList.getItems(), i = 0, n = 0; n < t.length; n += 1) {
  var o = t[n],
    a = e && o.data.visible;
  o.toggleDisplay(a || o.data.isAvailable), o.isVisible() && (o.toggleClassName("odd", i % 2 === 0), i += 1);
}
if (this.ornamentList.refresh(), null !== this._currentOrnamentId) {
  var s = this.ornamentList.getItem(this._currentOrnamentId);
  s.data.isAvailable || this.ornamentList.selectItem(this._getActiveOrnamentId(), {
    noSound: !0
  });
}
for (var e = this._getOwnedTitles(), t = this.titleList.getItems(), i = 0; i < t.length; i += 1) {
  var n = t[i],
    o = n.data.id,
    a = this._getTitleText(n.data);
  if (a) {
    var s = n.getChildren();
    s[0].setText(a);
  }
  var r = e.indexOf(o) >= 0;
  n.data.isAvailable = r, n.toggleClassName("unavailable", !r);
}
if (a) {
  var s = n.getChildren();
  s[0].setText(a);
}
for (var e = this._getOwnedOrnaments(), t = this.ornamentList.getItems(), i = 0; i < t.length; i += 1) {
  var n = t[i],
    o = n.data.id,
    a = e.indexOf(o) >= 0;
  n.data.isAvailable = a, n.toggleClassName("unavailable", !a);
}
if (!t || !i) {
  return e;
}
if (t.length) {
  for (var i = {}, n = 0, o = t.length; n < o; n += 1) {
    var a = t[n];
    i[a[0]] = a[1];
  }
  var s = Object.keys(i);
  f.getItems(s, function (t, n) {
    return t ? console.error("Failed to retrieve items", s) : void n.forEach(function (t) {
      if (t) {
        var n = e.appendChild(new g());
        n.addClassNames("rewardSlot"), n.setItem(t), n.setQuantity(i[t.id]), n.on("tap", function () {
          S.open("itemBox", {
            itemData: t
          });
        });
      }
    });
  });
}
for (var i = {}, n = 0, o = t.length; n < o; n += 1) {
  var a = t[n];
  i[a[0]] = a[1];
}
if (t) {
  var n = e.appendChild(new g());
  n.addClassNames("rewardSlot"), n.setItem(t), n.setQuantity(i[t.id]), n.on("tap", function () {
    S.open("itemBox", {
      itemData: t
    });
  });
}
if (t) {
  return console.error(t);
}
if (t) {
  var i = e.appendChild(new T());
  i.addClassNames("rewardSlot"), o.push(i), i.icon.addClassNames("spinner"), n.push("gfx/emotes/" + t.id + ".png"), i.setTooltip(t.nameId);
}
for (var t = 0, i = e.length; t < i; t += 1) {
  var n = o[t];
  n.rootElement && (n.icon.delClassNames("spinner"), n.setImage(e[t]));
}
if (window.gui.playerData.isSubscriberAtMinLevel(O.NORMAL)) {
  var e = L.BONUS_PACK_XP;
  this._bonusPackText.setHtml(h("ui.shop.xpBonusPackJobActive", e, L.BONUS_PACK_XP)), this._linkToShop.hide();
} else {
  this._bonusPackText.setHtml(h("tablet.shop.xpBonusInactive", L.BONUS_PACK_XP)), this._linkToShop.show();
}
if (this._previousSearch = e, "" === e) {
  return void this._updateQuestList();
}
for (var a in o) {
  if (o.hasOwnProperty(a)) {
    var s = o[a];
    if (s.dbQuest && s.dbQuest.nameId && x.simplifyString(s.dbQuest.nameId).indexOf(i) > -1) {
      t[s.questId] = !0;
    } else {
      var r = s.stepId,
        l = s.dbSteps[r];
      if (l.descriptionId && x.simplifyString(l.descriptionId).indexOf(i) > -1 || l.nameId && x.simplifyString(l.nameId).indexOf(i) > -1) {
        t[s.questId] = !0;
      } else {
        for (var c in s.objectives) {
          if (s.objectives.hasOwnProperty(c)) {
            var d = s.objectives[c];
            if (d.text && x.simplifyString(d.text).indexOf(i) > -1) {
              t[s.questId] = !0;
              break;
            }
          }
        }
      }
    }
  }
}
if (o.hasOwnProperty(a)) {
  var s = o[a];
  if (s.dbQuest && s.dbQuest.nameId && x.simplifyString(s.dbQuest.nameId).indexOf(i) > -1) {
    t[s.questId] = !0;
  } else {
    var r = s.stepId,
      l = s.dbSteps[r];
    if (l.descriptionId && x.simplifyString(l.descriptionId).indexOf(i) > -1 || l.nameId && x.simplifyString(l.nameId).indexOf(i) > -1) {
      t[s.questId] = !0;
    } else {
      for (var c in s.objectives) {
        if (s.objectives.hasOwnProperty(c)) {
          var d = s.objectives[c];
          if (d.text && x.simplifyString(d.text).indexOf(i) > -1) {
            t[s.questId] = !0;
            break;
          }
        }
      }
    }
  }
}
if (s.dbQuest && s.dbQuest.nameId && x.simplifyString(s.dbQuest.nameId).indexOf(i) > -1) {
  t[s.questId] = !0;
} else {
  var r = s.stepId,
    l = s.dbSteps[r];
  if (l.descriptionId && x.simplifyString(l.descriptionId).indexOf(i) > -1 || l.nameId && x.simplifyString(l.nameId).indexOf(i) > -1) {
    t[s.questId] = !0;
  } else {
    for (var c in s.objectives) {
      if (s.objectives.hasOwnProperty(c)) {
        var d = s.objectives[c];
        if (d.text && x.simplifyString(d.text).indexOf(i) > -1) {
          t[s.questId] = !0;
          break;
        }
      }
    }
  }
}
if (l.descriptionId && x.simplifyString(l.descriptionId).indexOf(i) > -1 || l.nameId && x.simplifyString(l.nameId).indexOf(i) > -1) {
  t[s.questId] = !0;
} else {
  for (var c in s.objectives) {
    if (s.objectives.hasOwnProperty(c)) {
      var d = s.objectives[c];
      if (d.text && x.simplifyString(d.text).indexOf(i) > -1) {
        t[s.questId] = !0;
        break;
      }
    }
  }
}
for (var c in s.objectives) {
  if (s.objectives.hasOwnProperty(c)) {
    var d = s.objectives[c];
    if (d.text && x.simplifyString(d.text).indexOf(i) > -1) {
      t[s.questId] = !0;
      break;
    }
  }
}
if (s.objectives.hasOwnProperty(c)) {
  var d = s.objectives[c];
  if (d.text && x.simplifyString(d.text).indexOf(i) > -1) {
    t[s.questId] = !0;
    break;
  }
}
if (d.text && x.simplifyString(d.text).indexOf(i) > -1) {
  t[s.questId] = !0;
  break;
}
for (var t = this.questsList.getItems(), i = 0; i < t.length; i += 1) {
  for (var n = t[i], o = n.sublist.getChildren(), a = !0, s = 0; s < o.length; s += 1) {
    var r = o[s],
      l = r.getWuiName();
    e[l] ? (a = !1, r.show()) : r.hide();
  }
  a ? n.hide() : n.show();
}
for (var n = t[i], o = n.sublist.getChildren(), a = !0, s = 0; s < o.length; s += 1) {
  var r = o[s],
    l = r.getWuiName();
  e[l] ? (a = !1, r.show()) : r.hide();
}
for (var e = this, t = 0, i = D.length; t < i; t += 1) {
  var n = D[t],
    o = new E("div", {
      className: "label"
    });
  o.createChild("div", {
    className: "arrow"
  }), o.createChild("div", {
    className: "text",
    text: n.nameId
  });
  var a = o.createChild("div", {
    className: "followedCategoryButton"
  });
  I(a), a.on("tap", this._questCategoryFollowToggle.bind(this, [n.id]));
  var s = e.questsList.addItem({
    id: n.id,
    element: o
  }, {
    noRefresh: !0
  });
  s.followButton = a, s.hide(), s.sublist = s.appendChild(new E("div", {
    className: "sublist"
  })), s.sublist.hide();
}
for (var e = this.questsList.getItems(), t = 0; t < e.length; t += 1) {
  var i = e[t].sublist;
  i.clearContent();
}
for (t = 0; t < n.length; t += 1) {
  this._addQuest(n[t]);
}
for (t = 0; t < o.length; t += 1) {
  this._addQuest(o[t]);
}
if (e) {
  var i = this.questsList.getItem(e);
  if (i) {
    this.questsList.selectItem(e);
    var n = i.sublist.getChild(t);
    n && (n.hasClassName("completed") || (n.tap(), this.questsList.scrollToElement(n)));
  }
}
if (i) {
  this.questsList.selectItem(e);
  var n = i.sublist.getChild(t);
  n && (n.hasClassName("completed") || (n.tap(), this.questsList.scrollToElement(n)));
}
for (var e, t, i, n = this.questsList.getItems(), o = 0, a = 0; a < n.length; a += 1) {
  if (e = n[a], e.isVisible() && (e.toggleClassName("odd", o % 2 === 0), o += 1, e.sublist.isVisible())) {
    t = e.sublist.getChildren();
    for (var s = 0; s < t.length; s += 1) {
      i = t[s], i.isVisible() && (i.toggleClassName("odd", o % 2 === 0), o += 1);
    }
  }
}
if (e = n[a], e.isVisible() && (e.toggleClassName("odd", o % 2 === 0), o += 1, e.sublist.isVisible())) {
  t = e.sublist.getChildren();
  for (var s = 0; s < t.length; s += 1) {
    i = t[s], i.isVisible() && (i.toggleClassName("odd", o % 2 === 0), o += 1);
  }
}
for (var s = 0; s < t.length; s += 1) {
  i = t[s], i.isVisible() && (i.toggleClassName("odd", o % 2 === 0), o += 1);
}
if ("" !== this._previousSearch) {
  return this._search(this._previousSearch);
}
for (var e, t, i, n, o = A.getValue("showCompletedQuest", !1), a = this.questsList.getItems(), s = !0, r = 0; r < a.length; r += 1) {
  t = a[r], i = t.sublist.getChildren(), s = !0;
  for (var l = 0; l < i.length; l += 1) {
    n = i[l], e = n.getWuiName(), o || !R.finished[e] ? (s = !1, n.show()) : n.hide();
  }
  s ? t.hide() : t.show();
}
for (var l = 0; l < i.length; l += 1) {
  n = i[l], e = n.getWuiName(), o || !R.finished[e] ? (s = !1, n.show()) : n.hide();
}
for (var n in R.active) {
  var o = R.active[n].dbQuest;
  if (o.categoryId === e && (i = !0, !t.questFollower.isQuestFollowed(n))) {
    i = !1;
    break;
  }
}
if (o.categoryId === e && (i = !0, !t.questFollower.isQuestFollowed(n))) {
  i = !1;
  break;
}
for (var i in R.active) {
  var n = R.active[i].dbQuest;
  n.categoryId === e && this._updateQuestFollow(i, !t, !0);
}
if ((!this.currentQuest || this.currentQuest.questId !== e.questId || this.currentQuest.stepId === e.id) && i.length) {
  this._removeObjectivePlaceHolder();
  for (var n, o = 0, a = i.length; o < a; o += 1) {
    n = i[o], this.objectives.appendChild(this._createObjectiveElement(this.currentQuest.dbObjectives[n.objectiveId], n, e.questId));
  }
  window.setTimeout(function () {
    t.objectivesScroller.refresh();
  }, 200);
}
for (var n, o = 0, a = i.length; o < a; o += 1) {
  n = i[o], this.objectives.appendChild(this._createObjectiveElement(this.currentQuest.dbObjectives[n.objectiveId], n, e.questId));
}
for (var t = window.gui.playerData.characterBaseInformations.level, i = 0, n = e.length; i < n; i += 1) {
  var o = this.currentQuest.dbRewards[e[i]];
  !o || o.levelMin !== -1 && t < o.levelMin || o.levelMax !== -1 && t > o.levelMax || (r(this.rewardList, o.itemsReward), l(this.rewardList, o.emotesReward));
}
for (var t = e.dbQuest.stepIds, i = 0, n = t.length; i < n; i += 1) {
  var o = t[i];
  this.stepSelector.addOption(h("ui.grimoire.quest.step") + " " + (i + 1), o), e.stepId === o && (this.stepSelector.index = i);
}
if (t) {
  var i = t.sublist.getChildren();
  i.sort(function (e, t) {
    return parseInt(e.getWuiName(), 10) - parseInt(t.getWuiName(), 10);
  }), i.sort(function (e, t) {
    return e.hasClassName("completed") ? 1 : t.hasClassName("completed") ? -1 : 0;
  });
  for (var n = 0; n < i.length; n += 1) {
    t.sublist.appendChild(i[n]);
  }
}
for (var n = 0; n < i.length; n += 1) {
  t.sublist.appendChild(i[n]);
}
if (!a) {
  return void console.error(new Error("CategoryElement cannot be found to add questId " + e));
}
if (!s) {
  var r = new E("div", {
    className: "label",
    name: e
  });
  r.hourglass = r.createChild("div", {
    className: "icon"
  }), i.questFollower.isQuestFollowed(e) || r.hourglass.addClassNames("notFollowed"), r.createChild("div", {
    className: "text",
    text: o(n.dbQuest.nameId, e)
  }), I(r), r.on("tap", function () {
    var e = r.getWuiName();
    return R.active[e] ? (v("GEN_BUTTON"), t.currentQuest = R.all[e], t._updateStepList(), t._resetSelectedQuestElement(), r.addClassNames("selected"), void (t.selectedQuestElement = r)) : v("NO_ACTION");
  }), s = a.sublist.appendChild(r);
}
if (i) {
  var n = i.sublist.getChild(e);
  if (n) {
    n.addClassNames("completed"), t.questFollower.unfollowQuest(e, !1), this._updateHourglass(e, !1);
    var o = R.all[e];
    o.dbQuest && this._questCategoryFollowCheck(o.dbQuest.categoryId);
  }
}
if (n) {
  n.addClassNames("completed"), t.questFollower.unfollowQuest(e, !1), this._updateHourglass(e, !1);
  var o = R.all[e];
  o.dbQuest && this._questCategoryFollowCheck(o.dbQuest.categoryId);
}
if (i) {
  var n = i.sublist.getChild(e);
  n && n.hourglass.toggleClassName("notFollowed", !t);
}
if (e.isItem) {
  return -1;
}
if (t.isItem) {
  return 1;
}
if (e) {
  var t = window.gui.playerData.characters.mainCharacter.spellData.spells[e];
  if (!t) {
    return console.error(new Error("spell is not loaded"));
  }
  this.table.selectRow(t.id), this.table.scrollToSelectedRow(), i.displaySpell({
    spell: t,
    imageUri: t.getIconUrl()
  });
}
if (!t) {
  return console.error(new Error("spell is not loaded"));
}
if (!e.table.getRow(t)) {
  var i = window.gui.playerData.characters.mainCharacter.spellData.spells[t];
  if (!i) {
    return console.error(new Error("spell " + t + " is not loaded"));
  }
  var n = {};
  n[i.id] = i, e.table.addMap(n), i.getIconUrl() || v.preloadImage(i.getIconUri(), function (t) {
    i.spell.image = t;
    var n = e.table.getCell(i.id, "icon");
    n.setStyle("backgroundImage", t), e.currentSpellId === i.id && e.displaySpell({
      spell: i,
      imageUri: t
    }), e.refreshAllSpellState(), e._refreshAllSpellRows();
  });
}
if (!i) {
  return console.error(new Error("spell " + t + " is not loaded"));
}
for (var s in this.spellMap) {
  if (this.table.hasRow(s)) {
    var r = this.table.getCell(s, "pts");
    o += r.cost, 0 !== r.cost && (a = !0);
  }
}
if (this.table.hasRow(s)) {
  var r = this.table.getCell(s, "pts");
  o += r.cost, 0 !== r.cost && (a = !0);
}
for (var o in n) {
  var a = n[o],
    s = a.getProperty("typeId");
  t[s] || (e.selector.addOption(a.getHumanReadableSpellType(), s), t[s] = !0);
}
for (var n in e) {
  var o = e[n];
  o.getIconUrl() || (i.push(o), t.push(o.getIconUri()));
}
for (var t = 0; t < e.length; t++) {
  var n = i[t],
    o = n.spell.image = e[t],
    s = a.table.getCell(n.id, "icon");
  s.setStyle("backgroundImage", o), a.currentSpellId === n.id && a.displaySpell({
    spell: n,
    imageUri: o
  });
}
if (g.isDraggable(i)) {
  return void (t ? g.enableDrag(i) : g.disableDrag(i));
}
if (t) {
  var n = this.spellMap[e].getIconUrl();
  n && g.setDraggable(i, {
    backgroundImage: n
  }, "spellsWindow", {
    spellId: e
  }, {
    dragOnTouchstart: !0
  });
}
for (var e in this.spellMap) {
  this.refreshSpellState(e);
}
if (this.table.hasRow(e)) {
  var i = this.table.getCell(e, "rank");
  i.levelWanted = t, this._refreshSpellRow(e);
}
for (var t in this.spellMap) {
  if (this.table.hasRow(t)) {
    var i = this.table.getCell(t, "rank");
    i.spell.level !== i.levelWanted && e.push({
      spellId: parseInt(t, 10),
      spellLevel: i.levelWanted
    });
  }
}
if (this.table.hasRow(t)) {
  var i = this.table.getCell(t, "rank");
  i.spell.level !== i.levelWanted && e.push({
    spellId: parseInt(t, 10),
    spellLevel: i.levelWanted
  });
}
for (var t in this.spellMap) {
  if (this.table.hasRow(t)) {
    var i = this.table.getCell(t, "rank");
    i.levelWanted = i.spell.level, e._refreshSpellRow(t);
  }
}
if (this.table.hasRow(t)) {
  var i = this.table.getCell(t, "rank");
  i.levelWanted = i.spell.level, e._refreshSpellRow(t);
}
for (var e in this.spellMap) {
  this._refreshSpellRow(e);
}
if (this.table.hasRow(e)) {
  var t = this.table.getCell(e, "pts"),
    i = this.table.getCell(e, "rank"),
    n = window.gui.playerData.isSubscriberAtMinLevel(T.ELITE),
    o = i.minusBtn,
    s = i.plusBtn,
    r = i.spell,
    l = r.level,
    c = i.levelWanted,
    d = -r.getUpgradeCost(c);
  c < l && (d = r.getUpgradeCost(c, l));
  var u = c < l ? "+" + d : d;
  if (0 === d && (u = "-"), t.cost = d, t.valueDom.setText(u), t.show(), this.updateRemainingPoints(), i.levelTextDom.setText(c), this.displaySpell({
    spell: r,
    imageUri: r.getIconUrl(),
    spellLevel: c
  }), window.gui.playerData.isIncarnation()) {
    return o.disable(), void s.disable();
  }
  o.enable(), s.enable(), o.show(), s.show(), 0 === l || 1 === r.getMaxLevel() ? (o.hide(), s.hide(), t.hide()) : (1 === c ? o.disable() : o.toggleClassName("locked", !n && c <= l), a(r, Math.min(c + 1, r.getMaxLevel())) && c !== r.getMaxLevel() || s.disable());
}
if (0 === d && (u = "-"), t.cost = d, t.valueDom.setText(u), t.show(), this.updateRemainingPoints(), i.levelTextDom.setText(c), this.displaySpell({
  spell: r,
  imageUri: r.getIconUrl(),
  spellLevel: c
}), window.gui.playerData.isIncarnation()) {
  return o.disable(), void s.disable();
}
if (this.currentSpellLevelId === s) {
  return void this.tabIcon.setStyle("backgroundImage", r);
}
for (var l = n.col2.createChild("div", {
    className: "tabs"
  }), u = i.getMaxLevel(), h = 0; h < u; h++) {
  t(l, h.toString());
}
if (window.gui.playerData.isSubscriberAtMinLevel(M.NORMAL)) {
  var i = t + b.BONUS_PACK_XPJOB;
  this._bonusPackText.setHtml(p("ui.shop.xpBonusPackJobActive", i, b.BONUS_PACK_XPJOB)), this._linkToShop.hide();
} else {
  t > 0 ? this._bonusPackText.setHtml(p("ui.shop.xpBonusJobOnly", t, b.BONUS_PACK_XPJOB)) : this._bonusPackText.setHtml(p("tablet.shop.xpBonusInactive", b.BONUS_PACK_XPJOB)), this._linkToShop.show();
}
if (o.length) {
  this._updateJobButtons(n.jobOriginalOrder);
  var a = this;
  this._getJobImages(function () {
    a._updateJobIcons();
  }), e = e || n.jobOriginalOrder[0], this.selectJob(e, !0);
}
for (var o in n) {
  var a = n[o];
  a.info.iconId === -1 || I[o] || (t.push("gfx/jobs/" + a.info.iconId + ".png"), i.push(o));
}
for (var n = 0; n < t.length; n++) {
  I[i[n]] = t[n];
}
for (var n = 0; n < T; n++) {
  this._createJobIcon(n);
}
for (o.createChild("div", {
  className: "text",
  text: p("ui.common.specializations")
}); n < T + C; n++) {
  this._createJobIcon(n, o);
}
for (var t = 0; t < this.jobButtons.length; t++) {
  s(this.jobButtons[t], null);
}
for (t = 0; t < e.length; t++) {
  var o = this.jobMap[e[t]],
    a = o.info.specializationOfId ? this.jobSelectSpecialButtons[n++] : this.jobSelectButtons[i++];
  s(a, o);
}
for (var e = 0; e < this.jobButtons.length; e++) {
  a(this.jobButtons[e]);
}
for (var t = this.jobButtons, i = 0; i < t.length; i++) {
  if (t[i].jobId === e) {
    return t[i];
  }
}
if (t[i].jobId === e) {
  return t[i];
}
if (!e.mustRefreshJobs) {
  var n = e._getJobButton(t.id);
  if (n) {
    return o(n, i), e.isVisible() && t.id === e.selectedJobId ? e._refreshJobs(t.id) : void 0;
  }
}
if (n) {
  return o(n, i), e.isVisible() && t.id === e.selectedJobId ? e._refreshJobs(t.id) : void 0;
}
if (!t) {
  return !1;
}
if (this.currentJobBtn) {
  if (this.currentJobBtn.jobId === e) {
    return !1;
  }
  this.currentJobBtn.itemSlot.unselect();
}
if (this.currentJobBtn.jobId === e) {
  return !1;
}
if (this._selectJobButton(e) || t) {
  var i = this;
  window.setTimeout(function () {
    i._refreshCurrentJob(e);
  }, 50);
}
if (this.numRefreshTasks--, this.numRefreshTasks > 0) {
  return !this.lastJobIdRequested;
}
if (!this.lastJobIdRequested) {
  return !0;
}
if (this.numRefreshTasks) {
  return void (this.lastJobIdRequested = e);
}
for (var s = [], r = [], d = [], u = [], h = 0; h < a.length; h++) {
  var f = a[h],
    _ = f.skillId,
    v = f.info;
  if (v) {
    var y = new l("div", {
      className: "label"
    });
    this.skillsList.addItem(_, y);
    var w = y.createChild("div", {
      className: "skillLeft"
    });
    w.createChild("div", {
      className: "skillName",
      text: v.nameId
    }), d.push(w.createChild("div", {
      className: "skillDetail"
    })), u.push(v.interactiveId);
    var b = y.createChild("div", {
        className: "skillRight"
      }),
      M = b.createChild("div", {
        className: "skillStats"
      });
    if ("SkillActionDescriptionCollect" === f._type) {
      M.setText(p("ui.jobs.collectSkillInfos", f.time / 10, f.min, f.max)), r.push(v.gatheredRessourceItem);
      var T = b.appendChild(new g({
        descriptionOptions: {
          effects: !1
        }
      }));
      s.push(T);
    }
    if ("SkillActionDescriptionCraft" === f._type) {
      var C = p("ui.jobs.slotPercents", f.maxSlots, f.probability);
      M.setText(C), n = n.concat(v.recipes), M.addClassNames("bottom");
    }
  }
}
if (v) {
  var y = new l("div", {
    className: "label"
  });
  this.skillsList.addItem(_, y);
  var w = y.createChild("div", {
    className: "skillLeft"
  });
  w.createChild("div", {
    className: "skillName",
    text: v.nameId
  }), d.push(w.createChild("div", {
    className: "skillDetail"
  })), u.push(v.interactiveId);
  var b = y.createChild("div", {
      className: "skillRight"
    }),
    M = b.createChild("div", {
      className: "skillStats"
    });
  if ("SkillActionDescriptionCollect" === f._type) {
    M.setText(p("ui.jobs.collectSkillInfos", f.time / 10, f.min, f.max)), r.push(v.gatheredRessourceItem);
    var T = b.appendChild(new g({
      descriptionOptions: {
        effects: !1
      }
    }));
    s.push(T);
  }
  if ("SkillActionDescriptionCraft" === f._type) {
    var C = p("ui.jobs.slotPercents", f.maxSlots, f.probability);
    M.setText(C), n = n.concat(v.recipes), M.addClassNames("bottom");
  }
}
if ("SkillActionDescriptionCollect" === f._type) {
  M.setText(p("ui.jobs.collectSkillInfos", f.time / 10, f.min, f.max)), r.push(v.gatheredRessourceItem);
  var T = b.appendChild(new g({
    descriptionOptions: {
      effects: !1
    }
  }));
  s.push(T);
}
if ("SkillActionDescriptionCraft" === f._type) {
  var C = p("ui.jobs.slotPercents", f.maxSlots, f.probability);
  M.setText(C), n = n.concat(v.recipes), M.addClassNames("bottom");
}
if (e) {
  return I._afterRefreshTask(), console.error("JobsWindow: Failed to get ingredients", e);
}
if (I._afterRefreshTask()) {
  for (var i = 0; i < t.length; i++) {
    var n = t[i];
    s[i].setItem(n);
  }
}
for (var i = 0; i < t.length; i++) {
  var n = t[i];
  s[i].setItem(n);
}
if (e) {
  return I._afterRefreshTask(), console.error("JobsWindow: Failed to get interactive data", e);
}
if (I._afterRefreshTask()) {
  for (var i = 0; i < u.length; i++) {
    var n = u[i],
      o = t[n];
    o ? d[i].setText(o.nameId) : console.error(new Error("JobsWindow: no interactive for id " + n));
  }
}
for (var i = 0; i < u.length; i++) {
  var n = u[i],
    o = t[n];
  o ? d[i].setText(o.nameId) : console.error(new Error("JobsWindow: no interactive for id " + n));
}
if (t) {
  return this.activate(t), t;
}
for (var s = 1; s <= T; s += 1) {
  this.filterCheckboxes[s] = t(s, !0), i.filterNbSlots[s] = !0;
}
if (i = i || function () {}, 0 === e.length) {
  return this._recipesPlaceholder.show(), this.recipesWrapper.delClassNames("spinner"), this._setPageCount(e), this.recipesWrapper.refresh(), i();
}
for (var s = {}, r = [], l = this._currentPage === -1 ? 0 : this._currentPage, c = (l + 1) * I < a.length, d = c ? (l + 1) * I : a.length, u = l * I; u < d; u += 1) {
  var h = a[u];
  if (h) {
    r.push(h);
    var f = h.ingredientIds;
    s[h.resultId] = !0;
    for (var g = 0, _ = f.length; g < _; g += 1) {
      var v = f[g];
      s[v] = !0;
    }
  }
}
if (h) {
  r.push(h);
  var f = h.ingredientIds;
  s[h.resultId] = !0;
  for (var g = 0, _ = f.length; g < _; g += 1) {
    var v = f[g];
    s[v] = !0;
  }
}
for (var g = 0, _ = f.length; g < _; g += 1) {
  var v = f[g];
  s[v] = !0;
}
if (o) {
  return console.error(o), i(o);
}
if (n._hasBeenReset()) {
  return i();
}
if (t.nbCase) {
  A = !1;
  for (var s = 1; s <= T; s += 1) {
    var r = s <= n._nbCase;
    n.filterNbSlots[s] = r, n.filterCheckboxes[s].toggleActivation(r);
  }
  A = !0;
}
for (var s = 1; s <= T; s += 1) {
  var r = s <= n._nbCase;
  n.filterNbSlots[s] = r, n.filterCheckboxes[s].toggleActivation(r);
}
if (!p.items[e.resultId]) {
  return console.error(new Error("Recipe " + e.resultId + " is missing")), t();
}
if (this._hasBeenReset()) {
  return t();
}
if (e) {
  return console.error(new Error("Cannot setup recipe for recipeId " + n.recipeId)), t(e);
}
if (i.isInCraft && n.craftableCount) {
  var s = n.getItemSlot();
  _.setDraggable(s, {
    backgroundImage: s.image
  }, "recipeList", {
    source: "recipeList",
    selectRecipe: o,
    recipeBox: n
  });
}
if (!this.shouldNotSelect) {
  if (this.isInCraft) {
    this.tappedRecipe && this.tappedRecipe === e ? this._selectRecipe(e) : this._setTappedRecipe(e);
  } else {
    if (this.tappedRecipe) {
      return;
    }
    this.tappedRecipe = e, e.addClassNames("tapped"), setTimeout(function (t) {
      t.emit("itemTapped", p.items[e.recipeId]);
    }, 0, this);
  }
}
if (this.isInCraft) {
  this.tappedRecipe && this.tappedRecipe === e ? this._selectRecipe(e) : this._setTappedRecipe(e);
} else {
  if (this.tappedRecipe) {
    return;
  }
  this.tappedRecipe = e, e.addClassNames("tapped"), setTimeout(function (t) {
    t.emit("itemTapped", p.items[e.recipeId]);
  }, 0, this);
}
if (this.tappedRecipe) {
  return;
}
if (this.tappedRecipe && this.tappedRecipe.rootElement) {
  if (this.tappedRecipe === e) {
    return;
  }
  this.tappedRecipe.delClassNames("tapped");
}
if (this.tappedRecipe === e) {
  return;
}
if (this._currentFilteredRecipesList = [], null === t || "" === t) {
  return this._recipesData.forEach(function (t) {
    var i = e._filterCraftableOnly && e._canUseThisRecipe(t.resultId),
      n = i || !e._filterCraftableOnly;
    e.filterNbSlots[t.ingredientIds.length] && n && e._currentFilteredRecipesList.push(t);
  }), this.addRecipes(this._currentFilteredRecipesList, {
    usingItemId: this.usingItemId
  });
}
if (t.length < C) {
  return y.showNotification(u("ui.common.searchFilterTooltip"), this._searchInput);
}
if (!a) {
  return console.error("item", t.resultId, "is missing");
}
if (this.selectedRecipe && this.selectedRecipe.rootElement && this.selectedRecipe.delClassNames("selected"), null !== e) {
  var t = this.recipesList.getChild(e);
  t && (t.addClassNames("selected"), this.selectedRecipe = t);
}
for (var e = this.recipesList.getChildren(), t = 0; t < e.length; t++) {
  var i = e[t];
  i.refreshQuantities();
}
for (var t = null, i = 0; i < this._recipesData.length; i++) {
  if (this._recipesData[i].resultId === e) {
    t = this._recipesData[i];
    break;
  }
}
if (this._recipesData[i].resultId === e) {
  t = this._recipesData[i];
  break;
}
if (!t) {
  return !1;
}
for (i = 0; i < t.ingredientIds.length; i++) {
  var n = window.gui.playerData.belongings.getItemCounts(t.ingredientIds[i]),
    o = n[b.INVENTORY_QTY];
  if (t.quantities && t.quantities[i] > o) {
    return !1;
  }
}
if (t.quantities && t.quantities[i] > o) {
  return !1;
}
if (!c && y > 0) {
  var w = Math.floor(m * y / 100);
  f += ' <span class="bonusXP">(+' + w + ")</span>";
}
if (1 !== e.jobId) {
  var n = 1;
  if (t.type.id === _ && e.jobId === g && t.recipeSlots > 1) {
    n = 50;
  } else {
    switch (t.recipeSlots) {
      case 3:
        n = 10;
        break;
      case 4:
        n = 20;
        break;
      case 5:
        n = 40;
        break;
      case 6:
        n = 60;
        break;
      case 7:
        n = 80;
        break;
      case 8:
        n = 100;
    }
  }
  i = s("ui.craft.recipesJobDetails", e.jobName, n);
}
if (t.type.id === _ && e.jobId === g && t.recipeSlots > 1) {
  n = 50;
} else {
  switch (t.recipeSlots) {
    case 3:
      n = 10;
      break;
    case 4:
      n = 20;
      break;
    case 5:
      n = 40;
      break;
    case 6:
      n = 60;
      break;
    case 7:
      n = 80;
      break;
    case 8:
      n = 100;
  }
}
if (n) {
  return e(n);
}
if (t._hasBeenDestroy) {
  return e();
}
if (!l) {
  return e();
}
for (var c = l.nameId, d = 0, u = 0; u < s; u += 1) {
  var h = i.ingredientIds[u],
    p = r.items[h];
  p ? (c += " " + p.nameId, t._createIngredientSlot(p, i.quantities[u]), d += 1) : console.error("RecipeBox#setupRecipe: ingredientId", h, "from recipeId", t.recipeId, "is missing, just continue");
}
for (var e = 0; e < this.nbIngredients; e++) {
  this._refreshIngredientSlot(this.ingredients[e]);
}
for (var c = 0; c < 10; c += 1) {
  i.addOption("0" + c, c);
}
for (c = 10; c < 24; c += 1) {
  i.addOption(c, c);
}
if ("alliance" === this.mode ? (this.tagNameBox.show(), this.tagInput.show(), this.nameLabel.setText(l("ui.alliance.name") + l("ui.common.colon")), this.setTitle(l("ui.alliance.creation"))) : (this.tagNameBox.hide(), this.tagInput.hide(), this.nameLabel.setText(l("ui.social.guildName") + l("ui.common.colon")), this.setTitle(l("ui.social.guildCreation"))), !this.modification) {
  return this._generateRandomEmblem(), this.nameInput.enable(), this.nameInput.setValue(""), this.tagInput.enable(), this.tagInput.setValue(""), void this.cover.hide();
}
for (var t = null, i = 0; i < this.emblemSymbols.length; i += 1) {
  var n = this.emblemSymbols[i];
  if (n.id === this.symbolId) {
    t = n;
    break;
  }
}
if (n.id === this.symbolId) {
  t = n;
  break;
}
if (this.emblemSymbolCategories) {
  this.selector.clearContent(), this._isModeratorOrMore = window.gui.playerData.isModeratorOrMore();
  for (var e = 0; e < this.emblemSymbolCategories.length; e++) {
    var t = this.emblemSymbolCategories[e];
    (this._isModeratorOrMore || 13 !== t.id) && this.selector.addOption(t.nameId, t.id);
  }
  this.selector.select(1);
}
for (var e = 0; e < this.emblemSymbolCategories.length; e++) {
  var t = this.emblemSymbolCategories[e];
  (this._isModeratorOrMore || 13 !== t.id) && this.selector.addOption(t.nameId, t.id);
}
for (var i = this, n = [], o = 0; o < e.length; o++) {
  n.push("gfx/emblems/icons/back/" + e[o].id + ".png");
}
for (var o = 0; o < n.length; o++) {
  var a = i.backgroundScroller.content.appendChild(new g({
    className: "icon"
  }, t));
  a.setStyle("backgroundImage", n[o] + ", " + i.slotIconImage), a.id = e[o].id;
}
for (var o = 0; o < e.length; o++) {
  n.push("gfx/emblems/icons/up/" + e[o].iconId + ".png"), e[o].colorizable || i.notColorizable.push(e[o].id);
}
for (var o = 0; o < n.length; o++) {
  var a = i.symbolScroller.content.appendChild(new g({
    className: ["icon", "white"]
  }, t));
  a.setStyle("backgroundImage", n[o] + ", " + i.slotIconImage), a.categoryId = e[o].categoryId, a.id = e[o].id;
}
for (var n = 0; n < t.length; n++) {
  e !== t[n].categoryId ? t[n].hide() : t[n].show();
}
if ("alliance" === i.mode) {
  if (!o(e, w.MIN_ALLIANCENAME_LEN, w.MAX_ALLIANCENAME_LEN, l("ui.alliance.invalidLengthName"))) {
    return;
  }
  var n = d.getValue();
  if (!o(n, w.MIN_ALLIANCETAG_LEN, w.MAX_ALLIANCETAG_LEN, l("ui.alliance.invalidLengthTag"))) {
    return;
  }
  if (!i.modification) {
    return window.dofus.sendMessage("AllianceCreationValidMessage", {
      allianceName: e,
      allianceTag: n,
      allianceEmblem: t
    });
  }
  switch (i.modification) {
    case "all":
      window.dofus.sendMessage("AllianceModificationValidMessage", {
        allianceName: e,
        allianceTag: n,
        Alliancemblem: t
      });
      break;
    case "emblem":
      window.dofus.sendMessage("AllianceModificationEmblemValidMessage", {
        Alliancemblem: t
      });
      break;
    case "name":
      window.dofus.sendMessage("AllianceModificationNameAndTagValidMessage", {
        allianceName: e,
        allianceTag: n
      });
  }
} else {
  if (!o(e, w.MIN_GUILDNAME_LEN, w.MAX_GUILDNAME_LEN, l("ui.alliance.invalidLengthName"))) {
    return;
  }
  if (!i.modification) {
    return window.dofus.sendMessage("GuildCreationValidMessage", {
      guildName: e,
      guildEmblem: t
    });
  }
  switch (i.modification) {
    case "all":
      window.dofus.sendMessage("GuildModificationValidMessage", {
        guildName: e,
        guildEmblem: t
      });
      break;
    case "emblem":
      window.dofus.sendMessage("GuildModificationEmblemValidMessage", {
        guildEmblem: t
      });
      break;
    case "name":
      window.dofus.sendMessage("GuildModificationNameValidMessage", {
        guildName: e
      });
  }
}
if (!o(e, w.MIN_ALLIANCENAME_LEN, w.MAX_ALLIANCENAME_LEN, l("ui.alliance.invalidLengthName"))) {
  return;
}
if (!o(n, w.MIN_ALLIANCETAG_LEN, w.MAX_ALLIANCETAG_LEN, l("ui.alliance.invalidLengthTag"))) {
  return;
}
if (!i.modification) {
  return window.dofus.sendMessage("AllianceCreationValidMessage", {
    allianceName: e,
    allianceTag: n,
    allianceEmblem: t
  });
}
if (!o(e, w.MIN_GUILDNAME_LEN, w.MAX_GUILDNAME_LEN, l("ui.alliance.invalidLengthName"))) {
  return;
}
if (!i.modification) {
  return window.dofus.sendMessage("GuildCreationValidMessage", {
    guildName: e,
    guildEmblem: t
  });
}
if (this.lumCanvas.picker = f, f.dark = f.createChild("div", {
  className: ["triangle", "black"]
}), f.bright = f.createChild("div", {
  className: ["triangle", "white"]
}), this.lumWrapper.toggleClassName("lumWrapperWithHexButton", this.params.showHexButton), this.params.showHexButton) {
  var g = new r({
    className: ["button", "hexColorBtn"],
    text: "#",
    tooltip: l("ui.charcrea.hexColorTip")
  }, function () {
    m.openHexInput();
  });
  this.lumWrapper.appendChild(g);
}
if (void 0 === o || null === o) {
  return console.error(new Error("CP: topColor is missing with x: " + e + ", y: " + t + ", tintWidth: " + this.params.tintWidth)), [255, 0, 0];
}
if (void 0 === a || null === a) {
  return console.error(new Error("CP: topColorNext is missing with x: " + e + ", y: " + t + ", tintWidth: " + this.params.tintWidth)), [255, 0, 0];
}
if (r === l) {
  var c = (1 - a / 255) * n - g;
  return [0, i - g, c];
}
for (var e = this.lumCanvas.rootElement, t = e.getContext("2d"), i = t.getImageData(0, 0, e.width, e.height), n = 0; n < this.params.lumHeight; n++) {
  var o = this._lumCoordinatesToColor(n),
    a = 4 * n;
  i.data[a] = Math.round(o[0]), i.data[a + 1] = Math.round(o[1]), i.data[a + 2] = Math.round(o[2]), i.data[a + 3] = 255;
}
for (var e = this.tintCanvas.rootElement, t = e.getContext("2d"), i = t.getImageData(0, 0, e.width, e.height), n = 0; n < this.params.tintWidth; n++) {
  for (var o = 0; o < this.params.tintHeight; o++) {
    var a = this._tintCoordinatesToColor(n, o),
      s = 4 * (o * this.params.tintWidth + n);
    i.data[s] = Math.round(a[0]), i.data[s + 1] = Math.round(a[1]), i.data[s + 2] = Math.round(a[2]), i.data[s + 3] = 255;
  }
}
for (var o = 0; o < this.params.tintHeight; o++) {
  var a = this._tintCoordinatesToColor(n, o),
    s = 4 * (o * this.params.tintWidth + n);
  i.data[s] = Math.round(a[0]), i.data[s + 1] = Math.round(a[1]), i.data[s + 2] = Math.round(a[2]), i.data[s + 3] = 255;
}
if (e.setStyle("webkitTransform", "translate3d(" + t + "px," + i + "px,0)"), e.x = t, e.y = i, e === this.lumPicker) {
  var n = i / this.params.lumHeight > .5 ? 1 : 0;
  e.bright.setStyle("opacity", n), e.dark.setStyle("opacity", 1 - n);
}
for (var s = 0, r = 0, c = i.length; r < c; r += 1) {
  var d = i[r];
  s += d.nbMembers, this.guildList.addRow(o(d));
}
for (var a = 0, s = i.length; a < s; a += 1) {
  this.memberList.addRow(o(i[a], t.guildId));
}
if (l) {
  this.allianceLabel.setText(c("ui.common.alliance") + c("ui.common.colon")), this.allianceName.setText(l.allianceName), this._allianceId = l.allianceId, this.allianceInvite.hide();
} else {
  this.allianceLabel.setText(c("ui.alliance.noAllianceForThisGuild")), this.allianceName.setText("");
  var d = window.gui.playerData.alliance;
  this.allianceInviteTooltip.setText(c("ui.alliance.inviteLeader", this._leaderName)), this.allianceInvite.toggleDisplay(d.hasAlliance() && d.isBoss());
}
if (this._isPartHidden) {
  var e = new l("div", {
    className: "longTextTooltip",
    text: this._text
  });
  s.showClosableNotification(e, this._displayDiv, {
    centerOnTarget: !0
  });
}
for (this.windowTitle.setText(e.houseName), this.tabs.openTab(0), this.rights.clearContent(), this.skills.clearContent(), t = 0; t < d; t++) {
  n >> t & 1 && this.rights.addRow({
    content: this.rightsText[t]
  });
}
for (e && console.error("Failed to retrieve skills data", e), t = 0; t < n.length; t++) {
  i.skills.addRow([n[t].nameId]);
}
for (var t = 0, i = 0; i < e.checkboxes.length; i++) {
  e.checkboxes[i].isActivate() && (t += 1 << i);
}
for (var t = 0; t < this.checkboxes.length; t++) {
  e >> t & 1 ? this.checkboxes[t].activate() : this.checkboxes[t].deactivate();
}
for (var e = 0; e < this.checkboxes.length; e++) {
  this.checkboxes[e].enable();
}
for (var e = 1; e < this.checkboxes.length; e++) {
  this.checkboxes[e].disable();
}
for (var t = 0; t < e.checkboxes.length; t++) {
  e.checkboxes[t].deactivate();
}
for (var a in o) {
  n.push(o[a]);
}
if (t) {
  var i = this.rank,
    n = window.gui.playerData,
    o = n.guild,
    a = e.id === n.id,
    s = e.id === o.current.leaderId,
    l = n.id === o.current.leaderId,
    c = !a && !s;
  this.memberInfo = {
    memberId: e.id,
    experienceGivenPercent: e.experienceGivenPercent,
    name: e.name,
    rank: e.rank
  }, t.toggleOption(0, l), t.setValue(e.rank);
  var d,
    u = [];
  for (d = 0; d < this.rankNames.length; d++) {
    var h = r(this.rankNames[d].nameId, e.sex ? 1 : 0);
    u.push(h);
  }
  t.changeTexts(u), i.setText(r(window.gui.databases.RankNames[e.rank].nameId, e.sex ? 1 : 0)), this.xpContributionLabel.setText(e.experienceGivenPercent + "%");
  var p,
    m = o.checkRight(f.GUILD_RIGHT_BOSS, e.rights),
    g = o.hasRight(f.GUILD_RIGHT_MANAGE_RIGHTS);
  for (d = 0; d < this.rightNames.length; d++) {
    var _ = this.rightNames[d].right;
    p = this.rightCheckboxes[d], p && (s || m || o.checkRight(_, e.rights) ? p.activate() : p.deactivate(), p.disable(), (_ !== f.GUILD_RIGHT_MANAGE_RIGHTS || l) && (l || g && c && o.hasRight(_)) && p.enable());
  }
  if (this.setXpButton.disable(), (o.hasRight(f.GUILD_RIGHT_MANAGE_XP_CONTRIBUTION) || o.hasRight(f.GUILD_RIGHT_MANAGE_MY_XP_CONTRIBUTION)) && this.setXpButton.enable(), !s && o.hasRight(f.GUILD_RIGHT_MANAGE_RANKS) || m) {
    return t.show(), i.hide(), void this.rankTitleText.delClassNames("noMargin");
  }
  t.hide(), i.show(), this.rankTitleText.addClassNames("noMargin");
}
for (d = 0; d < this.rankNames.length; d++) {
  var h = r(this.rankNames[d].nameId, e.sex ? 1 : 0);
  u.push(h);
}
for (d = 0; d < this.rightNames.length; d++) {
  var _ = this.rightNames[d].right;
  p = this.rightCheckboxes[d], p && (s || m || o.checkRight(_, e.rights) ? p.activate() : p.deactivate(), p.disable(), (_ !== f.GUILD_RIGHT_MANAGE_RIGHTS || l) && (l || g && c && o.hasRight(_)) && p.enable());
}
if (this.setXpButton.disable(), (o.hasRight(f.GUILD_RIGHT_MANAGE_XP_CONTRIBUTION) || o.hasRight(f.GUILD_RIGHT_MANAGE_MY_XP_CONTRIBUTION)) && this.setXpButton.enable(), !s && o.hasRight(f.GUILD_RIGHT_MANAGE_RANKS) || m) {
  return t.show(), i.hide(), void this.rankTitleText.delClassNames("noMargin");
}
for (e = 0, t = a.length; e < t; e += 1) {
  this.selector.addOption(a[e].nameId, a[e].id);
}
for (var f = this.windowBody.appendChild(new h({
    colIds: ["name", "checkbox"]
  })), g = 0; g < this.rightNames.length; g++) {
  var _ = this.rightNames[g],
    v = new c("");
  this.rightCheckboxes.push(v), f.addRow({
    name: _.label,
    checkbox: v
  });
}
for (var e = 0, t = 0; t < this.rightNames.length; t++) {
  var i = this.rightCheckboxes[t];
  i && i.isActivate() && (e += this.rightNames[t].right);
}
if (!e.houseInfo || !e.houseInfo.buyOrSell) {
  return e.fromInside ? (window.dofus.sendMessage("HouseSellFromInsideRequestMessage", {
    amount: 0
  }), void l.close(e.id)) : void window.dofus.sendMessage("HouseSellRequestMessage", {
    amount: 0
  });
}
if (e.houseInfo && e.houseInfo.buyOrSell) {
  var t;
  return t = e.currency === _ ? d("tablet.price.hard", e.priceTextOnly.getText()) : d("tablet.price.soft", e.priceTextOnly.getText()), window.gui.openConfirmPopup({
    title: d("ui.common.housePurchase"),
    message: d("tablet.ui.common.doUBuyHouse", e.houseOwner, t),
    cb: function (t) {
      if (t) {
        if (e.currency === g) {
          return window.dofus.sendMessage("HouseBuyRequestMessage", {
            proposedPrice: e.proposedPrice
          });
        }
        var i = e.proposedPriceHard - window.gui.playerData.inventory.goultines;
        return i > 0 ? f.openNotEnoughHardCurrencyPopup(i) : window.dofus.send("houseBuyRequest", {
          houseId: e.houseInfo.purchasableId,
          amountHard: e.proposedPriceHard,
          amountSoft: e.proposedPrice
        });
      }
    }
  }, {
    isModal: !0
  });
}
if (t) {
  if (e.currency === g) {
    return window.dofus.sendMessage("HouseBuyRequestMessage", {
      proposedPrice: e.proposedPrice
    });
  }
  var i = e.proposedPriceHard - window.gui.playerData.inventory.goultines;
  return i > 0 ? f.openNotEnoughHardCurrencyPopup(i) : window.dofus.send("houseBuyRequest", {
    houseId: e.houseInfo.purchasableId,
    amountHard: e.proposedPriceHard,
    amountSoft: e.proposedPrice
  });
}
if (e.currency === g) {
  return window.dofus.sendMessage("HouseBuyRequestMessage", {
    proposedPrice: e.proposedPrice
  });
}
if (t.playerData.identification.uniqueNickname.toString() === e.buyerName) {
  var i = d("ui.house.homeOf", t.playerData.identification.uniqueNickname.getForDisplay());
  0 === e.realPrice ? t.openPopup({
    title: d("ui.popup.information"),
    message: d("ui.common.houseNosell", "'" + i + "'")
  }) : t.openPopup({
    title: d("ui.popup.information"),
    message: d("ui.common.houseSell", "'" + i + "'", c.kamasToString(e.realPrice, ""))
  });
}
if (this.currency !== e) {
  var t = this.currency;
  this.currency = e, this.currencyIcon && this.currencyIcon.replaceClassNames([t], [e]);
}
if (!e) {
  return console.warn("Missing purchaseMsg from PurchasableDialogMessage.");
}
if (this.priceTextOnly.toggleDisplay(e.buyOrSell), this.price.toggleDisplay(!e.buyOrSell), e.buyOrSell) {
  this.windowTitle.setText(d("ui.common.housePurchase")), this.cancelSaleButton.disable();
  var n = window.gui.playerData.inventory,
    o = t || i && i <= n.kamas;
  o ? this.confirmButton.enable() : this.confirmButton.disable();
} else {
  this.windowTitle.setText(d("ui.common.houseSale")), this.cancelSaleButton.enable(), this.confirmButton.enable();
}
if (this.currency !== e) {
  var t = this.currency;
  return this.currency = e, this.replaceClassNames([t], [this.currency]), this.currency === r ? this.emit("switchToHard") : this.emit("switchToSoft");
}
for (var i = 0; i < h; i += 1) {
  var l = this.itemSlotsBox.appendChild(new r());
  l.on("tap", n), s.itemSlots.push(l);
}
if (i) {
  return console.error(i);
}
for (o = 0; o < n.moods[e.livingObjectMood].length; o += 1) {
  var s = n.moods[e.livingObjectMood][o];
  a.push("gfx/items/" + s + ".png");
}
for (var i = 0; i < t.itemSlots.length; i += 1) {
  var n = t.itemSlots[i];
  i >= t.itemInstance.livingObjectLevel ? n.unset() : n.setImage(e[i]);
}
if (e.objectGID === n.lastLivingObjectId) {
  var t = window.gui.playerData.inventory.objects[e.objectUID];
  n._displayItem(t);
}
if (n) {
  return console.error(n);
}
if (t.recipeList) {
  for (var a = o[i[0]], s = [], c = 1; c < i.length; c++) {
    var d = o[i[c]];
    d && s.push(d);
  }
  t.recipeBox && (t.recipeBox.destroy(), t._craftDetails.destroy());
  var u = !e.getProperty("secretRecipe");
  t.itemRecipeBox.toggleClassName("empty", !a || u), a ? (t.itemRecipeBox.getChild("title").setText(l("ui.item.utilityReceipt")), t.recipeBox = new h(a, {
    isMenuOnItemDisabled: !0
  }), t._craftDetails = new _("div", {
    "class": "craftDetails"
  }), t.recipeBox.on("itemTapped", r), t.recipeBox.myWindow = t, t.recipeBox.setupRecipe(function (e) {
    return e ? void console.error(new Error("setupRecipe error: " + e)) : void (t.itemRecipeBox && (t.itemRecipeBox.appendChild(t.recipeBox), t._craftDetails.setText(t.recipeBox.craftDetails), t.itemRecipeBox.appendChild(t._craftDetails)));
  }), t.recipeBox.myWindow = t) : u ? t.itemRecipeBox.getChild("title").setText(l("ui.item.secretReceipt")) : t.itemRecipeBox.getChild("title").setText(l("ui.item.utilityNoReceipt")), t.recipeList.addRecipes(s, {
    usingItemId: e.id
  });
}
for (var a = o[i[0]], s = [], c = 1; c < i.length; c++) {
  var d = o[i[c]];
  d && s.push(d);
}
for (var e = i.itemListBox.getChildren(), t = 0; t < e.length; t += 1) {
  var n = e[t];
  n.unselect();
}
for (var e, t = [].concat(i.itemSet.items), n = i.itemListBox.getChildren(), o = 0; o < n.length; o += 1) {
  e = n[o], e.select();
}
for (var e = this.itemListBox.getChildren(), t = window.gui.playerData.inventory.quantityList, i = 0; i < e.length; i += 1) {
  var n = e[i];
  n.delClassNames("notOwned"), t.hasOwnProperty(n.dbItem.id) || n.addClassNames("notOwned");
}
for (var t = this.itemListBox.getChildren(), i = 0, n = 0; n < t.length; n += 1) {
  var o = t[n];
  o.delClassNames("equipped"), e.indexOf(o.dbItem.id) > -1 && (o.addClassNames("equipped"), i++), o.dbItem.id === this.itemBox.itemId && this._updateItemBox(f.items[o.dbItem.id]);
  var a = p.getEquippedItemById(window.gui.playerData.inventory, o.dbItem.id);
  o.setItem(a || o.dbItem);
}
if (e.itemSetId) {
  var t = this;
  this.currentSetId = e.itemSetId, this._updateItemBox(e), g.getData("ItemSets", e.itemSetId, function (e, i) {
    return e ? console.error(e) : (t.itemSet = i, t.windowTitle.setText(i.nameId), t.itemListBox.clearContent(), t.bonusSelector.clearContent(), void f.getItems(i.items, function (e) {
      if (e) {
        return console.error(e);
      }
      var n = 0;
      t.bonusSelector.addOption("0 " + h("ui.common.objects"), 0), t.bonusSelector.toggleOption(0, !1);
      for (var o, a, s, r, l = window.gui.playerData.inventory.quantityList, c = 0; c < i.items.length; c += 1) {
        s = i.items[c], a = f.items[s], o = p.getEquippedItemById(window.gui.playerData.inventory, s), o && (n += 1), r = t._createItemSlot(o || a), l.hasOwnProperty(s) || r.addClassNames("notOwned"), t.itemListBox.appendChild(r), t.bonusSelector.addOption(c + 1 + " " + h("ui.common.objects"), c + 1);
      }
      t.combineBonusesCheckbox.deactivate(), t.bonusSelector.select(n);
    }));
  });
}
if (e) {
  return console.error(e);
}
for (var o, a, s, r, l = window.gui.playerData.inventory.quantityList, c = 0; c < i.items.length; c += 1) {
  s = i.items[c], a = f.items[s], o = p.getEquippedItemById(window.gui.playerData.inventory, s), o && (n += 1), r = t._createItemSlot(o || a), l.hasOwnProperty(s) || r.addClassNames("notOwned"), t.itemListBox.appendChild(r), t.bonusSelector.addOption(c + 1 + " " + h("ui.common.objects"), c + 1);
}
if (n && !n.isInitialised && (n = null), t.itemBox.displayItem(e || n || this.dbItem), t.combineBonusesCheckbox.isActivate()) {
  var o = t.selectedItemIds.indexOf(i.dbItem.id);
  o < 0 ? (t.selectedItemIds.push(i.dbItem.id), this.select()) : (t.selectedItemIds.splice(o, 1), this.unselect()), t.bonusSelector.select(t.selectedItemIds.length);
}
if (this.itemSet.bonusIsSecret && !e.length) {
  return void this.bonusTable.addRow({
    description: h("ui.set.secretBonus")
  });
}
for (var t = 0; t < e.length; t += 1) {
  var i = e[t];
  if (i) {
    var n = this.bonusTable.addRow({
      description: i.description
    });
    n.toggleClassName("negative", i.effect.bonusType === y);
  }
}
if (i) {
  var n = this.bonusTable.addRow({
    description: i.description
  });
  n.toggleClassName("negative", i.effect.bonusType === y);
}
for (var i = 0; i < e.length; i += 1) {
  var n = e[i];
  n && Object.keys(n).length && t.push(n);
}
for (var i in e) {
  e.hasOwnProperty(i) && (t[i] = e[i]);
}
if (!e) {
  throw new Error("Missing deps.");
}
for (var i = [], n = {}, a = [], s = 0; s < e.length; s += 1) {
  var l = e[s];
  l && (l.effect.category === r.special ? a.push(l) : n[l.effectId] ? n[l.effectId].effect.useDice && (n[l.effectId].diceNum += l.diceNum || 0, n[l.effectId].diceSide += l.diceSide || 0, n[l.effectId].value += l.value || 0) : n[l.effectId] = o(l));
}
for (var c in n) {
  n.hasOwnProperty(c) && i.push(o(n[c]));
}
if (o.effects.length && !p) {
  var f = o.effects[m];
  n(f, u);
}
if (v.length && w && p && n(v, u), t && i.length) {
  var b = [];
  for (c = 0; c < i.length; c += 1) {
    var M = i[c],
      T = l.getEquippedItemById(a, M),
      C = {};
    if (T) {
      C = T.effects;
    } else {
      var I = this._itemManager.items[M];
      I ? C = I.possibleEffects : (this._logger.error("Missing item", M), C = {});
    }
    for (var A in C) {
      if (C.hasOwnProperty(A)) {
        var S = C[A];
        S.effect && S.effect.category === r.special ? h.push(S) : S.effect.showInSet && b.push(S);
      }
    }
  }
  u = u.concat(b);
}
for (c = 0; c < i.length; c += 1) {
  var M = i[c],
    T = l.getEquippedItemById(a, M),
    C = {};
  if (T) {
    C = T.effects;
  } else {
    var I = this._itemManager.items[M];
    I ? C = I.possibleEffects : (this._logger.error("Missing item", M), C = {});
  }
  for (var A in C) {
    if (C.hasOwnProperty(A)) {
      var S = C[A];
      S.effect && S.effect.category === r.special ? h.push(S) : S.effect.showInSet && b.push(S);
    }
  }
}
if (T) {
  C = T.effects;
} else {
  var I = this._itemManager.items[M];
  I ? C = I.possibleEffects : (this._logger.error("Missing item", M), C = {});
}
for (var A in C) {
  if (C.hasOwnProperty(A)) {
    var S = C[A];
    S.effect && S.effect.category === r.special ? h.push(S) : S.effect.showInSet && b.push(S);
  }
}
if (C.hasOwnProperty(A)) {
  var S = C[A];
  S.effect && S.effect.category === r.special ? h.push(S) : S.effect.showInSet && b.push(S);
}
for (c = 0; c < u.length; c += 1) {
  var E = u[c];
  E.effectCaller || (E.effectCaller = "itemSet " + g);
}
for (var n in i) {
  if (i.hasOwnProperty(n)) {
    var o = i[n];
    if (o.isInitialised && o.objectGID === t) {
      return o;
    }
  }
}
if (i.hasOwnProperty(n)) {
  var o = i[n];
  if (o.isInitialised && o.objectGID === t) {
    return o;
  }
}
if (o.isInitialised && o.objectGID === t) {
  return o;
}
for (var i = window.gui.playerData.characterBreed, n = 0; n < i.breedSpellsId.length; n++) {
  var a = i.breedSpellsId[n];
  t <= e[a].getProperty("minPlayerLevel") && this.spells.push(e[a]);
}
for (var i = this.spells, n = 0; n < i.length; n++) {
  var o = i[n],
    a = o.getProperty("minPlayerLevel");
  if (e === a) {
    this.updateSpellIcon(o), this.spellText.setText(l("ui.levelUp.newSpell"));
    break;
  }
  if (e < a) {
    this.updateSpellIcon(o), this.spellText.setText(l("ui.levelUp.nextSpell") + " " + l("ui.levelUp.nextSpellLevel", a));
    break;
  }
}
if (e === a) {
  this.updateSpellIcon(o), this.spellText.setText(l("ui.levelUp.newSpell"));
  break;
}
if (e < a) {
  this.updateSpellIcon(o), this.spellText.setText(l("ui.levelUp.nextSpell") + " " + l("ui.levelUp.nextSpellLevel", a));
  break;
}
if ("mimicry" === i) {
  var n = t === this.hostSlot ? this.foodSlot : this.hostSlot,
    o = t.getItem();
  n.setItem(o, 1), t.setItem(e, 1);
} else {
  t.setItem(e, 1);
}
if (this.hostItem) {
  if (this.foodItem) {
    t.objectUID === this.foodItem.objectUID || t.objectUID === this.hostItem.objectUID ? (this.hostSlot.setItem(t, 1), this.foodSlot.unset()) : this.foodSlot.setItem(t, 1);
  } else {
    if (t.objectUID === this.hostItem.objectUID) {
      return;
    }
    this.foodSlot.setItem(t, 1);
  }
} else {
  this.hostSlot.setItem(t, 1);
}
if (this.foodItem) {
  t.objectUID === this.foodItem.objectUID || t.objectUID === this.hostItem.objectUID ? (this.hostSlot.setItem(t, 1), this.foodSlot.unset()) : this.foodSlot.setItem(t, 1);
} else {
  if (t.objectUID === this.hostItem.objectUID) {
    return;
  }
  this.foodSlot.setItem(t, 1);
}
if (t.objectUID === this.hostItem.objectUID) {
  return;
}
if (e.reason === m.MIMICRY_OBJECT_ERROR) {
  var i,
    n = !1;
  switch (e.errorCode) {
    case -1:
      i = d("ui.error.state");
      break;
    case -2:
      i = d("ui.charSel.deletionErrorUnsecureMode");
      break;
    case -7:
      i = d("ui.mimicry.error.foodType");
      break;
    case -8:
      i = d("ui.mimicry.error.foodLevel");
      break;
    case -9:
      i = d("ui.mimicry.error.noValidMimicry");
      break;
    case -10:
      i = d("ui.mimicry.error.noValidHost");
      break;
    case -11:
      i = d("ui.mimicry.error.noValidFood");
      break;
    case -16:
      i = d("ui.mimicry.error.noMimicryAssociated");
      break;
    case -17:
      i = d("ui.mimicry.error.sameSkin");
      break;
    case -3:
    case -4:
    case -5:
    case -6:
    case -12:
    case -13:
    case -14:
    case -15:
      i = d("ui.popup.impossible_action"), n = !0;
      break;
    default:
      i = d("ui.common.unknownFail"), n = !0;
  }
  n && console.error("Abnormal mimicry error: " + e.errorCode), t._showError(i);
}
for (i = 0; i < e.padlockInfo.codeSize; i++) {
  e.codeDigitContainer.push(a.createChild("div", {
    className: "codeDigitContainer"
  })), e.codeDigit.push(e.codeDigitContainer[i].createChild("div", {
    className: "codeDigit"
  }));
}
for (i = n; i >= 0; i--) {
  o[i] = u.appendChild(new r(i, {
    className: ["keypad", "num" + i]
  })), o[i].id = i, o[i].on("tap", t);
}
for (var t = "", i = 0; i < e.padlockInfo.codeSize; i++) {
  t += isNaN(parseInt(e.codeDigit[i].getText(), 10)) ? "_" : e.codeDigit[i].getText();
}
for (var e = 0; e < this.codeDigit.length; e++) {
  this.codeDigit[e].setText(""), this.codeDigit[e].hide();
}
for (var e = this.currentCodeDigit % this.padlockInfo.codeSize, t = 0; t < this.codeDigitContainer.length; t++) {
  t === e ? this.codeDigitContainer[t].addClassNames("highlight") : this.codeDigitContainer[t].delClassNames("highlight");
}
for (var e in this.partyMap) {
  this._closePartyInvitation(e);
}
if (e.characterId) {
  var i = t.members[e.characterId];
  window.gui.openContextualMenu("player", {
    playerId: i.id,
    playerName: i.name,
    guildId: i.guildInfo.guildId
  });
}
if (e === this.partyId) {
  var i = this.members[t];
  if (i) {
    var n = i.index,
      o = this.characters.splice(n, 1)[0];
    this.slotList.removeChild(o), this.characters.push(this._newCharacterSlot());
    for (var a in this.members) {
      i = this.members[a], i.index > n && i.index--;
    }
    delete this.members[t], this.scroller.refresh();
  }
}
if (i) {
  var n = i.index,
    o = this.characters.splice(n, 1)[0];
  this.slotList.removeChild(o), this.characters.push(this._newCharacterSlot());
  for (var a in this.members) {
    i = this.members[a], i.index > n && i.index--;
  }
  delete this.members[t], this.scroller.refresh();
}
for (var a in this.members) {
  i = this.members[a], i.index > n && i.index--;
}
if (e === this.partyId) {
  if (g.indexOf(t._type) === -1) {
    return console.error("Unhandled type for character: " + t._type);
  }
  var n = this.members[t.id];
  n ? t.index = n.index : t.index = Object.keys(this.members).length, this.members[t.id] = t, this._updateCharacterSlot(t), i || this.scroller.refresh();
}
if (g.indexOf(t._type) === -1) {
  return console.error("Unhandled type for character: " + t._type);
}
if (i) {
  var n = this.characters[i.index];
  n.getChild("background").toggleClassName("guestFrame", !!t);
}
if (i) {
  var n = this.characters[i.index];
  n.getChild("background").toggleClassName("leaderIcon", !!t);
}
for (var n = i ? d.NUM_SLOTS_ARENA : d.NUM_SLOTS_CLASSIC, o = n; o > 0; o--) {
  this.characters.push(this._newCharacterSlot());
}
for (this.text.setText(c("ui.common.invitationPresentation", e.fromName) + "."), this.fromName = e.fromName, this.members = {}, o = 0; o < e.members.length; o++) {
  this._addOrUpdateMember(t, e.members[o], !0);
}
for (o = 0; o < e.guests.length; o++) {
  this._addOrUpdateMember(t, e.guests[o], !0);
}
for (var i = 0; i < t.rewardableAchievements.length; i += 1) {
  var n = t.rewardableAchievements[i];
  e.addReward(n.id, n.finishedlevel);
}
for (var i = e._rewardItems.length - 1; i >= 0; i--) {
  if (e._rewardItems[i].id === t) {
    for (var n = 0; n < e._rewardItems[i].itemsReward.length; n++) {
      window.gui.chat.logMsg(r("ui.common.newItem", e._rewardItems[i].itemsQuantityReward[n], e._rewardItems[i].itemsReward[n]));
    }
    e._rewardItems.splice(i, 1);
  }
}
if (e._rewardItems[i].id === t) {
  for (var n = 0; n < e._rewardItems[i].itemsReward.length; n++) {
    window.gui.chat.logMsg(r("ui.common.newItem", e._rewardItems[i].itemsQuantityReward[n], e._rewardItems[i].itemsReward[n]));
  }
  e._rewardItems.splice(i, 1);
}
for (var n = 0; n < e._rewardItems[i].itemsReward.length; n++) {
  window.gui.chat.logMsg(r("ui.common.newItem", e._rewardItems[i].itemsQuantityReward[n], e._rewardItems[i].itemsReward[n]));
}
if (i) {
  return e(i);
}
if (!y.rootElement) {
  return e();
}
for (var o = 0; o < n.length; o += 1) {
  var a = n[o],
    s = window.gui.playerData.achievements.completedData(A.id),
    r = a.isLinkedToAccount && s.isAccountCompleted,
    l = s.finishedlevel || window.gui.playerData.characterBaseInformations.level;
  if (a.experienceRatio) {
    var c = 0;
    r || (c = window.gui.playerData.achievements.getAchievementExperienceReward(a, A.level, l)), y.xp.setText(f.kamasToString(c, ""));
  } else if (a.kamasRatio) {
    var d = 0;
    r || (d = window.gui.playerData.achievements.getAchievementKamasReward(a, A.level, l)), y.kamas.setText(f.kamasToString(d, ""));
  }
  !r && (a.levelMin === -1 || a.levelMin <= t) && (a.levelMax === -1 || a.levelMax >= t) && (a.itemsReward && a.itemsReward.length > 0 && Array.prototype.push.apply(L, a.itemsReward), a.itemsQuantityReward && a.itemsQuantityReward.length > 0 && Array.prototype.push.apply(O, a.itemsQuantityReward), v._rewardItems.push({
    id: A.id,
    itemsReward: a.itemsReward,
    itemsQuantityReward: a.itemsQuantityReward
  }), a.emotesReward && a.emotesReward.length > 0 && Array.prototype.push.apply(R, a.emotesReward), a.titlesReward && a.titlesReward.length > 0 && Array.prototype.push.apply(D, a.titlesReward), a.ornamentsReward && a.ornamentsReward.length > 0 && Array.prototype.push.apply(P, a.ornamentsReward));
}
if (a.experienceRatio) {
  var c = 0;
  r || (c = window.gui.playerData.achievements.getAchievementExperienceReward(a, A.level, l)), y.xp.setText(f.kamasToString(c, ""));
} else if (a.kamasRatio) {
  var d = 0;
  r || (d = window.gui.playerData.achievements.getAchievementKamasReward(a, A.level, l)), y.kamas.setText(f.kamasToString(d, ""));
}
if (a.kamasRatio) {
  var d = 0;
  r || (d = window.gui.playerData.achievements.getAchievementKamasReward(a, A.level, l)), y.kamas.setText(f.kamasToString(d, ""));
}
if (t) {
  return e(t);
}
for (var i = 0; i < L.length; i += 1) {
  var n = g.items[L[i]];
  n || (n = g.items[g.FALLBACK_DB_ITEM_ID]), B.push("gfx/items/" + n.iconId + ".png");
}
for (var t = 0; t < R.length; t += 1) {
  B.push("gfx/emotes/" + R[t] + ".png");
}
for (var t = 0; t < D.length; t += 1) {
  B.push("gfx/illusUi/genericTitleIcon.png");
}
if (t) {
  return e(t);
}
for (var n = 0; n < i.length; n += 1) {
  B.push("gfx/ornaments/" + i[n].iconId + ".png");
}
for (var i = 0; i < t.length; i += 1) {
  var n = T[i];
  n && n.rootElement && (n.setImage(t[i]), n.setQuantity(O[i]));
}
for (var w = y.left.createChild("div", {
    className: "rewards",
    name: "rewards"
  }), b = w.createChild("div", {
    className: "rewardList"
  }), M = 6, T = [], C = 0; C < M; C += 1) {
  T[C] = b.appendChild(new c({
    name: "icon" + C
  }));
}
if (o) {
  return console.error("ServerDetails setServer error", o);
}
if (O && (w = O.getValue() || "")) {
  var e = new m(p, w);
  if (!e.getNickname() || !e.getToken()) {
    return void L.openPopup({
      title: d("ui.common.error"),
      message: d("ui.nickname.invalid")
    });
  }
  window.dofus.sendMessage("AcquaintanceSearchMessage", {
    accountName: {
      nickname: e.getNickname(),
      tag: e.getToken()
    },
    nickname: w
  });
}
if (!e.getNickname() || !e.getToken()) {
  return void L.openPopup({
    title: d("ui.common.error"),
    message: d("ui.nickname.invalid")
  });
}
if (t) {
  return console.error("ServerRow getServerStaticData error", t);
}
if (!i.data[e.id]) {
  return 1;
}
if (!i.data[t.id]) {
  return -1;
}
for (var n = 0, a = Math.max(e.length, E.length); n < a; n += 1) {
  var s = e[n],
    r = E[n];
  s ? r ? (r.setServer(s), r.show()) : o(s, E.length % 2) : r && r.hide();
}
for (var i = 0, o = b.length; i < o; i += 1) {
  S.push(b[i].id);
}
if (!e) {
  return this._flag.hide(), this._serverName.setText(""), this._population.setText(""), void this._status.hide();
}
for (var i = 0; i < d; i += 1) {
  var n = p[i],
    o = t[i + h];
  n.setServer(o), o && o.id === u && o.isSelectable && e(n);
}
for (var v = 0; v < d; v += 1) {
  i();
}
if (!u) {
  var i = e[0] || {};
  u = i.id;
}
for (var t = 0; t < 5; t += 1) {
  this._completions.push(this._content.createChild("div", {
    className: "completion"
  }));
}
if (this.delClassNames("placeHolder"), this._placeholder.hide(), !e) {
  return this.addClassNames("placeHolder"), this.disable(), this._content.hide(), this._placeholder.show(), void this._title.setText("");
}
for (var i = 0, n = this._completions.length; i < n; i += 1) {
  var o = this._completions[i];
  i < e.charactersCount ? o.addClassNames("on") : o.delClassNames("on");
}
for (t in this.zaapBody.panelCollection) {
  i = this.zaapBody.panelCollection[t], i.table && (i.table.clearContent(), i.selectedTeleporterType = null, i.selectedMapId = null);
}
for (t = 0; t < o; t += 1) {
  var l = e._subAreas[t],
    u = e._maps[t],
    h = e.destTeleporterType[t],
    p = a(h, A, u.id);
  s.push({
    name: l.areaName + " (" + l.name + ")",
    category: A,
    type: h,
    posX: u.posX,
    posY: u.posY,
    mapId: u.id,
    teleporterCost: e.costs[t],
    saved: u.id === e.spawnMapId,
    isFavorite: p
  });
}
for (t = 0; t < o; t += 1) {
  var m = s[t],
    f = m.type === b.TELEPORTER_ZAAP || m.type === b.TELEPORTER_PRISM;
  if (m.mapId !== c && f) {
    var g;
    m.type === b.TELEPORTER_ZAAP && (g = this.zaapBody.panelCollection.Zaap), m.type === b.TELEPORTER_PRISM && (g = this.zaapBody.panelCollection.Prism), this._addTeleporter({
      parentPanel: g,
      teleporterType: m.type,
      category: m.category,
      destinationName: m.name,
      posX: m.posX,
      posY: m.posY,
      mapId: m.mapId,
      teleporterCost: m.teleporterCost,
      saved: m.saved,
      isFavorite: m.isFavorite
    });
  }
}
if (m.mapId !== c && f) {
  var g;
  m.type === b.TELEPORTER_ZAAP && (g = this.zaapBody.panelCollection.Zaap), m.type === b.TELEPORTER_PRISM && (g = this.zaapBody.panelCollection.Prism), this._addTeleporter({
    parentPanel: g,
    teleporterType: m.type,
    category: m.category,
    destinationName: m.name,
    posX: m.posX,
    posY: m.posY,
    mapId: m.mapId,
    teleporterCost: m.teleporterCost,
    saved: m.saved,
    isFavorite: m.isFavorite
  });
}
for (t in this.zaapBody.panelCollection) {
  this.zaapBody.panelCollection.hasOwnProperty(t) && this.zaapBody.panelCollection[t].table.sort(r);
}
for (t in this.subwayBody.panelCollection) {
  i = this.subwayBody.panelCollection[t], i.table && (i.table.clearContent(), i.selectedTeleporterType = null, i.selectedMapId = null);
}
for (t = 0; t < o; t += 1) {
  n = e._hints[t];
  var l = n.realMapId || n.mapId,
    u = a(b.TELEPORTER_SUBWAY, n.categoryId, l);
  s.push({
    name: n.nameId,
    category: n.categoryId,
    posX: n.x,
    posY: n.y,
    mapId: l,
    teleporterCost: n.teleporterCost,
    saved: n.mapId === e.spawnMapId,
    isFavorite: u
  });
}
for (t = 0; t < o; t += 1) {
  if (n = s[t], n.mapId !== c) {
    var h;
    h = n.category === C ? this.subwayBody.panelCollection.CraftHouse : n.category === I ? this.subwayBody.panelCollection.BidHouse : this.subwayBody.panelCollection.Misc, this._addTeleporter({
      parentPanel: h,
      teleporterType: b.TELEPORTER_SUBWAY,
      destinationName: n.name,
      category: n.category,
      posX: n.posX,
      posY: n.posY,
      mapId: n.mapId,
      teleporterCost: n.teleporterCost,
      saved: n.saved,
      isFavorite: n.isFavorite
    });
  }
}
if (n = s[t], n.mapId !== c) {
  var h;
  h = n.category === C ? this.subwayBody.panelCollection.CraftHouse : n.category === I ? this.subwayBody.panelCollection.BidHouse : this.subwayBody.panelCollection.Misc, this._addTeleporter({
    parentPanel: h,
    teleporterType: b.TELEPORTER_SUBWAY,
    destinationName: n.name,
    category: n.category,
    posX: n.posX,
    posY: n.posY,
    mapId: n.mapId,
    teleporterCost: n.teleporterCost,
    saved: n.saved,
    isFavorite: n.isFavorite
  });
}
for (t in this.subwayBody.panelCollection) {
  this.subwayBody.panelCollection.hasOwnProperty(t) && this.subwayBody.panelCollection[t].table.sort(r);
}
for (var n in t) {
  var o = t[n];
  o.target.table.getRows().length <= 0 ? o.tab.disable() : (o.tab.enable(), i || (e.openTab(n), i = !0));
}
if (!i) {
  var a = e.getFirstTab();
  a.tab.enable(), e.openFirstTab();
}
if (t) {
  var i = p.getWindow("exchangeStorage");
  i.closeMinMaxSelector(), d.positionNextTo(g, _), r = "kamas", g.open({
    min: 1,
    max: t
  });
}
if (e) {
  var t = f.getWindow("exchangeInventory");
  t.closeMinMaxSelector(), h.positionNextTo(M, T), _ = "kamas", M.open({
    min: 1,
    max: e
  });
}
if (!e._concludeTrade(!1, o)) {
  if (!o) {
    return console.error("ExchangeErrorMessage: no error message for type", n.errorType);
  }
  t.openSimplePopup(o);
}
if (!o) {
  return console.error("ExchangeErrorMessage: no error message for type", n.errorType);
}
if (e) {
  var t = window.gui.playerData.inventory;
  this.buySoftBtn.setEnable(t.kamas >= e.amountSoft), this.buySoftBtnLabel.setText(u.intToString(e.amountSoft)), this.buyHardBtn.setEnable(!!e.amountHard), this.buyHardBtnLabel.setText(e.amountHard ? u.intToString(e.amountHard) : ""), e.item !== this.itemDescription.item && this.itemDescription.displayItem(e.item);
} else {
  this.buySoftBtn.disable(), this.buyHardBtn.disable();
  var i = d("ui.common.buy");
  this.buySoftBtnLabel.setText(i), this.buyHardBtnLabel.setText(i), this._closeTradeConfirmWindow();
}
if (this.tradeItemConfirm && !this.isTradePending) {
  var i = this.isHardCcyTrade ? t : e;
  if (i > this.initialPrice) {
    return this._closeTradeConfirmWindow();
  }
  this.currentPrice = i, this.tradeItemConfirm.updatePriceRealtime(i);
}
if (i > this.initialPrice) {
  return this._closeTradeConfirmWindow();
}
if (e !== this.mode || t !== this.item) {
  this.mode = e, this.item = t;
  var n = t.item || t,
    o = n.nameId + " (" + n.id + ") " + d("ui.common.short.level") + " " + n.level;
  this.errorBox.hide(), this.setTitle(o), this.itemDescription.displayItem(t), this.settingBox.updateSettingBox(this, t, i), this.errorBox.isVisible() || this.settingBox.show();
}
if (!("ExchangeBidHouseBuyResultMessage" !== e || this.selection && this.selection.item)) {
  return console.error("TradeItemWindow._prepareKpi: this.selection is not valid");
}
if (this.descriptor.types.indexOf(t.item.typeId) === -1) {
  return e.showError(c("ui.bidhouse.badType"));
}
if (t.isLinked()) {
  return e.showError(c("ui.bidhouse.badExchange"));
}
if (t.item.level > this.descriptor.maxItemLevel) {
  return e.showError(c("ui.bidhouse.badLevel"));
}
for (var s = 1, r = 0, l = o.length; r < l; r += 1) {
  var d = o[r];
  t.quantity >= d && (this.quantitySelect.addOption(d, d), s = d);
}
for (var r = this.descriptor.quantities, u = 0; u < r.length; u++) {
  this.minPriceValues[u] = this._createMinPriceValueBox(s, "x" + r[u], u);
}
for (var e = this.minPricesCache[this.item.objectGID], t = this.descriptor.quantities, i = 0; i < t.length; i++) {
  var n = e && e[i] ? u.intToString(e[i]) : b;
  this.minPriceValues[i].setText(n);
}
if ("sell-bidHouse" !== this.mode) {
  return p("NO_ACTION");
}
if (t > this.item.quantity) {
  return p("NO_ACTION");
}
if (!t) {
  return !0;
}
if (p.simplifyString(i.shortName).indexOf(t) !== -1) {
  return !0;
}
for (var n = i.effects, o = 0; o < n.length; o++) {
  if (p.simplifyString(n[o].description).indexOf(t) !== -1) {
    return !0;
  }
}
if (p.simplifyString(n[o].description).indexOf(t) !== -1) {
  return !0;
}
if (this.currentOffer && e === this.currentOffer.id) {
  if (t > this.currentOffer.amountSoft) {
    return this.tradeItemWindow.updateSelection(null);
  }
  this.table.selectRow(e, !0), this.tradeItemWindow.updateBidHouseBuyPriceRealtime(t, g.computeHardPrice(t));
}
if (t > this.currentOffer.amountSoft) {
  return this.tradeItemWindow.updateSelection(null);
}
for (var e;;) {
  if (!this.actions.length) {
    return;
  }
  if (e = this.actions.shift(), e.GID === this.pendingItemGid) {
    break;
  }
}
if (!this.actions.length) {
  return;
}
if (e = this.actions.shift(), e.GID === this.pendingItemGid) {
  break;
}
if (e === this.pendingItemGid) {
  for (var n = 0 === i, o = Math.min(i + (n ? L : x), t.length), a = [], s = i; s < o; s++) {
    var r = t[s];
    a.push({
      objectUID: r.objectUID,
      objectGID: e,
      prices: r.prices,
      effects: r.effects,
      quantity: 1
    });
  }
  this._addItems(a, n ? A : S, this._nextItemListChunk.bind(this, e, t, o));
}
for (var n = 0 === i, o = Math.min(i + (n ? L : x), t.length), a = [], s = i; s < o; s++) {
  var r = t[s];
  a.push({
    objectUID: r.objectUID,
    objectGID: e,
    prices: r.prices,
    effects: r.effects,
    quantity: 1
  });
}
for (var i = this.descriptor.quantities, n = 0; n < i.length; n++) {
  var o = e + "x" + i[n];
  this.table.delRow(o), t === N && this._removeOffer(o);
}
if (o) {
  return console.error(o), i && i(o);
}
if (e === n.expectedItems) {
  n.expectedItems = null, t === A && n._adaptTableToItemType(a.array[0]);
  var s = a.map,
    r = [];
  for (var l in s) {
    n._separateItemBulks(s[l], r);
  }
  if (n.table.addList(r), t === E) {
    for (var c = 0; c < r.length; c++) {
      var d = r[c];
      n._updateOffer(d.id, d.amountSoft);
    }
  }
  return n._updatePriceHighlighting(), i && i();
}
for (var l in s) {
  n._separateItemBulks(s[l], r);
}
if (n.table.addList(r), t === E) {
  for (var c = 0; c < r.length; c++) {
    var d = r[c];
    n._updateOffer(d.id, d.amountSoft);
  }
}
for (var c = 0; c < r.length; c++) {
  var d = r[c];
  n._updateOffer(d.id, d.amountSoft);
}
for (var i = this.descriptor.quantities, n = 0; n < i.length; n++) {
  var o = e.prices[n];
  if (o) {
    var a = i[n];
    t.push({
      id: e.getProperty("objectUID") + "x" + a,
      item: e,
      qty: a,
      amountSoft: o,
      unitPrice: o / a,
      amountHard: null
    }), this.displayedUnitCount += a, this.displayedUnitPrice += o;
  }
}
if (o) {
  var a = i[n];
  t.push({
    id: e.getProperty("objectUID") + "x" + a,
    item: e,
    qty: a,
    amountSoft: o,
    unitPrice: o / a,
    amountHard: null
  }), this.displayedUnitCount += a, this.displayedUnitPrice += o;
}
if (this.serverAveragePrice = e, e === -1) {
  return this.averagePriceElement.setText(h("ui.item.averageprice.unavailable"));
}
for (var e = this._computeAveragePrice(), t = this.table.rows.getChildren(), i = 0; i < t.length; i++) {
  var n = t[i],
    o = n.rowContent;
  n.toggleClassName("expensive", o.unitPrice >= e * C), n.toggleClassName("cheap", o.unitPrice <= e * I);
}
if (this.totalPrice.show(), this.currency ? this.totalPriceValue.setText(this.currency + " x " + l.intToString(i)) : this.totalPriceValue.setText(l.kamasToString(i)), this.buyButton.isVisible()) {
  var n = window.gui.playerData.inventory,
    o = this.tokenItem ? n.getGenericItemCount(this.tokenItem.id) : n.kamas;
  i > o ? (this.buyButton.disable(), this.totalPriceValue.addClassNames("red")) : (this.buyButton.enable(), this.totalPriceValue.delClassNames("red"));
}
if (n.navigateToItem(e)) {
  return !0;
}
if (i && this._selectItemByUID(i.objectUID, !0)) {
  return !0;
}
if (this.mode = f[e._messageType], !this.mode) {
  return console.error(new Error("Unexpected msg type for TradeStorageWindow: " + e._messageType));
}
if (i.currency) {
  t = new m("div", {
    className: "token"
  });
  var n = t.createChild("div", {
    className: "icon"
  });
  n.setStyle("backgroundImage", i.token.image), t.createChild("div", {
    className: "quantity",
    text: "x" + e.objectPrice
  });
} else {
  t = r.kamasToString(e.objectPrice);
}
for (var t = 0; t < e.length; t++) {
  n.shopViewer.table.endSlide(e[t]);
}
if (this.showBonusPack) {
  var e = this.createChild("div", {
    className: ["currency", "bonusPack"]
  });
  e.createChild("div", {
    className: "counterCrown"
  });
  var t = e.createChild("div", {
    className: "text"
  });
  this.bonusPackEliteDuration = t.createChild("div", {
    className: "eliteDuration",
    text: "0"
  }), t.createChild("div", {
    className: "separatorBonus",
    text: " / "
  }), this.bonusPackDuration = t.createChild("div", {
    className: "duration",
    text: "0"
  }), e.createChild("div", {
    className: "currencyIcon"
  }), this._refreshSubscriptionCountdown(), h.addTooltip(this.bonusPackEliteDuration, u("ui.shop.bonusPackEliteTooltip"), {
    longTapExplanation: !0
  }), h.addTooltip(this.bonusPackDuration, u("ui.shop.bonusPackTooltip"), {
    longTapExplanation: !0
  }), this.bonusPackBtn = e.appendChild(new s({
    className: "moreButton"
  }, a)), this.bonusPackBtn.myWallet = this;
}
if (this.bonusPackEliteDuration && this.bonusPackDuration) {
  var i = f.now() + t.getSubscriptionRemainingTime(m.NORMAL),
    n = f.now() + t.getSubscriptionRemainingTime(m.ELITE);
  this.bonusPackCountdown && this.bonusPackCountdown.clear(), this.bonusPackCountdown = new p(new Date(i), function (t, i, n) {
    return t ? console.error(t) : void e.bonusPackDuration.setText(n.toUpperCase());
  }, function () {
    e.bonusPackDuration.setText("0 " + u("tablet.time.days.short"));
  }), this.bonusPackDuration.delClassNames("paused"), t.isSubscriberAtMinLevel(m.ELITE) && (this.bonusPackCountdown.clear(), this.bonusPackDuration.addClassNames("paused")), this.bonusPackEliteCountdown && this.bonusPackEliteCountdown.clear(), this.bonusPackEliteCountdown = new p(new Date(n), function (t, i, n) {
    return t ? console.error(t) : void e.bonusPackEliteDuration.setText(n.toUpperCase());
  }, function () {
    e.bonusPackEliteDuration.setText("0 " + u("tablet.time.days.short"));
  });
}
if (!(n <= 0)) {
  var a = n % r === 0 ? 1 : 0,
    d = Math.max(0, ~~(n / c) - a),
    u = Math.max(0, ~~(n / l) - a),
    h = Math.max(0, ~~(n / r) - a);
  d ? e = n % c || c : u ? e = n % l || l : h && (e = n % r || r);
  var p = {
      day: d,
      hour: u,
      minute: h || 1
    },
    m = o(p);
  if (!m) {
    return t._updateCallback(new Error("Time left could not be formatted, day: " + p.day + ", hour: " + p.hour + ", minute: " + p.minute));
  }
  t._updateCallback(null, p, m), e && (this._updateTimeout = window.setTimeout(function () {
    t._setUpdateTimeout();
  }, e));
}
if (!m) {
  return t._updateCallback(new Error("Time left could not be formatted, day: " + p.day + ", hour: " + p.hour + ", minute: " + p.minute));
}
if (e.subareaConquest) {
  this._conquestPresenter.selectSubarea(e.subareaConquest);
} else if (e.subarea) {
  this._worldMap.clearSubAreaHighlights(), this._worldMap.addSubAreaHighlight(e.subarea, C), this._worldMap.centerOnSubArea(e.subarea);
} else if (e.subareas) {
  var t = e.subareas;
  if (t.length >= 1) {
    this._worldMap.clearSubAreaHighlights();
    for (var i = 0; i < t.length; i++) {
      var n = t[i] === e.favorite ? I : C;
      this._worldMap.addSubAreaHighlight(t[i], n);
    }
    var o;
    switch (e.centerOn) {
      case "favorite":
        o = e.favorite;
        break;
      case "nearest":
        o = this._worldMap.getNearestSubarea(t);
        break;
      default:
        o = t[0];
    }
    this._worldMap.centerOnSubArea(o);
  }
} else {
  this._worldMap.centerToPosition(e.coords);
}
if (e.subarea) {
  this._worldMap.clearSubAreaHighlights(), this._worldMap.addSubAreaHighlight(e.subarea, C), this._worldMap.centerOnSubArea(e.subarea);
} else if (e.subareas) {
  var t = e.subareas;
  if (t.length >= 1) {
    this._worldMap.clearSubAreaHighlights();
    for (var i = 0; i < t.length; i++) {
      var n = t[i] === e.favorite ? I : C;
      this._worldMap.addSubAreaHighlight(t[i], n);
    }
    var o;
    switch (e.centerOn) {
      case "favorite":
        o = e.favorite;
        break;
      case "nearest":
        o = this._worldMap.getNearestSubarea(t);
        break;
      default:
        o = t[0];
    }
    this._worldMap.centerOnSubArea(o);
  }
} else {
  this._worldMap.centerToPosition(e.coords);
}
if (e.subareas) {
  var t = e.subareas;
  if (t.length >= 1) {
    this._worldMap.clearSubAreaHighlights();
    for (var i = 0; i < t.length; i++) {
      var n = t[i] === e.favorite ? I : C;
      this._worldMap.addSubAreaHighlight(t[i], n);
    }
    var o;
    switch (e.centerOn) {
      case "favorite":
        o = e.favorite;
        break;
      case "nearest":
        o = this._worldMap.getNearestSubarea(t);
        break;
      default:
        o = t[0];
    }
    this._worldMap.centerOnSubArea(o);
  }
} else {
  this._worldMap.centerToPosition(e.coords);
}
if (t.length >= 1) {
  this._worldMap.clearSubAreaHighlights();
  for (var i = 0; i < t.length; i++) {
    var n = t[i] === e.favorite ? I : C;
    this._worldMap.addSubAreaHighlight(t[i], n);
  }
  var o;
  switch (e.centerOn) {
    case "favorite":
      o = e.favorite;
      break;
    case "nearest":
      o = this._worldMap.getNearestSubarea(t);
      break;
    default:
      o = t[0];
  }
  this._worldMap.centerOnSubArea(o);
}
for (var i = 0; i < t.length; i++) {
  var n = t[i] === e.favorite ? I : C;
  this._worldMap.addSubAreaHighlight(t[i], n);
}
if (t.status.isWorldMapRefreshing = !0, t._removeSpinner(), t.status.isLoading = !1, t._isOpened = !0, !t.openState) {
  return t._onClose();
}
if (!this._maxContentSize) {
  var e = this._getCurrentInnerBoundaries();
  this._maxContentSize = {
    width: p.windowFullScreenWidth - (this.position.width - e.width),
    height: p.windowFullScreenHeight - (this.position.height - e.height)
  };
}
if (e.openState) {
  if (e._worldMap.isLoading()) {
    var t = this.coordinates.posX,
      i = this.coordinates.posY;
    e._worldMap.once("loaded", function () {
      e._worldMap.setIconPosition("userPosition", t, i), e._worldMap.centerToMyPosition();
    });
  } else {
    e._worldMap.setIconPosition("userPosition", this.coordinates.posX, this.coordinates.posY), e._worldMap.centerToMyPosition();
  }
  e.status.isLoading && (e.status.openAtInfo = {
    coords: this.coordinates
  });
}
if (e._worldMap.isLoading()) {
  var t = this.coordinates.posX,
    i = this.coordinates.posY;
  e._worldMap.once("loaded", function () {
    e._worldMap.setIconPosition("userPosition", t, i), e._worldMap.centerToMyPosition();
  });
} else {
  e._worldMap.setIconPosition("userPosition", this.coordinates.posX, this.coordinates.posY), e._worldMap.centerToMyPosition();
}
if (this.plusButton.toggleDisplay(!e), this.minusButton.toggleDisplay(!!e), this._isMaximized = e, !e) {
  var t = parseInt(this.getStyle("width"), 10),
    i = parseInt(this.getStyle("height"), 10);
  t > .9 * p.windowFullScreenWidth && i > .9 * p.windowFullScreenHeight || (this.status.lastWindowInfo.w = t, this.status.lastWindowInfo.h = i);
}
for (var e in this._optionButtons) {
  var t = this._optionButtons[e];
  t.selected = t.defaultSelected, t.toggleClassName("selected", t.selected);
}
for (var t = {}, i = [], n = 0, o = 0; o < e.length; o += 2) {
  if (!t[o]) {
    i[n] = [];
    for (var a = [o]; a.length;) {
      for (var s = a.pop(), r = e[s], l = e[s + 1], c = 0; c < e.length; c += 2) {
        var d = e[c],
          u = e[c + 1];
        if (!t[c]) {
          var h = Math.abs(d - r) + Math.abs(u - l);
          h <= U && (t[c] = !0, i[n].push(c), a.push(c));
        }
      }
    }
    n++;
  }
}
if (!t[o]) {
  i[n] = [];
  for (var a = [o]; a.length;) {
    for (var s = a.pop(), r = e[s], l = e[s + 1], c = 0; c < e.length; c += 2) {
      var d = e[c],
        u = e[c + 1];
      if (!t[c]) {
        var h = Math.abs(d - r) + Math.abs(u - l);
        h <= U && (t[c] = !0, i[n].push(c), a.push(c));
      }
    }
  }
  n++;
}
for (var a = [o]; a.length;) {
  for (var s = a.pop(), r = e[s], l = e[s + 1], c = 0; c < e.length; c += 2) {
    var d = e[c],
      u = e[c + 1];
    if (!t[c]) {
      var h = Math.abs(d - r) + Math.abs(u - l);
      h <= U && (t[c] = !0, i[n].push(c), a.push(c));
    }
  }
}
for (var s = a.pop(), r = e[s], l = e[s + 1], c = 0; c < e.length; c += 2) {
  var d = e[c],
    u = e[c + 1];
  if (!t[c]) {
    var h = Math.abs(d - r) + Math.abs(u - l);
    h <= U && (t[c] = !0, i[n].push(c), a.push(c));
  }
}
if (!t[c]) {
  var h = Math.abs(d - r) + Math.abs(u - l);
  h <= U && (t[c] = !0, i[n].push(c), a.push(c));
}
if (this._worldMapData) {
  if (!e) {
    return void console.error(new Error("centerToPosition no coords"));
  }
  if (void 0 === e.posX || void 0 === e.posY) {
    return void console.error(new Error("centerToPosition no pos: " + e.constructor.name));
  }
  var t = this._convertGridToSceneCoordinate(e.posX, e.posY);
  this._scene.camera.follow(t), this._loadChunksInView();
}
if (!e) {
  return void console.error(new Error("centerToPosition no coords"));
}
if (void 0 === e.posX || void 0 === e.posY) {
  return void console.error(new Error("centerToPosition no pos: " + e.constructor.name));
}
for (var t, i = window.gui.playerData.position.coordinates, n = 1 / 0, o = 0; o < e.length; o++) {
  var a = e[o],
    s = this.getSubAreaBounds(a);
  if (s) {
    var r = s.x + s.width / 2,
      l = s.y + s.height / 2,
      c = Math.abs(r - i.posX) + Math.abs(l - i.posY);
    c >= n || (n = c, t = a);
  }
}
if (s) {
  var r = s.x + s.width / 2,
    l = s.y + s.height / 2,
    c = Math.abs(r - i.posX) + Math.abs(l - i.posY);
  c >= n || (n = c, t = a);
}
if (this._worldMapData) {
  var e = window.gui.playerData.position.coordinates;
  this.centerToPosition(e);
}
if (this._worldMapId === i) {
  return this._isLoadingWorldMapData ? console.error("[WorldMap.initialize]", "Initialisation already launched") : this._display(), t();
}
if (this._isLoadingWorldMapData) {
  return console.error("[WorldMap.initialize]", "Initialisation of a world map of another id is already launched", "Asked ", i, "Loading", this._worldMapId), t();
}
if (window.gui.playerData.position.worldmapId !== this._worldMapId) {
  return this.initialize(e, t);
}
for (var p = 2; p < l.length; p += 1) {
  var m = parseFloat(l[p]);
  2 * m < u ? (this._zoomLevels.push(h), u = h, h = m) : h = m;
}
for (var s = o + 1, r = a + 1, l = s * e, d = r * t, h = [], m = 0; m < s; m += 1) {
  var f = m * e;
  h.push(new u(f, -n, f, d - n));
}
for (var g = 0; g < r; g += 1) {
  var _ = g * t;
  h.push(new u(-i, _, l - i, _));
}
if (!this._isLoadingWorldMapData) {
  var i = this._convertGridToSceneCoordinate(e, t);
  this._zoneHighlight.isDisplayed ? ((this._zoneHighlightTween.starting || this._zoneHighlightTween.playing) && this._zoneHighlightTween.stop(), this._zoneHighlightTween.reset().from({
    x: this._zoneHighlight.x,
    y: this._zoneHighlight.y
  }).to({
    x: i.x,
    y: i.y
  }, 16, W.polyOut, 9).start()) : (this._zoneHighlight.show(), this._zoneHighlight.x = i.x, this._zoneHighlight.y = i.y);
}
if (this._gridTween) {
  this._gridTween.playing && this._gridTween.stop(), this._gridTween.removeOnFinish();
  var t = this._gridSprite.isDisplayed ? this._gridSprite.alpha : 0;
  if (e) {
    this._gridSprite.show(), this._gridTween.reset().from({
      alpha: t
    }).to({
      alpha: 1
    }, 4);
  } else {
    this._gridTween.reset().from({
      alpha: t
    }).to({
      alpha: 0
    }, 4);
    var i = this._gridSprite;
    this._gridTween.onFinish(function () {
      i.hide();
    });
  }
  this._gridTween.start();
}
if (e) {
  this._gridSprite.show(), this._gridTween.reset().from({
    alpha: t
  }).to({
    alpha: 1
  }, 4);
} else {
  this._gridTween.reset().from({
    alpha: t
  }).to({
    alpha: 0
  }, 4);
  var i = this._gridSprite;
  this._gridTween.onFinish(function () {
    i.hide();
  });
}
for (var i = this._convertGridCoordinateToCompressedCoordinate(e, t), n = this._subAreaIdPerCoordinate[this._worldMapId][i]; void 0 === n && t >= q;) {
  i -= 1, t--, n = this._subAreaIdPerCoordinate[this._worldMapId][i];
}
if (n) {
  return this._subAreaData[n];
}
if (!t) {
  return console.error("SubareaData not found for " + e);
}
if (!i) {
  for (var n in t.gridPositions) {
    i = t.gridPositions[n];
    break;
  }
  if (!i) {
    return console.error("Grid positions missing for subarea " + e);
  }
}
for (var n in t.gridPositions) {
  i = t.gridPositions[n];
  break;
}
if (!i) {
  return console.error("Grid positions missing for subarea " + e);
}
if (i) {
  for (var n = o(i), a = {
      xMin: 0,
      yMin: 0,
      xMax: 0,
      yMax: 0
    }, s = 1 / 0, r = 0; r < n.length; r++) {
    for (var l = n[r], c = {
        xMin: 1 / 0,
        yMin: 1 / 0,
        xMax: -(1 / 0),
        yMax: -(1 / 0)
      }, d = 0; d < l.length; d++) {
      var u = l[d],
        h = i[u],
        p = i[u + 1];
      c.xMin = Math.min(h, c.xMin), c.xMax = Math.max(h, c.xMax), c.yMin = Math.min(p, c.yMin), c.yMax = Math.max(p, c.yMax);
    }
    var m = (c.xMin + c.xMax) / 2,
      f = (c.yMin + c.yMax) / 2,
      g = Math.abs(m - t.posX, f - t.posY);
    g < s && (s = g, a = c);
  }
  var _ = a.xMax - a.xMin,
    v = a.yMax - a.yMin;
  return {
    x: a.xMin,
    y: a.yMin,
    width: _,
    height: v
  };
}
for (var n = o(i), a = {
    xMin: 0,
    yMin: 0,
    xMax: 0,
    yMax: 0
  }, s = 1 / 0, r = 0; r < n.length; r++) {
  for (var l = n[r], c = {
      xMin: 1 / 0,
      yMin: 1 / 0,
      xMax: -(1 / 0),
      yMax: -(1 / 0)
    }, d = 0; d < l.length; d++) {
    var u = l[d],
      h = i[u],
      p = i[u + 1];
    c.xMin = Math.min(h, c.xMin), c.xMax = Math.max(h, c.xMax), c.yMin = Math.min(p, c.yMin), c.yMax = Math.max(p, c.yMax);
  }
  var m = (c.xMin + c.xMax) / 2,
    f = (c.yMin + c.yMax) / 2,
    g = Math.abs(m - t.posX, f - t.posY);
  g < s && (s = g, a = c);
}
for (var l = n[r], c = {
    xMin: 1 / 0,
    yMin: 1 / 0,
    xMax: -(1 / 0),
    yMax: -(1 / 0)
  }, d = 0; d < l.length; d++) {
  var u = l[d],
    h = i[u],
    p = i[u + 1];
  c.xMin = Math.min(h, c.xMin), c.xMax = Math.max(h, c.xMax), c.yMin = Math.min(p, c.yMin), c.yMax = Math.max(p, c.yMax);
}
if (!this._subAreaSprites[e] || this._subAreaSprites[e].id !== i) {
  var n = this._getZoneGridPositions(e);
  if (n) {
    for (var o = [], a = 1 / 0, s = 1 / 0, r = -(1 / 0), l = -(1 / 0), c = {}, d = 0; d < n.length; d += 2) {
      var u = n[d],
        p = n[d + 1],
        f = u + ":" + p;
      if (void 0 === c[f]) {
        c[f] = !0;
        var g = this._convertGridToSceneCoordinate(u, p),
          _ = g.x - this._zoneWidth / 2,
          v = g.y - this._zoneHeight / 2;
        o.push(new h(_, v, _ + this._zoneWidth, v, _ + this._zoneWidth, v + this._zoneHeight, _, v + this._zoneHeight)), _ < a && (a = _), _ > r && (r = _), v < s && (s = v), v > l && (l = v);
      }
    }
    null !== this._subAreaSprites[e] && void 0 !== this._subAreaSprites[e] && this._subAreaSprites[e].remove(), this._subAreaSprites[e] = new m({
      scene: this._scene,
      x: 0,
      y: 0,
      boxes: o,
      hue: t || T,
      layer: 1,
      id: "subAreaOverlay" + e
    }), new z(this._subAreaSprites[e], ["alpha"]).from({
      alpha: .4
    }).to({
      alpha: 1
    }, 15, W.polyOut, 3).to({
      alpha: .4
    }, 15, W.polyIn, 2).start(!0), new z(this._subAreaSprites[e].highlight, ["red", "green", "blue"]).from({
      red: .3,
      green: .3,
      blue: .3
    }).to({
      red: 1,
      green: 1,
      blue: 1
    }, 15, W.polyOut, 3).to({
      red: .3,
      green: .3,
      blue: .3
    }, 15, W.polyIn, 2).start(!0);
  }
}
if (n) {
  for (var o = [], a = 1 / 0, s = 1 / 0, r = -(1 / 0), l = -(1 / 0), c = {}, d = 0; d < n.length; d += 2) {
    var u = n[d],
      p = n[d + 1],
      f = u + ":" + p;
    if (void 0 === c[f]) {
      c[f] = !0;
      var g = this._convertGridToSceneCoordinate(u, p),
        _ = g.x - this._zoneWidth / 2,
        v = g.y - this._zoneHeight / 2;
      o.push(new h(_, v, _ + this._zoneWidth, v, _ + this._zoneWidth, v + this._zoneHeight, _, v + this._zoneHeight)), _ < a && (a = _), _ > r && (r = _), v < s && (s = v), v > l && (l = v);
    }
  }
  null !== this._subAreaSprites[e] && void 0 !== this._subAreaSprites[e] && this._subAreaSprites[e].remove(), this._subAreaSprites[e] = new m({
    scene: this._scene,
    x: 0,
    y: 0,
    boxes: o,
    hue: t || T,
    layer: 1,
    id: "subAreaOverlay" + e
  }), new z(this._subAreaSprites[e], ["alpha"]).from({
    alpha: .4
  }).to({
    alpha: 1
  }, 15, W.polyOut, 3).to({
    alpha: .4
  }, 15, W.polyIn, 2).start(!0), new z(this._subAreaSprites[e].highlight, ["red", "green", "blue"]).from({
    red: .3,
    green: .3,
    blue: .3
  }).to({
    red: 1,
    green: 1,
    blue: 1
  }, 15, W.polyOut, 3).to({
    red: .3,
    green: .3,
    blue: .3
  }, 15, W.polyIn, 2).start(!0);
}
for (var o = [], a = 1 / 0, s = 1 / 0, r = -(1 / 0), l = -(1 / 0), c = {}, d = 0; d < n.length; d += 2) {
  var u = n[d],
    p = n[d + 1],
    f = u + ":" + p;
  if (void 0 === c[f]) {
    c[f] = !0;
    var g = this._convertGridToSceneCoordinate(u, p),
      _ = g.x - this._zoneWidth / 2,
      v = g.y - this._zoneHeight / 2;
    o.push(new h(_, v, _ + this._zoneWidth, v, _ + this._zoneWidth, v + this._zoneHeight, _, v + this._zoneHeight)), _ < a && (a = _), _ > r && (r = _), v < s && (s = v), v > l && (l = v);
  }
}
if (void 0 === c[f]) {
  c[f] = !0;
  var g = this._convertGridToSceneCoordinate(u, p),
    _ = g.x - this._zoneWidth / 2,
    v = g.y - this._zoneHeight / 2;
  o.push(new h(_, v, _ + this._zoneWidth, v, _ + this._zoneWidth, v + this._zoneHeight, _, v + this._zoneHeight)), _ < a && (a = _), _ > r && (r = _), v < s && (s = v), v > l && (l = v);
}
if (null !== this._subAreaSprites[e] && void 0 !== this._subAreaSprites[e]) {
  var t = this._subAreaSprites[e];
  delete this._subAreaSprites[e], new z(t, ["alpha"]).from({
    alpha: 1
  }).to({
    alpha: 0
  }, 5).start().onFinish(function () {
    t.remove();
  });
}
for (var t in this._subAreaSprites) {
  e !== Number(t) && this.removeSubAreaHighlight(t);
}
for (var t, i = this._zoomLevels[0], n = 1; n < this._zoomLevels.length && (t = this._zoomLevels[n], !(e >= 1.2 * t)); n += 1) {
  i = t;
}
if (void 0 !== t) {
  if (0 === this._zoomLevels.length || 1.5 * t <= this._zoomLevels[this._zoomLevels.length - 1]) {
    return void this._clearChunks();
  }
  this._chunkBatchCurrent += 1;
  var i,
    n,
    o,
    s,
    r = this._getZoomLevel(t),
    l = this._scene.camera,
    d = l.followee.x - l.fovW / 2 * C;
  if (d < 0) {
    i = 0, n = Math.min(l.fovW * C, this._worldMapWidth);
  } else {
    var u = l.followee.x + l.fovW / 2 * C;
    u > this._worldMapWidth ? (i = Math.max(this._worldMapWidth - l.fovW * C, 0), n = this._worldMapWidth) : (i = d, n = u);
  }
  var h = l.followee.y - l.fovH / 2 * C;
  if (h < 0) {
    o = 0, s = Math.min(l.fovH * C, this._worldMapHeight);
  } else {
    var p = l.followee.y + l.fovH / 2 * C;
    p > this._worldMapHeight ? (o = Math.max(this._worldMapHeight - l.fovH * C, 0), s = this._worldMapHeight) : (o = h, s = p);
  }
  var m = this._convertSceneToChunkCoordinate(r, i, o),
    g = this._convertSceneToChunkCoordinate(r, n, s),
    _ = m.k,
    v = g.k,
    y = m.l,
    b = g.l,
    M = [],
    T = r * this._worldMapWidth / I,
    S = r * this._worldMapHeight / A,
    E = Math.ceil(T),
    N = Math.ceil(S);
  v === T && T === E && (v -= 1), b === S && S === N && (b -= 1);
  var x,
    L,
    O,
    R = Object.keys(this._chunkSprites);
  for (O = 0; O < R.length; O += 1) {
    this._chunkSprites[R[O]].id = null;
  }
  for (var D = y; D <= b; D += 1) {
    for (var P = _; P <= v; P += 1) {
      if (x = this._worldMapId + "-" + r + "-" + (D * E + P + 1).toString(), L = this._chunkSprites[x], void 0 === L) {
        if (void 0 === this._chunkBatchIndexes[x]) {
          var B = c.WORLDMAP_PATH + x + ".jpg",
            k = D - (y + b) / 2,
            F = P - (_ + v) / 2,
            H = Math.sqrt(k * k + F * F),
            z = this._scene.holdTexture(x),
            W = new w(P, D, r, x, B, z, this._scene, H);
          void 0 === z ? (M.push(W), this._chunkBatchIndexes[x] = this._chunkBatchCurrent) : this._createChunkGraphic(W);
        } else {
          this._chunkBatchIndexes[x] = this._chunkBatchCurrent;
        }
      } else {
        L.id = x;
      }
    }
  }
  for (O = 0; O < R.length; O += 1) {
    x = R[O], L = this._chunkSprites[x], null === L.id && (L.remove(), delete this._chunkSprites[x]);
  }
  M.sort(function (e, t) {
    return e.distToViewCenter - t.distToViewCenter;
  });
  var G = this;
  a.eachLimit(M, 5, e, function (e) {
    e && console.error("Chunk textures not loaded correctly", e);
  });
}
if (0 === this._zoomLevels.length || 1.5 * t <= this._zoomLevels[this._zoomLevels.length - 1]) {
  return void this._clearChunks();
}
if (d < 0) {
  i = 0, n = Math.min(l.fovW * C, this._worldMapWidth);
} else {
  var u = l.followee.x + l.fovW / 2 * C;
  u > this._worldMapWidth ? (i = Math.max(this._worldMapWidth - l.fovW * C, 0), n = this._worldMapWidth) : (i = d, n = u);
}
if (h < 0) {
  o = 0, s = Math.min(l.fovH * C, this._worldMapHeight);
} else {
  var p = l.followee.y + l.fovH / 2 * C;
  p > this._worldMapHeight ? (o = Math.max(this._worldMapHeight - l.fovH * C, 0), s = this._worldMapHeight) : (o = h, s = p);
}
for (O = 0; O < R.length; O += 1) {
  this._chunkSprites[R[O]].id = null;
}
for (var D = y; D <= b; D += 1) {
  for (var P = _; P <= v; P += 1) {
    if (x = this._worldMapId + "-" + r + "-" + (D * E + P + 1).toString(), L = this._chunkSprites[x], void 0 === L) {
      if (void 0 === this._chunkBatchIndexes[x]) {
        var B = c.WORLDMAP_PATH + x + ".jpg",
          k = D - (y + b) / 2,
          F = P - (_ + v) / 2,
          H = Math.sqrt(k * k + F * F),
          z = this._scene.holdTexture(x),
          W = new w(P, D, r, x, B, z, this._scene, H);
        void 0 === z ? (M.push(W), this._chunkBatchIndexes[x] = this._chunkBatchCurrent) : this._createChunkGraphic(W);
      } else {
        this._chunkBatchIndexes[x] = this._chunkBatchCurrent;
      }
    } else {
      L.id = x;
    }
  }
}
for (var P = _; P <= v; P += 1) {
  if (x = this._worldMapId + "-" + r + "-" + (D * E + P + 1).toString(), L = this._chunkSprites[x], void 0 === L) {
    if (void 0 === this._chunkBatchIndexes[x]) {
      var B = c.WORLDMAP_PATH + x + ".jpg",
        k = D - (y + b) / 2,
        F = P - (_ + v) / 2,
        H = Math.sqrt(k * k + F * F),
        z = this._scene.holdTexture(x),
        W = new w(P, D, r, x, B, z, this._scene, H);
      void 0 === z ? (M.push(W), this._chunkBatchIndexes[x] = this._chunkBatchCurrent) : this._createChunkGraphic(W);
    } else {
      this._chunkBatchIndexes[x] = this._chunkBatchCurrent;
    }
  } else {
    L.id = x;
  }
}
if (x = this._worldMapId + "-" + r + "-" + (D * E + P + 1).toString(), L = this._chunkSprites[x], void 0 === L) {
  if (void 0 === this._chunkBatchIndexes[x]) {
    var B = c.WORLDMAP_PATH + x + ".jpg",
      k = D - (y + b) / 2,
      F = P - (_ + v) / 2,
      H = Math.sqrt(k * k + F * F),
      z = this._scene.holdTexture(x),
      W = new w(P, D, r, x, B, z, this._scene, H);
    void 0 === z ? (M.push(W), this._chunkBatchIndexes[x] = this._chunkBatchCurrent) : this._createChunkGraphic(W);
  } else {
    this._chunkBatchIndexes[x] = this._chunkBatchCurrent;
  }
} else {
  L.id = x;
}
if (void 0 === this._chunkBatchIndexes[x]) {
  var B = c.WORLDMAP_PATH + x + ".jpg",
    k = D - (y + b) / 2,
    F = P - (_ + v) / 2,
    H = Math.sqrt(k * k + F * F),
    z = this._scene.holdTexture(x),
    W = new w(P, D, r, x, B, z, this._scene, H);
  void 0 === z ? (M.push(W), this._chunkBatchIndexes[x] = this._chunkBatchCurrent) : this._createChunkGraphic(W);
} else {
  this._chunkBatchIndexes[x] = this._chunkBatchCurrent;
}
for (O = 0; O < R.length; O += 1) {
  x = R[O], L = this._chunkSprites[x], null === L.id && (L.remove(), delete this._chunkSprites[x]);
}
for (var e = Object.keys(this._chunkSprites), t = 0; t < e.length; t += 1) {
  var i = this._chunkSprites[e[t]];
  i.remove();
}
if (!this._worldMapData) {
  return console.error(new Error("worldMapData are not ready yet!")), {
    x: 0,
    y: 0
  };
}
if (p = H(g.rootElement), e = b.getCoordinatesRelativeToBody(e.x, e.y), r = e.x, l = e.y, c = r - p.left, d = l - p.top, m) {
  var t = null,
    i = null,
    n = c - g.cropPosition.x,
    o = Math.min(.1 * g.cropPosition.width, 50),
    a = 0;
  n < o ? (t = 0, a = n) : n > g.cropPosition.width - o && (t = g._worldMapWidth, a = g.cropPosition.width - n);
  var s = d - g.cropPosition.y,
    u = 0;
  if (s < o ? (i = 0, u = s) : s > g.cropPosition.height - o && (i = g._worldMapHeight, u = g.cropPosition.height - s), null === t && null === i) {
    M.playing && (M.stop(), g._loadChunksInView());
  } else {
    w.x = g._scene.camera.x, w.y = g._scene.camera.y, g._scene.camera.follow(w);
    var h = {
        x: w.x,
        y: w.y
      },
      f = {},
      v = 0,
      y = T;
    null === t ? f.x = w.x : (f.x = t, Math.abs(t - w.x) > v && (v = Math.abs(t - w.x), y = T * (o - a) / o)), null === i ? f.y = w.y : (f.y = i, Math.abs(i - w.y) > v && (v = Math.abs(i - w.y), y = T * (o - u) / o)), M.playing || M.start(!1), _.closeTooltip(), M.reset().from(h).to(f, v / y), g._loadChunksInView();
  }
}
if (s < o ? (i = 0, u = s) : s > g.cropPosition.height - o && (i = g._worldMapHeight, u = g.cropPosition.height - s), null === t && null === i) {
  M.playing && (M.stop(), g._loadChunksInView());
} else {
  w.x = g._scene.camera.x, w.y = g._scene.camera.y, g._scene.camera.follow(w);
  var h = {
      x: w.x,
      y: w.y
    },
    f = {},
    v = 0,
    y = T;
  null === t ? f.x = w.x : (f.x = t, Math.abs(t - w.x) > v && (v = Math.abs(t - w.x), y = T * (o - a) / o)), null === i ? f.y = w.y : (f.y = i, Math.abs(i - w.y) > v && (v = Math.abs(i - w.y), y = T * (o - u) / o)), M.playing || M.start(!1), _.closeTooltip(), M.reset().from(h).to(f, v / y), g._loadChunksInView();
}
if (e.setCoordinates(t, i), o) {
  if (o && o !== n) {
    n && g.removeSubAreaHighlight(n.id), e.subAreaData = n = o, e.setSubArea(n);
    var a = O.entities.prism[n.id];
    if (a && a.prism) {
      var s = a.getAlliance();
      e.setAlliance(s);
      var r = P.hexToRgb(s.allianceEmblem.backgroundColor.toString(16));
      g.addSubAreaHighlight(n.id, [r[0] / 255, r[1] / 255, r[2] / 255, .25]);
    } else {
      e.unsetAlliance(), g.addSubAreaHighlight(n.id, [1, 0, 0, .25]);
    }
  }
} else {
  n && (g.removeSubAreaHighlight(n.id), n = null), e.unsetSubArea();
}
if (o && o !== n) {
  n && g.removeSubAreaHighlight(n.id), e.subAreaData = n = o, e.setSubArea(n);
  var a = O.entities.prism[n.id];
  if (a && a.prism) {
    var s = a.getAlliance();
    e.setAlliance(s);
    var r = P.hexToRgb(s.allianceEmblem.backgroundColor.toString(16));
    g.addSubAreaHighlight(n.id, [r[0] / 255, r[1] / 255, r[2] / 255, .25]);
  } else {
    e.unsetAlliance(), g.addSubAreaHighlight(n.id, [1, 0, 0, .25]);
  }
}
if (a && a.prism) {
  var s = a.getAlliance();
  e.setAlliance(s);
  var r = P.hexToRgb(s.allianceEmblem.backgroundColor.toString(16));
  g.addSubAreaHighlight(n.id, [r[0] / 255, r[1] / 255, r[2] / 255, .25]);
} else {
  e.unsetAlliance(), g.addSubAreaHighlight(n.id, [1, 0, 0, .25]);
}
if (!M.playing) {
  var e = g.convertCanvasToGridCoordinate(c, d);
  if ((u !== e.i || h !== e.j) && m) {
    u = e.i, h = e.j, g.setHighlightOn(u, h), o(v, u, h);
    var t = n(u, h),
      i = 2 * G;
    _.openTooltipAt(t.centerX, t.centerY, t.width + i, t.height + i);
  }
}
if ((u !== e.i || h !== e.j) && m) {
  u = e.i, h = e.j, g.setHighlightOn(u, h), o(v, u, h);
  var t = n(u, h),
    i = 2 * G;
  _.openTooltipAt(t.centerX, t.centerY, t.width + i, t.height + i);
}
if (g._worldMapData) {
  var e = g.convertCanvasToGridCoordinate(c, d),
    t = this.convertGridCoordinateToZoneId(e.i, e.j);
  e.icons = this._iconBatchData.getClusterIcons(t), f.openContextualMenu("map", e), g.setHighlightOn(e.i, e.j);
}
if (void 0 !== o && (this.canvas.style.position = o), this._viewWidth === e && this._viewHeight === t && this._viewLeft === i && this._viewTop === n) {
  return !1;
}
if (this.canvas.width = a, this.canvas.height = s, this.renderer.resetDimension(a, s), this.adjustToCanvasRatio) {
  var r = this.h * a / s;
  this.setDimensions(this.l, this.t, r, this.h);
}
if (0 !== this.updateList.length || t !== !1) {
  if (this.renderer.clear(), this.cropping.isActive) {
    var i = this.pixelRatio,
      n = Math.ceil(i * this.cropping.x),
      o = Math.ceil(i * this.cropping.y),
      a = Math.ceil(i * this.cropping.w),
      s = Math.ceil(i * this.cropping.h);
    o = this.canvas.height - s - o, this.renderer.enableScissor(n, o, a, s);
  }
  this._composite(), this.cropping.isActive && this.renderer.disableScissor();
}
if (this.renderer.clear(), this.cropping.isActive) {
  var i = this.pixelRatio,
    n = Math.ceil(i * this.cropping.x),
    o = Math.ceil(i * this.cropping.y),
    a = Math.ceil(i * this.cropping.w),
    s = Math.ceil(i * this.cropping.h);
  o = this.canvas.height - s - o, this.renderer.enableScissor(n, o, a, s);
}
for (var e = 0; e < this.updateList.length; e += 1) {
  this.updateList[e].refreshAnimation();
}
for (var i = this.displayList.first; null !== i; i = i.next) {
  i.object.render();
}
for (var e = this.displayList.first; null !== e; e = e.next) {
  var t = e.object;
  this.renderer.drawImage(this._textureDebug, t.x, t.y, t.w, t.h);
}
if (0 !== this.updateList.length) {
  for (var i = 0; i < this.updateList.length; i += 1) {
    this.updateList[i].refreshAnimation(this.areasToRefresh);
  }
  this.updateList.length = 0;
}
for (var i = 0; i < this.updateList.length; i += 1) {
  this.updateList[i].refreshAnimation(this.areasToRefresh);
}
if (0 !== this.areasToRefresh.length) {
  for (var n = 0; n < this.areasToRefresh.length; n += 1) {
    this._limitBoundArea(this.areasToRefresh[n]);
  }
  for (var o = 0; o < this.areasToRefresh.length; o += 1) {
    var a = this.areasToRefresh[o];
    if (a[1] <= a[0] || a[3] <= a[2]) {
      this.areasToRefresh.splice(o, 1), o -= 1;
    } else {
      for (var s = 0; s < this.areasToRefresh.length; s += 1) {
        if (o !== s) {
          var r = this.areasToRefresh[s],
            l = (a[0] - r[1]) * (r[0] - a[1]) > 0,
            c = (a[2] - r[3]) * (r[2] - a[3]) > 0;
          l && c && (a[0] = Math.min(a[0], r[0]), a[1] = Math.max(a[1], r[1]), a[2] = Math.min(a[2], r[2]), a[3] = Math.max(a[3], r[3]), this.areasToRefresh.splice(s, 1), s -= 1, s < o && (o -= 1));
        }
      }
    }
  }
  this._refreshAreas(), t = !0;
}
for (var n = 0; n < this.areasToRefresh.length; n += 1) {
  this._limitBoundArea(this.areasToRefresh[n]);
}
for (var o = 0; o < this.areasToRefresh.length; o += 1) {
  var a = this.areasToRefresh[o];
  if (a[1] <= a[0] || a[3] <= a[2]) {
    this.areasToRefresh.splice(o, 1), o -= 1;
  } else {
    for (var s = 0; s < this.areasToRefresh.length; s += 1) {
      if (o !== s) {
        var r = this.areasToRefresh[s],
          l = (a[0] - r[1]) * (r[0] - a[1]) > 0,
          c = (a[2] - r[3]) * (r[2] - a[3]) > 0;
        l && c && (a[0] = Math.min(a[0], r[0]), a[1] = Math.max(a[1], r[1]), a[2] = Math.min(a[2], r[2]), a[3] = Math.max(a[3], r[3]), this.areasToRefresh.splice(s, 1), s -= 1, s < o && (o -= 1));
      }
    }
  }
}
if (a[1] <= a[0] || a[3] <= a[2]) {
  this.areasToRefresh.splice(o, 1), o -= 1;
} else {
  for (var s = 0; s < this.areasToRefresh.length; s += 1) {
    if (o !== s) {
      var r = this.areasToRefresh[s],
        l = (a[0] - r[1]) * (r[0] - a[1]) > 0,
        c = (a[2] - r[3]) * (r[2] - a[3]) > 0;
      l && c && (a[0] = Math.min(a[0], r[0]), a[1] = Math.max(a[1], r[1]), a[2] = Math.min(a[2], r[2]), a[3] = Math.max(a[3], r[3]), this.areasToRefresh.splice(s, 1), s -= 1, s < o && (o -= 1));
    }
  }
}
for (var s = 0; s < this.areasToRefresh.length; s += 1) {
  if (o !== s) {
    var r = this.areasToRefresh[s],
      l = (a[0] - r[1]) * (r[0] - a[1]) > 0,
      c = (a[2] - r[3]) * (r[2] - a[3]) > 0;
    l && c && (a[0] = Math.min(a[0], r[0]), a[1] = Math.max(a[1], r[1]), a[2] = Math.min(a[2], r[2]), a[3] = Math.max(a[3], r[3]), this.areasToRefresh.splice(s, 1), s -= 1, s < o && (o -= 1));
  }
}
if (o !== s) {
  var r = this.areasToRefresh[s],
    l = (a[0] - r[1]) * (r[0] - a[1]) > 0,
    c = (a[2] - r[3]) * (r[2] - a[3]) > 0;
  l && c && (a[0] = Math.min(a[0], r[0]), a[1] = Math.max(a[1], r[1]), a[2] = Math.min(a[2], r[2]), a[3] = Math.max(a[3], r[3]), this.areasToRefresh.splice(s, 1), s -= 1, s < o && (o -= 1));
}
for (var e = c, t = 0; t < this.areasToRefresh.length; t += 1) {
  var i = this.areasToRefresh[t];
  this._limitBoundArea(i);
  var n = Math.floor(this.sceneTextureRatio * (i[0] - this.l)) - 1,
    o = Math.floor(this.sceneTextureRatio * (i[2] - this.t)) - 1,
    a = Math.ceil(this.sceneTextureRatio * (i[1] - i[0])) + 2,
    s = Math.ceil(this.sceneTextureRatio * (i[3] - i[2])) + 2;
  this.renderer.enableScissor(n, o, a, s);
  for (var r = this.displayList.first; null !== r; r = r.next) {
    var l = r.object,
      u = l.bbox;
    if (!(u[0] >= u[1])) {
      var h = (i[0] - u[1]) * (u[0] - i[1]) >= 0,
        p = (i[2] - u[3]) * (u[2] - i[3]) >= 0;
      h && p && (this.staticElements.render(e, l), e = l, l.render());
    }
  }
  this.staticElements.render(e, d);
}
for (var r = this.displayList.first; null !== r; r = r.next) {
  var l = r.object,
    u = l.bbox;
  if (!(u[0] >= u[1])) {
    var h = (i[0] - u[1]) * (u[0] - i[1]) >= 0,
      p = (i[2] - u[3]) * (u[2] - i[3]) >= 0;
    h && p && (this.staticElements.render(e, l), e = l, l.render());
  }
}
if (!(u[0] >= u[1])) {
  var h = (i[0] - u[1]) * (u[0] - i[1]) >= 0,
    p = (i[2] - u[3]) * (u[2] - i[3]) >= 0;
  h && p && (this.staticElements.render(e, l), e = l, l.render());
}
if (this.renderer.disableBlending(), this.renderer.useProgram(this.renderingProgram, this.renderingParams), this.renderer.drawImage(this.sceneRendering.texture, this.w / 2 - (this.camera.x - this.l) * e, this.h / 2 - (this.camera.y - this.t) * e, e * this.w, e * this.h), this.renderer.stopProgram(), this.renderer.enableBlending(), this.hudDisplayList.count > 0) {
  this.renderer.useProgram(this.renderer._programRegular);
  for (var t = this.hudDisplayList.first; null !== t; t = t.next) {
    t.object.render();
  }
  this.renderer.stopProgram();
}
for (var t = this.hudDisplayList.first; null !== t; t = t.next) {
  t.object.render();
}
for (var i = 0; i < e.length; i += 1) {
  var n = e[i],
    o = n[0] - this.l,
    a = n[2] - this.t,
    s = n[1] - n[0],
    r = n[3] - n[2];
  this.renderer.drawImage(this._textureDebug, o, a, s, r);
}
for (var t = 0; t < e.length; t++) {
  e[t].show();
}
for (var t = 0; t < e.length; t++) {
  e[t].hide();
}
for (var e = this.displayList.first; null !== e;) {
  var t = e.next;
  e.object.remove(), e = t;
}
if (0 !== n) {
  this.a = Math.pow(this.acceleration, 1 - i);
  var o = Math.log(n / s) / Math.log(this.a) - 1,
    a = s * (1 - Math.pow(this.a, o)) / (1 - this.a);
  this.moveTo(this.x + a * e / n, this.y + t * a / n);
}
if (!this._frozen) {
  this.a += (this.acceleration - this.a) * (d * e);
  var t = this.min.x,
    i = this.max.x,
    n = this.min.y,
    o = this.max.y,
    a = Math.min(i, Math.max(t, this.followee.x)),
    s = Math.min(o, Math.max(n, this.followee.y)),
    r = l / this.zoomTarget,
    u = a - this.x,
    h = s - this.y,
    p = r - this.z;
  if (0 === u && 0 === h && 0 === p) {
    return this.emitAtDestination && (this.emitAtDestination = !1, this.emit("atDestination")), !1;
  }
  if (Math.abs(u) < .5 && Math.abs(h) < .5 && Math.abs(p) < .5) {
    return this.x = a, this.y = s, this.z = r, this.zoom = this.zoomTarget, this.a += (1 - this.a) * c, !1;
  }
  var m = 1 - Math.pow(2 - this.a, e);
  this.x += m * u, this.y += m * h, this.z += m * p, this.zoom = l / this.z;
  var f = this.fovWAbsolute / this.zoom,
    g = this.fovHAbsolute / this.zoom;
  return t = this.l + f / 2, n = this.t + g / 2, i = this.r - f / 2, o = this.b - g / 2, this.x < t ? this.x = t : this.x > i && (this.x = i), this.y < n ? this.y = n : this.y > o && (this.y = o), !0;
}
if (0 === u && 0 === h && 0 === p) {
  return this.emitAtDestination && (this.emitAtDestination = !1, this.emit("atDestination")), !1;
}
if (Math.abs(u) < .5 && Math.abs(h) < .5 && Math.abs(p) < .5) {
  return this.x = a, this.y = s, this.z = r, this.zoom = this.zoomTarget, this.a += (1 - this.a) * c, !1;
}
for (var t = 0; t < e; t += 1) {
  var i = this._lines[t];
  this._expandToFitLine(i);
  var n = t * this._lineByteSize / 4;
  this._positions[n + 0] = i.x0, this._positions[n + 1] = i.y0, this._positions[n + 5] = i.x1, this._positions[n + 6] = i.y1, this._colorView[n + 3] = this._colorView[n + 8] = 1077952576;
}
if (void 0 === e) {
  var t = this._positions,
    i = !1;
  this.renderer.loadLineBuffer(this.id, t, this._bbox, i), this.renderer.lockBuffer(this.id);
}
if (d) {
  s.now() - i >= 1e3 && (window.performanceMonitor.logFPS(t), t = 0, i = s.now()), t++, n.previousUpdate = l - c % a, c /= a;
  for (var u = n.gameScenes, h = 0; h < u.length; h += 1) {
    u[h].refresh(c);
  }
}
for (var u = n.gameScenes, h = 0; h < u.length; h += 1) {
  u[h].refresh(c);
}
if (t) {
  return t.icons;
}
for (var a = 0; a < o.length; a += 1) {
  var s = e[o[a]];
  s.w *= i, s.h *= i;
  var l = r[s.className] || r.DEFAULT;
  l && (s.x = s.w * l.x, s.y = s.h * l.y), n[s.className] = s;
}
if (void 0 !== this.icons[t]) {
  return void console.error("addIcon: An icon of id", t, "already exists.");
}
if (void 0 !== t) {
  delete this.icons[e];
  var i = t.cluster;
  i.remove(t), 0 === i.icons.length && this.removeCluster(i);
  var n = this.iconsPerCategory[t.categoryId],
    o = n.indexOf(t.id);
  n.splice(o, 1), null !== this.iconBatch && this.iconBatch.removeIcon(t);
}
if (void 0 === o) {
  var s = this.worldMap._convertGridToSceneCoordinate(t, i);
  o = new a(n, s.x, s.y), this.addCluster(o);
}
if (!this.iconDimensions[t]) {
  return console.error("WorldMap (IconBatchData): unknown icon " + t);
}
for (var i in this.icons) {
  var n = this.icons[i],
    o = n.infoData.groupCriterion;
  if (o) {
    var a = Boolean(o.isRespected()),
      s = n.setVisibility(a);
    s && a ? t.push(n) : s && e.push(n);
  }
}
if (o) {
  var a = Boolean(o.isRespected()),
    s = n.setVisibility(a);
  s && a ? t.push(n) : s && e.push(n);
}
for (var i = Object.keys(e), n = 0; n < i.length; n += 1) {
  var o = e[i[n]];
  o.isHintFromDB = !0, o.criterion && "null" !== o.criterion && (o.groupCriterion = l.createGroupCriterion(o.criterion)), o.worldMapId === t && this.createIcon(o, "icon_" + o.gfx);
}
if (void 0 !== i) {
  for (var n = [], o = 0; o < i.length; o += 1) {
    var a = i[o],
      s = a.infoData.groupCriterion;
    if (!s || Boolean(s.isRespected()) === t) {
      var r = a.setVisibility(t);
      r && n.push(a);
    }
  }
  null !== this.iconBatch && this.iconBatch.setVisibility(n, t);
}
for (var n = [], o = 0; o < i.length; o += 1) {
  var a = i[o],
    s = a.infoData.groupCriterion;
  if (!s || Boolean(s.isRespected()) === t) {
    var r = a.setVisibility(t);
    r && n.push(a);
  }
}
if (!s || Boolean(s.isRespected()) === t) {
  var r = a.setVisibility(t);
  r && n.push(a);
}
if (void 0 !== n) {
  var a = n.cluster;
  if ("userPosition" === e) {
    var s = this.worldMap._convertGridToSceneCoordinate(t, i);
    a.position.x = s.x, a.position.y = s.y, this.zIndexedIconClusters.sort(o);
  } else {
    a.remove(n), this._addIconToZoneCluster(n, t, i);
  }
  null !== this.iconBatch && this.iconBatch.updateIconPosition(n);
}
if ("userPosition" === e) {
  var s = this.worldMap._convertGridToSceneCoordinate(t, i);
  a.position.x = s.x, a.position.y = s.y, this.zIndexedIconClusters.sort(o);
} else {
  a.remove(n), this._addIconToZoneCluster(n, t, i);
}
for (var i = [], s = e <= 1 ? 0 : n / (2 * Math.sin(Math.PI / e)), r = 0; r < e; r += 1) {
  var l = 2 * Math.PI * r / e;
  i[r] = new o(Math.cos(l) * s, Math.sin(l) * s);
}
if (!t[e]) {
  var i = "";
  if (this.icons && this.icons.length > 0) {
    var n = this.icons[0];
    n.infoData && n.infoData.x && n.infoData.y && (i = "[" + n.infoData.x + "," + n.infoData.y + "]");
  }
  return console.error(new Error("relativePositions for " + e + " is null, nVisibleIcons on the cluster is " + this.nVisibleIcons + ", clusterId is " + this.id + " " + i)), this.position;
}
if (this.icons && this.icons.length > 0) {
  var n = this.icons[0];
  n.infoData && n.infoData.x && n.infoData.y && (i = "[" + n.infoData.x + "," + n.infoData.y + "]");
}
for (var e = 0, t = this._iconsData.zIndexedIconClusters, i = 0; i < t.length; i += 1) {
  for (var o = t[i], a = o.icons, s = 0; s < a.length; s += 1) {
    var r = a[s],
      l = new n(r, e);
    l.reference = this._vertexBufferSlots.addBack(l), r.vertexBufferSlot = l, e += 1;
  }
}
for (var o = t[i], a = o.icons, s = 0; s < a.length; s += 1) {
  var r = a[s],
    l = new n(r, e);
  l.reference = this._vertexBufferSlots.addBack(l), r.vertexBufferSlot = l, e += 1;
}
for (var e = this._iconsData.zIndexedIconClusters, t = 0; t < e.length; t++) {
  this._populateClusterVertexBuffer(e[t]);
}
for (var t = 0, i = e.icons, n = 0; n < i.length; n += 1) {
  t = this._populateIconVertexBuffer(i[n], t);
}
for (var o, a, s = n || {}, r = 0; r < e.length; r += 1) {
  o = e[r], o.visible === t ? (a = o.cluster, void 0 === s[a.id] && (s[a.id] = a)) : console.error("setVisibility: icon " + o.id + " visibility != " + t);
}
for (var l = [], d = {}, p = Object.keys(s), m = 0; m < p.length; m += 1) {
  var f = p[m];
  a = s[f];
  var g = a.icons,
    _ = 0;
  for (r = 0; r < g.length; r += 1) {
    if (o = g[r], o.visible) {
      var v = o.vertexBufferSlot.index * this._iconByteSize / 4;
      l.push(o), d[o.id] = {
        origin: {
          x: this._floatView[v],
          y: this._floatView[v + 1]
        },
        destination: a.getIconPosition(_)
      }, _ += 1;
    }
  }
}
for (r = 0; r < g.length; r += 1) {
  if (o = g[r], o.visible) {
    var v = o.vertexBufferSlot.index * this._iconByteSize / 4;
    l.push(o), d[o.id] = {
      origin: {
        x: this._floatView[v],
        y: this._floatView[v + 1]
      },
      destination: a.getIconPosition(_)
    }, _ += 1;
  }
}
if (o = g[r], o.visible) {
  var v = o.vertexBufferSlot.index * this._iconByteSize / 4;
  l.push(o), d[o.id] = {
    origin: {
      x: this._floatView[v],
      y: this._floatView[v + 1]
    },
    destination: a.getIconPosition(_)
  }, _ += 1;
}
for (var m = 0; m < e.length; m += 1) {
  var f = e[m];
  if (null !== f.vertexBufferSlot) {
    var g = f.vertexBufferSlot.index * w._iconByteSize,
      _ = g / 2;
    n[_ + 9] = n[_ + 19] = n[_ + 29] = p, n[_ + 39] = n[_ + 49] = n[_ + 59] = p, o[g + 15] = o[g + 35] = o[g + 55] = r, o[g + 75] = o[g + 95] = o[g + 115] = r;
  } else {
    console.warn("setVisibility skipping fading icon " + f.id);
  }
}
if (null !== f.vertexBufferSlot) {
  var g = f.vertexBufferSlot.index * w._iconByteSize,
    _ = g / 2;
  n[_ + 9] = n[_ + 19] = n[_ + 29] = p, n[_ + 39] = n[_ + 49] = n[_ + 59] = p, o[g + 15] = o[g + 35] = o[g + 55] = r, o[g + 75] = o[g + 95] = o[g + 115] = r;
} else {
  console.warn("setVisibility skipping fading icon " + f.id);
}
for (m = 0; m < l.length; m += 1) {
  var b = l[m];
  if (null !== b.vertexBufferSlot) {
    var M = d[b.id],
      T = M.origin.x * (1 - v) + M.destination.x * v,
      C = M.origin.y * (1 - v) + M.destination.y * v,
      I = b.vertexBufferSlot.index * w._iconByteSize / 4;
    i[I + 0] = i[I + 5] = i[I + 10] = T, i[I + 15] = i[I + 20] = i[I + 25] = T, i[I + 1] = i[I + 6] = i[I + 11] = C, i[I + 16] = i[I + 21] = i[I + 26] = C;
  } else {
    console.warn("setVisibility skipping moving icon " + b.id);
  }
}
if (null !== b.vertexBufferSlot) {
  var M = d[b.id],
    T = M.origin.x * (1 - v) + M.destination.x * v,
    C = M.origin.y * (1 - v) + M.destination.y * v,
    I = b.vertexBufferSlot.index * w._iconByteSize / 4;
  i[I + 0] = i[I + 5] = i[I + 10] = T, i[I + 15] = i[I + 20] = i[I + 25] = T, i[I + 1] = i[I + 6] = i[I + 11] = C, i[I + 16] = i[I + 21] = i[I + 26] = C;
} else {
  console.warn("setVisibility skipping moving icon " + b.id);
}
if (o === -1) {
  return void console.error(new Error("[IconBatch.addIconToVertexBuffer] Icon cluster not present in ordered list"));
}
if (s === -1) {
  return void console.error(new Error("[IconBatch.addIconToVertexBuffer] Icon not present in its cluster"));
}
if (s === a.length - 1) {
  if (o === i.length - 1) {
    if (0 === o) {
      if (!this._vertexBufferSlots.first) {
        return null;
      }
      r = this._vertexBufferSlots.first.object;
    } else {
      var l = i[o - 1].icons;
      r = l[l.length - 1].vertexBufferSlot;
    }
  } else {
    r = i[o + 1].icons[0].vertexBufferSlot;
  }
} else {
  r = a[s + 1].vertexBufferSlot;
}
if (o === i.length - 1) {
  if (0 === o) {
    if (!this._vertexBufferSlots.first) {
      return null;
    }
    r = this._vertexBufferSlots.first.object;
  } else {
    var l = i[o - 1].icons;
    r = l[l.length - 1].vertexBufferSlot;
  }
} else {
  r = i[o + 1].icons[0].vertexBufferSlot;
}
if (0 === o) {
  if (!this._vertexBufferSlots.first) {
    return null;
  }
  r = this._vertexBufferSlots.first.object;
} else {
  var l = i[o - 1].icons;
  r = l[l.length - 1].vertexBufferSlot;
}
if (!this._vertexBufferSlots.first) {
  return null;
}
if (null !== e.vertexBufferSlot) {
  return void console.warn("[IconBatch.addIconToVertexBuffer] Trying to add an icon already present in the vertex buffer");
}
if (null === o) {
  var a = new n(e, 0);
  a.reference = this._vertexBufferSlots.add(a), e.vertexBufferSlot = a, i = null, t = 0;
} else {
  t = o.index;
  var s = new n(e, t);
  for (s.reference = this._vertexBufferSlots.addBefore(o.reference, s), e.vertexBufferSlot = s, i = o.reference; null !== i && null !== i.icon;) {
    i.object.index += 1, i = i.next;
  }
}
for (s.reference = this._vertexBufferSlots.addBefore(o.reference, s), e.vertexBufferSlot = s, i = o.reference; null !== i && null !== i.icon;) {
  i.object.index += 1, i = i.next;
}
if (null === i) {
  var r = this._floatView;
  this._createVertexBuffer();
  var l = t * this._iconByteSize / 4,
    c = r.subarray(0, l),
    d = r.subarray(l);
  this._floatView.set(c, 0), this._floatView.set(d, l + this._iconByteSize / 4);
} else {
  var u = t * this._iconByteSize / 4,
    h = i.object.index * this._iconByteSize / 4;
  this._vertexBufferSlots.removeByReference(i);
  var p = this._floatView.subarray(u, h);
  this._floatView.set(p, u + this._iconByteSize / 4);
}
if (null === t) {
  return void console.error(new Error("[IconBatch.updateIconPosition] Given icon is not present in the vertex buffer"));
}
if (t.index !== i.index) {
  var n,
    o,
    a,
    s,
    r,
    l = t.index * this._iconByteSize / 4,
    c = l + this._iconByteSize / 4,
    d = new window.Float32Array(this._floatView.subarray(l, c));
  if (t.index < i.index) {
    for (n = c, o = i.index * this._iconByteSize / 4 + this._iconByteSize / 4, this._floatView.set(this._floatView.subarray(n, o), l), r = t.reference; null !== r && r.object !== i;) {
      a = r.object, r = r.next, s = r.object.icon, s && (s.vertexBufferSlot = a), a.icon = s;
    }
  } else {
    for (n = i.index * this._iconByteSize / 4, o = l, this._floatView.set(this._floatView.subarray(n, o), n + this._iconByteSize / 4), r = t.reference; null !== r && r.object !== i;) {
      a = r.object, r = r.previous, s = r.object.icon, s && (s.vertexBufferSlot = a), a.icon = s;
    }
  }
  i.icon = e, e.vertexBufferSlot = i, this._floatView.set(d, i.index * this._iconByteSize / 4);
}
if (t.index < i.index) {
  for (n = c, o = i.index * this._iconByteSize / 4 + this._iconByteSize / 4, this._floatView.set(this._floatView.subarray(n, o), l), r = t.reference; null !== r && r.object !== i;) {
    a = r.object, r = r.next, s = r.object.icon, s && (s.vertexBufferSlot = a), a.icon = s;
  }
} else {
  for (n = i.index * this._iconByteSize / 4, o = l, this._floatView.set(this._floatView.subarray(n, o), n + this._iconByteSize / 4), r = t.reference; null !== r && r.object !== i;) {
    a = r.object, r = r.previous, s = r.object.icon, s && (s.vertexBufferSlot = a), a.icon = s;
  }
}
for (n = c, o = i.index * this._iconByteSize / 4 + this._iconByteSize / 4, this._floatView.set(this._floatView.subarray(n, o), l), r = t.reference; null !== r && r.object !== i;) {
  a = r.object, r = r.next, s = r.object.icon, s && (s.vertexBufferSlot = a), a.icon = s;
}
for (n = i.index * this._iconByteSize / 4, o = l, this._floatView.set(this._floatView.subarray(n, o), n + this._iconByteSize / 4), r = t.reference; null !== r && r.object !== i;) {
  a = r.object, r = r.previous, s = r.object.icon, s && (s.vertexBufferSlot = a), a.icon = s;
}
if (void 0 === e) {
  var t = this.id,
    i = this._floatView,
    n = this._texture,
    o = !1;
  this.renderer.loadSpriteBuffer(t, i, n, this._bbox, o), this.renderer.lockBuffer(this.id);
}
if (this._lastWorld !== i) {
  var n = t.getPOIs(this._lastWorld);
  for (var o in n) {
    this._worldMap.hasIcon(o) && this._worldMap.removeIcon(o);
  }
  n = t.getPOIs();
  for (o in n) {
    if (!this._worldMap.hasIcon(o)) {
      var a = n[o];
      this._worldMap.addIcon(a, a.iconId);
    }
  }
  this._lastWorld = i;
}
for (var o in n) {
  this._worldMap.hasIcon(o) && this._worldMap.removeIcon(o);
}
for (o in n) {
  if (!this._worldMap.hasIcon(o)) {
    var a = n[o];
    this._worldMap.addIcon(a, a.iconId);
  }
}
if (!this._worldMap.hasIcon(o)) {
  var a = n[o];
  this._worldMap.addIcon(a, a.iconId);
}
if (!this._isUiLoaded) {
  return void (this._subareaToShow = e);
}
if (i) {
  return console.error("WorldMapWindow: getAllDataAreas error", i);
}
for (var i in e.sublist.items) {
  var n = e.sublist.items[i].data;
  t._highlightSubArea(n.id);
}
if (t && t.prism) {
  var i = t.getAlliance(),
    n = u.hexToRgb(i.allianceEmblem.backgroundColor.toString(16));
  this._worldMap.addSubAreaHighlight(e, [n[0] / 255, n[1] / 255, n[2] / 255, .5]);
} else {
  this._worldMap.addSubAreaHighlight(e, [1, 0, 0, .25]);
}
if (!this._isProcessing) {
  for (this._isProcessing = !0; this._queue.length;) {
    var e = this._queue.shift();
    e();
  }
  this._isProcessing = !1;
}
for (this._isProcessing = !0; this._queue.length;) {
  var e = this._queue.shift();
  e();
}
for (var t = Object.keys(e), i = 0; i < t.length; i++) {
  var n = e[t[i]];
  this._prisms[n.subAreaId] = n, "PrismGeolocalizedInformation" === n._type ? this._activePrisms[n.subAreaId] = n : this._emptyPrisms[n.subAreaId] = n;
}
for (var t = Object.keys(e), i = 0; i < t.length; i++) {
  var n = e[t[i]],
    o = n.subAreaId,
    a = this._prisms[n.subAreaId];
  "PrismGeolocalizedInformation" === n._type ? ((!a || a.mapId !== n.mapId || a.worldX !== n.worldX || a.worldY !== n.worldY || a.subAreaId !== n.subAreaId || a.prism.state !== n.prism.state || a.prism.alliance && n.prism.alliance && a.prism.alliance.allianceTag !== n.prism.alliance.allianceTag) && (this._changingPrisms[n.subAreaId] = n), this._activePrisms[o] = n, delete this._emptyPrisms[o]) : (this._emptyPrisms[o] = n, delete this._activePrisms[o]), this._prisms[n.subAreaId] = n;
}
for (var t = Object.keys(this._changingPrisms), i = 0; i < t.length; i++) {
  var n = this._changingPrisms[t[i]];
  this._activePrisms[n.subAreaId] && e(n);
}
for (var i = Object.keys(this._prisms), n = 0; n < i.length; n++) {
  var o = this._prisms[i[n]];
  o.prism && (null !== t && void 0 !== t && o.prism.state !== t || e(this._prisms[i[n]]));
}
for (var t = Object.keys(this._emptyPrisms), i = 0; i < t.length; i++) {
  e(this._emptyPrisms[t[i]]);
}
if (!t) {
  return !1;
}
for (var i = e.complements || [], n = 0; n < i.length; n += 1) {
  var o = i[n];
  if ("TaxCollectorGuildInformations" === o._type && o.guild.guildId !== t.guildId) {
    return !1;
  }
}
if ("TaxCollectorGuildInformations" === o._type && o.guild.guildId !== t.guildId) {
  return !1;
}
if (!o(e, window.gui.playerData.guild.current)) {
  return n();
}
if (e) {
  return n(e);
}
if (!c) {
  return n(new Error("The area " + l + " doesn't exist"));
}
if (!u) {
  return n(new Error("The super area " + d + " doesn't exist"));
}
if (e) {
  return console.error(e);
}
if (t._iconTaxCollectors) {
  for (n in t._iconTaxCollectors) {
    o = t._iconTaxCollectors[n], i.hasOwnProperty(o.id) || t._worldmap.removeIcon(o.id);
  }
}
for (n in t._iconTaxCollectors) {
  o = t._iconTaxCollectors[n], i.hasOwnProperty(o.id) || t._worldmap.removeIcon(o.id);
}
for (n in i) {
  o = i[n], t._iconTaxCollectors && !t._iconTaxCollectors.hasOwnProperty(o.id) && t._worldmap.addIcon(o, "icon_" + o.gfx);
}
if (window.gui.playerData.guild.hasGuild()) {
  var t;
  switch (e) {
    case c.CLIENT_UI_TELEPORT_GUILD_PADDOCK:
      t = "paddocks";
      break;
    case c.CLIENT_UI_TELEPORT_GUILD_HOUSE:
      t = "houses";
      break;
    default:
      return;
  }
  this.openState ? (this.openTab("guild", {
    tabId: t
  }), m.focusWindow(this.id)) : m.open(this.id, {
    tabId: "guild",
    tabParams: {
      tabId: t
    }
  });
}
for (var n in i) {
  i[n].content.emit("allianceUpdated", t);
}
if (t.allianceLeader && e.guildCount > 1) {
  return window.gui.openSimplePopup(u("ui.alliance.guildLeaderCantBeBanned"));
}
if (e.level >= 50) {
  this.avaMode.enable();
  var i = window.gui.playerData.characters.mainCharacter.characteristics.alignmentInfos.aggressable;
  t = i === s.AvA_ENABLED_AGGRESSABLE || i === s.AvA_ENABLED_NON_AGGRESSABLE || i === s.AvA_DISQUALIFIED || i === s.AvA_PREQUALIFIED_AGGRESSABLE;
  var n = this.avaMode.isActivate();
  n !== t && this.avaMode.toggleActivation(t);
} else {
  this.avaMode.disable();
}
if (0 === e.nbConnectedMembers && e.lastActivity > 0) {
  var n,
    o = e.getHoursSinceLastConnection(),
    a = Math.floor(o / 720),
    s = Math.floor((o - 720 * a) / 24);
  n = a > 0 ? s > 0 ? u("ui.social.monthsAndDaysSinceLastConnection", a, s, s) : u("ui.social.monthsSinceLastConnection", a, a) : s > 0 ? u("ui.social.daysSinceLastConnection", s, s) : u("ui.social.lessThanADay"), l(i, u("ui.social.lastConnection", n));
}
if (i.state !== u.PRISM_STATE_INVULNERABLE && i.state !== u.PRISM_STATE_NORMAL || !m) {
  t = h;
} else {
  t = new g("div", {
    className: "timeSetting"
  });
  var f = t.createChild("div", {
      text: h
    }),
    _ = r.guilds[i.lastTimeSlotModificationAuthorGuildId];
  _ && a(f, l("ui.prism.lastVulnerabilityChange", new p.DofusDate(1e3 * i.lastTimeSlotModificationDate).getLocalDate().toString().date, i.lastTimeSlotModificationAuthorName, _.guildName) + "\n" + l("ui.prism.serverVulnerabilityHour") + " : " + h + "\n" + l("ui.prism.localVulnerabilityHour") + " : " + s.getLocalDate().toString().time), t.appendChild(o(e, s));
}
for (var o in t) {
  var a = t[o];
  a.mapId <= -1 || (a.enrichData.isConquestVillage ? n += 1 : i += 1);
}
if (e.type === y.prism) {
  var i = u.getAttackedEntity(e),
    n = i.enrichData;
  t = n.isConquestVillage ? "village" : "prism";
} else {
  t = e.type;
}
if (t.state === u.fightState.waitingForHelp) {
  var i = t.id,
    n = window.gui.playerData.id;
  u.isPlayerFightingFor(n, y.prism, i, w.allies) ? e && n === e.id && window.dofus.sendMessage("PrismFightJoinLeaveRequestMessage", {
    subAreaId: i,
    join: !1
  }) : e && 5 === t.fighters[w.allies].length ? window.dofus.sendMessage("PrismFightSwapRequestMessage", {
    subAreaId: i,
    targetId: e.id
  }) : window.dofus.sendMessage("PrismFightJoinLeaveRequestMessage", {
    subAreaId: i,
    join: !0
  });
}
if (t.state === u.fightState.waitingForHelp) {
  var i = t.id,
    n = window.gui.playerData.id;
  u.isPlayerFightingFor(n, y.taxCollector, i, w.allies) ? e && n === e.id && window.dofus.sendMessage("GuildFightLeaveRequestMessage", {
    taxCollectorId: i,
    characterId: n
  }) : e && 5 === t.fighters[w.allies].length ? window.dofus.sendMessage("GuildFightTakePlaceRequestMessage", {
    taxCollectorId: i,
    replacedCharacterId: e.id
  }) : window.dofus.sendMessage("GuildFightJoinRequestMessage", {
    taxCollectorId: i
  });
}
for (var t in e) {
  var i = e[t];
  i.state === b.waitingForHelp && (this.table.hasRow(i.id) || this.table.addRow(i));
}
if (!(n && n.setFighters && n.setFighter && n.setTarget)) {
  var o = "Cannot find the fighters info for type " + e + " fightId " + t;
  return o += " fighters info is null? " + !n, console.error(new Error(o)), null;
}
if (i.isVisible() && i.table.hasRow(n)) {
  var s = e(t, n);
  s && s.setFighters(o, a);
}
if (i.isVisible() && i.table.hasRow(n)) {
  var r = e(t, n);
  r && r.setFighter(o, a, s);
}
if (i.isVisible() && t === y.prism && i.table.hasRow(n)) {
  var a = e(t, n);
  a && a.setTarget({
    id: o.id,
    entityLook: o.look,
    name: o.getName(),
    level: o.level
  });
}
if (i.isVisible() && i.table.hasRow(n)) {
  var r = e(t, n);
  r && r.removeFighter(o, s);
}
for (var i, n = 0; n < m; n += 1) {
  i = this.allies.slotContainer.appendChild(this._createFighterSlot(!0)), this.allies.slots.push(i), i = this.enemies.slotContainer.appendChild(this._createFighterSlot()), this.enemies.slots.push(i);
}
if ("allies" === i) {
  var s = n.targetSlot.fighter;
  e += s.name + " (" + u("ui.common.short.level") + " " + s.level + ")\n";
}
for (var r = 0; r < a.length; r += 1) {
  var c = a[r].fighter;
  c && (e += o(c) + "\n");
}
if (h.addTooltip(t, function () {
  return new l("div", {
    text: o(t.fighter)
  });
}), h.enableTooltip(t, !1), !e) {
  return t;
}
for (var e = this.allies.slots, t = this.enemies.slots, i = 0; i < m; i += 1) {
  s(e[i]), s(t[i]);
}
for (var i = this[e].slots, n = 0; n < m; n += 1) {
  var o = t[n];
  o ? a(i[n], o) : s(i[n]);
}
for (var i in e.ignoredList) {
  t.addPlayer(e.ignoredList[i], "ignored");
}
if (e) {
  var n = {
    name: e
  };
  i && (n.session = i), window.dofus.sendMessage(t, n), s.setValue("");
}
if (e.showRows(), !t) {
  for (var i = e.getRowCount(), n = [], o = 0; o < i; o++) {
    var a = e.getRow(o);
    a.isConnected || (a.hide(), n.push(o));
  }
  e.hideRows(n);
}
for (var i = e.getRowCount(), n = [], o = 0; o < i; o++) {
  var a = e.getRow(o);
  a.isConnected || (a.hide(), n.push(o));
}
if (!e.hasOwnProperty("breed")) {
  return console.error(new Error("Friends loadHeadImage: player has no breed")), void t.setStyle("backgroundImage", null);
}
if (i.delClassNames("offline", "fight", "smiley"), i.getStyle("backgroundImage") && i.setStyle("backgroundImage", ""), i.clearContent(), i.hide(), !e.isConnected) {
  return i.addClassNames("offline"), void i.show();
}
if (t.hasOwnProperty("moodSmileyId") && t.moodSmileyId > 0) {
  n = t.moodSmileyId;
  var o = window.gui.databases.Smileys[n];
  if (!o) {
    return console.error("Smiley " + n + " details are not available, it could not be displayed");
  }
  i.addClassNames("smiley"), _.preloadImage("gfx/smilies/" + o.gfxId + ".png", function (e) {
    i.rootElement && (i.setStyle("backgroundImage", e), i.show());
  });
}
if (!o) {
  return console.error("Smiley " + n + " details are not available, it could not be displayed");
}
for (var i = this.tables[e], n = i.getRows(), a = 0; a < n.length; a++) {
  var s = n[a];
  if (s.accountId === t.accountId) {
    i.updateRow(a, {
      level: t.level || "?",
      guild: t.guildInfo ? t.guildInfo.guildName : "?",
      achievement: t.achievementPoints > 0 ? t.achievementPoints : "-"
    }, o(t));
    var r = s.isConnected;
    s.toggleClassName("offline", !r);
    var c = s.getChild("playerIcon").getChild("playerIcon");
    if (t.status) {
      var d = c.getChild("onlineStatusIcon");
      d.setClassNames("onlineStatusIcon", "status" + t.status.statusId);
    }
    var u = s.getChild("name").getChild("name");
    u.setText(s.nameText);
    var h = c.getChild("alignmentSide").getChild("headIcon");
    return r && !h.getStyle("backgroundImage") && l(t, h), void this._updateStateIcon(s, t);
  }
}
if (s.accountId === t.accountId) {
  i.updateRow(a, {
    level: t.level || "?",
    guild: t.guildInfo ? t.guildInfo.guildName : "?",
    achievement: t.achievementPoints > 0 ? t.achievementPoints : "-"
  }, o(t));
  var r = s.isConnected;
  s.toggleClassName("offline", !r);
  var c = s.getChild("playerIcon").getChild("playerIcon");
  if (t.status) {
    var d = c.getChild("onlineStatusIcon");
    d.setClassNames("onlineStatusIcon", "status" + t.status.statusId);
  }
  var u = s.getChild("name").getChild("name");
  u.setText(s.nameText);
  var h = c.getChild("alignmentSide").getChild("headIcon");
  return r && !h.getStyle("backgroundImage") && l(t, h), void this._updateStateIcon(s, t);
}
if (t.status) {
  var d = c.getChild("onlineStatusIcon");
  d.setClassNames("onlineStatusIcon", "status" + t.status.statusId);
}
for (var n in i) {
  e.addPlayer(i[n], "friends");
}
for (var n in i) {
  e.addPlayer(i[n], "enemies");
}
for (var o = 0; o < n.length; o++) {
  if (n[o].accountId === e) {
    return i.delRow(o);
  }
}
if (n[o].accountId === e) {
  return i.delRow(o);
}
if (e.isVisible()) {
  var i = e.table.getCell(t.id, "playerIcon"),
    n = i.getChild("onlineStatusIcon");
  n.setClassNames("onlineStatusIcon", "status" + t.status.statusId);
}
if (e === s.leaderId && !t) {
  return window.gui.openSimplePopup(d("ui.social.guildBossCantBeBann"), d("ui.popup.warning"));
}
for (var C = m || a.hasRight(g.GUILD_RIGHT_BOSS) || a.hasRight(g.GUILD_RIGHT_MANAGE_GUILD_BOOSTS) || a.hasRight(g.GUILD_RIGHT_MANAGE_RIGHTS) || a.hasRight(g.GUILD_RIGHT_MANAGE_XP_CONTRIBUTION) || a.hasRight(g.GUILD_RIGHT_MANAGE_RANKS), I = a.checkRight(g.GUILD_RIGHT_BOSS, s.members[l].rights), A = window.gui.databases.RankNames, S = 0, E = e.length; S < E; S++) {
  var N = e[S],
    x = w[N.connected],
    L = new r("div", {
      className: "buttons"
    }),
    O = l === e[S].id;
  (O || C || I) && (L.appendChild(new h({
    className: ["boxSizing", "rowButton", "rights"]
  }, t)).memberInfo = {
    id: N.id,
    name: N.name,
    level: N.level,
    rank: N.rank,
    sex: N.sex,
    experienceGivenPercent: N.experienceGivenPercent,
    rights: N.rights
  }), (O || m || I || a.hasRight(g.GUILD_RIGHT_BAN_MEMBERS)) && (L.appendChild(new h({
    className: ["boxSizing", "rowButton", "deletion"]
  }, i)).memberInfo = {
    id: N.id,
    name: N.name
  });
  var R = new h({
    className: "playerIcon",
    scaleOnPress: !1
  }, n);
  R.createChild("div", {
    name: "onlineStatusIcon",
    className: ["onlineStatusIcon", "status" + N.status.statusId]
  });
  var D = R.createChild("div", {
    className: "alignmentSide"
  });
  N.alignmentSide !== v.ALIGNMENT_ANGEL && N.alignmentSide !== v.ALIGNMENT_EVIL || o(D, N.alignmentSide), f.push(D.createChild("div", {
    className: "playerHead"
  })), y.push("gfx/heads/SmallHead_" + N.breed + (N.sex ? 1 : 0) + ".png"), R.id = N.id, R.name = N.name, R.accountId = N.accountId, R.isMySelf = O, R.connected = N.connected, R.hoursSinceLastConnection = N.hoursSinceLastConnection;
  var P = new h({
    className: "nameButton",
    text: N.name,
    scaleOnPress: !1
  }, n);
  P.id = N.id, P.name = N.name, P.accountId = N.accountId, P.isMySelf = O, P.connected = N.connected, P.hoursSinceLastConnection = N.hoursSinceLastConnection;
  var B = u(A[N.rank].nameId, N.sex ? 1 : 0),
    k = {
      playerIcon: R,
      nameButton: P,
      name: N.name,
      rankName: B,
      rankValue: N.rank,
      level: N.level,
      xpPercentage: N.experienceGivenPercent + "%",
      xp: N.givenExperience,
      achievement: N.achievementPoints,
      buttons: L,
      onlineStatus: x,
      hoursSinceLastConnection: "offline" === x ? N.hoursSinceLastConnection : -1
    };
  if ("offline" === x) {
    if (N.hoursSinceLastConnection >= b) {
      var F = d("ui.common.inactive") + "<br/>",
        H = Math.floor(N.hoursSinceLastConnection / b);
      F += d("ui.social.monthsSinceLastConnection", H, H), k.stateIcon = new r("div", {
        className: ["text"]
      }), k.stateIcon.setHtml(F);
    } else {
      k.stateIcon = new r("div", {
        className: ["stateIcon", "offline"]
      });
    }
  } else if (N.hasOwnProperty("moodSmileyId") && N.moodSmileyId > 0) {
    var z = N.moodSmileyId,
      W = window.gui.databases.Smileys[z];
    W ? (k.stateIcon = new r("div", {
      className: ["stateIcon", "smiley"]
    }), M.push(k.stateIcon), T.push("gfx/smilies/" + W.gfxId + ".png")) : console.error("Smiley " + z + " details are not available, it could not be displayed");
  }
  this.table.addRow(k, N.id).addClassNames(x);
}
if ("offline" === x) {
  if (N.hoursSinceLastConnection >= b) {
    var F = d("ui.common.inactive") + "<br/>",
      H = Math.floor(N.hoursSinceLastConnection / b);
    F += d("ui.social.monthsSinceLastConnection", H, H), k.stateIcon = new r("div", {
      className: ["text"]
    }), k.stateIcon.setHtml(F);
  } else {
    k.stateIcon = new r("div", {
      className: ["stateIcon", "offline"]
    });
  }
} else if (N.hasOwnProperty("moodSmileyId") && N.moodSmileyId > 0) {
  var z = N.moodSmileyId,
    W = window.gui.databases.Smileys[z];
  W ? (k.stateIcon = new r("div", {
    className: ["stateIcon", "smiley"]
  }), M.push(k.stateIcon), T.push("gfx/smilies/" + W.gfxId + ".png")) : console.error("Smiley " + z + " details are not available, it could not be displayed");
}
if (N.hoursSinceLastConnection >= b) {
  var F = d("ui.common.inactive") + "<br/>",
    H = Math.floor(N.hoursSinceLastConnection / b);
  F += d("ui.social.monthsSinceLastConnection", H, H), k.stateIcon = new r("div", {
    className: ["text"]
  }), k.stateIcon.setHtml(F);
} else {
  k.stateIcon = new r("div", {
    className: ["stateIcon", "offline"]
  });
}
if (N.hasOwnProperty("moodSmileyId") && N.moodSmileyId > 0) {
  var z = N.moodSmileyId,
    W = window.gui.databases.Smileys[z];
  W ? (k.stateIcon = new r("div", {
    className: ["stateIcon", "smiley"]
  }), M.push(k.stateIcon), T.push("gfx/smilies/" + W.gfxId + ".png")) : console.error("Smiley " + z + " details are not available, it could not be displayed");
}
for (var t = 0, i = e.length; t < i; t++) {
  var n = f[t];
  n && n.rootElement && n.setStyle("backgroundImage", e[t]);
}
if (e.length !== M.length) {
  return console.error("Number of smileys preloaded does not match number of state icons");
}
for (var t = 0; t < e.length; t++) {
  var i = M[t];
  i && i.rootElement && i.setStyle("backgroundImage", e[t]);
}
for (var t = this.table.getRows(), i = 0; i < t.length; i += 1) {
  var n = t[i].houseId || {};
  if (e === n) {
    return i;
  }
}
if (e === n) {
  return i;
}
for (var t = 0; t < e.length; t += 1) {
  this._addHouse(e[t]);
}
if (i >= 0) {
  var n = this._createHouseListRow(e);
  this.table.updateRow(i, n, {
    houseId: t
  });
} else {
  this._addHouse(e);
}
if (r) {
  var l = s.guild.checkRight(f.GUILD_RIGHT_BOSS, r.rights);
  a = l || r.rank === y || r.rank === w;
}
if (this._mustEditInPopup) {
  var e = g.getPanel(C, 1);
  if (e) {
    return;
  }
  var t = new _("div", {
      className: "socialInfoPanelParent"
    }),
    i = new n(t, T, this._infoType, "", this._helpText);
  return e = g.createPanel(C, t, {
    title: this._label,
    top: 10,
    width: "60%",
    height: "40%",
    isModal: !0,
    noCloseButton: !0
  }), void (i._parentEditor = this);
}
if (e) {
  return;
}
if (this._submitButton.disable(), this._cancelButton.disable(), this._iAmThePopup) {
  return this._listener.stopListening(), g.close(g.getPanel(C, 1).id), this._parentEditor._finishEditing(e);
}
if (void 0 !== e) {
  var t = window.gui.playerData.id;
  this._updateInfo({
    timestamp: Date.now(),
    editorId: t,
    value: e
  });
}
if (e === this._originalText) {
  return this._cancelButtonTapHandler();
}
if (t.length) {
  var i = t[0] + " (" + t[0].codePointAt().toString(16) + ")";
  return window.gui.openPopup({
    title: r("ui.common.error"),
    message: r("tablet.chat.unsendableChars", i)
  });
}
if (this._setTextContent(e.value), e.editorId && e.timestamp) {
  var t = Math.max(Math.round((Date.now() - e.timestamp) / 1e3), 1);
  this._lastChangeDiv.setText(r("tablet.lastChangeBy", l.durationToHuman(t), o(e.editorId))), this._lastChangeDiv.show();
} else {
  this._lastChangeDiv.hide();
}
if (this.maxMounts.setText(o + " / " + t.maxOutdoorMount), this.mountTable.clearContent(), o) {
  for (var a = 0; a < o; a += 1) {
    var s = n[a],
      c = s.enrichData || {},
      d = this.mountTable.addRow({
        mount: c.mountType,
        owner: s.ownerName
      }),
      u = s.name || l("ui.common.noName");
    r(d, u);
  }
}
for (var a = 0; a < o; a += 1) {
  var s = n[a],
    c = s.enrichData || {},
    d = this.mountTable.addRow({
      mount: c.mountType,
      owner: s.ownerName
    }),
    u = s.name || l("ui.common.noName");
  r(d, u);
}
for (var t = 0; t < e.length; t += 1) {
  this._addPaddock(e[t]);
}
for (var t = this.locationTable.getRows(), i = 0; i < t.length; i += 1) {
  var n = t[i];
  if (n.paddock.paddockId === e) {
    this.locationTable.delRow(i);
    break;
  }
}
if (n.paddock.paddockId === e) {
  this.locationTable.delRow(i);
  break;
}
if (t.state === g.fightState.waitingForHelp) {
  var i = t.id,
    n = window.gui.playerData.id;
  g.isPlayerFightingFor(n, y.taxCollector, i, w.allies) ? e && n === e.id && window.dofus.sendMessage("GuildFightLeaveRequestMessage", {
    taxCollectorId: i,
    characterId: n
  }) : e && 5 === t.fighters.allies.length ? window.dofus.sendMessage("GuildFightTakePlaceRequestMessage", {
    taxCollectorId: i,
    replacedCharacterId: e.id
  }) : window.dofus.sendMessage("GuildFightJoinRequestMessage", {
    taxCollectorId: i
  });
}
if (i.isVisible() && e === y.taxCollector) {
  i.table.delClassNames("spinner"), i._resetAll();
  for (var a = 0, s = t.length; a < s; a += 1) {
    i._addTaxCollector(t[a]);
  }
  n = o, i._setPerceptorsAmount(t.length, o);
}
for (var a = 0, s = t.length; a < s; a += 1) {
  i._addTaxCollector(t[a]);
}
if (i.isVisible() && n === y.taxCollector) {
  var a = e(o.id);
  if (a) {
    var s = g.entities[n][o.id],
      r = s.enrichData || {};
    a.setFight(n, o), a.setTarget({
      id: o.id,
      entityLook: s.look,
      name: r.firstName + " " + r.lastName,
      level: window.gui.playerData.guild.current.level
    }), i._updateFightState(o.id, o.state);
    var l = t(o.id);
    i._registerFightStartTimer(l, o.waitingForHelpInfo);
  }
}
if (a) {
  var s = g.entities[n][o.id],
    r = s.enrichData || {};
  a.setFight(n, o), a.setTarget({
    id: o.id,
    entityLook: s.look,
    name: r.firstName + " " + r.lastName,
    level: window.gui.playerData.guild.current.level
  }), i._updateFightState(o.id, o.state);
  var l = t(o.id);
  i._registerFightStartTimer(l, o.waitingForHelpInfo);
}
if (i.isVisible() && e === y.taxCollector) {
  var o = t(n.id);
  i._updateFightState(n.id, n.state), i._clearFightStartTimer(o);
}
if (i.isVisible() && t === y.taxCollector) {
  var o = e(n);
  o && (i._updateFightState(n, g.fightState.noFight), o.reset());
}
if (i.isVisible() && t === y.taxCollector) {
  var s = e(n);
  s && s.setFighters(o, a);
}
if (i.isVisible() && t === y.taxCollector) {
  var r = e(n);
  r && r.setFighter(o, a, s);
}
if (i.isVisible() && t === y.taxCollector) {
  var r = e(n);
  r && r.removeFighter(o, s);
}
for (var e = this.table.getRows() || [], t = 0; t < e.length; t += 1) {
  var i = e[t].timer;
  this._clearFightStartTimer(i);
}
if (t) {
  this._clearFightStartTimer(t.timer), delete this.taxCollectorRows[e];
  var i = this.table.getRows().indexOf(t);
  this.table.delRow(i);
}
if (t === T) {
  return null;
}
if (i < M) {
  return null;
}
for (var i = [], n = 0, o = e.length; n < o; n++) {
  i.push("gfx/spells/sort_" + e[n] + ".png");
}
if (a) {
  return console.warn(a);
}
for (var r = {}, l = {}, c = 0; c < e.length; c++) {
  var d = e[c];
  r[d] = s.spellUrls[c];
  var u = t[c] ? t[c] : 1;
  l[d] = t[c], s.spells[d].setLevel(u);
}
for (c = 0; c < e.length; c++) {
  var h = e[c],
    p = s.spells[h];
  if (p) {
    var m = new f("div", {
      className: "spellIcon"
    });
    m.setStyle("backgroundImage", r[h]), i.addRow([m, p.getName(), l[h], o(p, l[h], n) || ""]), w(m, new _({
      spell: p
    }));
  } else {
    console.error("Missing poney spell", h);
  }
}
if (p) {
  var m = new f("div", {
    className: "spellIcon"
  });
  m.setStyle("backgroundImage", r[h]), i.addRow([m, p.getName(), l[h], o(p, l[h], n) || ""]), w(m, new _({
    spell: p
  }));
} else {
  console.error("Missing poney spell", h);
}
for (var o in I) {
  var a = n++;
  if (i.updateRow(a, {
    value: e[o]
  }), I[o]) {
    var s = t >= I[o].cost,
      l = e[o] < I[o].max,
      c = i.getCol(a, "upgrade").getChild("button");
    c.toggleDisplay(s && l);
  }
}
if (i.updateRow(a, {
  value: e[o]
}), I[o]) {
  var s = t >= I[o].cost,
    l = e[o] < I[o].max,
    c = i.getCol(a, "upgrade").getChild("button");
  c.toggleDisplay(s && l);
}
if (this._hasDom) {
  this._queryTable.prepareForResults();
  var t = window.gui.serversData.connectedServerId;
  window.dofus.send("socialDataRequest", {
    type: "guildList",
    serverId: t,
    minLevel: e.minLevel || 0,
    minMemberCount: e.minMemberCount || 0,
    maxLevel: e.maxLevel || 0,
    maxMemberCount: e.maxMemberCount || 0,
    text: e.text || ""
  });
}
for (var t in this._fieldMap) {
  if (t.startsWith("min")) {
    var i = t.substr(3),
      n = this._fieldMap[t],
      o = this._fieldMap["max" + i];
    if (o) {
      var a = n.getRawValue(),
        s = o.getRawValue(),
        r = "" !== a && "" !== s && parseInt(a, 10) > parseInt(s, 10);
      n.toggleClassName("invalid", r), o.toggleClassName("invalid", r), r && (e = !1);
    }
  }
}
if (t.startsWith("min")) {
  var i = t.substr(3),
    n = this._fieldMap[t],
    o = this._fieldMap["max" + i];
  if (o) {
    var a = n.getRawValue(),
      s = o.getRawValue(),
      r = "" !== a && "" !== s && parseInt(a, 10) > parseInt(s, 10);
    n.toggleClassName("invalid", r), o.toggleClassName("invalid", r), r && (e = !1);
  }
}
if (o) {
  var a = n.getRawValue(),
    s = o.getRawValue(),
    r = "" !== a && "" !== s && parseInt(a, 10) > parseInt(s, 10);
  n.toggleClassName("invalid", r), o.toggleClassName("invalid", r), r && (e = !1);
}
for (var t in this._fieldMap) {
  e[t] = this._fieldMap[t].getValue();
}
for (var e in this._fieldMap) {
  this._fieldMap[e].setValue("");
}
if (this._hasDom) {
  this._queryTable.prepareForResults();
  var t = window.gui.serversData.connectedServerId;
  window.dofus.send("socialDataRequest", {
    type: "allianceList",
    serverId: t,
    minGuildCount: e.minGuildCount || 0,
    maxGuildCount: e.maxGuildCount || 0,
    minMemberCount: e.minMemberCount || 0,
    maxMemberCount: e.maxMemberCount || 0,
    minSubarea: e.minSubarea || 0,
    maxSubarea: e.maxSubarea || 0,
    text: e.text || ""
  });
}
if (o) {
  N.replaceClassNames(["buy"], ["sell"]), M.windowTitle.setText(l("ui.mount.paddockSell")), x.setText(l("ui.common.cancelTheSale")), E.setReadonly(!1), e(L, w);
} else {
  N.replaceClassNames(["sell"], ["buy"]), M.windowTitle.setText(l("ui.mount.paddockPurchase")), x.setText(l("ui.common.cancel")), E.setReadonly(!0);
  var s = window.gui.playerData.inventory,
    r = t || a && a <= s.kamas;
  e(L, r);
}
if (o) {
  m.hide(), i = E.getValue();
  var e = E.getFormattedValue();
  window.gui.openConfirmPopup({
    title: l("ui.mount.paddockSell"),
    message: l("ui.mount.doUSellPaddock", e),
    cb: function (e) {
      e && window.dofus.sendMessage("PaddockSellRequestMessage", {
        price: i
      });
    }
  });
} else {
  var t,
    a = M.currency === g;
  t = a ? l("tablet.price.soft", r.kamasToString(i, "")) : l("tablet.price.hard", r.kamasToString(n, "")), window.gui.openConfirmPopup({
    title: l("ui.mount.paddockPurchase"),
    message: l("tablet.ui.mount.doUBuyPaddock", t),
    cb: function (e) {
      if (e) {
        if (a) {
          return window.dofus.sendMessage("PaddockBuyRequestMessage");
        }
        var t = n - window.gui.playerData.inventory.goultines;
        return t > 0 ? f.openNotEnoughHardCurrencyPopup(t) : window.dofus.send("paddockBuyRequest", {
          amountHard: n,
          amountSoft: i
        });
      }
    }
  }, {
    isModal: !0
  });
}
if (e) {
  if (a) {
    return window.dofus.sendMessage("PaddockBuyRequestMessage");
  }
  var t = n - window.gui.playerData.inventory.goultines;
  return t > 0 ? f.openNotEnoughHardCurrencyPopup(t) : window.dofus.send("paddockBuyRequest", {
    amountHard: n,
    amountSoft: i
  });
}
if (a) {
  return window.dofus.sendMessage("PaddockBuyRequestMessage");
}
if (this.currency !== e) {
  var t = this.currency;
  this.currency = e, this.currencyIcon && this.currencyIcon.replaceClassNames([t], [e]);
}
if (t.isMountInfoExpected) {
  t.isMountInfoExpected = !1;
  var o = n.mountData;
  o.mountLocation = "certificate", e(o, "inventory"), i.delClassNames("spinner"), d.show();
}
if (e.reason === s.SOMEONE_ELSE_PRIVATE_FARM) {
  c.close(t.id);
  var i = o("ui.mount.impossibleDataPrivateFarm");
  window.gui.openSimplePopup(i);
}
if (t = t || {}, this.isMountInfoExpected) {
  return d.hide(), void i.addClassNames("spinner");
}
for (var n in i) {
  var o = i[n];
  e(o) && (t[n] = o);
}
if (this.reset(), this.mode = e.mode, this.params = e, this.setting = this._settings[this.mode], this.storageViewer.setDataHandler(this.setting.dataHandler), this.setting.handleInput(e), this.setting.setupUI(), "shieldTutorial" === e.mode) {
  y.createItemInstances(M.fakeRune, function (e, i) {
    return e ? console.error(e) : void t.storageViewer.setItemList(i.map);
  });
} else {
  var i = n(this.setting.filter);
  this.storageViewer.setItemList(i), this.storageViewer.addFilters([this.setting.filter]);
}
for (var e = window.gui.playerData.inventory.objects, t = Object.keys(e), i = 0, n = t.length; i < n; i += 1) {
  if (a(e[t[i]])) {
    return !0;
  }
}
if (a(e[t[i]])) {
  return !0;
}
for (var t = window.gui.playerData.inventory.objects, i = Object.keys(t), n = e.item.foodItems, o = e.item.foodTypes, a = 0, s = i.length; a < s; a += 1) {
  var r = t[i[a]];
  if (n.indexOf(r.objectGID) !== -1 || o.indexOf(r.item.typeId) !== -1) {
    return !0;
  }
}
if (n.indexOf(r.objectGID) !== -1 || o.indexOf(r.item.typeId) !== -1) {
  return !0;
}
for (var t = window.gui.playerData.inventory.objects, i = Object.keys(t), n = e.livingObjectCategory, o = 0, a = i.length; o < a; o += 1) {
  var s = t[i[o]];
  if (!s.livingObjectCategory && s.item.type.id === n) {
    return !0;
  }
}
if (!s.livingObjectCategory && s.item.type.id === n) {
  return !0;
}
if (i) {
  if (!t.item || !t.item.objectUID) {
    return console.error("Item or objectUID of the item select for the feeding is undefined");
  }
  if ("shieldTutorial" === t.mode) {
    var n = window.gui.playerData;
    window.dofus.sendMessage("QuestObjectiveValidationMessage", {
      questId: n.shieldTutorialQuestId,
      objectiveId: n.shieldTutorialQuestObjective
    }), t.unloadContent();
  } else {
    t.setting.confirmAction(e, t.item.objectUID, t.params);
  }
}
if (!t.item || !t.item.objectUID) {
  return console.error("Item or objectUID of the item select for the feeding is undefined");
}
if ("shieldTutorial" === t.mode) {
  var n = window.gui.playerData;
  window.dofus.sendMessage("QuestObjectiveValidationMessage", {
    questId: n.shieldTutorialQuestId,
    objectiveId: n.shieldTutorialQuestObjective
  }), t.unloadContent();
} else {
  t.setting.confirmAction(e, t.item.objectUID, t.params);
}
if (this.item = e, "shield" === this.mode || "shieldTutorial" === this.mode) {
  for (var t = 0; t < e.effects.length; t++) {
    e.effects[t].actionId === b.ACTION_SHIELD_INTERACT_WITH_TYPE && (this._givenXp = e.effects[t].value);
  }
}
for (var t = 0; t < e.effects.length; t++) {
  e.effects[t].actionId === b.ACTION_SHIELD_INTERACT_WITH_TYPE && (this._givenXp = e.effects[t].value);
}
for (var t = 3, i = 0, n = 1; n <= t; n += 1) {
  for (var o = i; i < Math.pow(2, n) + o; i += 1) {
    var a = ["mountDisplay", "ancestor_" + i, "geneMinus" + n];
    this._ancestorBoxes.push(e.createChild("div", {
      className: a
    }));
  }
}
for (var o = i; i < Math.pow(2, n) + o; i += 1) {
  var a = ["mountDisplay", "ancestor_" + i, "geneMinus" + n];
  this._ancestorBoxes.push(e.createChild("div", {
    className: a
  }));
}
for (var n = ["gfx/mounts/" + e.model + ".png"], o = 0; o < t.length; o++) {
  t[o] && n.push("gfx/mounts/" + t[o] + ".png");
}
if (a._hasContent) {
  a._myMount.setStyle("backgroundImage", e[0]);
  for (var i = 1, n = 0; n < t.length; n++) {
    if (t[n]) {
      var o = e[i++];
      a._ancestorBoxes[n].setStyle("backgroundImage", o);
    } else {
      a._ancestorBoxes[n].setStyle("backgroundImage", "none");
    }
  }
}
for (var i = 1, n = 0; n < t.length; n++) {
  if (t[n]) {
    var o = e[i++];
    a._ancestorBoxes[n].setStyle("backgroundImage", o);
  } else {
    a._ancestorBoxes[n].setStyle("backgroundImage", "none");
  }
}
if (t[n]) {
  var o = e[i++];
  a._ancestorBoxes[n].setStyle("backgroundImage", o);
} else {
  a._ancestorBoxes[n].setStyle("backgroundImage", "none");
}
for (var n in t) {
  if (t[n].jobId === e) {
    i = t[n];
    break;
  }
}
if (t[n].jobId === e) {
  i = t[n];
  break;
}
for (var d = window.gui.playerData.jobs.getMaxSlotsByJobId(u.job.id), m = 1; m <= d; m += 1) {
  u.selector.addOption(m, m);
}
for (var i = [], o = 0; o < e.length; o++) {
  var a = e[o];
  i.push(a.getIconUri());
}
for (var o = 0; o < e.length; o++) {
  t(e[o], i[o]);
}
for (var n in e) {
  var o = e[n];
  o.level > 1 && t.push(o);
}
if (e._breedId !== this.breedId) {
  return Date.now() - e.lastRendering < de ? console.warn("Ignoring hammered button") : void e._selectBreed(this.breedId, void 0, e._currentColors);
}
if (!this.allBreeds) {
  var t = this;
  return void this._createAll(function (i) {
    return i ? console.error("characterCreation: initialize error", i) : (t._initialize(e), void t._loadHeadImages());
  });
}
if (e.breedId) {
  this._recommendedBreed = e.breedId, this._sex = e.sex, t = l(this.headsMap, e.cosmeticId);
} else {
  this._sex = Math.random() > .45 ? le : re;
  var n = Math.floor(Math.random() * this.numEasyBreeds),
    o = 0;
  for (i = 1; i <= this.numBreeds; i++) {
    if (!(this.allBreeds[i].complexity > 1)) {
      if (o === n) {
        break;
      }
      o++;
    }
  }
}
for (i = 1; i <= this.numBreeds; i++) {
  if (!(this.allBreeds[i].complexity > 1)) {
    if (o === n) {
      break;
    }
    o++;
  }
}
if (!(this.allBreeds[i].complexity > 1)) {
  if (o === n) {
    break;
  }
  o++;
}
if (o === n) {
  break;
}
for (var t = this, i = 1; i <= this.numBreeds; i++) {
  var n = X[i - 1];
  this.allBreeds[i].complexity = n, 1 === n && this.numEasyBreeds++;
}
for (var l = 1; l <= $; l++) {
  var c = r.createChild("div", {
    className: ["icon", "role" + l]
  });
  P.addTooltip(c, o(l), {
    longTapExplanation: !0
  }), c.id = l, c.hide(), this._icons.push(c);
}
if (e.toggleTabAvailability) {
  var n = this._sex === re,
    o = e.header.getChildren(),
    a = o[n ? le : re],
    s = o[this._sex],
    r = e.content;
  return this._allowElement(a, this.relookingParams.canRegender, Z), this._allowElement(s, this.relookingParams.canReface), this._allowElement(r, this.relookingParams.canReface, Q), e.toggleTabAvailability(re, this.relookingParams.canRegender && this._sex === re), void e.toggleTabAvailability(le, this.relookingParams.canRegender && this._sex === le);
}
if (e.toggleClassName("disabled", !t), !t) {
  var l = e.appendChild(new _("div", {
    className: "disabledFeature"
  }));
  i && (l.itemId = i, D(l), l.on("tap", c));
}
for (var o = 0; o < ce; o++) {
  var a = new s("headSelectionButton", this, u);
  i.appendChild(a), i.buttons.push(a), a.headOrder = o, a.cosmeticId = n + o, a.gender = t;
}
for (var t = e.sort(function (e, t) {
    return e.complexity < t.complexity ? -1 : t.complexity < e.complexity ? 1 : 0;
  }), i = 0; i < t.length; i++) {
  var n = t[i],
    o = n.id;
  this.breedBtns[o] = this._createBreedButton(n, re), this.breedBtns[o + this.numBreeds] = this._createBreedButton(n, le);
}
for (var e = 1; e <= this.numBreeds; e++) {
  this.headContainers[e] = [this._createHeadContainer(e, re), this._createHeadContainer(e, le)];
}
if (this.loadedHeads[e]) {
  return t && t();
}
for (var o = this.headsMap, a = [], s = i; s <= n; s++) {
  a.push("gfx/cosmetics/" + o[~~s].assetId + ".png");
}
if (!r.headContainers.length) {
  return t && t();
}
if (!e) {
  for (var s = 1; s <= r.numBreeds; s++) {
    r.loadedHeads[s] = !0;
  }
}
for (var s = 1; s <= r.numBreeds; s++) {
  r.loadedHeads[s] = !0;
}
for (var l = 0, c = i; c <= n; c++) {
  var d = o[~~c],
    u = r.headContainers[d.breed][d.gender].buttons[d.order];
  u.setStyle("backgroundImage", a[l++]);
}
if (t.result === b.OK) {
  T.confirmNewCharacterCreation();
  var i = e.nameInput.getValue(!0);
  return q.log("F_T_U_E.creates_new_character", {
    timestamp_event: new Y.DofusDate(Y.now()).getServerDate().timestamp,
    recommanded_breed_id: e._recommendedBreed,
    chosen_breed_id: e._breedId,
    gender_chosen: e._sex,
    face_id_chosen: e._cosmeticId,
    has_used_name_generator: e._nameGeneratorUsed,
    has_used_style_generator: e._styleGeneratorUsed,
    character_name: i
  }), k.close(e.id);
}
for (var e = new Array(y.CHARACTER_COLORS), t = [], i = 0; i < y.CHARACTER_COLORS; i++) {
  var n = this.colorButtons[i],
    o = n.getColor(),
    a = I.getIndexedColor(i + 1, o.rgb[0], o.rgb[1], o.rgb[2]);
  e[i] = a, t.push(n.isCustomColor() ? a : null);
}
if (this.headSexTabs.isVisible()) {
  for (var e = 1, t = this.numBreeds; e <= t; e++) {
    this.headContainers[e][re].hide(), this.headContainers[e][le].hide();
  }
  this.headContainers[this._breedId][re].show(), this.headContainers[this._breedId][le].show();
}
for (var e = 1, t = this.numBreeds; e <= t; e++) {
  this.headContainers[e][re].hide(), this.headContainers[e][le].hide();
}
if (this.breedIllustrationBg.isVisible()) {
  var e = this.breedIllustrationBg;
  this.breedIllustrationBg = this.breedIllustrationBgFade, this.breedIllustrationBgFade = e;
  var t = "breed" + this._breedId;
  this.breedIllustrationBg.setClassNames(["breedIllustrationBg", t]), L(this.breedIllustrationBg, 500, null, this.breedIllustrationBgFade);
}
if (e.characterDisplay) {
  var t = ee[e._breedId];
  t || (console.warn("Missing center tile data for breed:", e._breedId), t = te), L(e.checkerboardImage), L(e.rotationLeft), L(e.rotationRight);
}
if (i.cosmeticId !== this._cosmeticId) {
  this._cosmeticId = i.cosmeticId, this.headOrder = e;
  for (var n = this.headContainers[this._breedId][this._sex].buttons, o = 0; o < n.length; o++) {
    n[o].setSelected(n[o] === i);
  }
  t && this._updateSprite(!1);
}
for (var n = this.headContainers[this._breedId][this._sex].buttons, o = 0; o < n.length; o++) {
  n[o].setSelected(n[o] === i);
}
for (var s = 0; s <= y.CHARACTER_COLORS; s++) {
  this.colorButtons[s] = o.appendChild(new N(this, s, m, {
    active: s < y.CHARACTER_COLORS
  }));
}
if (l.selectedColorBtn) {
  l.selectedColorBtn.setColor(e, !0);
  var t = Date.now();
  (!l.colorPicker.lastUpdate || t - l.colorPicker.lastUpdate > se) && (l.colorPicker.lastUpdate = t, l._updateSprite());
}
for (var e = 0; e < y.CHARACTER_COLORS; e++) {
  l.colorButtons[e].randomize();
}
if (t._needsNameCheck()) {
  var i = [];
  e.forEach(function (e) {
    i.push(" - " + A(e.error));
  }), i.length > 0 && o.setText(i.join("\n"));
}
if (i.canRename === z.MANDATORY && this._relookingPreviousValues.name === n) {
  return P.showNotification(A("tablet.charcrea.sameName"), this.createBtn), !1;
}
if (i.canRebreed === z.MANDATORY && this._relookingPreviousValues.breed === this._breedId) {
  return P.showNotification(A("tablet.charcrea.sameBreed"), this.createBtn), !1;
}
if (i.canRegender === z.MANDATORY && this._relookingPreviousValues._sex === t) {
  return P.showNotification(A("tablet.charcrea.sameSex"), this.createBtn), !1;
}
if (i.canReface === z.MANDATORY && this._relookingPreviousValues._cosmeticId === this._cosmeticId) {
  return P.showNotification(A("tablet.charcrea.sameFace"), this.createBtn), !1;
}
if (i.canRecolor === z.MANDATORY) {
  for (var o = !0, a = this._relookingPreviousValues.indexedColors, s = 0; s < a.length; s += 1) {
    if (a[s] !== e[s]) {
      o = !1;
      break;
    }
  }
  if (o) {
    return P.showNotification(A("tablet.charcrea.sameColors"), this.createBtn), !1;
  }
}
for (var o = !0, a = this._relookingPreviousValues.indexedColors, s = 0; s < a.length; s += 1) {
  if (a[s] !== e[s]) {
    o = !1;
    break;
  }
}
if (a[s] !== e[s]) {
  o = !1;
  break;
}
if (o) {
  return P.showNotification(A("tablet.charcrea.sameColors"), this.createBtn), !1;
}
if (this._needsNameCheck()) {
  if (e === !1) {
    return;
  }
  var t = e.length;
  if (0 === t) {
    return P.showNotification(A("ui.popup.charcrea.noName"), this.createBtn);
  }
  if (t < x.MIN_PLAYER_NAME_LEN || t > x.MAX_PLAYER_NAME_LEN) {
    return P.showNotification(A("ui.charcrea.nameRules"), this.createBtn);
  }
}
if (e === !1) {
  return;
}
if (0 === t) {
  return P.showNotification(A("ui.popup.charcrea.noName"), this.createBtn);
}
if (t < x.MIN_PLAYER_NAME_LEN || t > x.MAX_PLAYER_NAME_LEN) {
  return P.showNotification(A("ui.charcrea.nameRules"), this.createBtn);
}
if (this.relookingParams) {
  var a = this._checkRelookingMandatoryChanges(i, n);
  if (!a) {
    return;
  }
  o.headSkin = this.spriteStatus.headSkin, o.remodelingInformation = {
    name: e,
    breed: this._breedId,
    sex: n,
    colors: i,
    cosmeticId: this._cosmeticId,
    entityLook: this._buildEntityLook()
  }, T.confirmCharacterRelooking(o);
} else {
  this.addClassNames(["disabled"]), document.activeElement.blur(), window.dofus.sendMessage("CharacterCreationRequestMessage", o);
}
if (!a) {
  return;
}
for (var t = 0; t < y.CHARACTER_COLORS; t++) {
  var i = this.colorButtons[t];
  e && i.isCustomColor() || this._resetColorButton(i);
}
for (var i = 0; i < y.CHARACTER_COLORS; i++) {
  null !== e[i] ? f(this.colorButtons[i], e[i], t) : this._resetColorButton(this.colorButtons[i]);
}
for (var t = [], i = 0; i < o.length; i += 1) {
  var a = o[i],
    s = void 0 === a.expectedResult || a.expectedResult;
  a.regex && a.regex.test(e) !== s && (a.transform ? e = a.transform(e) : t.push({
    error: a.error
  }));
}
if (e = void 0 === e || e, !e) {
  return t;
}
for (i = 0; i < this.onChangeRules.length; i += 1) {
  n = this.onChangeRules[i], o = void 0 === n.expectedResult || n.expectedResult, n.regex && n.regex.test(t) !== o && n.error && s.push({
    error: n.error
  });
}
for (i = 0; i < this.onSubmitRules.length; i += 1) {
  n = this.onSubmitRules[i], o = void 0 === n.expectedResult || n.expectedResult, n.regex && n.regex.test(t) !== o && n.error && s.push({
    error: n.error
  });
}
if (l._skillId === l.jobsData.SKILLID_DECRAFT) {
  for (var a = 0; a < t.length; a += 1) {
    var s = t[a];
    s.GID && (o.itemToCraft.ingredientIds.push(s.GID), o.itemToCraft.quantities.push(s.quantity));
  }
}
for (var a = 0; a < t.length; a += 1) {
  var s = t[a];
  s.GID && (o.itemToCraft.ingredientIds.push(s.GID), o.itemToCraft.quantities.push(s.quantity));
}
if (l.openState) {
  switch (n) {
    case "ExchangeCraftResultMessage":
    case "ExchangeCraftResultWithObjectIdMessage":
    case "ExchangeCraftResultWithObjectDescMessage":
      l._onResultEvents(e);
      break;
    case "ExchangeReplayCountModifiedMessage":
      l._updateQtyToCraft(e);
      break;
    case "ExchangeItemAutoCraftRemainingMessage":
      t(e);
      break;
    case "ExchangeItemAutoCraftStopedMessage":
      i(e);
      break;
    case "ExchangeCraftSlotCountIncreasedMessage":
      l._slotCountIncreased(e);
      break;
    default:
      console.error(new Error(n + " not handle by CraftingWindow"));
  }
}
if (t) {
  return console.error("Crafting: addAndModifySlots cannot createItemInstances", t);
}
if (t += l._targetSlotElems.getGivenIngredientsInfo().length, !(t < 1)) {
  return l._skillId !== l.jobsData.SKILLID_DECRAFT ? e() : void window.gui.openConfirmPopup({
    title: s("ui.popup.warning"),
    message: s("ui.craft.decraftConfirm"),
    cb: function (t) {
      t && e();
    }
  });
}
if (o) {
  return t(o);
}
if (t) {
  return console.error("Crafting: updateItemResultDescription Failed to create item instances", t);
}
if (i) {
  return console.error(i);
}
if (1 === e) {
  if (t <= 1) {
    return;
  }
  this._progressLine.show(), this._progressBar.setValue(e);
}
if (t <= 1) {
  return;
}
for (t = 0, i = e.length; t < i; t += 1) {
  var r = e[t];
  if (o[r.UID]) {
    var l = o[r.UID].quantity;
    a[r.GID] = l;
  }
}
if (o[r.UID]) {
  var l = o[r.UID].quantity;
  a[r.GID] = l;
}
for (t = 0, i = e.length; t < i; t += 1) {
  if (e[t].GID) {
    var c = e[t].GID,
      d = e[t].quantity,
      u = a[c],
      h = Math.floor(u / d);
    (s === -1 || s > h) && (s = h);
  }
}
if (e[t].GID) {
  var c = e[t].GID,
    d = e[t].quantity,
    u = a[c],
    h = Math.floor(u / d);
  (s === -1 || s > h) && (s = h);
}
if (t.isRecipeKnown ? this.prepareItem(t.itemToCraft.resultId) : this._clearItem(), n) {
  this._qtyButton.disable(), this._setMaxQuantity(1);
} else {
  this._qtyButton.enable();
  var o = i();
  this._setMaxQuantity(o);
}
for (var u = 0; u < a.MAX_CRAFT_SLOTS; u += 1) {
  this._allSlots.appendChild(this._createItemSlot());
}
if (!this._isRemote) {
  var t = e.getItem();
  if (t) {
    var i = this.jobsData.getQuickTransferInfo("crafting", t, e.getQuantity());
    e !== this.selectedSlot ? (window.gui.openContextualMenuAround("item", e, {
      item: t
    }), this._selectCurrentSlot(e, i.movedQty > 1 ? "stackMove" : "")) : this.jobsData.removeItemFromCraft(t.objectUID, i.movedQty);
  }
}
if (t) {
  var i = this.jobsData.getQuickTransferInfo("crafting", t, e.getQuantity());
  e !== this.selectedSlot ? (window.gui.openContextualMenuAround("item", e, {
    item: t
  }), this._selectCurrentSlot(e, i.movedQty > 1 ? "stackMove" : "")) : this.jobsData.removeItemFromCraft(t.objectUID, i.movedQty);
}
for (var e = this._allSlots.getChildren(), t = this._usedSlots + this.jobsData.getFreeSlotCount(), i = 0, n = e.length; i < n; i += 1) {
  var o = e[i],
    a = i >= t;
  o.toggleClassName("locked", a), o.isLocked = a;
}
if (this.highlightedSlots = [], e.objectGID === this.jobsData.RUNE_SIGNATURE_GID) {
  this.highlightedSlots.push(this._signatureSlot);
} else {
  for (var t = this._allSlots.getChildren(), i = 0; i < t.length; i++) {
    var n = t[i],
      o = n.getItem();
    if (o && o.objectUID === e.objectUID) {
      this.highlightedSlots = [n];
      break;
    }
    o || n.isLocked || this.highlightedSlots.push(n);
  }
}
for (var t = this._allSlots.getChildren(), i = 0; i < t.length; i++) {
  var n = t[i],
    o = n.getItem();
  if (o && o.objectUID === e.objectUID) {
    this.highlightedSlots = [n];
    break;
  }
  o || n.isLocked || this.highlightedSlots.push(n);
}
if (o && o.objectUID === e.objectUID) {
  this.highlightedSlots = [n];
  break;
}
for (var a = 0; a < this.highlightedSlots.length; a++) {
  this.highlightedSlots[a].addClassNames("selected");
}
for (var e = 0; e < this.highlightedSlots.length; e++) {
  this.highlightedSlots[e].delClassNames("selected");
}
for (var t = this._allSlots.getChildren(), i = 0, n = t.length; i < n; i += 1) {
  var o = t[i];
  if (o.itemInstance && o.itemInstance.objectUID === e) {
    return i;
  }
}
if (o.itemInstance && o.itemInstance.objectUID === e) {
  return i;
}
if (e.objectGID === this.jobsData.RUNE_SIGNATURE_GID) {
  return this._runeSignatureUid = e.objectUID, void this._signatureSlot.setItem(e);
}
if (e === this._runeSignatureUid) {
  return this._signatureSlot.unselect(), this._signatureSlot.unset(), void (this._runeSignatureUid = null);
}
if (t || 0 === t) {
  this._unselectCurrentSlot();
  for (var i = this._allSlots.getChildren(), n = t + 1; n < i.length; n++) {
    i[n - 1].setItem(i[n].getItem());
  }
  i[i.length - 1].unset(), this._usedSlots -= 1;
}
for (var i = this._allSlots.getChildren(), n = t + 1; n < i.length; n++) {
  i[n - 1].setItem(i[n].getItem());
}
for (var e = this._allSlots.getChildren(), t = [], i = 0, n = e.length; i < n; i += 1) {
  var o = e[i].itemInstance;
  o && t.push({
    UID: o.objectUID,
    GID: o.objectGID,
    quantity: o.quantity
  });
}
for (var e = this._allSlots.getChildren(), t = 0; t < e.length; t++) {
  e[t].unset();
}
if (o.openState) {
  switch (n) {
    case "ExchangeObjectAddedMessage":
    case "ExchangeObjectModifiedMessage":
    case "ExchangeObjectRemovedMessage":
    case "ExchangeGoldPaymentForCraftMessage":
    case "ExchangeItemPaymentForCraftMessage":
    case "ExchangeModifiedPaymentForCraftMessage":
    case "ExchangeRemovedPaymentForCraftMessage":
    case "ExchangeClearPaymentForCraftMessage":
      e();
      break;
    case "ExchangeIsReadyMessage":
      t(i);
      break;
    default:
      console.error(new Error(n + " not handle by CraftingMultiWindow"));
  }
}
if (e) {
  return console.error("Crafting multi: onResult error", e);
}
if (w.table.clearContent(), e.length) {
  for (var t = 0; t < e.length; t += 1) {
    g(e[t]);
  }
}
for (var t = 0; t < e.length; t += 1) {
  g(e[t]);
}
if (e) {
  return console.error(e);
}
for (var i = 0; i < t.length; i += 1) {
  var n = t[i];
  w.selector.addOption(n.nameId, n);
}
if (e) {
  return console.error(e);
}
if (e) {
  return console.error("Craft Magus: updateSlot cannot createItemInstances", e);
}
if (d.openState) {
  var i = t.array[0],
    n = d._getItemSlotType(i.item),
    o = d._getSlotByType(n);
  o.setItem(i), o.dragUiInfo.backgroundImage = o.getImage(), l.enableDrag(o), "item" === n && (d.currentCraftingItem = i, d.itemBox.displayItem(i), d.setItemBoxVisibility(!0)), d._updateCraftingButtons();
}
if (e.craftResult === r.CRAFT_IMPOSSIBLE) {
  var i = c("ui.craft.noResult");
  return t.openSimplePopup(i), t.chat.logMsg(i), u("ExchangeReadyMessage", {
    ready: !1,
    step: d.exchangeStep
  }), d.isInAutoCraft = !1, void d._updateCraftingButtons();
}
if (t) {
  return console.error("CraftMagusWindow createItemInstances", t);
}
if (d.openState) {
  var n = i.array[0];
  _.display(d.currentCraftingItem, n, e);
}
for (var h = this.craftingBox = d.createChild("div", {
    className: "craftingBox"
  }), g = this.craftingSlots = h.createChild("div", {
    className: "craftingSlots"
  }), _ = 0; _ < M.length; _ += 1) {
  var v = M[_];
  g.appendChild(t(v));
}
for (var e = 0; e < M.length; e += 1) {
  this._resetSlot(M[e]);
}
for (var t = 0; t < M.length; t += 1) {
  var i = M[t],
    n = this._getSlotByType(i);
  if (n.itemInstance && n.itemInstance.objectUID === e) {
    return i;
  }
}
if (n.itemInstance && n.itemInstance.objectUID === e) {
  return i;
}
if (this.skillId && e.itemInstance && (this.newItemSlotType = this._getItemSlotType(e.itemInstance.item), this.newItemSlotType)) {
  var i = this.newItemInstance = e.itemInstance;
  this.droppedLocation = "crafting", this.droppedItemSource = t;
  var n = e.getQuantity();
  n = this.jobsData.howManyCanBeAddedToCraft(t, i, n), 0 !== n && (1 === n ? this._moveItem(1) : this.minMaxSelector.open({
    min: 1,
    max: n,
    defaultValue: n,
    x: T,
    y: C
  }));
}
if (t) {
  e !== this.selectedSlot && window.gui.openContextualMenuAround("item", e, {
    item: t
  });
  var i = this.jobsData.getQuickTransferInfo("crafting", t, e.getQuantity());
  i.movedQty && (e !== this.selectedSlot ? this._selectCurrentSlot(e, i.movedQty > 1 ? "stackMove" : "") : this.jobsData.removeItemFromCraft(t.objectUID, i.movedQty));
}
for (var t = 0; t < e.length; t += 1) {
  if ("ObjectEffectMinMax" === e[t]._type || "EffectInstanceMinMax" === e[t]._type) {
    return e[t];
  }
}
if ("ObjectEffectMinMax" === e[t]._type || "EffectInstanceMinMax" === e[t]._type) {
  return e[t];
}
if (h && p && h.actionId !== p.actionId) {
  return c.logMsg(s("ui.craft.success"));
}
for (g = 0; g < d.length; g += 1) {
  y = d[g], _ = y.actionId, w = y.value;
  var C = parseInt(y.effect.operator + y.value, 10);
  if (f.hasOwnProperty(_)) {
    var I = parseInt(f[_].effect.operator + f[_].value, 10);
    v = I - C;
  } else {
    v = -C;
  }
  if (_ === l.ACTION_ITEM_CHANGE_DURABILITY) {
    return v = f[_].diceNum - m[_].diceNum, void c.logMsg(s("ui.craft.success") + " : +" + v + ", " + f[_].description);
  }
  v && (M.push({
    _type: y._type,
    actionId: _,
    value: v,
    effectCaller: "CraftMagus " + e.objectGID
  }), v > 0 && (b = !0)), T.push(_);
}
if (f.hasOwnProperty(_)) {
  var I = parseInt(f[_].effect.operator + f[_].value, 10);
  v = I - C;
} else {
  v = -C;
}
if (_ === l.ACTION_ITEM_CHANGE_DURABILITY) {
  return v = f[_].diceNum - m[_].diceNum, void c.logMsg(s("ui.craft.success") + " : +" + v + ", " + f[_].description);
}
for (g = 0; g < u.length; g += 1) {
  y = u[g], _ = y.actionId, T.indexOf(_) >= 0 || (w = y.value, M.push({
    _type: y._type,
    actionId: _,
    value: w,
    effectCaller: "CraftMagus " + e.objectGID
  }), w > 0 && (b = !0));
}
if (e) {
  return console.error("Craft Magus: craftResultText cannot createItemInstances", e);
}
for (var n, o, a = "", l = 0; l < t.length; l += 1) {
  n = t[l], n.effect.bonusType && (o = n.description, o = n.value > 0 ? "+" + o : o, a += " " + o + ",", a = a.replace("--", "-"));
}
if (e) {
  return console.error(e);
}
if (l._unselectBagSlot(), !(!l.skillId || !e.itemInstance || !l._getItemSlotType(e.itemInstance.item) || l.isCrafter && "craftInventory" === t || l.isCrafter && "crafting" === t && l._isMyItem(e.itemInstance.objectUID))) {
  l.newItemInstance = e.itemInstance, l.droppedLocation = "ingredientsBag", l.droppedItemSource = t;
  var n = e.getQuantity();
  return 1 === n ? l._moveItem(1) : void l.minMaxSelector.open({
    min: 1,
    max: n,
    defaultValue: n,
    x: i.x,
    y: i.y
  });
}
if (!(this.currentPage === e || e < 0 || e > this.pageCount - 1)) {
  this.currentPage = e;
  var t = "translateY(-" + e * this.ingredientsSlotsRowNum * _ + "px)";
  this.ingredientsSlots.setStyles({
    webkitTransform: t,
    transform: t
  }), this.pagination.setCurrent(e);
}
if (n) {
  return console.error("PaymentWindow: ExchangeItemPaymentForCraftMessage cannot createItemInstances", n);
}
if (n) {
  return console.error("PaymentWindow: ExchangeModifiedPaymentForCraftMessage cannot createItemInstances", n);
}
if (!n._readOnly) {
  a = this.paymentType;
  var i = e.itemInstance,
    o = e.getQuantity();
  t(i.objectUID, o);
}
for (var o = this._itemsSlots = n.createChild("div", {
    className: "itemsSlots"
  }), h = 0; h < this._MAX_SLOTS; h += 1) {
  var p = o.appendChild(new l({
    noDoubleTap: !0
  }));
  p.itemUI = {
    width: 40,
    height: 40,
    onDragClassName: "slot"
  }, s.setDraggable(p, p.itemUI, "craftPayment", {
    slot: p
  }), s.disableDrag(p);
}
for (var t = this._itemsSlots.getChildren(), i = 0, n = t.length; i < n; i += 1) {
  t[i].toggleClassName("selected", e);
}
for (var t = this._currentItems, i = 0, n = t.length; i < n; i += 1) {
  var o = t[i];
  if (o) {
    var a = o.objectUID;
    if (a === e) {
      return i;
    }
  }
}
if (o) {
  var a = o.objectUID;
  if (a === e) {
    return i;
  }
}
if (a === e) {
  return i;
}
for (var e = this._itemsSlots.getChildren(), t = this._currentPage - 1, i = 0, n = e.length; i < n; i += 1) {
  var o = i + t * this._MAX_SLOTS,
    a = e[i],
    r = this._currentItems[o];
  r ? (a.setItem(r), a.itemUI.backgroundImage = a.getImage(), a.paymentType = this._paymentType, this._readOnly ? s.disableDrag(a) : s.enableDrag(a)) : (delete a.paymentType, a.unset(), s.disableDrag(a));
}
if (o) {
  var a = o.quantity - t.quantity;
  e.setItemQuantity(n, a), a > 0 && !i && y(n);
}
for (var o in n) {
  var a = parseInt(o, 10),
    s = n[o].quantity,
    r = S.objects[a];
  r && e.setItemQuantity(a, r.quantity - s * i);
}
if (i) {
  var n = E.getQuickTransferInfo("craftInventory", i.getItem(), i.getQuantity());
  n.movedQty > 0 && e.selectSlot(i, n.movedQty > 1 ? "stackMove" : "");
}
if (e.exchangeType === l.PLAYER_TRADE) {
  var t = y.playerData;
  g = t.id, _ = t.characterBaseInformations.name;
  var i = h.setupNames(v._targetInfo.targetId, e.source);
  i && (w = i.sourceName, b = i.targetName, h.setupCancelPopupTexts({
    title: s("ui.exchange.requestInProgress"),
    message: s("ui.exchange.requestInProgress")
  }), h.setupConfirmPopupTexts({
    title: s("ui.exchange.exchangeRequest"),
    message: s("ui.exchange.resquestMessage", w)
  }), h.askingExchangePopup());
}
if (e) {
  return console.error(e);
}
if (!e._iConfirmed) {
  return !e._otherCharacterTradeSpace.hasFreePods() && e._myTradeSpace.getItemsToTradeCount() > 0 ? window.gui.openSimplePopup(s("ui.storage.noRoomForTransfert")) : void window.dofus.sendMessage("ExchangeReadyMessage", {
    ready: !0,
    step: e._exchangeStep
  });
}
if (!a._isRemote && a.canRemove) {
  var e = o.itemInstance;
  if (e) {
    a._currentUID = e.objectUID;
    var t = e.quantity;
    if (1 === t) {
      return window.dofus.sendMessage("ExchangeObjectMoveMessage", {
        objectUID: a._currentUID,
        quantity: -1
      });
    }
    a._minMaxSelector.fromInventory = !1, a._minMaxSelector.open({
      min: 1,
      max: e.quantity
    });
  }
}
if (e) {
  a._currentUID = e.objectUID;
  var t = e.quantity;
  if (1 === t) {
    return window.dofus.sendMessage("ExchangeObjectMoveMessage", {
      objectUID: a._currentUID,
      quantity: -1
    });
  }
  a._minMaxSelector.fromInventory = !1, a._minMaxSelector.open({
    min: 1,
    max: e.quantity
  });
}
if (1 === t) {
  return window.dofus.sendMessage("ExchangeObjectMoveMessage", {
    objectUID: a._currentUID,
    quantity: -1
  });
}
for (var i in t) {
  var n = t[i];
  e += n.quantity * n.averagePrice;
}
if (e) {
  var n = this._podsPercent = Math.min(100, Math.floor(100 * (t + i) / e));
  this._exchangePodsProgressBar.setValue(this._podsPercent / 100), n <= 60 ? this._exchangePodsProgressBar.replaceClassNames(["yellow", "orange", "red"], ["green"]) : n <= 70 ? this._exchangePodsProgressBar.replaceClassNames(["green", "orange", "red"], ["yellow"]) : n <= 80 ? this._exchangePodsProgressBar.replaceClassNames(["green", "yellow", "red"], ["orange"]) : this._exchangePodsProgressBar.replaceClassNames(["green", "yellow", "orange"], ["red"]), this._podsTooltipText = d("ui.common.player.weight", c.kamasToString(t + i, ""), c.kamasToString(e, "")), this._podsTooltip.setText(this._podsTooltipText);
}
if (this._tradeGold.getKama() > 0) {
  return !0;
}
for (var e = this._allSlots.getChildren(), t = 0, i = e.length; t < i; t += 1) {
  var n = e[t];
  if (n.itemInstance) {
    return !0;
  }
}
if (n.itemInstance) {
  return !0;
}
for (var e = 0, t = this._allSlots.getChildren(), i = 0; i < t.length; i++) {
  t[i].itemInstance && e++;
}
if (e) {
  return console.error(e);
}
for (var t in h) {
  e.resetItemQuantity(t);
}
if (!t.remote) {
  var i = t.object.objectUID,
    n = d.objects[i];
  e.setItemQuantity(i, n.quantity - t.object.quantity), h[i] = !0;
}
if (!t.remote) {
  var i = t.objectUID;
  e.resetItemQuantity(i), delete h[i];
}
for (var a = o.appendChild(new w({
    className: "settingOption"
  })), s = 0; s < i.length; s++) {
  a.addOption(n[s], i[s]);
}
for (var o = 0; o < this.optionDefinitions.length; o++) {
  this._createSection(this.optionDefinitions[o], o);
}
if (e.text) {
  var n = i.createChild("div", {
    className: "titleBox"
  });
  n.createChild("div", {
    className: "sectionDescription",
    text: e.text
  });
}
for (var o = i.createChild("div", {
    className: "allOptions"
  }), a = e.elements, s = 0; s < a.length; s++) {
  var r = this._createElement(o, a[s]);
  this.elements[t + "-" + s] = r;
}
if (!n) {
  return console.error("Invalid element type:", t.type);
}
for (var e = 0; e < this.optionDefinitions.length; e++) {
  this._refreshSection(e);
}
for (var t = this.optionDefinitions[e], i = t.elements, n = 0; n < i.length; n++) {
  var o,
    a = i[n],
    s = this.elements[e + "-" + n];
  a.getCurrentValue ? o = a.getCurrentValue() : a.gameOptionId && (o = _[a.gameOptionId]), "bool" === a.type ? s.toggleActivation(o, !0) : "dropdown" === a.type ? s.select(o, !0) : "custom" === a.type && "function" == typeof s.updateVisual && s.updateVisual(o);
}
for (var e = 0, t = null, i = 0; i < this.optionDefinitions.length; i++) {
  var n = this.optionDefinitions[i],
    o = !n.shouldShow || n.shouldShow(),
    a = this.menuList.getChildren()[0],
    s = a.getChild(i);
  s.toggleDisplay(o), o ? (e++, s.toggleClassName("odd", e % 2 === 0), null === t && (t = i)) : this._hideSection(i);
}
if (!t || !t.elements) {
  return console.error("Invalid section ID: " + e);
}
for (var i = 0; i < t.elements.length; i++) {
  var n = t.elements[i],
    o = !n.shouldShow || n.shouldShow(),
    a = this.elements[e + "-" + i];
  a.toggleDisplay(o);
}
for (var t = 0; t < this.optionDefinitions.length; t++) {
  if (e === this.optionDefinitions[t].name) {
    return t;
  }
}
if (e === this.optionDefinitions[t].name) {
  return t;
}
for (var s = this.createChild("div", {
    className: "volumeButtons"
  }), c = this.buttons = [], d = 0; d < 5; d++) {
  var u = s.appendChild(new a("", {
    className: ["volume", "volume" + d]
  }));
  c.push(u), u.volume = d / 4, u.disable(), u.on("tap", t);
}
for (var t = 0; t < 5; t++) {
  this.buttons[t].enable();
}
if (!window.appAvailability) {
  return u.openUrlInDeviceBrowser(e.browserUrl);
}
if (!a) {
  if (n()) {
    try {
      a = JSON.parse(JSON.stringify(window.cordova.plugins.WebViewSelector.availableEngines));
    } catch (e) {
      a = [d];
    }
  } else {
    a = [d];
  }
}
if (n()) {
  try {
    a = JSON.parse(JSON.stringify(window.cordova.plugins.WebViewSelector.availableEngines));
  } catch (e) {
    a = [d];
  }
} else {
  a = [d];
}
for (var e = t.getAvailableEngineIds(), i = [], n = 0; n < e.length; n++) {
  i.push(t.getEngineName(e[n]));
}
if (n() && e !== t.getCurrentEngineId()) {
  var i = window.gui;
  t.setCurrentEngine(e, function (e) {
    return e ? (i.openSimplePopup(r("tablet.webViewSelector.unableToChangeEngine") + " " + e), void l.getWindow("options").refreshUi()) : void i.openConfirmPopup({
      message: r("tablet.webViewSelector.restartNeeded") + " " + r("tablet.webViewSelector.restartQuestion"),
      cb: function (e) {
        return e ? void navigator.app.exitApp() : i.openSimplePopup(r("tablet.webViewSelector.delayedRestart"), r("ui.popup.information"));
      }
    });
  });
}
for (var o = 0; o < t.length; o += 1) {
  n.appendChild(new a({
    itemData: t[o],
    quantity: i[t[o].id] || 0,
    tooltipOptions: {
      openOnTap: !0
    }
  }));
}
if (e.articleBox) {
  var t = !e.isPurchasing,
    i = !e.params.article.product && !!e.params.isSoft;
  t && i && d.close(e.id);
}
if (e.articleBox) {
  var t = !e.isPurchasing,
    i = !e.params.article.product && !!e.params.isSoft;
  t && i && (u.enrichWithSoftPrice(e.params.article), e.updateAmount());
}
if (this.articleBox) {
  var e = this.params,
    t = e.article;
  this.articleTitle.setText(t.name), this.articleSubtitle.setText(t.subtitle || ""), this.btnLabel.setText(a("ui.common.buy"));
  var i = t.product;
  if (i && e.isInApp) {
    this.amount.setText(i.price), this.priceIcon.hide();
  } else if (t.is_free) {
    this.btnLabel.setText(a("ui.shop.free")), this.amount.setText(a("ui.shop.free")), this.priceIcon.hide();
  } else {
    var n = e.isSoft,
      o = window.gui.playerData.inventory,
      r = n ? o.kamas : o.goultines,
      l = n ? t._softPrice : t._hardPrice;
    l > r ? this.buyBtn.disable() : this.buyBtn.enable(), this.amount.setText(s.intToString(l)), this.priceIcon.show(), this.priceIcon.toggleClassName("hardCcy", !n), this.priceIcon.toggleClassName("softCcy", !!n), window.gui.scenarioManager.isBehaviourEnabled(f.DISABLE_FAKE_SHOP) || this.buyBtn.enable();
  }
  this.itemsList.clearContent(), p(t, this.itemsList);
}
if (i && e.isInApp) {
  this.amount.setText(i.price), this.priceIcon.hide();
} else if (t.is_free) {
  this.btnLabel.setText(a("ui.shop.free")), this.amount.setText(a("ui.shop.free")), this.priceIcon.hide();
} else {
  var n = e.isSoft,
    o = window.gui.playerData.inventory,
    r = n ? o.kamas : o.goultines,
    l = n ? t._softPrice : t._hardPrice;
  l > r ? this.buyBtn.disable() : this.buyBtn.enable(), this.amount.setText(s.intToString(l)), this.priceIcon.show(), this.priceIcon.toggleClassName("hardCcy", !n), this.priceIcon.toggleClassName("softCcy", !!n), window.gui.scenarioManager.isBehaviourEnabled(f.DISABLE_FAKE_SHOP) || this.buyBtn.enable();
}
if (t.is_free) {
  this.btnLabel.setText(a("ui.shop.free")), this.amount.setText(a("ui.shop.free")), this.priceIcon.hide();
} else {
  var n = e.isSoft,
    o = window.gui.playerData.inventory,
    r = n ? o.kamas : o.goultines,
    l = n ? t._softPrice : t._hardPrice;
  l > r ? this.buyBtn.disable() : this.buyBtn.enable(), this.amount.setText(s.intToString(l)), this.priceIcon.show(), this.priceIcon.toggleClassName("hardCcy", !n), this.priceIcon.toggleClassName("softCcy", !!n), window.gui.scenarioManager.isBehaviourEnabled(f.DISABLE_FAKE_SHOP) || this.buyBtn.enable();
}
if (i = i || {}, e && t) {
  var n,
    d,
    u,
    h,
    p,
    m = [],
    f = [];
  for (n = 0; n < e.references.length; n++) {
    if (h = e.references[n], h.reference_virtualgift) {
      for (d = 0; d < h.reference_virtualgift.length; d++) {
        var g = h.reference_virtualgift[d];
        p = "vg_" + g.id, m[p] && "1" !== h.quantity ? m[p].quantity++ : (m[p] = {
          slot: t.appendChild(new r({
            tooltip: g.name
          })),
          quantity: parseInt(h.quantity, 10) || 1
        }, f.push(g.id));
      }
    } else if ("GOULTINE" !== h.type && (!h.reference_virtualsubscriptionlevel || !i.hideSubscriptionDays && h.reference_virtualsubscriptionlevel)) {
      var _ = parseInt(h.quantity, 10),
        v = "",
        y = !1;
      if ("NOTHING" === h.type) {
        var w = h.description.replace(/(<div>|<\/div>|\r\n)/g, "");
        "key" === w ? v = c.KEY : "infinity" === w ? _ = 1 / 0 : (y = !0, _ = parseInt(w, 10) || 1);
      }
      m["ref_" + n] = {
        slot: t.appendChild(new r({
          image: s(h.image),
          tooltip: h.name,
          forceQuantity: y
        })),
        flag: v,
        quantity: _
      };
    }
  }
  for (n = 0; n < e.promo.length; n++) {
    var b = e.promo[n];
    for (d = 0; d < b.gifts.length; d++) {
      var M = b.gifts[d];
      for (u = 0; u < M.references.length; u++) {
        if (h = M.references[u], p = "promo_" + n + "_" + d + "_" + u, h.reference_virtualgift && h.reference_virtualgift.length > 0) {
          var T = parseInt(h.reference_virtualgift[0].id, 10);
          p = "promo_" + T, f.push(T);
        }
        m[p] = {
          slot: t.appendChild(new r({
            image: s(h.image),
            tooltip: h.name
          })),
          quantity: parseInt(h.quantity, 10),
          flag: c.GIFT
        };
      }
    }
  }
  for (var C in m) {
    var I = m[C];
    I.flag === c.KEY ? I.slot.addClassNames("key") : I.flag === c.GIFT ? I.slot.addClassNames("gift") : I.quantity === 1 / 0 ? I.slot.addClassNames("infinity") : I.flag === c.CROWN_QTY ? (I.slot.setQuantity(I.quantity), I.slot.addClassNames("pinkCrownQty")) : (I.slot.setQuantity(I.quantity), I.slot.addClassNames("pinkQty"));
  }
  l.getDataMap("Items", f, function (e, t) {
    if (e) {
      return console.error(new Error("Items not found"));
    }
    var i = [];
    for (n = 0; n < f.length; n++) {
      var s = f[n],
        r = t[s];
      r && i.push(a.ITEM_DIR + r.iconId + ".png");
    }
    o.preloadImages(i, function (e) {
      for (n = 0; n < e.length; n++) {
        var t = m["vg_" + f[n]],
          i = m["promo_" + f[n]];
        t && t.slot.setImage(e[n]), i && i.slot.setImage(e[n]);
      }
    });
  });
}
for (n = 0; n < e.references.length; n++) {
  if (h = e.references[n], h.reference_virtualgift) {
    for (d = 0; d < h.reference_virtualgift.length; d++) {
      var g = h.reference_virtualgift[d];
      p = "vg_" + g.id, m[p] && "1" !== h.quantity ? m[p].quantity++ : (m[p] = {
        slot: t.appendChild(new r({
          tooltip: g.name
        })),
        quantity: parseInt(h.quantity, 10) || 1
      }, f.push(g.id));
    }
  } else if ("GOULTINE" !== h.type && (!h.reference_virtualsubscriptionlevel || !i.hideSubscriptionDays && h.reference_virtualsubscriptionlevel)) {
    var _ = parseInt(h.quantity, 10),
      v = "",
      y = !1;
    if ("NOTHING" === h.type) {
      var w = h.description.replace(/(<div>|<\/div>|\r\n)/g, "");
      "key" === w ? v = c.KEY : "infinity" === w ? _ = 1 / 0 : (y = !0, _ = parseInt(w, 10) || 1);
    }
    m["ref_" + n] = {
      slot: t.appendChild(new r({
        image: s(h.image),
        tooltip: h.name,
        forceQuantity: y
      })),
      flag: v,
      quantity: _
    };
  }
}
if (h = e.references[n], h.reference_virtualgift) {
  for (d = 0; d < h.reference_virtualgift.length; d++) {
    var g = h.reference_virtualgift[d];
    p = "vg_" + g.id, m[p] && "1" !== h.quantity ? m[p].quantity++ : (m[p] = {
      slot: t.appendChild(new r({
        tooltip: g.name
      })),
      quantity: parseInt(h.quantity, 10) || 1
    }, f.push(g.id));
  }
} else if ("GOULTINE" !== h.type && (!h.reference_virtualsubscriptionlevel || !i.hideSubscriptionDays && h.reference_virtualsubscriptionlevel)) {
  var _ = parseInt(h.quantity, 10),
    v = "",
    y = !1;
  if ("NOTHING" === h.type) {
    var w = h.description.replace(/(<div>|<\/div>|\r\n)/g, "");
    "key" === w ? v = c.KEY : "infinity" === w ? _ = 1 / 0 : (y = !0, _ = parseInt(w, 10) || 1);
  }
  m["ref_" + n] = {
    slot: t.appendChild(new r({
      image: s(h.image),
      tooltip: h.name,
      forceQuantity: y
    })),
    flag: v,
    quantity: _
  };
}
for (d = 0; d < h.reference_virtualgift.length; d++) {
  var g = h.reference_virtualgift[d];
  p = "vg_" + g.id, m[p] && "1" !== h.quantity ? m[p].quantity++ : (m[p] = {
    slot: t.appendChild(new r({
      tooltip: g.name
    })),
    quantity: parseInt(h.quantity, 10) || 1
  }, f.push(g.id));
}
if ("GOULTINE" !== h.type && (!h.reference_virtualsubscriptionlevel || !i.hideSubscriptionDays && h.reference_virtualsubscriptionlevel)) {
  var _ = parseInt(h.quantity, 10),
    v = "",
    y = !1;
  if ("NOTHING" === h.type) {
    var w = h.description.replace(/(<div>|<\/div>|\r\n)/g, "");
    "key" === w ? v = c.KEY : "infinity" === w ? _ = 1 / 0 : (y = !0, _ = parseInt(w, 10) || 1);
  }
  m["ref_" + n] = {
    slot: t.appendChild(new r({
      image: s(h.image),
      tooltip: h.name,
      forceQuantity: y
    })),
    flag: v,
    quantity: _
  };
}
if ("NOTHING" === h.type) {
  var w = h.description.replace(/(<div>|<\/div>|\r\n)/g, "");
  "key" === w ? v = c.KEY : "infinity" === w ? _ = 1 / 0 : (y = !0, _ = parseInt(w, 10) || 1);
}
for (n = 0; n < e.promo.length; n++) {
  var b = e.promo[n];
  for (d = 0; d < b.gifts.length; d++) {
    var M = b.gifts[d];
    for (u = 0; u < M.references.length; u++) {
      if (h = M.references[u], p = "promo_" + n + "_" + d + "_" + u, h.reference_virtualgift && h.reference_virtualgift.length > 0) {
        var T = parseInt(h.reference_virtualgift[0].id, 10);
        p = "promo_" + T, f.push(T);
      }
      m[p] = {
        slot: t.appendChild(new r({
          image: s(h.image),
          tooltip: h.name
        })),
        quantity: parseInt(h.quantity, 10),
        flag: c.GIFT
      };
    }
  }
}
for (d = 0; d < b.gifts.length; d++) {
  var M = b.gifts[d];
  for (u = 0; u < M.references.length; u++) {
    if (h = M.references[u], p = "promo_" + n + "_" + d + "_" + u, h.reference_virtualgift && h.reference_virtualgift.length > 0) {
      var T = parseInt(h.reference_virtualgift[0].id, 10);
      p = "promo_" + T, f.push(T);
    }
    m[p] = {
      slot: t.appendChild(new r({
        image: s(h.image),
        tooltip: h.name
      })),
      quantity: parseInt(h.quantity, 10),
      flag: c.GIFT
    };
  }
}
for (u = 0; u < M.references.length; u++) {
  if (h = M.references[u], p = "promo_" + n + "_" + d + "_" + u, h.reference_virtualgift && h.reference_virtualgift.length > 0) {
    var T = parseInt(h.reference_virtualgift[0].id, 10);
    p = "promo_" + T, f.push(T);
  }
  m[p] = {
    slot: t.appendChild(new r({
      image: s(h.image),
      tooltip: h.name
    })),
    quantity: parseInt(h.quantity, 10),
    flag: c.GIFT
  };
}
if (h = M.references[u], p = "promo_" + n + "_" + d + "_" + u, h.reference_virtualgift && h.reference_virtualgift.length > 0) {
  var T = parseInt(h.reference_virtualgift[0].id, 10);
  p = "promo_" + T, f.push(T);
}
for (var C in m) {
  var I = m[C];
  I.flag === c.KEY ? I.slot.addClassNames("key") : I.flag === c.GIFT ? I.slot.addClassNames("gift") : I.quantity === 1 / 0 ? I.slot.addClassNames("infinity") : I.flag === c.CROWN_QTY ? (I.slot.setQuantity(I.quantity), I.slot.addClassNames("pinkCrownQty")) : (I.slot.setQuantity(I.quantity), I.slot.addClassNames("pinkQty"));
}
if (e) {
  return console.error(new Error("Items not found"));
}
for (n = 0; n < f.length; n++) {
  var s = f[n],
    r = t[s];
  r && i.push(a.ITEM_DIR + r.iconId + ".png");
}
for (n = 0; n < e.length; n++) {
  var t = m["vg_" + f[n]],
    i = m["promo_" + f[n]];
  t && t.slot.setImage(e[n]), i && i.slot.setImage(e[n]);
}
if (this.slotImg = n.createChild("div", {
  className: "slotImg"
}), t.showReferences && (this.slotItems = n.createChild("div", {
  className: "slotItems"
})), this.slotPromoImg = n.createChild("div", {
  className: "slotPromoImg"
}), t.showDescription && (this.description = i.createChild("div", {
  className: "description"
})), i.createChild("div", {
  className: "slotBorder"
}), t.canTapImage && (u(i), i.on("tap", o.bind(this))), t.showTitle) {
  var a = this.createChild("div", {
    className: "labels"
  });
  this.title = a.createChild("div", {
    className: "title"
  }), this.subtitle = a.createChild("div", {
    className: "subtitle"
  });
}
if (t.showButtons) {
  var s = this._articleButtons = this.appendChild(new p());
  s.on("tapIAPButton", function () {
    e.emit("tapIAPButton");
  }), s.on("tapHardButton", function () {
    e.emit("tapHardButton");
  }), s.on("tapSoftButton", function () {
    e.emit("tapSoftButton");
  });
}
if ("banner" === t.promoType) {
  this._promoBanner = i.createChild("div", {
    className: "promoBanner"
  }), this._promoBannerOver = i.createChild("div", {
    className: "promoBannerOver"
  }), this._promoBannerFree = i.createChild("div", {
    className: "promoBannerFree"
  });
} else if ("corner" === t.promoType) {
  var r = this._promoCorner = i.createChild("div", {
    className: "promoCorner"
  });
  r.createChild("div", {
    className: "promoDummy"
  });
  var l = r.createChild("div", {
    className: "promoElement"
  });
  l.createChild("div", {
    className: "margin"
  });
  var c = l.createChild("div", {
    className: "rotatedContainer"
  });
  this._promoRate = c.createChild("div", {
    className: "text"
  });
} else {
  "strip" === t.promoType && (this._promoStrip = this.createChild("div", {
    className: "promoStrip"
  }));
}
if ("corner" === t.promoType) {
  var r = this._promoCorner = i.createChild("div", {
    className: "promoCorner"
  });
  r.createChild("div", {
    className: "promoDummy"
  });
  var l = r.createChild("div", {
    className: "promoElement"
  });
  l.createChild("div", {
    className: "margin"
  });
  var c = l.createChild("div", {
    className: "rotatedContainer"
  });
  this._promoRate = c.createChild("div", {
    className: "text"
  });
} else {
  "strip" === t.promoType && (this._promoStrip = this.createChild("div", {
    className: "promoStrip"
  }));
}
for (var u = e.metas || [], p = 0; p < u.length; p++) {
  var _ = u[p];
  if (parseInt(_.id, 10) === w && _.metas.length > 0) {
    var v = _.metas.length > 0 && b[_.metas[0].id];
    v && this.addClassNames(v);
  }
}
if (parseInt(_.id, 10) === w && _.metas.length > 0) {
  var v = _.metas.length > 0 && b[_.metas[0].id];
  v && this.addClassNames(v);
}
if (e.isVisible() && e.rootElement && e.currentPriceText && e.currentPriceText.rootElement) {
  var t = e.rootElement.getBoundingClientRect();
  if (0 !== t.width && 0 !== t.height) {
    e.currentPriceText.setStyle("fontSize", f + "px");
    var i = e.currentPriceText.rootElement.getBoundingClientRect(),
      n = t.height * _ / (i.height / f),
      o = (t.width - g) / (i.width / f),
      a = Math.min(n, o);
    o = (t.width - g - a) / (i.width / f);
    var s = Math.min(n, o),
      r = s * v;
    e.currentPriceText.setStyle("fontSize", s + "px"), e.currentIcon.setStyles({
      width: Math.floor(s) + "px",
      height: Math.floor(s) + "px"
    }), e.originalPriceText.setStyle("fontSize", r + "px"), e.originalIcon.setStyles({
      width: Math.floor(r) + "px",
      height: Math.floor(r) + "px"
    });
  }
}
if (0 !== t.width && 0 !== t.height) {
  e.currentPriceText.setStyle("fontSize", f + "px");
  var i = e.currentPriceText.rootElement.getBoundingClientRect(),
    n = t.height * _ / (i.height / f),
    o = (t.width - g) / (i.width / f),
    a = Math.min(n, o);
  o = (t.width - g - a) / (i.width / f);
  var s = Math.min(n, o),
    r = s * v;
  e.currentPriceText.setStyle("fontSize", s + "px"), e.currentIcon.setStyles({
    width: Math.floor(s) + "px",
    height: Math.floor(s) + "px"
  }), e.originalPriceText.setStyle("fontSize", r + "px"), e.originalIcon.setStyles({
    width: Math.floor(r) + "px",
    height: Math.floor(r) + "px"
  });
}
if (this._clearHintArrow(), this.iapButton.hide(), this.hardButton.hide(), this.softButton.hide(), this.hardButton.delClassNames("twoPrices"), this.iapButton.delClassNames("twoPrices"), e.is_free) {
  return this.priceButtons.toggleClassName("promo", !1), a(this.hardButton, 0, 0, !1, !0), this.hardButton.show(), void this.checkButtons();
}
if (i && (this.priceButtons.toggleClassName("promo", !1), a(this.iapButton, e._inAppPrice, e.original_price, !0, !1), this.iapButton.show()), e._hardPrice) {
  this.priceButtons.toggleClassName("promo", !!t), a(this.hardButton, e._hardPrice, t, !1, !1), a(this.softButton, e._softPrice, e._softOriginalPrice, !1, !1), this.hardButton.show();
  var n = !e.hasOwnProperty("_softPrice");
  this.softButton.toggleDisplay(!n), n && i && (this.iapButton.addClassNames("twoPrices"), this.hardButton.addClassNames("twoPrices")), n || this.hardButton.addClassNames("twoPrices");
}
if (e) {
  return console.error(e);
}
if (i) {
  if (e === i) {
    return;
  }
  this._deactivateTopTab(i);
}
if (e === i) {
  return;
}
if (this.setSubCategoryRowVisible(!1), t === E) {
  this.closeCategory(this.openedCategory), this._setView(A);
} else {
  if (this._isSameCategory(t)) {
    return;
  }
  if (e.sublist) {
    for (var n = this.subCategoryRow.getChildren(), o = 0; o < n.length; o++) {
      this.subCategoryRow.removeChild(n[o]);
    }
    this.subCategoryRow.appendChild(e.sublist), this.setSubCategoryRowVisible(!0), k && (e.sublist.deselectAll(), this.selectedSubTab = null);
  }
  this._openCategory(t);
}
if (this._isSameCategory(t)) {
  return;
}
if (e.sublist) {
  for (var n = this.subCategoryRow.getChildren(), o = 0; o < n.length; o++) {
    this.subCategoryRow.removeChild(n[o]);
  }
  this.subCategoryRow.appendChild(e.sublist), this.setSubCategoryRowVisible(!0), k && (e.sublist.deselectAll(), this.selectedSubTab = null);
}
for (var n = this.subCategoryRow.getChildren(), o = 0; o < n.length; o++) {
  this.subCategoryRow.removeChild(n[o]);
}
if (e) {
  k = !1;
  var t = this.topTabsList.getChild(e);
  if (this._activateTopTab(t), !t.sublist || !this.selectedSubTab) {
    return void (k = !0);
  }
  t.sublist.selectItem(this.selectedSubTab), k = !0;
}
if (this._activateTopTab(t), !t.sublist || !this.selectedSubTab) {
  return void (k = !0);
}
if (this._currentViewName !== e) {
  this.deactivateAllCategories(), this._previousViewName = this._currentViewName, this._currentViewName = e;
  for (var i = this.viewContainer, n = i.getChildren(), o = 0; o < n.length; o++) {
    i.removeChild(n[o]);
  }
  var a = this._views[e];
  a && (i.appendChild(a), a.update(t));
}
for (var i = this.viewContainer, n = i.getChildren(), o = 0; o < n.length; o++) {
  i.removeChild(n[o]);
}
if (this._currentViewName === I) {
  var t = this._views,
    i = t[I];
  i.saveScrollPosition();
}
for (var u in r) {
  var h = r[u];
  h.on("displayItemDetails", this._displayItemDetails.bind(this)), h.on("purchaseIAP", e), h.on("purchaseOnAnkama", t), h.on("showSubCategoryRow", i), h.on("hideSubCategoryRow", o), h.on("openCategory", function (e) {
    d._openCategory(e);
  });
}
for (var t = this.subCategoryRow.getChildren(), i = 0; i < t.length; i++) {
  this.subCategoryRow.removeChild(t[i]);
}
if (this._isInitializing = !1, this.viewContainer.delClassNames("spinner"), this.isOpen()) {
  this.wallet.goultinesBtn.enable(), this.wallet.bonusPackBtn.enable();
  var t = e.home;
  this.setCategories(t.categories);
  var i = this.topTabsList.getChildren();
  i.length && this._activateTopTab(i[0]);
  var n;
  if (t._highlightImageArticle) {
    var o = this.validateArticles([t._highlightImageArticle]);
    o.length && (n = o[0]);
  }
  var a;
  if (t.gondolahead_article && (a = this.validateArticles(t.gondolahead_article)), t._highlightCarouselElements && this.validateArticles(t._highlightCarouselArticles), t.hightlight_popup) {
    for (var r = [], l = 0, c = t.hightlight_popup.length; l < c; l += 1) {
      var d = t.hightlight_popup[l];
      d.external_article && r.push(d.external_article);
    }
    this.validateArticles(r);
  }
  var u = {
    gondolaHeadArticles: a,
    highlightCarouselArticles: t._highlightCarouselElements,
    highlightImageArticle: n
  };
  if (this._views[A].update(u), this._categoryToOpenWhenReady && this._navigateToCategory(this._categoryToOpenWhenReady), s.isAvailable() && w.checkPendingPurchases(), this._articleIdToOpen) {
    var h = this.articlesMap[this._articleIdToOpen];
    h ? this._displayItemDetails(this._articleIdToOpen) : console.error(new Error("ShopWindow: Cannot find article: " + this._articleIdToOpen));
  }
}
if (t._highlightImageArticle) {
  var o = this.validateArticles([t._highlightImageArticle]);
  o.length && (n = o[0]);
}
if (t.gondolahead_article && (a = this.validateArticles(t.gondolahead_article)), t._highlightCarouselElements && this.validateArticles(t._highlightCarouselArticles), t.hightlight_popup) {
  for (var r = [], l = 0, c = t.hightlight_popup.length; l < c; l += 1) {
    var d = t.hightlight_popup[l];
    d.external_article && r.push(d.external_article);
  }
  this.validateArticles(r);
}
for (var r = [], l = 0, c = t.hightlight_popup.length; l < c; l += 1) {
  var d = t.hightlight_popup[l];
  d.external_article && r.push(d.external_article);
}
if (this._views[A].update(u), this._categoryToOpenWhenReady && this._navigateToCategory(this._categoryToOpenWhenReady), s.isAvailable() && w.checkPendingPurchases(), this._articleIdToOpen) {
  var h = this.articlesMap[this._articleIdToOpen];
  h ? this._displayItemDetails(this._articleIdToOpen) : console.error(new Error("ShopWindow: Cannot find article: " + this._articleIdToOpen));
}
if (this._isSameCategory(e.categoryId)) {
  var t = this._views[I];
  t.setSpinnerVisible(!1), t.setLoadingAdditionalContent(!1), this._showErrorPopup();
}
if (!this._isOpened) {
  return void (this._needsResize = !0);
}
for (var t in e) {
  e[t].resize(this.viewContainer);
}
for (var t in e) {
  w.enrichWithSoftPrice(e[t]);
}
for (var n in i) {
  i[n].updateArticlesPrices(this.articlesMap);
}
for (var i in t) {
  t[i].clear();
}
if (e.id !== O) {
  a.categoriesName[e.id] = e.name;
  var o = a.topTabsList.createChild("div", {
      name: e.id,
      className: "tab"
    }),
    s = o.createChild("div", {
      className: "icon"
    });
  if (s.addClassNames("icon-" + e.id), p(o), o.on("tap", n.bind(o)), b.addTooltip(o, e.name), e.child.length) {
    var r = o.sublist = new d();
    r.on("selected", t), r.on("deselected", i), a._addSubCategories(r, e.child);
  }
}
if (s.addClassNames("icon-" + e.id), p(o), o.on("tap", n.bind(o)), b.addTooltip(o, e.name), e.child.length) {
  var r = o.sublist = new d();
  r.on("selected", t), r.on("deselected", i), a._addSubCategories(r, e.child);
}
for (var s = 0; s < e.length; s++) {
  o(e[s]);
}
for (var i = 0; i < t.length; i++) {
  var n = t[i];
  this.categoriesName[n.id] = n.name;
  var o = this._createCategoryLabel(n),
    a = e.addItem({
      id: n.id,
      element: o
    });
  a.addClassNames("tab");
}
if (i) {
  if (i.page !== e.page - 1) {
    return;
  }
  i.page = e.page, i.articles = i.articles.concat(e.articles);
} else {
  this.categoriesData[t] = e;
}
if (i.page !== e.page - 1) {
  return;
}
for (var t = w.validateArticles(e), i = 0; i < t.length; i++) {
  var n = t[i];
  this.articlesMap[n.id] = n;
}
if (0 === e.totalArticles) {
  return void t.showNoResult(this.categoriesName[this.openedCategory], ~~e.categoryId);
}
if (this.selectedTopTab) {
  if (this.setSubCategoryRowVisible(!1), this._views[S] && (this.reactivateCategories(), this._views[I].restoreScrollPosition()), this.selectedTopTab === E && this._views[A]) {
    return this._views[A].clear(), this.topTabsList.clearContent(), void this._reinitializeShop();
  }
  var e = this.topTabsList.getChild(this.selectedTopTab);
  this.closeCategory(this.selectedTopTab), this.categoriesData[this.selectedTopTab] = null, this._deactivateTopTab(e), this._activateTopTab(e);
}
if (this.setSubCategoryRowVisible(!1), this._views[S] && (this.reactivateCategories(), this._views[I].restoreScrollPosition()), this.selectedTopTab === E && this._views[A]) {
  return this._views[A].clear(), this.topTabsList.clearContent(), void this._reinitializeShop();
}
if (i.setConstraints(n) && i.resize(this.viewContainer), i.setClassNames(["itemsListView", "_" + e]), !this._isSameCategory(e)) {
  (this.openedCategory || 0 === this.openedCategory) && this.closeCategory(this.openedCategory), B[e] && this.showSubCategoryRow(!1), this.openedCategory = e;
  var o = this.categoriesData[this.openedCategory];
  o ? this._loadCategory(o) : this._saveAndExecuteAction(function () {
    i.setSpinnerVisible(!0), t._requestPageOfCategory(e, 1);
  });
}
if (this.openedCategory) {
  this._views[I].setLoadingAdditionalContent(!0);
  var e = this.categoriesData[this.openedCategory];
  return e ? void this._requestPageOfCategory(this.openedCategory, e.page + 1) : console.error(new Error("Trying to load additional content of a non-opened category."));
}
for (var e = this.gondolaHead.getChildren(), t = 0; t < e.length; t++) {
  e[t].clear();
}
if (this.emit("hideSubCategoryRow"), e) {
  this.clear();
  var m = this.highlightCarouselImage,
    f = e.highlightCarouselArticles;
  m.toggleDisplay(f), f && (m.update(), this.highlightCarouselArticles = e.highlightCarouselArticles, m.setPages(t(e.highlightCarouselArticles)));
  var v,
    y,
    w = this,
    b = e.highlightImageArticle;
  if (b) {
    this.highlightImage.show();
    var M = c(this.highlightImage.rootElement);
    y = o(M.width, M.height), this.highlightArticleBox = d(b, y, {
      promoType: "banner"
    }), this.highlightImage.appendChild(this.highlightArticleBox);
  } else {
    this.highlightImage.hide();
  }
  var T = e.gondolaHeadArticles;
  if (T) {
    var C = c(this.gondolaHead.rootElement),
      I = ~~C.width + 2 * h,
      A = ~~C.height - p,
      S = ~~(A * _) + 2 * h,
      E = Math.min(T.length, ~~(I / S)),
      N = I - S * E,
      x = ~~(N / E),
      L = S + x;
    S = L / A > g ? A * g - 2 * h : L - 2 * h, y = o(S, A);
    for (var O = 0; O < E; O++) {
      v = d(T[O], y, {
        promoType: "corner"
      }), this.gondolaHead.appendChild(v);
    }
  }
}
if (b) {
  this.highlightImage.show();
  var M = c(this.highlightImage.rootElement);
  y = o(M.width, M.height), this.highlightArticleBox = d(b, y, {
    promoType: "banner"
  }), this.highlightImage.appendChild(this.highlightArticleBox);
} else {
  this.highlightImage.hide();
}
if (T) {
  var C = c(this.gondolaHead.rootElement),
    I = ~~C.width + 2 * h,
    A = ~~C.height - p,
    S = ~~(A * _) + 2 * h,
    E = Math.min(T.length, ~~(I / S)),
    N = I - S * E,
    x = ~~(N / E),
    L = S + x;
  S = L / A > g ? A * g - 2 * h : L - 2 * h, y = o(S, A);
  for (var O = 0; O < E; O++) {
    v = d(T[O], y, {
      promoType: "corner"
    }), this.gondolaHead.appendChild(v);
  }
}
for (var O = 0; O < E; O++) {
  v = d(T[O], y, {
    promoType: "corner"
  }), this.gondolaHead.appendChild(v);
}
for (var i = 0; i < t.length; i++) {
  var n = t[i],
    o = n.articleId;
  if (o) {
    var a = e[o.toString()];
    a ? n.updatePrice(a) : console.error(new Error("Article " + o + " missing for an ArticleBox"));
  }
}
if (o) {
  var a = e[o.toString()];
  a ? n.updatePrice(a) : console.error(new Error("Article " + o + " missing for an ArticleBox"));
}
if (!(t._pageCount <= 1)) {
  var n = p(e);
  i = n.x, t.isTapping = !0;
}
if (!(t._pageCount <= 1) && t.isTapping) {
  var n = p(e),
    o = n.x - i;
  o > _ && (t.isTapping = !1, t._scrollToPrevElement()), o < -_ && (t.isTapping = !1, t._scrollToNextElement());
}
if (i <= 0) {
  return clearInterval(e._interval);
}
for (var o = this, a = 0; a < e.length; a++) {
  this._carouselPages[a] = this._carouselWrapper.createChild("div", {
    className: ["carouselPage", "page" + a],
    hidden: !0
  }), this._banners[a] = this._carouselPages[a].createChild("div", {
    className: ["banner", "spinner"]
  }), this._banners[a].setStyles({
    width: i + "px",
    height: n + "px"
  }), c(this._banners[a]), this._bannerTitle && (this._bannerTitles[a] = this._carouselPages[a].createChild("div", {
    className: "bannerTitle"
  }), c(this._bannerTitles[a])), this._date[a] = this._carouselPages[a].createChild("div", {
    className: "date"
  }), this._dots[a] = this._dotsWrapper.createChild("div", {
    className: "dot"
  });
}
for (a = 0; a < e.length; a++) {
  this._dots[a].show(), this._carouselPages[a].show();
  var s = e[a],
    r = s.imageUrl;
  this._banners[a].delClassNames(["spinner", "noNewsFallback"]), r ? this._banners[a].setStyle("backgroundImage", d(r)) : s.className && this._banners[a].addClassNames(s.className), this._date[a].setText(s.date), this._date[a].show(), this._tapParams[a] = s.tapParam, this._bannerTitle && (this._bannerTitles[a].setText(s.name), this._bannerTitles[a].on("tap", function () {
    o.isTapping && o._onTap(o._tapParams[o._currentPage]);
  })), this._banners[a].on("tap", function () {
    o.isTapping && o._onTap(o._tapParams[o._currentPage]);
  });
}
if (this._endDate) {
  var e = this;
  this._interval && clearInterval(this._interval), this._interval = setInterval(function () {
    o(e);
  }, 1e3);
}
if (e === -1 || 1 === e) {
  var i = this;
  if (!this._transitioning) {
    this._clearTimeout(), this._currentPage = (this._currentPage + this._pageCount + e) % this._pageCount;
    var n = e === -1 ? 0 : 2 * t;
    this._carouselPages[this._currentPage].setStyle("left", n + "px"), r.forceReflow(this._carouselWrapper), r.cssTransform(this._carouselWrapper, "translate(" + (1 === e ? 2 * -t : 0) + "px, 0px)"), this._updateDots(), this._transitioning = !0, setTimeout(function () {
      i._resetTransform(), i._transitioning = !1, i._registerNextPagesChange();
    }, f + 200);
  }
}
if (!this._transitioning) {
  this._clearTimeout(), this._currentPage = (this._currentPage + this._pageCount + e) % this._pageCount;
  var n = e === -1 ? 0 : 2 * t;
  this._carouselPages[this._currentPage].setStyle("left", n + "px"), r.forceReflow(this._carouselWrapper), r.cssTransform(this._carouselWrapper, "translate(" + (1 === e ? 2 * -t : 0) + "px, 0px)"), this._updateDots(), this._transitioning = !0, setTimeout(function () {
    i._resetTransform(), i._transitioning = !1, i._registerNextPagesChange();
  }, f + 200);
}
for (var e = 0; e < this._pageCount; e++) {
  this._dots[e].toggleClassName("selected", this._currentPage === e);
}
for (var e = 0; e < this._pageCount; e++) {
  this._banners[e].setStyle("backgroundImage", "initial");
}
for (var t = 0; t < this._pageCount; t++) {
  var i = t === this._currentPage - 1 || t - this._pageCount === this._currentPage - 1,
    n = t === this._currentPage,
    o = t === this._currentPage + 1 || t + this._pageCount === this._currentPage + 1,
    a = i || n || o;
  if (a) {
    var s = 2 * e;
    n ? s = 0 | e : i && (s = 0), this._carouselPages[t].setStyle("left", s + "px"), this._carouselPages[t].show();
  } else {
    this._carouselPages[t].hide();
  }
}
if (a) {
  var s = 2 * e;
  n ? s = 0 | e : i && (s = 0), this._carouselPages[t].setStyle("left", s + "px"), this._carouselPages[t].show();
} else {
  this._carouselPages[t].hide();
}
for (var e = this._getArticleBoxes(), t = 0; t < e.length; t++) {
  e[t].clear();
}
for (var t = 0; t < this.articlesPerColumn; t++) {
  this._itemsList.createChild("div", {
    className: "itemsLine"
  });
}
if (this._computeMargins(e), !this.constraints.useBonusPackDisplay) {
  var t = this._getItemsMap(),
    i = this.getArticleBoxSize();
  for (var n in t) {
    t[n].resize(i);
  }
  this._itemsScroll.refresh(), this.emit("nbArticlesVisibleUpdated", (this.articlesPerLine + 1) * this.articlesPerColumn);
}
for (var n in t) {
  t[n].resize(i);
}
for (var i in A) {
  var n = e.hasOwnProperty(i) ? e[i] : A[i];
  this.constraints[i] !== e[i] && (this.constraints[i] = n, t = !0);
}
for (var a = 0, s = this._itemsList.getChildren(), r = s.length, u = this, h = 0; h < e.length; h++) {
  var p = this.constraints.useBonusPackDisplay && 0 === h,
    m = {
      showButtons: !0,
      showTitle: !0,
      promoType: this.constraints.promoType,
      showDescription: this.constraints.showArticleDescription,
      canTapImage: this.constraints.canTapImage,
      showReferences: p
    },
    f = e[h].showCountDown;
  m.promoType = f ? "banner" : m.promoType;
  var _ = this.getArticleBoxSize();
  this.constraints.useBonusPackDisplay && (_.boxWidth = 0 === h ? T : b, _.boxHeight = M);
  var v = new l(e[h], _, m);
  v.on("tapIAPButton", t), v.on("tapHardButton", i), v.on("tapSoftButton", n), v.on("tapItemImage", o), s[a % r].appendChild(v), a++;
}
if (y.length > 0 && y[0].setStyle("transform", "unset"), this._itemsScroll.refresh(), this.constraints.useBonusPackDisplay && y.length && e.length && this.rootElement) {
  var w = this._boxHeight / (M + C);
  y[0].setStyle("transform", "scale(" + w + ")");
  var I = d(this.rootElement),
    A = T + g;
  A += (b + 2 * g) * (e.length - 1), A *= w, A += C, this._itemsList.setStyle("width", A + "px");
  var S = Math.max(0, (I.width - A) / 2);
  this._itemsList.setStyle("margin-left", S + "px"), this._itemsScroll.refresh(!0);
}
for (var e = this._itemsList.getChildren(), t = 0; t < e.length; t++) {
  e[t].clearContent();
}
if (e !== this.articlesPerColumn) {
  this.articlesPerColumn = e;
  var t,
    i = [],
    n = this._itemsList.getChildren(),
    o = n.length - e;
  for (t = 0; t < n.length; t++) {
    for (var a = n[t], s = a.getChildren(), r = 0; r < s.length; r++) {
      i.push(a.removeChild(s[r]));
    }
    o > 0 && (a.destroy(), o--);
  }
  if (n.length < e) {
    var l = e - n.length;
    for (t = 0; t < l; t++) {
      this._itemsList.createChild("div", {
        className: "itemsLine"
      });
    }
  }
  if (i.length) {
    for (n = this._itemsList.getChildren(), t = 0; t < i.length; t++) {
      n[t % e].appendChild(i[t]);
    }
  }
}
for (t = 0; t < n.length; t++) {
  for (var a = n[t], s = a.getChildren(), r = 0; r < s.length; r++) {
    i.push(a.removeChild(s[r]));
  }
  o > 0 && (a.destroy(), o--);
}
for (var a = n[t], s = a.getChildren(), r = 0; r < s.length; r++) {
  i.push(a.removeChild(s[r]));
}
if (n.length < e) {
  var l = e - n.length;
  for (t = 0; t < l; t++) {
    this._itemsList.createChild("div", {
      className: "itemsLine"
    });
  }
}
for (t = 0; t < l; t++) {
  this._itemsList.createChild("div", {
    className: "itemsLine"
  });
}
if (i.length) {
  for (n = this._itemsList.getChildren(), t = 0; t < i.length; t++) {
    n[t % e].appendChild(i[t]);
  }
}
for (n = this._itemsList.getChildren(), t = 0; t < i.length; t++) {
  n[t % e].appendChild(i[t]);
}
if (this._boxHeight = v + r, t.columns) {
  var l = n - (_ + 2 * g) * t.columns,
    c = ~~(l / t.columns);
  this._boxWidth = _ + c;
} else {
  this._boxWidth = _ + r;
}
for (var e = [], t = this._itemsList.getChildren(), i = 0; i < t.length; i++) {
  e = e.concat(t[i].getChildren());
}
for (var t = this._getArticleBoxes(), i = 0; i < t.length; i++) {
  var n = t[i],
    o = n.articleId;
  if (o) {
    var a = e[o];
    a ? n.updatePrice(a) : console.error(new Error("Article " + o + " missing for an ArticleBox"));
  }
}
if (o) {
  var a = e[o];
  a ? n.updatePrice(a) : console.error(new Error("Article " + o + " missing for an ArticleBox"));
}
for (var e = {}, t = this._itemsList.getChildren(), i = 0; i < t.length; i++) {
  for (var n = t[i].getChildren(), o = 0; o < n.length; o++) {
    var a = n[o];
    e[a.getWuiName()] = a;
  }
}
for (var n = t[i].getChildren(), o = 0; o < n.length; o++) {
  var a = n[o];
  e[a.getWuiName()] = a;
}
for (var t = 0; t < e.length; t++) {
  var i = e[t],
    n = i.text,
    o = i.isMalus ? ["malus"] : [];
  if ("string" == typeof n) {
    this._conditionsBox.addRow(n, o);
  } else {
    for (var a = 0; a < n.length; a++) {
      this._conditionsBox.addRow(n[a], o);
    }
  }
}
if ("string" == typeof n) {
  this._conditionsBox.addRow(n, o);
} else {
  for (var a = 0; a < n.length; a++) {
    this._conditionsBox.addRow(n[a], o);
  }
}
for (var a = 0; a < n.length; a++) {
  this._conditionsBox.addRow(n[a], o);
}
if (this._effectsBox.clearContent(), this._effectsBox.show(), e.hideEffects) {
  this._effectsBox.addRow(s("ui.set.secretBonus"));
} else {
  var n = b.getSortedEffectInstances(e);
  if (n && n.length) {
    for (i = 0; i < n.length; i++) {
      var o = n[i];
      if (!A[o.effectId]) {
        if ("" !== o.description) {
          var a = o.effect.bonusType,
            r = [];
          a === -1 ? r.push("malus") : 1 === a && r.push("bonus"), this._effectsBox.addRow(o.description, r);
        } else {
          console.error("Effect " + o.effectId + " not supported for item " + e.getProperty("id"));
        }
      }
    }
  }
  this._effectsBox.hasRow() || this._effectsBox.addRow(s("tablet.common.none", 0), ["placeholder"]);
}
if (n && n.length) {
  for (i = 0; i < n.length; i++) {
    var o = n[i];
    if (!A[o.effectId]) {
      if ("" !== o.description) {
        var a = o.effect.bonusType,
          r = [];
        a === -1 ? r.push("malus") : 1 === a && r.push("bonus"), this._effectsBox.addRow(o.description, r);
      } else {
        console.error("Effect " + o.effectId + " not supported for item " + e.getProperty("id"));
      }
    }
  }
}
for (i = 0; i < n.length; i++) {
  var o = n[i];
  if (!A[o.effectId]) {
    if ("" !== o.description) {
      var a = o.effect.bonusType,
        r = [];
      a === -1 ? r.push("malus") : 1 === a && r.push("bonus"), this._effectsBox.addRow(o.description, r);
    } else {
      console.error("Effect " + o.effectId + " not supported for item " + e.getProperty("id"));
    }
  }
}
if (!A[o.effectId]) {
  if ("" !== o.description) {
    var a = o.effect.bonusType,
      r = [];
    a === -1 ? r.push("malus") : 1 === a && r.push("bonus"), this._effectsBox.addRow(o.description, r);
  } else {
    console.error("Effect " + o.effectId + " not supported for item " + e.getProperty("id"));
  }
}
if ("" !== o.description) {
  var a = o.effect.bonusType,
    r = [];
  a === -1 ? r.push("malus") : 1 === a && r.push("bonus"), this._effectsBox.addRow(o.description, r);
} else {
  console.error("Effect " + o.effectId + " not supported for item " + e.getProperty("id"));
}
if (0 === l.length && 0 === c.length ? this._conditionsBox.addRow(s("tablet.common.none", 1), ["placeholder"]) : (this._displayConditions(l), this._displayConditions(c)), this._characBox.clearContent(), e.getProperty("isWeapon")) {
  this._characBox.show();
  var d = e.getProperty("statsFormatted");
  if (0 === d.length) {
    this._characBox.addRow(s("tablet.common.none", 1), ["placeholder"]);
  } else {
    for (i = 0; i < d.length; i++) {
      this._characBox.addRow(d[i]);
    }
  }
} else {
  this._characBox.hide();
}
if (0 === d.length) {
  this._characBox.addRow(s("tablet.common.none", 1), ["placeholder"]);
} else {
  for (i = 0; i < d.length; i++) {
    this._characBox.addRow(d[i]);
  }
}
for (i = 0; i < d.length; i++) {
  this._characBox.addRow(d[i]);
}
for (var o = 0; o < e.length; o++) {
  i = e[o], n += i.getProperty("realWeight");
  var a = new _({
    itemData: i
  });
  a.on("tap", t), this._itemsList.appendChild(a);
}
if (this.emit("showSubCategoryRow", this._backToCategory), e) {
  this._itemsListRow.hide(), this._effectsBox.hide(), this._conditionsBox.hide(), this._characBox.hide(), this._backToCategoryText.setText(s("tablet.shop.backTo", e.categoryName));
  var t = e.article;
  this._articleId = t.id, t.name || (console.error("Shop: article name missing for id " + t.id), t.name = ""), this._name.setText(t.name.toUpperCase()), this._description.setHtml(t.description), T.allLinksOnTargetBlank(this._description), this._articleBox.update(t), this._articleButtons.update(t), this._setClassSymbol(), this._characterDisplay.hide(), this._islandImage.addClassNames("spinner");
  var i = t.promo && t.promo.length,
    n = t._promoRate,
    a = t.is_free,
    r = t.enddate && t.showCountDown;
  if (i || n || r || a) {
    this._leftColumnScroller.addClassNames("promo"), this.promoBanner.toggleDisplay(Boolean(n) && !a), this.promoBannerFree.toggleDisplay(a), this.promoDescription.toggleDisplay(!!i);
    var l, c;
    if (i || n || !r ? (n || r) && (l = "", n && (l += n), r && (n && (l += " "), c = new Date(t.enddate), l += s("tablet.common.until", c.toLocaleDateString()))) : (c = new Date(t.enddate), l = s("tablet.common.available", s("tablet.common.until", c.toLocaleDateString()))), this.promoBanner.setText(l), this.promoBannerFree.setText(s("ui.shop.free")), i) {
      for (var d = t.promo, h = "", p = s("ui.common.colon"), m = 0; m < i - 1; m++) {
        h += d[m].name + p + d[m].description + "<br /><br />";
      }
      h += d[i - 1].name + p + d[i - 1].description, this.promoDescription.setHtml(h);
    }
  } else {
    this._leftColumnScroller.delClassNames("promo"), this.promoBanner.hide(), this.promoBannerFree.hide(), this.promoDescription.hide();
  }
  this._leftColumnScroller.refresh();
  var f = this,
    g = t.itemsId;
  this.resetOutfits(), u.getItems(g, function (e, t) {
    if (e) {
      return console.error("ItemDetailsView#update: getItems", e);
    }
    var i = t.length;
    if (g.length !== i) {
      return console.error(new Error("Some items are missing, ids requested: " + g + ", items get: " + t));
    }
    i && (1 === i ? f._displayOneItem(t[0]) : f._displayMultipleItems(t));
    for (var n = [], a = 0; a < i; a++) {
      var s = t[a];
      s.isEquippable() && n.push(s);
    }
    n.length ? f.generateOutfits(n) : f.setLook(o());
  });
}
if (i || n || r || a) {
  this._leftColumnScroller.addClassNames("promo"), this.promoBanner.toggleDisplay(Boolean(n) && !a), this.promoBannerFree.toggleDisplay(a), this.promoDescription.toggleDisplay(!!i);
  var l, c;
  if (i || n || !r ? (n || r) && (l = "", n && (l += n), r && (n && (l += " "), c = new Date(t.enddate), l += s("tablet.common.until", c.toLocaleDateString()))) : (c = new Date(t.enddate), l = s("tablet.common.available", s("tablet.common.until", c.toLocaleDateString()))), this.promoBanner.setText(l), this.promoBannerFree.setText(s("ui.shop.free")), i) {
    for (var d = t.promo, h = "", p = s("ui.common.colon"), m = 0; m < i - 1; m++) {
      h += d[m].name + p + d[m].description + "<br /><br />";
    }
    h += d[i - 1].name + p + d[i - 1].description, this.promoDescription.setHtml(h);
  }
} else {
  this._leftColumnScroller.delClassNames("promo"), this.promoBanner.hide(), this.promoBannerFree.hide(), this.promoDescription.hide();
}
if (i || n || !r ? (n || r) && (l = "", n && (l += n), r && (n && (l += " "), c = new Date(t.enddate), l += s("tablet.common.until", c.toLocaleDateString()))) : (c = new Date(t.enddate), l = s("tablet.common.available", s("tablet.common.until", c.toLocaleDateString()))), this.promoBanner.setText(l), this.promoBannerFree.setText(s("ui.shop.free")), i) {
  for (var d = t.promo, h = "", p = s("ui.common.colon"), m = 0; m < i - 1; m++) {
    h += d[m].name + p + d[m].description + "<br /><br />";
  }
  h += d[i - 1].name + p + d[i - 1].description, this.promoDescription.setHtml(h);
}
for (var d = t.promo, h = "", p = s("ui.common.colon"), m = 0; m < i - 1; m++) {
  h += d[m].name + p + d[m].description + "<br /><br />";
}
if (e) {
  return console.error("ItemDetailsView#update: getItems", e);
}
if (g.length !== i) {
  return console.error(new Error("Some items are missing, ids requested: " + g + ", items get: " + t));
}
for (var n = [], a = 0; a < i; a++) {
  var s = t[a];
  s.isEquippable() && n.push(s);
}
for (t = 0; t < e.length; t++) {
  var i = e[t],
    n = i.type.superTypeId;
  if (n !== I.DOFUS_OR_TROPHY) {
    var o;
    for (o = 0; o < this.outfits.length; o++) {
      if (!this.outfits[o][n]) {
        this.outfits[o][n] = i.id;
        break;
      }
    }
    if (o >= this.outfits.length) {
      var a = {};
      a[n] = i.id, this.outfits.push(a);
    }
  }
}
if (n !== I.DOFUS_OR_TROPHY) {
  var o;
  for (o = 0; o < this.outfits.length; o++) {
    if (!this.outfits[o][n]) {
      this.outfits[o][n] = i.id;
      break;
    }
  }
  if (o >= this.outfits.length) {
    var a = {};
    a[n] = i.id, this.outfits.push(a);
  }
}
for (o = 0; o < this.outfits.length; o++) {
  if (!this.outfits[o][n]) {
    this.outfits[o][n] = i.id;
    break;
  }
}
if (!this.outfits[o][n]) {
  this.outfits[o][n] = i.id;
  break;
}
if (o >= this.outfits.length) {
  var a = {};
  a[n] = i.id, this.outfits.push(a);
}
for (this.setOutfitLook(0), this.outfitDots.clearContent(), this.outfitDots.createChild("div", {
  className: ["dot", "selected"]
}), t = 1; t < this.outfits.length; t++) {
  this.outfitDots.createChild("div", {
    className: "dot"
  });
}
if (t) {
  this.currentOutfitIndex = e;
  var i = [];
  for (var n in t) {
    t.hasOwnProperty(n) && i.push(t[n]);
  }
  this.emit("requestPrevisualization", i);
  for (var o = 0; o < this.outfitDots.getChildren().length; o++) {
    var a = this.outfitDots.getChildren()[o];
    a.toggleClassName("selected", o === e);
  }
}
for (var n in t) {
  t.hasOwnProperty(n) && i.push(t[n]);
}
for (var o = 0; o < this.outfitDots.getChildren().length; o++) {
  var a = this.outfitDots.getChildren()[o];
  a.toggleClassName("selected", o === e);
}
if (!this._classSymbolImage) {
  var e = this,
    t = window.gui.playerData.characterBaseInformations;
  f.preloadImage("gfx/illusUi/symboles_classe/FichePerso_tx_symboleClasse_frame" + (t.breed - 1) + ".png", function (t) {
    e._classSymbolImage = t, e._characterOnIsland.setStyle("backgroundImage", t);
  });
}
if (!t.length) {
  return this.displayError(u.NO_PACK, new Error("No valid IAP " + t.length + " out of " + e.articles.length + " articles"));
}
for (var o = 0; o < t.length; o++) {
  var s = t[o],
    r = 1 === s.references.length && s.references[0];
  if (r && "GOULTINE" === r.type) {
    var d = parseInt(r.quantity, 10);
    isNaN(d) || d < this.hardCurrencyAmountMissing || d < n && (n = d, i = s);
  }
}
if (r && "GOULTINE" === r.type) {
  var d = parseInt(r.quantity, 10);
  isNaN(d) || d < this.hardCurrencyAmountMissing || d < n && (n = d, i = s);
}
if (i._content) {
  var t = e.articles;
  d.validateArticles(t), i._displayPurchasesList(null, t);
}
if (e && console.error(e), this._content) {
  if (e) {
    this._displayPurchasesListNotAvailable();
  } else {
    for (var i = 0; i < t.length; i++) {
      var n = t[i],
        o = this._purchasesDetails[n.key];
      if (o) {
        var a = this._purchasesList.getChild(n.key);
        a || (a = this._purchasesList.createChild("div", {
          className: "entry",
          name: n.key,
          text: n.name
        }), a.createChild("div", {
          className: "state"
        }), a.createChild("div", {
          className: "name",
          text: n.name
        })), o.article = n;
        var s = o.state;
        switch (s) {
          case u.PENDING:
            a.delClassNames(["failure", "success"]);
            break;
          case u.FAILED:
            a.replaceClassNames(["success"], ["failure"]);
            break;
          case u.SUCCEEDED:
            a.replaceClassNames(["failure"], ["success"]);
        }
      }
    }
    Object.keys(this._purchasesDetails).length <= this._purchasesList.getChildCount() ? this._spinner.hide() : this._spinner.show();
  }
}
if (e) {
  this._displayPurchasesListNotAvailable();
} else {
  for (var i = 0; i < t.length; i++) {
    var n = t[i],
      o = this._purchasesDetails[n.key];
    if (o) {
      var a = this._purchasesList.getChild(n.key);
      a || (a = this._purchasesList.createChild("div", {
        className: "entry",
        name: n.key,
        text: n.name
      }), a.createChild("div", {
        className: "state"
      }), a.createChild("div", {
        className: "name",
        text: n.name
      })), o.article = n;
      var s = o.state;
      switch (s) {
        case u.PENDING:
          a.delClassNames(["failure", "success"]);
          break;
        case u.FAILED:
          a.replaceClassNames(["success"], ["failure"]);
          break;
        case u.SUCCEEDED:
          a.replaceClassNames(["failure"], ["success"]);
      }
    }
  }
  Object.keys(this._purchasesDetails).length <= this._purchasesList.getChildCount() ? this._spinner.hide() : this._spinner.show();
}
for (var i = 0; i < t.length; i++) {
  var n = t[i],
    o = this._purchasesDetails[n.key];
  if (o) {
    var a = this._purchasesList.getChild(n.key);
    a || (a = this._purchasesList.createChild("div", {
      className: "entry",
      name: n.key,
      text: n.name
    }), a.createChild("div", {
      className: "state"
    }), a.createChild("div", {
      className: "name",
      text: n.name
    })), o.article = n;
    var s = o.state;
    switch (s) {
      case u.PENDING:
        a.delClassNames(["failure", "success"]);
        break;
      case u.FAILED:
        a.replaceClassNames(["success"], ["failure"]);
        break;
      case u.SUCCEEDED:
        a.replaceClassNames(["failure"], ["success"]);
    }
  }
}
if (o) {
  var a = this._purchasesList.getChild(n.key);
  a || (a = this._purchasesList.createChild("div", {
    className: "entry",
    name: n.key,
    text: n.name
  }), a.createChild("div", {
    className: "state"
  }), a.createChild("div", {
    className: "name",
    text: n.name
  })), o.article = n;
  var s = o.state;
  switch (s) {
    case u.PENDING:
      a.delClassNames(["failure", "success"]);
      break;
    case u.FAILED:
      a.replaceClassNames(["success"], ["failure"]);
      break;
    case u.SUCCEEDED:
      a.replaceClassNames(["failure"], ["success"]);
  }
}
if (!e || !e.length) {
  return console.error(new Error("No purchase to validate: " + e));
}
if (t.forEach(function (e) {
  this._purchasesDetails[e.productId] = {
    state: u.PENDING,
    article: null
  };
}, this), this._pendingPurchases = this._pendingPurchases.concat(t), t.length) {
  c.open(this.id), this._description.setText(s("tablet.purchasesPending.description", Object.keys(this._purchasesDetails).length) + s("ui.common.colon")), this._spinner.show();
  var i = this;
  d.getStoreInfos(function (e) {
    return e ? i._displayPurchasesList(e) : (window.dofus.send("shopIAPArticlesRequest"), void i._startProcessing());
  });
}
for (var i in this._purchasesDetails) {
  var n = this._purchasesDetails[i].state;
  n === u.SUCCEEDED ? e++ : t || n !== u.FAILED || (t = !0);
}
if (e && console.error(e), this._content) {
  var i = this._purchasesList.getChild(t);
  this._purchasesDetails[t].state = e ? u.FAILED : u.SUCCEEDED, i && (e ? i.replaceClassNames(["success"], ["failure"]) : i.replaceClassNames(["failure"], ["success"])), this._pendingPurchases.length ? this._processNext() : this._endProcessing();
}
for (var i = 0, n = t.length; i < n; i += 1) {
  var o = t[i].name;
  e.panelCollection[o] = e.panels.appendChild(t[i].content), e.tabs.addTab(t[i].title, e.panelCollection[o], i);
}
for (var a in i) {
  var s = i[a],
    r = s.target.getWuiName();
  e.canTabBeDisable(r) ? s.tab.disable() : s.tab.enable();
}
if (e) {
  return void console.error("Loaded static achievement data error", e);
}
for (var s = 0; s < n.length; s += 1) {
  n[s] && n[s].data && (a.push(n[s].data.id), o.push(n[s]));
}
if (e) {
  return void console.error("Failed to get items", e);
}
for (var n = 0; n < a.length; n += 1) {
  var s = a[n],
    r = v.items[s],
    c = t.appendChild(new _({
      name: "icon" + n
    })),
    d = o[n];
  if (r && "Item" === d.data._type) {
    var u = h("ui.item.averageprice") + " : ",
      p = r.getProperty("averagePrice");
    u += p === -1 ? h("ui.item.averageprice.unavailable") : y.kamasToString(p), c.setContextMenu("item", {
      item: r
    });
  }
  var m = d.url,
    f = d.quantity,
    w = d.data;
  c.setImage(m), f && c.setQuantity(f);
  var b = new g("div");
  b.createChild("div", {
    text: w.nameId || l(w)
  }), u && "Item" === d.data._type && b.createChild("div", {
    text: u
  }), w.descriptionId && b.createChild("div", {
    text: w.descriptionId,
    className: "details"
  }), c.setTooltip(b);
}
if (r && "Item" === d.data._type) {
  var u = h("ui.item.averageprice") + " : ",
    p = r.getProperty("averagePrice");
  u += p === -1 ? h("ui.item.averageprice.unavailable") : y.kamasToString(p), c.setContextMenu("item", {
    item: r
  });
}
if (i.goultines) {
  var M = t.appendChild(new _({
    name: "iconGoultine"
  }));
  M.icon.addClassNames("iconGoultine"), M.setQuantity(i.goultines);
  var T = new g("div");
  T.createChild("div", {
    text: h("ui.common.goultines")
  }), M.setTooltip(T);
}
if (!l) {
  return e ? (l = !0, t(e)) : (c = c.concat(i), a += i.length, s += 1, a === o || s === n.length ? t(null, c) : void 0);
}
if (!e) {
  return t(null, []);
}
for (var n = ["Items", "Ornaments"], o = 0, a = 0, s = 0, l = !1, c = [], d = [], u = [], h = 0; h < e.rewards.length; h++) {
  d.push(e.rewards[h].itemId), u.push(e.rewards[h].quantity);
}
if (l.length !== e.length) {
  return a("Achievement: Missing rewards data or images");
}
if (e) {
  return a(e);
}
for (var l = [], c = {}, d = 0; d < t.length; d += 1) {
  var u = s[t[d]],
    h = w.join(i, null !== n ? u[n] + ".png" : "");
  c[h] = {
    data: u,
    quantity: o[d] || null
  }, l.push(h);
}
for (var i = 0, n = e.length - 1; n >= 0; n--) {
  var o = e[n];
  "." === o ? e.splice(n, 1) : ".." === o ? (e.splice(n, 1), i++) : i && (e.splice(n, 1), i--);
}
if (t) {
  for (; i--; i) {
    e.unshift("..");
  }
}
for (; i--; i) {
  e.unshift("..");
}
if (e.filter) {
  return e.filter(t);
}
for (var i = [], n = 0; n < e.length; n++) {
  t(e[n], n, e) && i.push(e[n]);
}
for (var t = "", o = !1, a = arguments.length - 1; a >= -1 && !o; a--) {
  var s = a >= 0 ? arguments[a] : e.cwd();
  if ("string" != typeof s) {
    throw new TypeError("Arguments to path.resolve must be strings");
  }
  s && (t = s + "/" + t, o = "/" === s.charAt(0));
}
if ("string" != typeof s) {
  throw new TypeError("Arguments to path.resolve must be strings");
}
if ("string" != typeof e) {
  throw new TypeError("Arguments to path.join must be strings");
}
for (var t = 0; t < e.length && "" === e[t]; t++) {
  ;
}
for (var i = e.length - 1; i >= 0 && "" === e[i]; i--) {
  ;
}
for (var o = n(e.split("/")), a = n(i.split("/")), s = Math.min(o.length, a.length), r = s, l = 0; l < s; l++) {
  if (o[l] !== a[l]) {
    r = l;
    break;
  }
}
if (o[l] !== a[l]) {
  r = l;
  break;
}
for (var c = [], l = r; l < o.length; l++) {
  c.push("..");
}
if (this._mapLocationButton && this._mapLocationButton.destroy(), o) {
  b || this._createSteps(this._stepList), this._scoreCompo.setText(a("ui.common.score") + a("ui.common.colon") + i);
  var n = e.getStepsScoreRatio();
  this._stepsLabel.forEach(function (e) {
    var t = n[e.stepNumber - 1];
    e.element.setText(a("ui.toa.step") + " " + e.stepNumber + " - " + t + "%");
  }), this._selectInitialStage(p, m);
}
if (o) {
  var n = this.col1 = i.createChild("div", {
      className: "col1"
    }),
    s = i.createChild("div", {
      className: "col2"
    }),
    r = this._stepList = n.appendChild(new c({
      className: "tree"
    }));
  r.on("selected", function (e) {
    p = e.id, e.sublist.show(), l("TAB"), r.refresh(), r.scrollToElement(e);
  }), r.on("deselected", function (e) {
    p = null, e.sublist.hide(), r.refresh();
  });
  var d = s.createChild("div", {
    className: "statBlock"
  });
  this._challengeBlock = d.createChild("div", {
    className: "challengeBlock"
  });
  var u = d.createChild("div", {
      className: "scoreBlock"
    }),
    h = u.createChild("div", {
      className: "scoreBoxHeaderContentBlock"
    });
  this._scoreCompo = h.createChild("div", {
    className: "playerScore"
  }), this.scoreBox = u.createChild("div", {
    className: "floorScoreBoxHeaderContentBlock"
  }), s.createChild("hr", {
    className: "separator"
  });
  var m = s.createChild("div", {
      className: "monsterListWrapper"
    }),
    f = this._monsterList = m.appendChild(new c());
  f.on("selected", function (e) {
    e.more ? (e.more.show(), this.refresh()) : (t._createMonsterMoreInfo(e), this.refresh());
  }), f.on("deselected", function (e) {
    e.more.hide(), this.refresh();
  });
} else {
  i.createChild("div", {
    className: "col2",
    text: a("ui.toa.ascensionClosed")
  });
}
if (t.isSelectedStageDone(m)) {
  for (var n in e) {
    for (var o = this._challengeBlock.createChild("div", {
        className: "challengeContent"
      }), s = !1, r = 0; r < i.length; r++) {
      i[r] === e[n].id && (o.createChild("div", {
        className: "succeed"
      }), s = !0);
    }
    s || o.createChild("div", {
      className: "failed"
    }), o.createChild("div", {
      className: "description",
      text: e[n].nameId + a("ui.common.colon") + e[n].points
    });
  }
} else {
  for (n in e) {
    o = this._challengeBlock.createChild("div", {
      className: "challengeContent"
    }), o.createChild("div", {
      className: "description",
      text: e[n].nameId + a("ui.common.colon") + e[n].points
    });
  }
}
for (var n in e) {
  for (var o = this._challengeBlock.createChild("div", {
      className: "challengeContent"
    }), s = !1, r = 0; r < i.length; r++) {
    i[r] === e[n].id && (o.createChild("div", {
      className: "succeed"
    }), s = !0);
  }
  s || o.createChild("div", {
    className: "failed"
  }), o.createChild("div", {
    className: "description",
    text: e[n].nameId + a("ui.common.colon") + e[n].points
  });
}
for (var o = this._challengeBlock.createChild("div", {
    className: "challengeContent"
  }), s = !1, r = 0; r < i.length; r++) {
  i[r] === e[n].id && (o.createChild("div", {
    className: "succeed"
  }), s = !0);
}
for (n in e) {
  o = this._challengeBlock.createChild("div", {
    className: "challengeContent"
  }), o.createChild("div", {
    className: "description",
    text: e[n].nameId + a("ui.common.colon") + e[n].points
  });
}
if (e) {
  var i = this._stepList.getItem(e);
  if (i) {
    this._stepList.selectItem(e);
    var n = i.sublist.getChild(t);
    n.tap(), this._stepList.showElement(n);
  }
}
if (i) {
  this._stepList.selectItem(e);
  var n = i.sublist.getChild(t);
  n.tap(), this._stepList.showElement(n);
}
for (var o in e) {
  n.push("gfx/monsters/" + e[o].id + ".png");
}
for (var s in e) {
  for (var r = 0; r < a.length; r++) {
    e[s].id === a[r].creatureGenericId && t._addMonster(e[s], n[o], s + r, a[r].grade);
  }
  o++;
}
for (var r = 0; r < a.length; r++) {
  e[s].id === a[r].creatureGenericId && t._addMonster(e[s], n[o], s + r, a[r].grade);
}
for (var e = 0; e < this._servers.length; e++) {
  this._serversSelector.addOption(this._servers[e]._name || this._servers[e].id, this._servers[e].id);
}
if (e) {
  this._effects.clearContent();
  var t = this._effects.createChild("ul", {
    className: "ShieldEffectsList"
  });
  t.effects = {};
  for (var i = window.gui.playerData.isShieldTutorialFortified(), n = this._shield.bonusesPerLevel, o = 0; o < e.length; o += 1) {
    var a = e[o],
      s = a.effect;
    if (w.indexOf(s.id) === -1) {
      var r = a.description;
      if (i && n[0].effectId === a.effectId) {
        var l = a.value + Math.floor(n[0].bonusRatio * y);
        r = p(a.effect.descriptionId, l);
      }
      r && e[o].actionId !== u.ACTION_CAST_STARTING_SPELL && e[o].actionId !== u.ACTION_SHIELD_EXPERIENCE && (t.effects[s.id] = t.createChild("li"), t.effects[s.id].setText(r), t.effects[s.id].currentStatDescription = r, t.effects[s.id].isPreview = !1, s.bonusType === -1 ? t.effects[s.id].addClassNames("malus") : 1 === s.bonusType && t.effects[s.id].addClassNames("bonus"));
    }
  }
  this._effectsList = t;
}
for (var i = window.gui.playerData.isShieldTutorialFortified(), n = this._shield.bonusesPerLevel, o = 0; o < e.length; o += 1) {
  var a = e[o],
    s = a.effect;
  if (w.indexOf(s.id) === -1) {
    var r = a.description;
    if (i && n[0].effectId === a.effectId) {
      var l = a.value + Math.floor(n[0].bonusRatio * y);
      r = p(a.effect.descriptionId, l);
    }
    r && e[o].actionId !== u.ACTION_CAST_STARTING_SPELL && e[o].actionId !== u.ACTION_SHIELD_EXPERIENCE && (t.effects[s.id] = t.createChild("li"), t.effects[s.id].setText(r), t.effects[s.id].currentStatDescription = r, t.effects[s.id].isPreview = !1, s.bonusType === -1 ? t.effects[s.id].addClassNames("malus") : 1 === s.bonusType && t.effects[s.id].addClassNames("bonus"));
  }
}
if (w.indexOf(s.id) === -1) {
  var r = a.description;
  if (i && n[0].effectId === a.effectId) {
    var l = a.value + Math.floor(n[0].bonusRatio * y);
    r = p(a.effect.descriptionId, l);
  }
  r && e[o].actionId !== u.ACTION_CAST_STARTING_SPELL && e[o].actionId !== u.ACTION_SHIELD_EXPERIENCE && (t.effects[s.id] = t.createChild("li"), t.effects[s.id].setText(r), t.effects[s.id].currentStatDescription = r, t.effects[s.id].isPreview = !1, s.bonusType === -1 ? t.effects[s.id].addClassNames("malus") : 1 === s.bonusType && t.effects[s.id].addClassNames("bonus"));
}
if (i && n[0].effectId === a.effectId) {
  var l = a.value + Math.floor(n[0].bonusRatio * y);
  r = p(a.effect.descriptionId, l);
}
if (!e) {
  return t();
}
if (e) {
  return t(e);
}
for (var o = 0; o < n.length; o += 1) {
  var a = n[o];
  i[a.id] = a;
}
if (i) {
  return console.error(i);
}
for (var t = window.gui.databases.ShieldModelsLevels[this._shield.model].requiredXpLevels, i = t[Math.min(99, this._shield.level)], n = t[Math.min(99, this._shield.level) - 1], o = e + this._shield.currentXP, a = 0, s = (this._shield.currentXP - n) / (i - n), r = (o - n) / (i - n); this._shield.level < 100 && t[this._shield.level + a] <= o;) {
  a++;
}
if (a) {
  this._shieldLvlPreview.setText("( + " + a + " )");
  var c = this._shield.bonusesPerLevel;
  if (c) {
    for (var d, u = 0, h = 0; h < c.length; h++) {
      d = Math.floor(c[h].bonusRatio * (a + this._shield.level)), u = Math.floor(c[h].bonusRatio * this._shield.level);
      var m = d - u;
      if (m > 1) {
        var f = this._effectsList.effects[c[h].effectId];
        if (f) {
          var g = f.currentStatDescription;
          f.setText(g + " ( +" + m + " )");
        } else {
          var _ = this._effectsList.createChild("li");
          _.isPreview = !0, _.setText("( " + p(c[h].descriptionId, m) + " )");
        }
      }
    }
  }
}
if (c) {
  for (var d, u = 0, h = 0; h < c.length; h++) {
    d = Math.floor(c[h].bonusRatio * (a + this._shield.level)), u = Math.floor(c[h].bonusRatio * this._shield.level);
    var m = d - u;
    if (m > 1) {
      var f = this._effectsList.effects[c[h].effectId];
      if (f) {
        var g = f.currentStatDescription;
        f.setText(g + " ( +" + m + " )");
      } else {
        var _ = this._effectsList.createChild("li");
        _.isPreview = !0, _.setText("( " + p(c[h].descriptionId, m) + " )");
      }
    }
  }
}
for (var d, u = 0, h = 0; h < c.length; h++) {
  d = Math.floor(c[h].bonusRatio * (a + this._shield.level)), u = Math.floor(c[h].bonusRatio * this._shield.level);
  var m = d - u;
  if (m > 1) {
    var f = this._effectsList.effects[c[h].effectId];
    if (f) {
      var g = f.currentStatDescription;
      f.setText(g + " ( +" + m + " )");
    } else {
      var _ = this._effectsList.createChild("li");
      _.isPreview = !0, _.setText("( " + p(c[h].descriptionId, m) + " )");
    }
  }
}
if (m > 1) {
  var f = this._effectsList.effects[c[h].effectId];
  if (f) {
    var g = f.currentStatDescription;
    f.setText(g + " ( +" + m + " )");
  } else {
    var _ = this._effectsList.createChild("li");
    _.isPreview = !0, _.setText("( " + p(c[h].descriptionId, m) + " )");
  }
}
if (f) {
  var g = f.currentStatDescription;
  f.setText(g + " ( +" + m + " )");
} else {
  var _ = this._effectsList.createChild("li");
  _.isPreview = !0, _.setText("( " + p(c[h].descriptionId, m) + " )");
}
for (var i in t) {
  var n = t[i];
  n.isShieldManageable() && (e[i] = n);
}
for (var e = ["20", "40", "60", "80", "100", "120", "140", "160", "180", "200"], t = ["1", "2", "3", "5", "6", "8", "10", "12", "14", "17"], i = ["2450", "8100", "18150", "33800", "56250", "86700", "126350", "176400", "238050", "312500"], n = ["1400", "3600", "6600", "10400", "15000", "20400", "26600", "33600", "41400", "50000"], o = {}, a = 0; a < 10; a += 1) {
  o[a] = {
    level: e[a],
    nbrDoplon: t[a],
    expPerQuest: i[a],
    expPerFight: n[a]
  };
}
for (var t = 0; t < e.length; t++) {
  if (window.Config.language === e[t]) {
    return !1;
  }
}
if (window.Config.language === e[t]) {
  return !1;
}
for (var o = 0; o < _.length; o++) {
  var a = _[o],
    r = new d("div", {
      className: "label",
      name: "part" + o
    });
  r.createChild("div", {
    className: "arrow"
  }), n._stepsLabel.push({
    element: r.createChild("div", {
      className: "text",
      text: s(a.title)
    })
  });
  var l = e.addItem({
    id: o,
    element: r
  }, {
    noRefresh: !0
  });
  l.sublist = l.appendChild(new d("div", {
    className: "sublist"
  }));
  for (var c = 0; c < a.subParts.length; c++) {
    var h = a.subParts[c];
    if (i(h.forbiddenLanguages)) {
      var p = new d("div", {
        className: "label",
        name: "subpart" + o + c
      });
      p.createChild("div", {
        className: "text",
        text: s(h.title)
      }), l.sublist.appendChild(p), p.i = o, p.j = c, u(p), p.on("tap", t);
    }
  }
  l.sublist.hide();
}
for (var c = 0; c < a.subParts.length; c++) {
  var h = a.subParts[c];
  if (i(h.forbiddenLanguages)) {
    var p = new d("div", {
      className: "label",
      name: "subpart" + o + c
    });
    p.createChild("div", {
      className: "text",
      text: s(h.title)
    }), l.sublist.appendChild(p), p.i = o, p.j = c, u(p), p.on("tap", t);
  }
}
if (i(h.forbiddenLanguages)) {
  var p = new d("div", {
    className: "label",
    name: "subpart" + o + c
  });
  p.createChild("div", {
    className: "text",
    text: s(h.title)
  }), l.sublist.appendChild(p), p.i = o, p.j = c, u(p), p.on("tap", t);
}
if (this._title.clearContent(), this._content.clearContent(), f !== -1 && g !== -1) {
  if (this._title.setText(s(_[f].subParts[g].title)), 1 === f && 15 === g) {
    this._content.appendChild(this._formatLinks(s(_[f].subParts[g].text)));
    var e = [{
        id: "level",
        header: s("ui.helpWindow.category2sub16table1"),
        sort: !1
      }, {
        id: "nbrDoplon",
        header: s("ui.helpWindow.category2sub16table2"),
        sort: !1
      }, {
        id: "expPerQuest",
        header: s("ui.helpWindow.category2sub16table3"),
        sort: !1
      }, {
        id: "expPerFight",
        header: s("ui.helpWindow.category2sub16table4"),
        sort: !1
      }],
      t = this._getDopeulsData();
    this._content.table = this._content.appendChild(new h(e, !1, {
      clickable: !1
    })), this._content.table.scroller.setEnable(!1), this._content.table.addMap(t), this._content.appendChild(this._formatLinks(s("ui.helpWindow.category2sub16text2")));
  } else {
    this._content.appendChild(this._formatLinks(s(_[f].subParts[g].text)));
  }
} else {
  this._content.setText(s("ui.helpWindow.defaultText"));
}
if (this._title.setText(s(_[f].subParts[g].title)), 1 === f && 15 === g) {
  this._content.appendChild(this._formatLinks(s(_[f].subParts[g].text)));
  var e = [{
      id: "level",
      header: s("ui.helpWindow.category2sub16table1"),
      sort: !1
    }, {
      id: "nbrDoplon",
      header: s("ui.helpWindow.category2sub16table2"),
      sort: !1
    }, {
      id: "expPerQuest",
      header: s("ui.helpWindow.category2sub16table3"),
      sort: !1
    }, {
      id: "expPerFight",
      header: s("ui.helpWindow.category2sub16table4"),
      sort: !1
    }],
    t = this._getDopeulsData();
  this._content.table = this._content.appendChild(new h(e, !1, {
    clickable: !1
  })), this._content.table.scroller.setEnable(!1), this._content.table.addMap(t), this._content.appendChild(this._formatLinks(s("ui.helpWindow.category2sub16text2")));
} else {
  this._content.appendChild(this._formatLinks(s(_[f].subParts[g].text)));
}
for (var o, a, s = n.rootElement.getElementsByTagName("a"), r = 0; r < s.length; r++) {
  o = s[r], a = o.href, t(o, a);
}
if (e.length) {
  for (var t = 0; t < e.length; t += 1) {
    for (var n = e[t], o = n.uid, a = n.items || [], s = null, r = 0; r < a.length; r += 1) {
      if (a[r].objectGID === l.TOA_RETRY_ITEM_ID) {
        s = a[r];
        break;
      }
    }
    s && (i._actionIdMap[o] = !0);
  }
}
for (var t = 0; t < e.length; t += 1) {
  for (var n = e[t], o = n.uid, a = n.items || [], s = null, r = 0; r < a.length; r += 1) {
    if (a[r].objectGID === l.TOA_RETRY_ITEM_ID) {
      s = a[r];
      break;
    }
  }
  s && (i._actionIdMap[o] = !0);
}
for (var n = e[t], o = n.uid, a = n.items || [], s = null, r = 0; r < a.length; r += 1) {
  if (a[r].objectGID === l.TOA_RETRY_ITEM_ID) {
    s = a[r];
    break;
  }
}
if (a[r].objectGID === l.TOA_RETRY_ITEM_ID) {
  s = a[r];
  break;
}
if ("PAIDFAILED" === e.reason) {
  var t = i._inventory.goultines;
  return a.openNotEnoughHardCurrencyPopup(l.TOA_RETRY_HC_PRICE - t), i._fireCallbackAndClean(new Error(i.NEED_HC));
}
if (i._actionIdMap[e.actionId]) {
  return delete i._actionIdMap[e.actionId], i._fireCallbackAndClean();
}
if (this._cb) {
  return i(new Error(n.ALREADY_IN_PROGRESS));
}
if (!e || !o || e < 0) {
  return i(new Error(this.STEP_NUMBER_IS_NOT_A_VALID_NUMBER + ": " + e));
}
if (this._stepNumber = e, this._inventory = t, this._cb = i, this._giftModule.getToaRetryPendingUid().length) {
  var r = this._giftModule.getToaRetryPendingUid()[0];
  this._actionIdMap[r] = !0;
  var c = this._giftModule.assignPendingToaRetry(r);
  if (!c) {
    return this._fireCallbackAndClean(new Error(n.CANNOT_ASSIGN_PENDING_RETRY));
  }
} else {
  this._giftModule.setAutoAssign(!0), a.getStoreInfos(function (e) {
    if (e) {
      return n._fireCallbackAndClean(new Error(n.GET_STORE_INFOS_ERROR));
    }
    var t = n._inventory.goultines;
    return t - l.TOA_RETRY_HC_PRICE < 0 ? (a.openNotEnoughHardCurrencyPopup(l.TOA_RETRY_HC_PRICE - t), n._fireCallbackAndClean(new Error(n.NEED_HC))) : void s.send("toaContinue", {
      goultinesAmount: t
    });
  });
}
if (!c) {
  return this._fireCallbackAndClean(new Error(n.CANNOT_ASSIGN_PENDING_RETRY));
}
if (e) {
  return n._fireCallbackAndClean(new Error(n.GET_STORE_INFOS_ERROR));
}
if (0 === e.totalArticles) {
  return void t.showNoResult(a("ui.dailyQuest.premiumReroll"), ~~e.categoryId);
}
for (var i = r.validateArticles(e.articles), n = 0; n < i.length; n++) {
  var o = i[n];
  this._articleMap[o.id] = o;
}
if (e.isLikeDofus) {
  window && window.LaunchReview && (window.LaunchReview.isRatingSupported() ? window.LaunchReview.rating(t, i) : window.LaunchReview.launch(t, i)), e._setUserPref({
    isNeverAsk: !0
  }), e.close();
} else if (e.isDislikeDofus) {
  e._setUserPref({
    isNeverAsk: !0
  }), e.close();
  var n = "mailto:" + s("ui.popup.ratingEmail") + "?subject=" + s("ui.popup.ratingEmailSubject");
  window.cordova && window.cordova.InAppBrowser ? window.cordova.InAppBrowser.open(n, "_system", "location=yes,hidden=yes") : window.open(n, "_system");
} else {
  e._likeDofus();
}
if (e.isDislikeDofus) {
  e._setUserPref({
    isNeverAsk: !0
  }), e.close();
  var n = "mailto:" + s("ui.popup.ratingEmail") + "?subject=" + s("ui.popup.ratingEmailSubject");
  window.cordova && window.cordova.InAppBrowser ? window.cordova.InAppBrowser.open(n, "_system", "location=yes,hidden=yes") : window.open(n, "_system");
} else {
  e._likeDofus();
}
for (var i = 0, n = t.length; i < n; i += 1) {
  var o = t[i].name;
  e.panelCollection[o] = e.panels.appendChild(t[i].content), e.tabs.addTab(t[i].title, e.panelCollection[o], o);
}
for (var a in n) {
  var s = n[a],
    r = s.target.getWuiName();
  e(r) ? s.tab.disable() : s.tab.enable();
}
if (u(t) && !h) {
  var l = window.gui.playerData.quests;
  l.on("mainDQStarted", function () {
    o.setupTabs();
  }), l.on("listUpdated", function () {
    o.setupTabs();
  }), h = !0;
}
for (i = 0; i < e.length; i += 1) {
  var n = C.dailyQuests.all[e[i]];
  t.slotList[i] || t._addDQSlot(), t._updatetDQSlot(t.slotList[i], n);
}
for (i = e.length; i < t.slotList.length; i += 1) {
  t.slotList[i].destroy();
}
if (!t || !i) {
  return e;
}
if (t.length) {
  for (var i = {}, n = 0, o = t.length; n < o; n += 1) {
    var a = t[n];
    i[a[0]] = a[1];
  }
  var s = Object.keys(i);
  v.getItems(s, function (t, n) {
    return t ? console.error("Failed to retrieve items", s) : void n.forEach(function (t) {
      if (t) {
        var n = e.appendChild(new u());
        n.addClassNames("rewardSlot"), n.setItem(t), n.setQuantity(i[t.id]), n.on("tap", function () {
          m.open("itemBox", {
            itemData: t
          });
        });
      }
    });
  });
}
for (var i = {}, n = 0, o = t.length; n < o; n += 1) {
  var a = t[n];
  i[a[0]] = a[1];
}
if (t) {
  var n = e.appendChild(new u());
  n.addClassNames("rewardSlot"), n.setItem(t), n.setQuantity(i[t.id]), n.on("tap", function () {
    m.open("itemBox", {
      itemData: t
    });
  });
}
if (t) {
  return console.error("Failed to get emoticons", t);
}
if (t) {
  var i = e.appendChild(new c());
  i.addClassNames("rewardSlot"), o.push(i), i.icon.addClassNames("spinner"), n.push("gfx/emotes/" + t.id + ".png"), i.setTooltip(t.nameId);
}
for (var t = 0, i = e.length; t < i; t += 1) {
  var n = o[t];
  n.rootElement && (n.icon.delClassNames("spinner"), n.setImage(e[t]));
}
for (var i = 0; i < t; i += 1) {
  this._addDQSlot();
}
if (!e._pendingReroll && !window.gui.playerData.isFighting) {
  if (0 === e._freeRerollCount && 0 === e._paidRerollCount) {
    return m.open("DailyQuestRerollWindow", {
      isPlayerRedirected: !0
    });
  }
  var t = f("ui.dailyQuest.premiumReroll");
  e._freeRerollCount > 0 && (t = f("ui.dailyQuest.freeReroll")), window.gui.openConfirmPopup({
    title: f("ui.common.confirm"),
    message: g(f("ui.dailyQuest.confirmReroll"), t),
    cb: function (t) {
      t && !e._pendingReroll && (e._pendingReroll = !0, A.log("User_Life_Cycle.daily_quest_reroll", {
        times_slot_rerolled: i._timesReroll,
        is_free_reroll: e._freeRerollCount > 0,
        quest_id: i.id
      }), i._timesReroll++, window.gui.playerData.quests.rerollDQ(i.id));
    }
  });
}
if (0 === e._freeRerollCount && 0 === e._paidRerollCount) {
  return m.open("DailyQuestRerollWindow", {
    isPlayerRedirected: !0
  });
}
for (var r = i.left.createChild("div", {
    className: "rewards",
    name: "rewards"
  }), l = i.rewardList = r.createChild("div", {
    className: "rewardList"
  }), c = [], d = 0; d < x; d += 1) {
  c[d] = l.appendChild(new u({
    name: "icon" + d
  }));
}
for (var t = {}, i = 0; i < this.slotList.length; i += 1) {
  if (this.slotList[i].id === e) {
    t = this.slotList[i];
    break;
  }
}
if (this.slotList[i].id === e) {
  t = this.slotList[i];
  break;
}
if (!(Object.keys(e).length < 1)) {
  this._mainQuestName.setText(e.dbQuest.nameId), this._mainQuestText.setText(e.dbSteps[e.stepId].descriptionId);
  var t = e.objectives[0].curCompletion,
    i = e.objectives[0].maxCompletion;
  this._questProgressBar.setValue(t, i);
}
if (e.logoWrapper.toggleClassName("rare", window.gui.playerData.quests.isRareDQ(t.dbQuest.categoryId)), e.logo.setClassNames(["logo", window.gui.playerData.quests.getDQClassName(t.dbQuest.categoryId)]), t.objectives) {
  var a = t.objectives[0],
    s = a.hypertext || a.text;
  e.descriptionText.clearContent();
  var r = t.questId,
    l = a.objectiveId;
  e.descriptionText.appendChild(M.process(o(s, r, l)));
}
if (e.toggleClassName("finished", n.some(i)), n.some(i) && e.countdown.startCountdown(), e.id = t.dbQuest.id, t.stepId) {
  var c = t.dbSteps[t.stepId];
  this._displayRewards(t, e), this._setKamas(c, e), this._setXp(c, e);
} else {
  e.kamas.clearContent(), e.xp.clearContent();
}
if (!t._processingRewards) {
  t._processingRewards = !0, t.rewardList.clearContent();
  for (var i = e.dbSteps[e.stepId].rewardsIds, n = window.gui.playerData.characterBaseInformations.level, o = 0, r = i.length; o < r; o += 1) {
    var l = e.dbRewards[i[o]];
    !l || l.levelMin !== -1 && n < l.levelMin || l.levelMax !== -1 && n > l.levelMax || (a(t.rewardList, l.itemsReward), s(t.rewardList, l.emotesReward));
  }
  t._processingRewards = !1;
}
for (var i = e.dbSteps[e.stepId].rewardsIds, n = window.gui.playerData.characterBaseInformations.level, o = 0, r = i.length; o < r; o += 1) {
  var l = e.dbRewards[i[o]];
  !l || l.levelMin !== -1 && n < l.levelMin || l.levelMax !== -1 && n > l.levelMax || (a(t.rewardList, l.itemsReward), s(t.rewardList, l.emotesReward));
}
if (i <= 0) {
  return clearInterval(e._interval);
}
if (this._endDate) {
  var e = this;
  this._interval && clearInterval(this._interval), this._interval = setInterval(function () {
    o(e);
  }, 1e3);
}
if (t) {
  return void e._handleError();
}
if (n) {
  return e._updateQuestProgress(), e._isRefreshPending = !1, void e.delClassNames("spinner");
}
if (window.gui.playerData.quests.finished[M]) {
  return this.questDesc.setText(h("ui.almanax.dolmanaxQuestDone")), this.questProgressTitle.setText(h("ui.almanax.questDone")), void this.questProgressBar.setValue(1);
}
if (v.getValue("almanaxLastNotif") !== e) {
  v.setValue("almanaxLastNotif", e);
  var i = l.getAlmanaxDate(),
    n = window.gui.notificationBar;
  n.newNotification("almanax_" + e, {
    type: n.notificationType.INVITATION,
    title: i.day + " " + i.monthName + " " + i.year,
    text: h("ui.almanax.offeringTo", t),
    buttons: [{
      label: h("ui.almanax.almanax"),
      action: function () {
        _.open("dailyQuest", {
          tabId: "almanax"
        });
      }
    }]
  });
}
for (var e = window.gui.databases.TypeActions, t = {}, i = [], n = 0; n < this.upgradeWeaponList.length; n++) {
  var o = this.upgradeWeaponList[n];
  if (0 !== o.upgradeEffects.length) {
    for (var a = o.upgradeEffects[0].typeActionId, s = 0; s < o.possibleEffects.length; s++) {
      var r = o.possibleEffects[s],
        l = e[r.effectId];
      if (l && l.elementId === this.elementSelected) {
        o.possibleEffects[0].effectId === a ? i.unshift(a) : i.push(a), t[a] = {
          weapon: o,
          upgradeEffect: o.upgradeEffects[0]
        };
        break;
      }
    }
  }
}
if (0 !== o.upgradeEffects.length) {
  for (var a = o.upgradeEffects[0].typeActionId, s = 0; s < o.possibleEffects.length; s++) {
    var r = o.possibleEffects[s],
      l = e[r.effectId];
    if (l && l.elementId === this.elementSelected) {
      o.possibleEffects[0].effectId === a ? i.unshift(a) : i.push(a), t[a] = {
        weapon: o,
        upgradeEffect: o.upgradeEffects[0]
      };
      break;
    }
  }
}
for (var a = o.upgradeEffects[0].typeActionId, s = 0; s < o.possibleEffects.length; s++) {
  var r = o.possibleEffects[s],
    l = e[r.effectId];
  if (l && l.elementId === this.elementSelected) {
    o.possibleEffects[0].effectId === a ? i.unshift(a) : i.push(a), t[a] = {
      weapon: o,
      upgradeEffect: o.upgradeEffects[0]
    };
    break;
  }
}
if (l && l.elementId === this.elementSelected) {
  o.possibleEffects[0].effectId === a ? i.unshift(a) : i.push(a), t[a] = {
    weapon: o,
    upgradeEffect: o.upgradeEffects[0]
  };
  break;
}
for (var y = 0; y < this.numberSlot; y++) {
  this.craftItemSlots.push(v.appendChild(new d({
    noDoubleTap: !0,
    forceQuantity: !0
  })));
}
if (this.opened) {
  for (var e = 0; e < this.wrapElementButtons.getChildren().length; e++) {
    this.wrapElementButtons.getChildren()[e].delClassNames("selectedButton");
  }
  this.statsChoice.hide(), this.wrapEffectChoice.clearContent(), this.storageViewer.unSelectSlot(), this._clearIngredientSlots(), this._displayCurrentLW(null), this._displayUpgradedLW(null), this._reset();
}
for (var e = 0; e < this.wrapElementButtons.getChildren().length; e++) {
  this.wrapElementButtons.getChildren()[e].delClassNames("selectedButton");
}
for (var i = 0; i < this.wrapElementButtons.getChildren().length; i++) {
  this.wrapElementButtons.getChildren()[i].delClassNames("selectedButton");
}
if (e = e || n, !this.elementSelected || !this.itemSelected || 0 === this.upgradeWeaponList.length) {
  return e(new Error("Unable to find the selected element, item or upgradable weapons"));
}
if (t = t || n, !e) {
  return t(new Error("Unable to get a upgraded legendary weapon"));
}
for (var o = {
    objectGID: e.weapon.id,
    effects: []
  }, a = 0; a < e.weapon.possibleEffects.length; a++) {
  var s = e.weapon.possibleEffects[a].clone();
  s.effectId === f.ACTION_CHARACTER_LEARN_EMOTICON && (s.diceSide = 1), o.effects.push(s);
}
if (t = t || n, !e.item) {
  return t(new Error("The itemInstance of legendary weapon is missing the item"));
}
for (var o = e.getGrindLevel() - 1, a = {
    objectGID: e.item.id,
    effects: []
  }, s = 0; s < e.effects.length; s++) {
  a.effects.push(e.effects[s].clone());
}
if (e) {
  return t(e);
}
if (!s || o >= s.levels.length) {
  return t();
}
for (var l = s.levels[o].bonusValue, c = 0; c < a.effects.length; c++) {
  var d = a.effects[c];
  d.effectId === r.typeActionId ? d.value += l : d.effectId === f.ACTION_GRIND_LEVEL && d.value++;
}
if (n) {
  return t(n);
}
if (t = t || n, !e || !e.ingredients) {
  return t(new Error("LegendaryWeapon error: Template or ingredients are missing"));
}
for (var o = [], a = [], s = 0; s < e.ingredients.length; s++) {
  var r = e.ingredients[s];
  o.push(r.ingredientId), a.push(r.ingredientQty);
}
if (e && t) {
  var i = window.gui.playerData;
  this.validationButton.enable();
  for (var n = 0; n < this.craftItemSlots.length; n++) {
    var o = this.craftItemSlots[n];
    if (n >= e.length) {
      o.hide();
    } else {
      var a = e[n],
        s = t[n];
      o.show(), o.setItem(a), o.setContextMenu("item", {}), o.enableContextMenu(!0);
      var r = i.belongings.getItemCounts(a.id)[m.INVENTORY_QTY],
        l = (r > 9999 ? "9999+" : r) + "/" + s;
      o.setQuantity(l), o.toggleClassName("quantityNotEnough", r < s), r < s && this.validationButton.disable();
    }
  }
}
for (var n = 0; n < this.craftItemSlots.length; n++) {
  var o = this.craftItemSlots[n];
  if (n >= e.length) {
    o.hide();
  } else {
    var a = e[n],
      s = t[n];
    o.show(), o.setItem(a), o.setContextMenu("item", {}), o.enableContextMenu(!0);
    var r = i.belongings.getItemCounts(a.id)[m.INVENTORY_QTY],
      l = (r > 9999 ? "9999+" : r) + "/" + s;
    o.setQuantity(l), o.toggleClassName("quantityNotEnough", r < s), r < s && this.validationButton.disable();
  }
}
if (n >= e.length) {
  o.hide();
} else {
  var a = e[n],
    s = t[n];
  o.show(), o.setItem(a), o.setContextMenu("item", {}), o.enableContextMenu(!0);
  var r = i.belongings.getItemCounts(a.id)[m.INVENTORY_QTY],
    l = (r > 9999 ? "9999+" : r) + "/" + s;
  o.setQuantity(l), o.toggleClassName("quantityNotEnough", r < s), r < s && this.validationButton.disable();
}
for (var e = 0; e < this.craftItemSlots.length; e++) {
  this.craftItemSlots[e].unset();
}
if (e.isOpened) {
  switch (t.status) {
    case d.UPGRADE_SUCCESS:
      window.gui.openSimplePopup(r("ui.legendaryWeapon.successUpgrading"), r("ui.craft.success"));
      break;
    case d.NOT_ENOUGH_INGREDIENTS:
      window.gui.openSimplePopup(r("ui.craft.dontHaveAllIngredient"));
      break;
    case d.OBJECT_EQUIPPED:
      window.gui.openSimplePopup(r("ui.set.objectEquipped"));
      break;
    case d.NO_WORKBENCH_NEARBY:
      window.gui.openSimplePopup(r("ui.craft.notNearCraftTable"));
      break;
    default:
      window.gui.openSimplePopup(r("ui.craft.failed"));
  }
}
if (e.isOpened) {
  switch (e._clear(), t.status) {
    case f.UPGRADE_SUCCESS:
      window.gui.openSimplePopup(r("ui.legendaryWeapon.successShatter"), r("ui.craft.success"));
      break;
    case f.NOT_ENOUGH_INGREDIENTS:
      window.gui.openSimplePopup(r("ui.craft.dontHaveAllIngredient"));
      break;
    case f.OBJECT_EQUIPPED:
      window.gui.openSimplePopup(r("ui.set.objectEquipped"));
      break;
    case f.NO_WORKBENCH_NEARBY:
      window.gui.openSimplePopup(r("ui.craft.notNearCraftTable"));
      break;
    default:
      window.gui.openSimplePopup(r("ui.craft.failed"));
  }
}
for (var s = 0; s < g; s++) {
  this.resultItemSlots.push(a.appendChild(new c({
    noDoubleTap: !0,
    forceQuantity: !0
  }))), this.resultItemSlots[s].hide();
}
for (var e = 0; e < this.resultItemSlots.length; e++) {
  this.resultItemSlots[e].unset(), this.resultItemSlots[e].hide();
}
if (t = t || n, this._clear(), !e.item) {
  return t(new Error("Unable to find item in the itemInstance of legendary weapon"));
}
for (o = 0; o < e.item.shatterResults.length; o++) {
  a.push(e.item.shatterResults[o].resultResourceId);
}
if (n) {
  return t(n);
}
for (o = 0; o < a.length; o++) {
  var s = i.resultItemSlots[o];
  s.setItem(a[o]), s.setQuantity(e.item.shatterResults[o].resultResourceQty), s.show();
}
if (n) {
  return t(n);
}
if (e) {
  return t(e);
}
for (var o = null, a = 0; a < n.length; a++) {
  if (n[a].typeId === c.types.cosmeticLegendaryWeapon) {
    o = n[a];
    break;
  }
}
if (n[a].typeId === c.types.cosmeticLegendaryWeapon) {
  o = n[a];
  break;
}
if (!this.itemSelected) {
  return t;
}
for (n = 0; n < this.itemSelected.effects.length; n++) {
  var a = this.itemSelected.effects[n];
  if (void 0 !== a.baseValue) {
    o = a.actionId;
    break;
  }
}
if (void 0 !== a.baseValue) {
  o = a.actionId;
  break;
}
for (n = 0; n < this.upgradeWeaponList.length; n++) {
  var s = this.upgradeWeaponList[n];
  if (0 !== s.upgradeEffects.length) {
    for (var r = s.upgradeEffects[0], l = r.typeActionId, c = 0; c < s.possibleEffects.length; c++) {
      var d = s.possibleEffects[c],
        u = e[d.effectId];
      if (u && u.elementId === this.elementSelected && (s.id === this.itemSelected.id && l !== o || s.id !== this.itemSelected.id)) {
        d.effectId === l ? i.unshift(l) : i.push(l), t[l] = {
          weapon: s,
          upgradeEffect: r
        };
        break;
      }
    }
  }
}
if (0 !== s.upgradeEffects.length) {
  for (var r = s.upgradeEffects[0], l = r.typeActionId, c = 0; c < s.possibleEffects.length; c++) {
    var d = s.possibleEffects[c],
      u = e[d.effectId];
    if (u && u.elementId === this.elementSelected && (s.id === this.itemSelected.id && l !== o || s.id !== this.itemSelected.id)) {
      d.effectId === l ? i.unshift(l) : i.push(l), t[l] = {
        weapon: s,
        upgradeEffect: r
      };
      break;
    }
  }
}
for (var r = s.upgradeEffects[0], l = r.typeActionId, c = 0; c < s.possibleEffects.length; c++) {
  var d = s.possibleEffects[c],
    u = e[d.effectId];
  if (u && u.elementId === this.elementSelected && (s.id === this.itemSelected.id && l !== o || s.id !== this.itemSelected.id)) {
    d.effectId === l ? i.unshift(l) : i.push(l), t[l] = {
      weapon: s,
      upgradeEffect: r
    };
    break;
  }
}
if (u && u.elementId === this.elementSelected && (s.id === this.itemSelected.id && l !== o || s.id !== this.itemSelected.id)) {
  d.effectId === l ? i.unshift(l) : i.push(l), t[l] = {
    weapon: s,
    upgradeEffect: r
  };
  break;
}
for (var n = 1, o = 0; o < this.itemSelected.effects.length; o++) {
  var a = this.itemSelected.effects[o];
  if (a.actionId === h.ACTION_GRIND_LEVEL) {
    t.effects.push(a.clone()), n = a.value;
    break;
  }
}
if (a.actionId === h.ACTION_GRIND_LEVEL) {
  t.effects.push(a.clone()), n = a.value;
  break;
}
if (e) {
  return i(e);
}
if (!a) {
  return i(new Error("Unable to find template for " + s.templateId));
}
for (r = 0; r < Math.min(n - 1, a.levels.length); r++) {
  c += a.levels[r].bonusValue;
}
for (r = 0; r < t.effects.length; r++) {
  var d = t.effects[r];
  if (d.effectId === s.typeActionId) {
    d.diceNum += c;
    break;
  }
}
if (d.effectId === s.typeActionId) {
  d.diceNum += c;
  break;
}
if (t._pending !== !0) {
  t._pending = !0, t._transition.delClassNames("highlight");
  var e = this._id,
    i = t._bgWrappers[t._step];
  t._answer[e - 1] ? t._answer[e - 1].addClassNames("disabled") : t._answer[e + 1].addClassNames("disabled"), t._transition.addClassNames("highlight"), i._bg1.toggleClassName("disabled", 1 !== e), i._bg2.toggleClassName("disabled", 2 !== e), i._bg1.toggleClassName("highlight", 1 === e), i._bg2.toggleClassName("highlight", 2 === e), window.setTimeout(function () {
    i._bg1.toggleClassName("selected", 1 === e), i._bg2.toggleClassName("selected", 2 === e);
  }, 301), window.setTimeout(function () {
    t._textWrapper.delClassNames("display");
  }, 1550), window.setTimeout(function () {
    t._nextStep(e);
  }, 1600), window.setTimeout(function () {
    t._transition.delClassNames("highlight"), t._pending = !1;
  }, 2600);
}
for (var n = 0; n < d; n++) {
  var o = this.windowBody.createChild("div", {
    className: ["bgWrapper", "scene" + (n + 1)]
  });
  o._id = n + 1, o._id > 1 && o.hide(), o.createChild("div", {
    className: "bgLeft"
  }), this._bgWrappers[n + 1] = o, o._bg1 = o.createChild("div", {
    className: "bg1"
  }), o._bg2 = o.createChild("div", {
    className: "bg2"
  }), o.createChild("div", {
    className: "bgRight"
  });
}
for (var m = 1; m <= g; m++) {
  var f = p.createChild("div", {
    className: ["icon", "role" + m]
  });
  d.addTooltip(f, s.getRoleText(m), {
    longTapExplanation: !0
  }), f.id = m, f.hide(), this._icons.push(f);
}
if (!i) {
  return [];
}
for (var n, o = t === h ? i.femaleColors : i.maleColors, a = [], s = 0; s < o.length; s++) {
  n = u.parseIndexedColor(o[s]).color, a.push(u.getIndexedColor(s + 1, n.r, n.g, n.b));
}
if (this._dialogsData) {
  return e();
}
for (i = 0; i < n.length; i++) {
  n[i].dialog && r.push(n[i].dialog.id);
}
for (i = 0; i < o.length; i++) {
  o[i].dialog && r.push(o[i].dialog.id);
}
if (this._isOnAlbueraMap()) {
  if (this.currentSpecialStepId === -1) {
    for (var i in a.SPECIAL_STEPS) {
      a.SPECIAL_STEPS.hasOwnProperty(i) && a.SPECIAL_STEPS[i].startingCondition(e, t) && this.changeSpecialStep(i);
    }
  } else {
    var n = a.SPECIAL_STEPS[this.currentSpecialStepId];
    n.endingCondition(e, t) && this.changeSpecialStep(-1);
  }
  if (this.currentStep) {
    var o = this.currentStepId + this.currentStep.endingCondition(e, t);
    o !== this.currentStepId && this.changeStep(o);
  }
}
if (this.currentSpecialStepId === -1) {
  for (var i in a.SPECIAL_STEPS) {
    a.SPECIAL_STEPS.hasOwnProperty(i) && a.SPECIAL_STEPS[i].startingCondition(e, t) && this.changeSpecialStep(i);
  }
} else {
  var n = a.SPECIAL_STEPS[this.currentSpecialStepId];
  n.endingCondition(e, t) && this.changeSpecialStep(-1);
}
for (var i in a.SPECIAL_STEPS) {
  a.SPECIAL_STEPS.hasOwnProperty(i) && a.SPECIAL_STEPS[i].startingCondition(e, t) && this.changeSpecialStep(i);
}
if (this.currentStep) {
  var o = this.currentStepId + this.currentStep.endingCondition(e, t);
  o !== this.currentStepId && this.changeStep(o);
}
if (e) {
  for (var t = a.STEPS, i = 0; i < t.length; i++) {
    if (t[i].questStepCheckpoint === e.stepId) {
      return i;
    }
  }
}
for (var t = a.STEPS, i = 0; i < t.length; i++) {
  if (t[i].questStepCheckpoint === e.stepId) {
    return i;
  }
}
if (t[i].questStepCheckpoint === e.stepId) {
  return i;
}
if (this.currentStepId = e, this.currentStep && (window.gui.portraitDialogUI.removeDialog(), this.currentStep.executeEnd()), this.currentStep = a.STEPS[this.currentStepId], this.currentStep) {
  var t = this.currentStep.dialog;
  !window.foreground.lockMap.loadMap && this._dialogsData && t && this._dialogsData[t.id] && window.gui.portraitDialogUI.displayDialog({
    portraitName: t.portrait,
    npcName: c("ui.albueraTutorial.portraitName"),
    content: this._dialogsData[t.id].messageId,
    rightPosition: Boolean(t.rightPosition),
    blockClick: Boolean(t.blockClick)
  }), this.currentStep.executeStart();
}
if (t && (window.gui.portraitDialogUI.removeDialog(), t.executeEnd()), this.currentSpecialStepId = e, t = a.SPECIAL_STEPS[this.currentSpecialStepId]) {
  var i = t.dialog;
  this._dialogsData && i && (window.gui.portraitDialogUI.displayDialog({
    portraitName: i.portrait,
    npcName: c("ui.albueraTutorial.portraitName"),
    content: this._dialogsData[i.id].messageId,
    rightPosition: Boolean(i.rightPosition),
    blockClick: Boolean(i.blockClick)
  }), t.executeStart());
}
if (t) {
  var i = t.tabs.tabsMap.spells;
  i && i.target.displayHighlightPlusBtn(e);
}
if (window.gui.playerData.quests.all[t.ALBUERA_QUEST_ID] && e === window.gui.scenarioManager.conditionTypeEnum.FIGHT_START) {
  var i = window.actorManager.actors[-1];
  if (i && i.data && 4210 === i.data.creatureGenericId) {
    return window.gui.mainControls.open(), !0;
  }
}
if (i && i.data && 4210 === i.data.creatureGenericId) {
  return window.gui.mainControls.open(), !0;
}
if (!this._init) {
  this._portrait = this.appendChild(new l("div", {
    className: "portrait"
  }));
  var e = this.appendChild(new l("div", {
      className: "dialog"
    })),
    t = e.appendChild(new l("div", {
      className: "dialogHeader"
    }));
  this._npcName = t.appendChild(new l("div", {
    className: "dialogHeaderTitle"
  })), this._content = e.appendChild(new l("div", {
    className: "dialogContent"
  })), this.hide();
}
if (!e) {
  return console.warn("ActorElement.getPosition - Actor not found"), {};
}
if (!this.element) {
  return console.warn("InteractiveElement.getPosition - Element does not exist"), {};
}
if (!this.cellId) {
  return console.warn("CellElement.getPosition - No cellId"), {};
}
if (this.stopHint(), window.foreground.lockMap.loadMap) {
  return this.currentElement = e, void (this.currentParams = t);
}
if (this.currentElement = null, this.currentParams = null, !(e && e instanceof o)) {
  return console.error("HintAnimationManager - The element does not exist or is not a Element");
}
if (e !== this.currentLevel) {
  switch (this.currentLevel = e, this.lockingDiv || this._createContent(), this.autoRemoveTimeout = window.clearTimeout(this.autoRemoveTimeout), this.show(), s.forceReflow(this), e) {
    case u:
      this.replaceClassNames(["hidding", "warning"], ["blocking"]), this.autoRemoveTimeout = window.setTimeout(o, h, this);
      break;
    case d:
      this.replaceClassNames(["hidding", "blocking"], ["warning"]);
  }
}
if (e !== this.state) {
  switch (this.state = e, e) {
    case "UNSTABLE":
      this._appear(t || d), this.message.setText(a("tablet.connect.lost"));
      break;
    case "RECONNECTING":
      this._appear(this.currentLevel || d), this.message.setText(a("tablet.connect.retrying", t));
      break;
    case "RELOADING":
      this._appear(u), this.message.setText(a("tablet.connect.reloading"));
      break;
    case "CONNECTED":
    case "DISCONNECTED":
      this._disappear();
      break;
    default:
      console.error("ConnectionSplashScreen#onStateChange: invalid state: " + e);
  }
}
if (!N) {
  return this._webGlUnsupported = this.createChild("div", {
    className: "webGlUnsupported"
  }), this._webGlUnsupported.setText(u("tablet.login.webGlUnsupported")), void console.error("WebGL is not supported");
}
for (var i = this._splashScreenNews.length - 1; i >= 0; i -= 1) {
  var n = this._splashScreenNews[i];
  this.appendChild(n);
}
for (var i = [], n = 0; n < t.length; n++) {
  var o = t[n];
  i.push({
    caption: o.getCaption(),
    cb: o.cb
  });
}
for (var e = [], o = i.language, s = 0; s < i.serverLanguages.length; s++) {
  var r = i.serverLanguages[s],
    c = new a("div", {
      className: "langLine"
    }),
    d = L[r];
  d || (console.error(new Error("No language label for language " + r)), d = r), c.createChild("div", {
    className: "caption",
    text: d
  });
  var u = ["langLineParent"];
  r === o && u.push("current"), e.push({
    wuiDomChild: c,
    addClassNames: u,
    lang: r,
    cb: t
  });
}
if (e !== t.language) {
  return this._changeLangMethod === R.RELOAD_PAGE ? (g.setValue("lang", e), g.saveNow(), void window.location.reload()) : void d.initialize({
    language: e,
    chaseText: t.chaseText
  }, b, w, function (n) {
    return n ? console.error("LoginScreen getText init", n) : (t.language = e, i.backToLogin(), g.setValue("lang", e, 1), void i._updateContent());
  });
}
if (h.hasKeyFromStorage() && !window.Config.byPassToken) {
  this.showTokenForm();
} else if (window.Config.disabledFeatures.guest) {
  this.showLoginForm();
} else {
  var e = g.getValue("hasAccount", !1, !0);
  e ? this.showLoginForm() : this.showGuestForm();
}
if (window.Config.disabledFeatures.guest) {
  this.showLoginForm();
} else {
  var e = g.getValue("hasAccount", !1, !0);
  e ? this.showLoginForm() : this.showGuestForm();
}
for (var e = 0; e < this._splashScreenNews.length; e += 1) {
  var t = this._splashScreenNews[e];
  t.showSplashScreen(window.Config.language);
}
if (this._startMilliTimestamp > n) {
  return !1;
}
if (this._endMilliTimestamp !== -1 && n > this._endMilliTimestamp) {
  return !1;
}
if (!i.isAlreadyGuest) {
  return void u.open("legalAgreement", o);
}
if (!n) {
  return o.onValidate = t, void u.open("legalAgreement", o);
}
if (a) {
  var s = Date.now() - a;
  if (s > 864e5) {
    return window.gui.openConfirmPopup({
      title: r("tablet.oldGuest.register"),
      message: r("tablet.oldGuest.registerReminder"),
      cb: function (t) {
        return t ? e.openRegisterWindow(i.guestAccount) : void i._play();
      }
    }), void i._updateLastIdentificationTime();
  }
} else {
  i._updateLastIdentificationTime();
}
if (s > 864e5) {
  return window.gui.openConfirmPopup({
    title: r("tablet.oldGuest.register"),
    message: r("tablet.oldGuest.registerReminder"),
    cb: function (t) {
      return t ? e.openRegisterWindow(i.guestAccount) : void i._play();
    }
  }), void i._updateLastIdentificationTime();
}
if (t) {
  var n = t.userError || r("ui.secureMode.error.default");
  return window.gui.openSimplePopup(n), console.error("GuestForm#_createGuest error:", t.error), void e._btnPlay.enable();
}
for (var e in u.connectMethod) {
  this.connectionMethodSelector.addOption(r("tablet.login.connectionOption." + e), e);
}
for (var e = 0; e < l.length; e++) {
  var t = l[e];
  this === t ? t._expand() : t._retract();
}
if (t) {
  return window.developmentMode && console.error(t), e._content.delClassNames("spinner"), e._content.setHtml(h("tablet.login.forumUnreachable")), void m.allLinksOnTargetBlank(e._content);
}
if (e._content.delClassNames("spinner"), t) {
  return e._content.setHtml(h("tablet.login.forumUnreachable")), void m.allLinksOnTargetBlank(e._content);
}
for (o = 0; o < a.length; o++) {
  c += 0 === o ? "<h2>" + a[o].title + "</h2><br/>" : "<br /><br /><center>* * *</center><br />";
  var d = a[o].content;
  d = s(d), d = u.process({
    text: d
  }).html, d = r(d), c += d;
}
for (e in r) {
  if (r.hasOwnProperty(e)) {
    for ("*" === e ? l.push("\\" + e) : (l.push(e), r[e].noParse && C.push(e)), r[e].validChildLookup = {}, r[e].validParentLookup = {}, r[e].restrictParentsTo = r[e].restrictParentsTo || [], r[e].restrictChildrenTo = r[e].restrictChildrenTo || [], i = r[e].restrictChildrenTo.length, t = 0; t < i; t++) {
      r[e].validChildLookup[r[e].restrictChildrenTo[t]] = !0;
    }
    for (i = r[e].restrictParentsTo.length, t = 0; t < i; t++) {
      r[e].validParentLookup[r[e].restrictParentsTo[t]] = !0;
    }
  }
}
if (r.hasOwnProperty(e)) {
  for ("*" === e ? l.push("\\" + e) : (l.push(e), r[e].noParse && C.push(e)), r[e].validChildLookup = {}, r[e].validParentLookup = {}, r[e].restrictParentsTo = r[e].restrictParentsTo || [], r[e].restrictChildrenTo = r[e].restrictChildrenTo || [], i = r[e].restrictChildrenTo.length, t = 0; t < i; t++) {
    r[e].validChildLookup[r[e].restrictChildrenTo[t]] = !0;
  }
  for (i = r[e].restrictParentsTo.length, t = 0; t < i; t++) {
    r[e].validParentLookup[r[e].restrictParentsTo[t]] = !0;
  }
}
for ("*" === e ? l.push("\\" + e) : (l.push(e), r[e].noParse && C.push(e)), r[e].validChildLookup = {}, r[e].validParentLookup = {}, r[e].restrictParentsTo = r[e].restrictParentsTo || [], r[e].restrictChildrenTo = r[e].restrictChildrenTo || [], i = r[e].restrictChildrenTo.length, t = 0; t < i; t++) {
  r[e].validChildLookup[r[e].restrictChildrenTo[t]] = !0;
}
for (i = r[e].restrictParentsTo.length, t = 0; t < i; t++) {
  r[e].validParentLookup[r[e].restrictParentsTo[t]] = !0;
}
for (var e = [], t = 0; t < l.length; t++) {
  "\\*" !== l[t] && e.push("/" + l[t]);
}
for (f.lastIndex = 0, _ || (s = ""), p = 0; p < _.length; p++) {
  g.lastIndex = 0, m = _[p].match(g)[2].toLowerCase(), v && v.restrictChildrenTo && v.restrictChildrenTo.length > 0 && (v.validChildLookup[m] || (h = 'The tag "' + m + '" is not allowed as a child of the tag "' + e + '".', d.push(h))), u = r[m] || {}, u.restrictParentsTo.length > 0 && (u.validParentLookup[e] || (h = 'The tag "' + e + '" is not allowed as a parent of the tag "' + m + '".', d.push(h)));
}
for (e = e.replace(/\[(?!\*[ =\]]|list([ =][^\]]*)?\]|\/list[\]])/gi, "<"), e = e.replace(/\[(?=list([ =][^\]]*)?\]|\/list[\]])/gi, ">"); e !== (e = e.replace(/>list([ =][^\]]*)?\]([^>]*?)(>\/list])/gi, function (e, t, i) {
  for (var n = e; n !== (n = n.replace(/\[\*\]([^\[]*?)(\[\*\]|>\/list])/i, function (e, t, i) {
    i = ">/list]" === i ? "</*]</list]" : "</*][*]";
    var n = "<*]" + t + i;
    return n;
  }));) {
    ;
  }
  return n = n.replace(/>/g, "<");
}));) {
  ;
}
for (var n = e; n !== (n = n.replace(/\[\*\]([^\[]*?)(\[\*\]|>\/list])/i, function (e, t, i) {
  i = ">/list]" === i ? "</*]</list]" : "</*][*]";
  var n = "<*]" + t + i;
  return n;
}));) {
  ;
}
for (var t = function (e, t, n, o) {
  return e = e.replace(/\[/g, "<"), e = e.replace(/\]/g, ">"), i(e);
}; e !== (e = e.replace(d, t));) {
  ;
}
if (i = i.trim(), f.lastIndex = 0, f.test(i) || (i = ""), !e) {
  return '<img src="' + i + '" />';
}
if ((n.match(/alt=/gi) || []).length > 1) {
  return '<img src="' + i + '" />';
}
if ((n.match(/width=/gi) || []).length > 1) {
  return '<img src="' + i + '" />';
}
if ((n.match(/height=/gi) || []).length > 1) {
  return '<img src="' + i + '" />';
}
if (r) {
  for (var l = 1; l < r.length; l++) {
    var c = r[l] || "";
    c = c.trim(), /alt=/i.test(c) ? o = c.substr(4) : /width=/i.test(c) ? a = c.substr(6) : /height=/i.test(c) && (s = c.substr(7));
  }
}
for (var l = 1; l < r.length; l++) {
  var c = r[l] || "";
  c = c.trim(), /alt=/i.test(c) ? o = c.substr(4) : /width=/i.test(c) ? a = c.substr(6) : /height=/i.test(c) && (s = c.substr(7));
}
if (o = o.trim(), o = o.replace(/<.*?>/g, ""), "" === o) {
  return i + n;
}
if (0 === o.indexOf("=")) {
  var a = o.substr(1);
  return i = '<div class="quoteHeader">', i += "Quote From: " + a, i += "</div>", i + n;
}
if (/author="/i.test(o)) {
  var s = o.toLowerCase(),
    r = o.substr(s.indexOf('author="') + 7);
  return r = r.replace(/"/g, ""), i = '<div class="quoteHeader">', i += "Quote From: " + r, i += "</div>", i + n;
}
if (u.length > 1 || 0 === u.length) {
  return i + n;
}
if ((o.match(/link=/gi) || []).length > 1) {
  return i + n;
}
if ((o.match(/date=/gi) || []).length > 1) {
  return i + n;
}
if (h) {
  for (var p = 1; p < h.length; p++) {
    var m = h[p] || "";
    m = m.trim(), /author=/i.test(m) ? l = m.substr(7) : /link=/i.test(m) ? (c = m.substr(5), M.test(c) || T.test(c) || (c = void 0)) : /date=/i.test(m) && (d = Number(m.substr(5)));
  }
}
for (var p = 1; p < h.length; p++) {
  var m = h[p] || "";
  m = m.trim(), /author=/i.test(m) ? l = m.substr(7) : /link=/i.test(m) ? (c = m.substr(5), M.test(c) || T.test(c) || (c = void 0)) : /date=/i.test(m) && (d = Number(m.substr(5)));
}
if (l = e.substr(1) || "", l = l.replace(/<.*?>/g, ""), l.indexOf(",") < 0) {
  return "<span>";
}
if (n = l.split(",")[0], n = n.trim(), n = n.toLowerCase(), _.lastIndex = 0, v.lastIndex = 0, _.test(n) || (v.test(n) ? "#" !== n.substr(0, 1) && (n = "#" + n) : n = "black"), o = l.split(",")[1] || "", o = o.trim()) {
  if (s.test(o)) {
    o = "left" === o ? " -2px 2px" : "right" === o ? " 2px 2px" : "top" === o ? " 0 -2px" : "bottom" === o ? " 0 2px" : " 0 0";
  } else if (r.test(o)) {
    var c = o,
      d = .0174532925 * c;
    o = " " + Math.round(4 * Math.cos(d)) + "px", o += " " + Math.round(-4 * Math.sin(d)) + "px";
  } else {
    o = " 0 0";
  }
} else {
  o = " 0 0";
}
if (s.test(o)) {
  o = "left" === o ? " -2px 2px" : "right" === o ? " 2px 2px" : "top" === o ? " 0 -2px" : "bottom" === o ? " 0 2px" : " 0 0";
} else if (r.test(o)) {
  var c = o,
    d = .0174532925 * c;
  o = " " + Math.round(4 * Math.cos(d)) + "px", o += " " + Math.round(-4 * Math.sin(d)) + "px";
} else {
  o = " 0 0";
}
if (r.test(o)) {
  var c = o,
    d = .0174532925 * c;
  o = " " + Math.round(4 * Math.cos(d)) + "px", o += " " + Math.round(-4 * Math.sin(d)) + "px";
} else {
  o = " 0 0";
}
for (i in t) {
  r[i] = t[i];
}
for (e.text = e.text.replace(/</g, "&lt;"), e.text = e.text.replace(/>/g, "&gt;"), e.text = e.text.replace(h, function (e, t, i, n) {
  return "<" + i + ">";
}), e.text = e.text.replace(p, function (e, t, i, n) {
  return "<" + i + ">";
}), e.text = e.text.replace(/\[/g, "&#91;"), e.text = e.text.replace(/\]/g, "&#93;"), e.text = e.text.replace(/</g, "["), e.text = e.text.replace(/>/g, "]"); e.text !== (e.text = e.text.replace(u, function (e, t, i, n) {
  return n = n.replace(/\[/g, "&#91;"), n = n.replace(/\]/g, "&#93;"), i = i || "", n = n || "", "[" + t + i + "]" + n + "[/" + t + "]";
}));) {
  ;
}
if (e) {
  for (var t = re.getChildren(), i = 0; i < g; i++) {
    t[i + 1].setText((i > 0 ? ", " : "") + e[i]);
  }
  re.addClassNames("visible");
}
for (var t = re.getChildren(), i = 0; i < g; i++) {
  t[i + 1].setText((i > 0 ? ", " : "") + e[i]);
}
for (var se = _.createChild("div", {
    className: "info"
  }), re = _.createChild("div", {
    className: "suggestion"
  }), le = re.createChild("label", {
    className: "label"
  }), ce = 0; ce < g; ce++) {
  re.createChild("span", {
    className: "set"
  });
}
if (i && n && o) {
  var a = i + "-" + f.leadWithZero(n) + "-" + f.leadWithZero(o) + "T00:00Z",
    s = new Date(a);
  y = s.getTime();
  var r = Date.now(),
    l = !t(parseInt(i, 10), parseInt(n, 10), parseInt(o, 10)) || isNaN(y) || y > r;
  A.toggleDisplay(l), l && (y = null), e();
}
if (t) {
  return console.error("BirthdayLimitWindow: registerOpenRequest", t);
}
if (!navigator.connection) {
  return !1;
}
if (!e && 0 !== e) {
  return v("tablet.common.computingTimeLeft");
}
if (n) {
  t.unshift(n + " " + v("ui.time.hours", n));
} else {
  var o = (e < 0 ? 0 : e) % x;
  t.push(o + " " + v("ui.time.seconds", o));
}
for (var t in e) {
  var i = N[t];
  i && this._state[t] !== e[t] && i.call(this, e[t]);
}
if (t) {
  return console.error(t);
}
if (e._hasStopped()) {
  return e._tryClose();
}
for (var o in i) {
  n.push(i[o].id);
}
if (r) {
  return r.fetch(n, o, s.getEnvName() + e);
}
if (n) {
  return n.store(function () {
    i();
  }, i, s.getEnvName() + t, e);
}
if (!n) {
  return t();
}
if (!this._createdDom) {
  this.setTitle(r("ui.cleanAssets.title"));
  var e = this.windowBody,
    t = e.createChild("div", {
      className: "descriptionBlock"
    });
  t.createChild("div", {
    text: r("ui.cleanAssets.description")
  });
  var i = e.createChild("div", {
    className: "preloadBarBlock"
  });
  this._progressBar = i.appendChild(new c({
    className: ["green"],
    epsilon: 0
  })), this._createdDom = !0;
}
if (0 === t) {
  return d.close(this.id);
}
if (t.length) {
  var i = t[t.length - 1];
  if (i.message === e.message && i.title === e.title) {
    return;
  }
}
if (i.message === e.message && i.title === e.title) {
  return;
}
if (n.origin === e.origin) {
  var a = n.data;
  return "recaptchaShow" === a.type ? i.recaptcha.show() : (window.removeEventListener("message", o), s.close("recaptcha"), t(a));
}
if (c) {
  return !0;
}
if (this._logger = e, !this._logger || !this._logger.error) {
  throw new Error("Need the logger.");
}
if (e === i.store.VALID && this._makePurchaseCb && this._purchasingProduct === t.id && this._callbackStoreOrder("CANCELLED"), e === i.store.APPROVED && this._makePurchaseCb && this._purchasingProduct === t.id) {
  var n = new l(this._logger, t);
  this._callbackStoreOrder(null, n.getWizPurchaseObject());
}
if (r) {
  return a >= h ? e(new Error("Max limit of refreshes reach.")) : void i();
}
if (!this.isAvailable()) {
  return t(new Error("not available."));
}
if (n()) {
  return i.store.applicationUsername = e, t();
}
if (!this.isAvailable()) {
  return t(new Error("not available."));
}
if (!Array.isArray(e)) {
  return t(new Error("Need an array."));
}
if (n()) {
  for (var o = new r(i.store, this._logger), a = 0; a < e.length; a += 1) {
    var l = e[a],
      c = i.store.get(l);
    o.addProduct(c);
  }
  return t(null, o.getProductsRequest());
}
for (var o = new r(i.store, this._logger), a = 0; a < e.length; a += 1) {
  var l = e[a],
    c = i.store.get(l);
  o.addProduct(c);
}
if (!this.isAvailable()) {
  return t(new Error("not available."));
}
if (!Array.isArray(e)) {
  return t(new Error("Need an array."));
}
if (!n()) {
  return t();
}
for (var r = 0; r < e.length; r += 1) {
  var l = e[r],
    c = a.store.get(l);
  c || (a.store.register({
    id: l,
    alias: l,
    type: a.store.CONSUMABLE
  }), this._keys.push(l));
}
if (!this.isAvailable()) {
  return t(new Error("not available."));
}
if (n()) {
  var a = i.store.get(e);
  return a ? a.state !== i.store.APPROVED ? t(o("finishPurchase", "Cannot finish, " + e + " not APPROVED")) : (a.finish(), t()) : t(o("finishPurchase", "No product found for " + e));
}
if (!this.isAvailable()) {
  return t(new Error("not available."));
}
if (!this.isAvailable()) {
  return e(new Error("not available."));
}
if (n()) {
  return e(null, []);
}
if (!this.isAvailable()) {
  return e(new Error("not available."));
}
if (n()) {
  for (var i = [], o = 0; o < this._keys.length; o += 1) {
    var a = this._keys[o],
      r = t.store.get(a);
    if (r && r.state === t.store.APPROVED) {
      var c = new l(this._logger, r);
      i.push(c.getWizPurchaseObject());
    }
  }
  return e(null, i);
}
for (var i = [], o = 0; o < this._keys.length; o += 1) {
  var a = this._keys[o],
    r = t.store.get(a);
  if (r && r.state === t.store.APPROVED) {
    var c = new l(this._logger, r);
    i.push(c.getWizPurchaseObject());
  }
}
if (r && r.state === t.store.APPROVED) {
  var c = new l(this._logger, r);
  i.push(c.getWizPurchaseObject());
}
if (!this.isAvailable()) {
  return e(new Error("not available."));
}
if (n()) {
  return this._storeRefresh(e);
}
if (!this.isAvailable()) {
  return !1;
}
if (this._logger = t, !this._logger || !this._logger.error) {
  throw new Error("Need the logger.");
}
if (e) {
  if (e.state === this._store.REGISTERED || e.state === this._store.INVALID) {
    return void this._logger.error(new Error("Product id: " + e.id + " is " + e.state));
  }
  if (!e.priceMicros) {
    return void this._logger.error(new Error("Product id: " + e.id + " has no micro prices, state: " + e.state));
  }
  if (!e.price) {
    return void this._logger.error(new Error("Product id: " + e.id + " has no prices, state: " + e.state));
  }
  var t = {
    productId: e.id,
    description: e.description,
    priceMicros: e.priceMicros,
    price: e.price
  };
  this.definition.products[t.productId] = t, !this.definition.currency && e.currency && (this.definition.currency = e.currency), !this.definition.country && e.countryCode && (this.definition.country = e.countryCode), this.definition.currency && this.definition.currency !== e.currency && this._logger.error(new Error("Product id: " + e.id + " has a currency " + e.currency + " but we stored " + this.definition.currency));
}
if (e.state === this._store.REGISTERED || e.state === this._store.INVALID) {
  return void this._logger.error(new Error("Product id: " + e.id + " is " + e.state));
}
if (!e.priceMicros) {
  return void this._logger.error(new Error("Product id: " + e.id + " has no micro prices, state: " + e.state));
}
if (!e.price) {
  return void this._logger.error(new Error("Product id: " + e.id + " has no prices, state: " + e.state));
}
for (var t = e.target; t !== document.body;) {
  var n = window.getComputedStyle(t),
    o = n.getPropertyValue("-webkit-overflow-scrolling"),
    a = n.getPropertyValue("overflow-y"),
    s = parseInt(n.getPropertyValue("height"), 10),
    r = "touch" === o && ("auto" === a || "scroll" === a),
    l = t.scrollHeight > t.offsetHeight;
  if (r && l) {
    var c = e.touches ? e.touches[0].screenY : e.screenY,
      d = i <= c && 0 === t.scrollTop,
      u = i >= c && t.scrollHeight - t.scrollTop === s;
    return void ((d || u) && e.preventDefault());
  }
  t = t.parentNode;
}
if (r && l) {
  var c = e.touches ? e.touches[0].screenY : e.screenY,
    d = i <= c && 0 === t.scrollTop,
    u = i >= c && t.scrollHeight - t.scrollTop === s;
  return void ((d || u) && e.preventDefault());
}
for (var t in window.localStorage) {
  window.localStorage.hasOwnProperty(t) && (e += 2 * (localStorage[t].length + t.length));
}
if (window.dofus.sendMessage("GameMapMovementConfirmMessage", null), this.emit("movementConfirm", e), this.mapRenderer.removeMovementFeedback(), this.endMovementCallback) {
  var t = this.endMovementCallback;
  this.endMovementCallback = null, t(null, e);
}
if (this.isMovementWaitingForConfirmation) {
  return this.lastMoveRequestTime && !s.isDialogActive() && Date.now() - this.lastMoveRequestTime > u && window.gui.connectionSplashScreen.onStateChange("UNSTABLE"), this.endMovementCallback = e, void (this.isMovementCanceled = !0);
}
if (this.isMovementWaitingForConfirmation = !1, window.gui.connectionSplashScreen.onStateChange("CONNECTED"), window.gui.emit("checkServerLag", "roleplayUserActorMovement", "stop"), this.isMovementCanceled) {
  return this.cancelUserActorMovement(this.endMovementCallback);
}
if (!n.moving) {
  for (var o = null, a = 0; a < e.length; a++) {
    if (e[a] === n.cellId) {
      o = a;
      break;
    }
  }
  if (null === o) {
    return n.cellId !== i && n.setDisposition(i), this.onArrived(i);
  }
  if (n.cellId === i) {
    return n.setDisposition(i), this.onArrived(i);
  }
  var s = e.slice(o);
  n.setPath(s, {
    cb: function () {
      t.emit("arrived", i);
    }
  }), n.setCellPosition(s[s.length - 1]);
}
for (var o = null, a = 0; a < e.length; a++) {
  if (e[a] === n.cellId) {
    o = a;
    break;
  }
}
if (e[a] === n.cellId) {
  o = a;
  break;
}
if (null === o) {
  return n.cellId !== i && n.setDisposition(i), this.onArrived(i);
}
if (n.cellId === i) {
  return n.setDisposition(i), this.onArrived(i);
}
if (i && "function" == typeof i || (i = function () {}), window.gui.playerData.inventory.isOverloaded() && !window.gui.playerData.isMutant()) {
  return void window.gui.chat.logMsg(r("tablet.inventoryFullCannotMove"));
}
if (s === e) {
  return i(null, e), e;
}
for (var l = 0; l < h.length; l++) {
  if (n.look.bonesId === h[l]) {
    return null;
  }
}
if (n.look.bonesId === h[l]) {
  return null;
}
if (p.length <= 1) {
  return i(new Error("_movePlayerOnMap noPath:" + s + ":" + e)), null;
}
if (!this.mapRenderer.isReady) {
  return -1;
}
if (this.actorManager.userActor.moving) {
  return this.cancelUserActorMovement(function () {
    a.gotoNeighbourMap(e, t, i, n);
  });
}
if (null === this.bitmapFonts) {
  var e = this;
  f.loadModel("bitmapFonts", "atlas", function (t, i) {
    var n = e.mapScene.createTexture(i, "atlas", "mimap", "permanent");
    e.bitmapFonts = {
      characters: {
        dimensions: t.characters,
        texture: n
      },
      numbers: {
        dimensions: t.numbers,
        texture: n
      }
    };
  });
}
if (!window.gui.isConnected) {
  return e && e();
}
if (window.gui.playerData && window.gui.playerData.isFighting) {
  return e && e();
}
if (this.endMovementCallback = null, this.isMovementCanceled = !1, this.isMovementWaitingForConfirmation = !1, this.mapRenderer.removeMovementFeedback(), this.actionQueue.clear(), this.isMapChanging = !0, this.interactiveMessageStack = [], m.isDialogActive()) {
  return e && e();
}
if (window.foreground.unlock("quickReconnection"), t.userPreviousPosition) {
  var i = t.userPreviousPosition;
  window.dofus.sendMessage("GameMapMovementCancelMessage", {
    cellId: i
  });
  var n = t.actorManager.userActor;
  n.noMovement(), n.setDisposition(i, n.direction);
}
if (!t) {
  var i = this.actorManager.actors,
    n = i[e];
  if (n) {
    var o = n.cellId,
      a = this.actorManager.userActor,
      s = function () {
        window.dofus.sendMessage("GameRolePlayAttackMonsterRequestMessage", {
          monsterGroupId: e
        });
      };
    return a.cellId === o ? s() : void this._movePlayerOnMap(o, !1, s);
  }
}
if (n) {
  var o = n.cellId,
    a = this.actorManager.userActor,
    s = function () {
      window.dofus.sendMessage("GameRolePlayAttackMonsterRequestMessage", {
        monsterGroupId: e
      });
    };
  return a.cellId === o ? s() : void this._movePlayerOnMap(o, !1, s);
}
if (i === y.BATTLE) {
  var n = {
    _messageType: "messageSequence",
    isFakeSequence: !0,
    sequence: [{
      _messageType: "SequenceStartMessage"
    }, e, {
      _messageType: "SequenceEndMessage"
    }]
  };
  this.emit("messageSequence", n);
} else {
  t.transmitFightSequenceMessage(e);
}
for (var e = this.animatedElements, t = 0; t < e.length; t++) {
  e[t].stop();
}
for (var e = this.animatedElements, t = 0; t < e.length; t++) {
  e[t].animate();
}
for (var i = e.mapData, n = e.msg, o = {}, a = n.statedElements, s = 0; s < a.length; s++) {
  o[a[s].elementId] = !0;
}
for (var f, g = i.midgroundLayer, _ = Object.keys(g), v = 0; v < _.length; v++) {
  for (var y = _[v], C = g[y], I = 0; I < C.length; I++) {
    var A = C[I];
    A.position = parseInt(y, 10), A.layer = l.MAP_LAYER_PLAYGROUND, A.scene = this.mapScene;
    var S = A.hue;
    if (S[0] = 1 + S[0] / 127, S[1] = 1 + S[1] / 127, S[2] = 1 + S[2] / 127, S[3] = 1, A.look) {
      if (A.id && o[A.id]) {
        f = r.loadStatedElement(A), this.statedElements.push(f);
      } else {
        if (!A.anim) {
          console.warn("[MapRenderer.loadMap] Animated Graphic skipped", A);
          continue;
        }
        f = r.loadAnimatedGraphic(A), this.animatedElements.push(f), this.graphics.push(f);
      }
    } else {
      if (!A.g) {
        console.warn("[MapRenderer.loadMap] Element of unidentified type skipped", A);
        continue;
      }
      f = c.addSprite(A, m[A.g]);
    }
    f.id && (this.identifiedElements[f.id] = f);
  }
}
for (var y = _[v], C = g[y], I = 0; I < C.length; I++) {
  var A = C[I];
  A.position = parseInt(y, 10), A.layer = l.MAP_LAYER_PLAYGROUND, A.scene = this.mapScene;
  var S = A.hue;
  if (S[0] = 1 + S[0] / 127, S[1] = 1 + S[1] / 127, S[2] = 1 + S[2] / 127, S[3] = 1, A.look) {
    if (A.id && o[A.id]) {
      f = r.loadStatedElement(A), this.statedElements.push(f);
    } else {
      if (!A.anim) {
        console.warn("[MapRenderer.loadMap] Animated Graphic skipped", A);
        continue;
      }
      f = r.loadAnimatedGraphic(A), this.animatedElements.push(f), this.graphics.push(f);
    }
  } else {
    if (!A.g) {
      console.warn("[MapRenderer.loadMap] Element of unidentified type skipped", A);
      continue;
    }
    f = c.addSprite(A, m[A.g]);
  }
  f.id && (this.identifiedElements[f.id] = f);
}
if (S[0] = 1 + S[0] / 127, S[1] = 1 + S[1] / 127, S[2] = 1 + S[2] / 127, S[3] = 1, A.look) {
  if (A.id && o[A.id]) {
    f = r.loadStatedElement(A), this.statedElements.push(f);
  } else {
    if (!A.anim) {
      console.warn("[MapRenderer.loadMap] Animated Graphic skipped", A);
      continue;
    }
    f = r.loadAnimatedGraphic(A), this.animatedElements.push(f), this.graphics.push(f);
  }
} else {
  if (!A.g) {
    console.warn("[MapRenderer.loadMap] Element of unidentified type skipped", A);
    continue;
  }
  f = c.addSprite(A, m[A.g]);
}
if (A.id && o[A.id]) {
  f = r.loadStatedElement(A), this.statedElements.push(f);
} else {
  if (!A.anim) {
    console.warn("[MapRenderer.loadMap] Animated Graphic skipped", A);
    continue;
  }
  f = r.loadAnimatedGraphic(A), this.animatedElements.push(f), this.graphics.push(f);
}
if (!A.anim) {
  console.warn("[MapRenderer.loadMap] Animated Graphic skipped", A);
  continue;
}
if (!A.g) {
  console.warn("[MapRenderer.loadMap] Element of unidentified type skipped", A);
  continue;
}
if (r.nAssetsToLoad += 1, d.loadTexture(L, function (e) {
  x.background.updateMap(e), r.notifyAssetAsLoaded();
}, this.mapScene.renderer, "linear"), i.foreground) {
  var O = new u({
    x: -l.HORIZONTAL_OFFSET,
    y: -l.VERTICAL_OFFSET,
    w: l.MAP_SCENE_WIDTH,
    h: l.MAP_SCENE_HEIGHT,
    scene: this.mapScene,
    layer: l.MAP_LAYER_FOREGROUND
  });
  this.graphics.push(O);
  var R = N + i.id + ".png";
  r.nAssetsToLoad += 1, d.loadTexture(R, function (e) {
    if ("empty_texture" === e.id) {
      O.remove();
      var t = x.graphics.indexOf(O);
      t !== -1 && x.graphics.splice(t, 1);
    } else {
      O.texture = e, O.forceRefresh();
    }
    r.notifyAssetAsLoaded();
  }, this.mapScene.renderer, "linear");
}
if ("empty_texture" === e.id) {
  O.remove();
  var t = x.graphics.indexOf(O);
  t !== -1 && x.graphics.splice(t, 1);
} else {
  O.texture = e, O.forceRefresh();
}
for (var e = 0; e < this.statedElements.length; e++) {
  var t = this.statedElements[e];
  t.changeState(1, !0);
}
for (var i in this.objects) {
  this.objects[i].remove();
}
if (!this.isReady) {
  var t = this,
    i = this.mapId;
  return this.once("ready", function () {
    t.mapId === i && t.addObjects(e);
  });
}
for (var n = 0; n < e.length; n++) {
  var o = e[n];
  if (o.img) {
    var a = this.getCellSceneCoordinate(o.cellId);
    o.x = a.x - D / 2, o.y = a.y - D / 2 + B, o.position = o.cellId, o.w = D, o.h = D, o.scene = this.mapScene;
    var s = this.mapScene.createTexture(o.img, "object:" + o.objectGID),
      r = new u(o, s);
    this.objects[o.cellId] = r;
  } else {
    console.error("createObjectGfx: no img for " + JSON.stringify(o));
  }
}
if (o.img) {
  var a = this.getCellSceneCoordinate(o.cellId);
  o.x = a.x - D / 2, o.y = a.y - D / 2 + B, o.position = o.cellId, o.w = D, o.h = D, o.scene = this.mapScene;
  var s = this.mapScene.createTexture(o.img, "object:" + o.objectGID),
    r = new u(o, s);
  this.objects[o.cellId] = r;
} else {
  console.error("createObjectGfx: no img for " + JSON.stringify(o));
}
for (var t = 0; t < e.length; t++) {
  var i = e[t],
    n = this.objects[i];
  n && (n.remove(), delete this.objects[i]);
}
for (var i = {}, n = C[this.mapId] ? C[this.mapId] : [], o = 0, a = e.length; o < a; o++) {
  i = e[o], n.some(t) ? this.calligraphyElements[i.elementId] = i : this.interactiveElements[i.elementId] = i;
}
for (var i = this.interactiveElements, n = {}, o = C[this.mapId] ? C[this.mapId] : [], a = 0; a < e.length; a++) {
  if (n = e[a], o.some(t)) {
    this.calligraphyElements[n.elementId] = n;
  } else {
    var s = i[n.elementId];
    s ? (s.disabledSkills = n.disabledSkills, s.enabledSkills = n.enabledSkills) : console.warn("Interactive element id " + n.elementId + " does not exist.");
  }
}
if (n = e[a], o.some(t)) {
  this.calligraphyElements[n.elementId] = n;
} else {
  var s = i[n.elementId];
  s ? (s.disabledSkills = n.disabledSkills, s.enabledSkills = n.enabledSkills) : console.warn("Interactive element id " + n.elementId + " does not exist.");
}
for (var t = 0, i = e.length; t < i; t++) {
  var n = e[t],
    o = this.identifiedElements[n.elementId];
  o ? o instanceof c && (w.isFightMode ? (o.state = -1, o.changeState(1)) : o.changeState ? o.changeState(n.elementState) : o.state = n.elementState) : console.warn("stated element not identified:" + n.elementId + ", cellId=" + n.elementCellId);
}
for (var t = this.identifiedElements, i = 0, n = e.length; i < n; i++) {
  var o = e[i],
    a = t[o.elementId];
  a ? a.changeState ? a.changeState(o.elementState) : (console.warn("Identified element " + o.elementId + " is not a stated element."), a.state = o.elementState) : console.warn("Identified element " + o.elementId + " not found.");
}
if (!t) {
  return !1;
}
for (var o = [], a = 0; a < e.length; a++) {
  o[a] = this.getCellSceneCoordinate(e[a]), o[a].x += t || 0, o[a].y += i || 0;
}
if (!e || !e.bbox) {
  return console.warn("addArrowOnGraphic: invalid graphic entity");
}
for (var o = [], a = 0; a < e.length; a++) {
  o[a] = this.getCellSceneCoordinate(e[a]), o[a].x += t || 0, o[a].y += i || 0;
}
for (var o = 0, a = t.length; o < a; o += 1) {
  var s = t[o],
    r = "rgba(" + i.r + "," + i.g + "," + i.b + "," + i.a + ")",
    l = "rgba(" + n.r + "," + n.g + "," + n.b + "," + n.a + ")";
  window.background.addZone(new v([s], {
    color: r,
    outline: l
  }), e);
}
if (e) {
  t = t || 1;
  var o = this,
    a = window.gui.pingSystem;
  this._pingHighlight[e] && this.deletePingHighlight(e);
  var s = window.isoEngine.mapRenderer.getCellSceneCoordinate(e);
  this._pingHighlight[e] = new u({
    layer: l.MAP_LAYER_BACKGROUND,
    x: s.x - l.CELL_WIDTH / 2,
    y: s.y - l.CELL_HEIGHT / 2,
    w: l.CELL_WIDTH,
    h: l.CELL_HEIGHT,
    scene: o.mapScene
  });
  var r = P[t];
  d.loadTexture(r, n, this.mapScene.renderer);
}
if (!this.isReady) {
  var t = this,
    i = this.mapId;
  return void this.once("ready", function () {
    t.mapId === i && t.updateObstacles(e);
  });
}
if (!this.map) {
  return void console.error(new Error("map is null, isReady is " + this.isReady));
}
for (var n = this.map.cells, o = 0, a = e.length; o < a; o++) {
  var s = e[o],
    r = s.obstacleCellId,
    l = n[r],
    c = l.l;
  s.state === O ? l.l |= 1 : s.state === R && (l.l &= 254), this.grid.updateCellState(r, l, c), _.updateCellPath(r, l);
}
if (this.isReady) {
  if (!this.map) {
    return console.error(new Error("map is null, cannot add cell elevation.")), t;
  }
  t.y -= this.map.cells[e].f || 0;
}
if (!this.map) {
  return console.error(new Error("map is null, cannot add cell elevation.")), t;
}
for (var e = 0; e < this.statedElements.length; e++) {
  this.statedElements[e].hide();
}
for (var e = 0; e < this.statedElements.length; e++) {
  this.statedElements[e].show();
}
for (var e = 0; e < this.graphics.length; e++) {
  this.graphics[e].hide();
}
for (var e = 0; e < this.graphics.length; e++) {
  this.graphics[e].show();
}
for (var a = 0; a < e.length; a += 1) {
  var s = e[a],
    r = t[s],
    l = (r.x - i) * _,
    c = (r.y - n) * v,
    d = l * l + c * c;
  d < o.dist && (o.dist = d, o.cell = s);
}
if (0 === n.length) {
  return this.getClosestCell(t, e);
}
for (var o = t.dx, a = t.dy, s = i.bounds, r = 0, l = s.length; r < l; r += 1) {
  var c = s[r];
  if (c[0] <= o && o <= c[1] && c[2] <= a && a <= c[3]) {
    return {
      cell: n[r],
      dist: 0
    };
  }
}
if (c[0] <= o && o <= c[1] && c[2] <= a && a <= c[3]) {
  return {
    cell: n[r],
    dist: 0
  };
}
for (var i, n, o, s, r = e.i, l = e.j, c = t.x, d = t.y, u = 0, h = {
    cell: -1,
    dist: 1 / 0
  }; h.cell === -1;) {
  for (o = Math.max(l - u, 0), s = Math.min(l + u, w - 1), n = Math.min(r + u, y - 1), i = Math.max(r - u, 0); i <= n; i += 1) {
    a(this.grid[i][o].cells, this.scenePositions, c, d, h), a(this.grid[i][s].cells, this.scenePositions, c, d, h);
  }
  for (i = Math.max(r - u, 0), n = Math.min(r + u, y - 1), s = Math.min(l + u - 1, w - 1), o = Math.max(l - u + 1, 0); o <= s; o += 1) {
    a(this.grid[i][o].cells, this.scenePositions, c, d, h), a(this.grid[n][o].cells, this.scenePositions, c, d, h);
  }
  u += 1;
}
for (o = Math.max(l - u, 0), s = Math.min(l + u, w - 1), n = Math.min(r + u, y - 1), i = Math.max(r - u, 0); i <= n; i += 1) {
  a(this.grid[i][o].cells, this.scenePositions, c, d, h), a(this.grid[i][s].cells, this.scenePositions, c, d, h);
}
for (i = Math.max(r - u, 0), n = Math.min(r + u, y - 1), s = Math.min(l + u - 1, w - 1), o = Math.max(l - u + 1, 0); o <= s; o += 1) {
  a(this.grid[i][o].cells, this.scenePositions, c, d, h), a(this.grid[n][o].cells, this.scenePositions, c, d, h);
}
if (!n || 0 === n.length) {
  return console.error(new Error('"zone" is not an array')), null;
}
if (void 0 !== n[e]) {
  return e;
}
for (var o = null, a = [], s = l.getNeighbourCells(e, !0), r = 0; r < s.length; r++) {
  void 0 !== s[r] && void 0 !== n[s[r]] && a.push(s[r]);
}
for (r = 0; r < a.length; r++) {
  var d = a[r],
    u = this.scenePositions[d],
    h = (u.x - t) * _,
    p = (u.y - i) * v,
    m = h * h + p * p;
  m < c && (c = m, o = d);
}
if (0 === i) {
  s(this.grid[n.i][n.j], e);
} else {
  var o = i / d,
    a = Math.floor(n.i + o),
    r = Math.floor(n.j - o);
  if (a >= y || r >= w) {
    return;
  }
  var l = a + 1,
    c = r + 1;
  if (l < 0 || c < 0) {
    return;
  }
  a >= 0 && (r >= 0 && s(this.grid[a][r], e), c < w && s(this.grid[a][c], e)), l < y && (r >= 0 && s(this.grid[l][r], e), c < w && s(this.grid[l][c], e));
}
if (a >= y || r >= w) {
  return;
}
if (l < 0 || c < 0) {
  return;
}
if (a.y -= o, this.scenePositions[e] = a, 0 === o) {
  i = this.grid[n.i][n.j], i.cells.push(e), i.bounds.push([0, 1, 0, 1]);
} else {
  var s = o / d,
    r = n.i + s,
    l = n.j - s,
    c = Math.floor(r),
    u = Math.floor(l);
  if (c >= y || u >= w) {
    return;
  }
  var h = c + 1,
    p = u + 1;
  if (h < 0 || p < 0) {
    return;
  }
  var m = r - c,
    f = l - u;
  c >= 0 && (u >= 0 && (i = this.grid[c][u], i.cells.push(e), i.bounds.push([m, 1, f, 1])), p < w && (i = this.grid[c][p], i.cells.push(e), i.bounds.push([m, 1, 0, f]))), h < y && (u >= 0 && (i = this.grid[h][u], i.cells.push(e), i.bounds.push([0, m, f, 1])), p < w && (i = this.grid[h][p], i.cells.push(e), i.bounds.push([0, m, 0, f])));
}
if (c >= y || u >= w) {
  return;
}
if (h < 0 || p < 0) {
  return;
}
for (var i = 0; i < y; i += 1) {
  var o = new Array(w);
  this.grid[i] = o;
  for (var a = 0; a < w; a += 1) {
    o[a] = new n();
  }
}
for (var a = 0; a < w; a += 1) {
  o[a] = new n();
}
for (var s = e.length - 1; s >= 0; s -= 1) {
  var r = e[s];
  0 !== (1 & r.l) && this._addCell(s, r);
}
if (this.state !== e) {
  var n = this,
    o = this.animManager,
    a = this.state;
  if (this.state = e, !o.isVoidAnimManager) {
    var r = {
        id: "AnimState" + a + "_to_AnimState" + e + "_0",
        base: "AnimState" + a + "_to_AnimState" + e,
        direction: 0
      },
      l = {
        id: "AnimState" + e + "_0",
        base: "AnimState" + e,
        direction: 0
      },
      c = s[e] || !1;
    !t && o.template && o.template.exposedSymbols[r.id] ? (this.animated = !0, o.assignSymbol(r, !1, i)) : i();
  }
}
if (this.state = e, !o.isVoidAnimManager) {
  var r = {
      id: "AnimState" + a + "_to_AnimState" + e + "_0",
      base: "AnimState" + a + "_to_AnimState" + e,
      direction: 0
    },
    l = {
      id: "AnimState" + e + "_0",
      base: "AnimState" + e,
      direction: 0
    },
    c = s[e] || !1;
  !t && o.template && o.template.exposedSymbols[r.id] ? (this.animated = !0, o.assignSymbol(r, !1, i)) : i();
}
if (0 !== w) {
  var b = Math.cos(w),
    M = Math.sin(w),
    T = h,
    C = m,
    I = g,
    A = v;
  h = h * b - p * M, p = T * M + p * b, m = m * b - f * M, f = C * M + f * b, g = g * b - _ * M, _ = I * M + _ * b, v = v * b - y * M, y = A * M + y * b;
}
if (null !== this._atlasTexture && !(e.layer > this.layer || t.layer < this.layer)) {
  var i;
  e.layer < this.layer ? i = 0 : (i = Math.round(e.position), i < 0 ? i = 0 : i > l && (i = l));
  var n;
  t.layer > this.layer ? n = l : (n = Math.round(t.position), n < 0 ? n = 0 : n > l && (n = l));
  var o = this._vertexBufferIndexPerPosition[i],
    a = this._vertexBufferIndexPerPosition[n];
  o !== a && this.renderer.drawSpriteSubBatch(this.id, o, a);
}
if (this.isOutdated = !1, 0 !== this._updatedSprites.length) {
  for (var t = 0; t < this._updatedSprites.length; t += 1) {
    var i = this._updatedSprites[t];
    this._updateSpriteHighlight(i), void 0 !== e && e.push(i.bbox.slice()), i.isOutdated = !1;
  }
  var n = this.id,
    o = this.renderer.getBufferData(n);
  if (void 0 === o) {
    var a = this._atlasTexture;
    if (null !== a && this._vertexBufferCreated) {
      var s = this._floatView,
        r = !1;
      this.renderer.loadSpriteBuffer(n, s, a, this.bbox, r), this.renderer.lockBuffer(n);
    }
  }
  this._updatedSprites.length = 0;
}
for (var t = 0; t < this._updatedSprites.length; t += 1) {
  var i = this._updatedSprites[t];
  this._updateSpriteHighlight(i), void 0 !== e && e.push(i.bbox.slice()), i.isOutdated = !1;
}
if (void 0 === o) {
  var a = this._atlasTexture;
  if (null !== a && this._vertexBufferCreated) {
    var s = this._floatView,
      r = !1;
    this.renderer.loadSpriteBuffer(n, s, a, this.bbox, r), this.renderer.lockBuffer(n);
  }
}
if (null !== a && this._vertexBufferCreated) {
  var s = this._floatView,
    r = !1;
  this.renderer.loadSpriteBuffer(n, s, a, this.bbox, r), this.renderer.lockBuffer(n);
}
for (var i = this._floatView, n = this._longView, o = this._longView, a = 1 / 0, s = -(1 / 0), r = 1 / 0, c = -(1 / 0), d = 0, u = 0; u < this._sprites.length; u += 1) {
  var h = this._sprites[u],
    p = h.graphicInAtlas,
    m = u * this._spriteByteSize / 4;
  for (h.spriteIndex = u; d < h._position;) {
    this._vertexBufferIndexPerPosition[d] = 6 * u, d += 1;
  }
  this._vertexBufferIndexPerPosition[d] = 6 * u + 6;
  var f = h.bbox;
  f[0] < a && (a = f[0]), f[1] > s && (s = f[1]), f[2] < r && (r = f[2]), f[3] > c && (c = f[3]), i[m + 0] = h.x0, i[m + 1] = h.y0, i[m + 5] = h.x2, i[m + 6] = h.y2, i[m + 10] = h.x3, i[m + 11] = h.y3, i[m + 15] = h.x0, i[m + 16] = h.y0, i[m + 20] = h.x3, i[m + 21] = h.y3, i[m + 25] = h.x1, i[m + 26] = h.y1;
  var g = p.sx / e * 65535 & 65535,
    _ = p.sy / t * 4294901760 & 4294901760,
    v = (p.sx + p.sw) / e * 65535 & 65535,
    y = (p.sy + p.sh) / t * 4294901760 & 4294901760;
  n[m + 2] = g + _, n[m + 7] = g + y, n[m + 12] = v + y, n[m + 17] = g + _, n[m + 22] = v + y, n[m + 27] = v + _;
  var w = h.tint,
    b = Math.max(-128, Math.min(127, 64 * w[0])),
    M = Math.max(-128, Math.min(127, 64 * w[1])),
    T = Math.max(-128, Math.min(127, 64 * w[2])),
    C = Math.max(-128, Math.min(127, 64 * w[3])),
    I = (C << 24 & 4278190080) + (T << 16 & 16711680) + (M << 8 & 65280) + (255 & b);
  o[m + 3] = o[m + 8] = o[m + 13] = I, o[m + 18] = o[m + 23] = o[m + 28] = I, o[m + 4] = o[m + 9] = o[m + 14] = 0, o[m + 19] = o[m + 24] = o[m + 29] = 0;
}
for (h.spriteIndex = u; d < h._position;) {
  this._vertexBufferIndexPerPosition[d] = 6 * u, d += 1;
}
for (; d <= l;) {
  this._vertexBufferIndexPerPosition[d] = 6 * u, d += 1;
}
if (!y) {
  return v.push(arguments), void (w || (w = !0, g.loadTexture("ui/hintArrow/arrow.png", function (e) {
    y = e, o();
  }, a.renderer, "linear", "permanent")));
}
for (var e = 0; e < _.length; e++) {
  _[e].remove();
}
if (!x.playing && !x.starting) {
  s();
  for (var o = 0; o < e.length; o++) {
    a(e[o], t[o], i, n);
  }
  x.reset(I, function () {
    s();
  }), x.start();
}
for (var o = 0; o < e.length; o++) {
  a(e[o], t[o], i, n);
}
if (!s[c]) {
  return void console.error("[IsoEngine.addPingPicto] No base for type", c);
}
if (p.length > 0) {
  var m = p[0].bbox;
  h = m ? m[2] - t.y : -100, h -= u, t.y + h < 0 && (h = m ? m[3] - t.y : 100, h += u);
} else {
  h = -u, t.y + h < 0 && (h = u);
}
for (var e in r) {
  r.hasOwnProperty(e) && t.removePingPicto(e);
}
for (var o in g) {
  var a = g[o];
  if (3 === a.id || 4 === a.id) {
    var s = new n(a, {
      scene: window.isoEngine.mapRenderer.mapScene,
      layer: p.MAP_LAYER_BACKGROUND,
      hue: 3 === a.id ? t : i,
      sx: e,
      sy: e
    });
  } else {
    s = new n(a, {
      scene: window.isoEngine.mapRenderer.mapScene
    });
  }
  _[a.id] = s, m.loadAnimationManager(s, "embedded", "tapFeedback");
}
if (3 === a.id || 4 === a.id) {
  var s = new n(a, {
    scene: window.isoEngine.mapRenderer.mapScene,
    layer: p.MAP_LAYER_BACKGROUND,
    hue: 3 === a.id ? t : i,
    sx: e,
    sy: e
  });
} else {
  s = new n(a, {
    scene: window.isoEngine.mapRenderer.mapScene
  });
}
if (t = t / e.speed + e.weight, null === e.candidateRef) {
  var d = new a(r, l, s.w + t, c, s);
  o.push(d), e.candidateRef = d;
} else {
  var u = e.candidateRef.w,
    h = s.w + t;
  h < u && (e.candidateRef.w = h, e.candidateRef.path = s);
}
if (!Array.isArray(e) || e.length < 2) {
  return !1;
}
for (var t = p(e[0]), i = 1, n = e.length; i < n; i += 1) {
  var o = e[i],
    a = p(o);
  if (Math.abs(t.x - a.x) > 1) {
    return !1;
  }
  if (Math.abs(t.y - a.y) > 1) {
    return !1;
  }
  t = a;
}
if (Math.abs(t.x - a.x) > 1) {
  return !1;
}
if (Math.abs(t.y - a.y) > 1) {
  return !1;
}
if (!Array.isArray(e)) {
  return [];
}
if (e.length < 2) {
  return e;
}
for (var i = p(e[0]), n = 1, o = e.length; n < o; n += 1) {
  var a,
    s,
    r = e[n],
    l = p(r),
    c = Math.abs(l.x - i.x),
    d = Math.abs(l.y - i.y);
  if (0 === c || 0 === d) {
    if (c > 1) {
      for (a = l.x > i.x ? 1 : -1, i.x += a; i.x !== l.x;) {
        t.push(m(i.x, i.y)), i.x += a;
      }
    }
    if (d > 1) {
      for (s = l.y > i.y ? 1 : -1, i.y += s; i.y !== l.y;) {
        t.push(m(i.x, i.y)), i.y += s;
      }
    }
  } else if (c === d) {
    for (a = l.x > i.x ? 1 : -1, s = l.y > i.y ? 1 : -1, i.x += a, i.y += s; i.y !== l.y;) {
      t.push(m(i.x, i.y)), i.x += a, i.y += s;
    }
  }
  i = l, t.push(r);
}
if (0 === c || 0 === d) {
  if (c > 1) {
    for (a = l.x > i.x ? 1 : -1, i.x += a; i.x !== l.x;) {
      t.push(m(i.x, i.y)), i.x += a;
    }
  }
  if (d > 1) {
    for (s = l.y > i.y ? 1 : -1, i.y += s; i.y !== l.y;) {
      t.push(m(i.x, i.y)), i.y += s;
    }
  }
} else if (c === d) {
  for (a = l.x > i.x ? 1 : -1, s = l.y > i.y ? 1 : -1, i.x += a, i.y += s; i.y !== l.y;) {
    t.push(m(i.x, i.y)), i.x += a, i.y += s;
  }
}
if (c > 1) {
  for (a = l.x > i.x ? 1 : -1, i.x += a; i.x !== l.x;) {
    t.push(m(i.x, i.y)), i.x += a;
  }
}
for (a = l.x > i.x ? 1 : -1, i.x += a; i.x !== l.x;) {
  t.push(m(i.x, i.y)), i.x += a;
}
if (d > 1) {
  for (s = l.y > i.y ? 1 : -1, i.y += s; i.y !== l.y;) {
    t.push(m(i.x, i.y)), i.y += s;
  }
}
for (s = l.y > i.y ? 1 : -1, i.y += s; i.y !== l.y;) {
  t.push(m(i.x, i.y)), i.y += s;
}
if (c === d) {
  for (a = l.x > i.x ? 1 : -1, s = l.y > i.y ? 1 : -1, i.x += a, i.y += s; i.y !== l.y;) {
    t.push(m(i.x, i.y)), i.x += a, i.y += s;
  }
}
for (a = l.x > i.x ? 1 : -1, s = l.y > i.y ? 1 : -1, i.x += a, i.y += s; i.y !== l.y;) {
  t.push(m(i.x, i.y)), i.x += a, i.y += s;
}
for (var h = i(468), p = h.getMapPointFromCellId, m = h.getCellIdFromMapPoint, f = 10, g = 11.825, _ = 35, v = 36, y = [], w = 0; w < _; w += 1) {
  for (var b = [], M = 0; M < v; M += 1) {
    b[M] = new n(w, M);
  }
  y[w] = b;
}
for (var b = [], M = 0; M < v; M += 1) {
  b[M] = new n(w, M);
}
for (var t = 0; t < _; t += 1) {
  for (var i = y[t], n = 0; n < v; n += 1) {
    var a = m(t - 1, n - 1),
      s = i[n],
      r = e.cells[a];
    o(r, s);
  }
}
for (var i = y[t], n = 0; n < v; n += 1) {
  var a = m(t - 1, n - 1),
    s = i[n],
    r = e.cells[a];
  o(r, s);
}
if (_.zone === -1) {
  for (var v = null, w = 1 / 0, b = 1 / 0, M = -1; M <= 1; M += 1) {
    for (var T = -1; T <= 1; T += 1) {
      if (0 !== M || 0 !== T) {
        var C = y[h + M][g + T];
        if (C.zone !== -1) {
          var I = Math.abs(C.f - _.f),
            A = Math.abs(M) + Math.abs(T);
          (null === v || I < b || I <= b && A < w) && (v = C, w = A, b = I);
        }
      }
    }
  }
  return null !== v ? [e, m(v.i - 1, v.j - 1)] : (console.error(new Error("[pathFinder.getPath] Player is stuck in " + h + "/" + g)), [e]);
}
for (var v = null, w = 1 / 0, b = 1 / 0, M = -1; M <= 1; M += 1) {
  for (var T = -1; T <= 1; T += 1) {
    if (0 !== M || 0 !== T) {
      var C = y[h + M][g + T];
      if (C.zone !== -1) {
        var I = Math.abs(C.f - _.f),
          A = Math.abs(M) + Math.abs(T);
        (null === v || I < b || I <= b && A < w) && (v = C, w = A, b = I);
      }
    }
  }
}
for (var T = -1; T <= 1; T += 1) {
  if (0 !== M || 0 !== T) {
    var C = y[h + M][g + T];
    if (C.zone !== -1) {
      var I = Math.abs(C.f - _.f),
        A = Math.abs(M) + Math.abs(T);
      (null === v || I < b || I <= b && A < w) && (v = C, w = A, b = I);
    }
  }
}
if (0 !== M || 0 !== T) {
  var C = y[h + M][g + T];
  if (C.zone !== -1) {
    var I = Math.abs(C.f - _.f),
      A = Math.abs(M) + Math.abs(T);
    (null === v || I < b || I <= b && A < w) && (v = C, w = A, b = I);
  }
}
if (C.zone !== -1) {
  var I = Math.abs(C.f - _.f),
    A = Math.abs(M) + Math.abs(T);
  (null === v || I < b || I <= b && A < w) && (v = C, w = A, b = I);
}
for (E in i) {
  S = p(E), y[S.x + 1][S.y + 1].weight += f;
}
for (var L = [], O = [], R = Math.sqrt((h - N) * (h - N) + (g - x) * (g - x)), D = new a(h, g, 0, R, null), P = null, B = D; D.i !== N || D.j !== x;) {
  c(D, N, x, L, n);
  var k = L.length;
  if (0 === k) {
    D = B;
    break;
  }
  var F = 1 / 0,
    H = 0;
  for (r = 0; r < k; r += 1) {
    l = L[r], l.w + l.d < F && (D = l, F = l.w + l.d, H = r);
  }
  if (O.push(D), L.splice(H, 1), 0 === D.d || o && D.d < 1.5 && s(y[N][x], y[D.i][D.j])) {
    if (null === P || D.w < P.w) {
      P = D, B = D;
      var z = [];
      for (r = 0; r < L.length; r += 1) {
        l = L[r], l.w + l.d < P.w ? z.push(l) : y[l.i][l.j].candidateRef = null;
      }
      L = z;
    }
  } else {
    D.d < B.d && (B = D);
  }
}
if (0 === k) {
  D = B;
  break;
}
for (r = 0; r < k; r += 1) {
  l = L[r], l.w + l.d < F && (D = l, F = l.w + l.d, H = r);
}
if (O.push(D), L.splice(H, 1), 0 === D.d || o && D.d < 1.5 && s(y[N][x], y[D.i][D.j])) {
  if (null === P || D.w < P.w) {
    P = D, B = D;
    var z = [];
    for (r = 0; r < L.length; r += 1) {
      l = L[r], l.w + l.d < P.w ? z.push(l) : y[l.i][l.j].candidateRef = null;
    }
    L = z;
  }
} else {
  D.d < B.d && (B = D);
}
if (null === P || D.w < P.w) {
  P = D, B = D;
  var z = [];
  for (r = 0; r < L.length; r += 1) {
    l = L[r], l.w + l.d < P.w ? z.push(l) : y[l.i][l.j].candidateRef = null;
  }
  L = z;
}
for (r = 0; r < L.length; r += 1) {
  l = L[r], l.w + l.d < P.w ? z.push(l) : y[l.i][l.j].candidateRef = null;
}
for (r = 0; r < L.length; r += 1) {
  l = L[r], y[l.i][l.j].candidateRef = null;
}
for (var W = 0; W < O.length; W += 1) {
  D = O[W], y[D.i][D.j].candidateRef = null;
}
for (E in i) {
  S = p(E), y[S.x + 1][S.y + 1].weight -= f;
}
for (var G = []; null !== B;) {
  G.unshift(m(B.i - 1, B.j - 1)), B = B.path;
}
for (var t, i, n = [], o = e[0], a = -1, s = 0; s < e.length; s++) {
  var r,
    l = e[s],
    c = p(l);
  r = 0 === s ? -1 : c.y === i ? c.x > t ? 7 : 3 : c.x === t ? c.y > i ? 1 : 5 : c.x > t ? c.y > i ? 0 : 6 : c.y > i ? 2 : 4, r !== a && (n.push(o + (r << 12)), a = r), o = l, t = c.x, i = c.y;
}
for (t = 0; t < 33; t += 1) {
  for (n.push([]), i = 0; i < 34; i += 1) {
    void 0 === m(t, i) ? n[t][i] = "    " : n[t][i] = "[  ]";
  }
}
for (n.push([]), i = 0; i < 34; i += 1) {
  void 0 === m(t, i) ? n[t][i] = "    " : n[t][i] = "[  ]";
}
for (var o = 0, a = e.length; o < a; o += 1) {
  var s = e[o],
    r = p(s),
    l = o < 10 ? "0" : "";
  n[r.x][r.y] = "[" + l + o + "]";
}
for (i = 0; i < 34; i += 1) {
  for (t = 0; t < 33; t += 1) {
    c += n[t][i];
  }
  c += "\n";
}
for (t = 0; t < 33; t += 1) {
  c += n[t][i];
}
if (t = t || {}, this.id = null, this.outline = t.outline || !1, this.color = t.color, this.data = t.data || null, this.gfx = null, this._boxBatch = null, this._lineBatch = null, !this.outline && !this.color) {
  return void console.error("[Zone] It is not possible to create a zone without colors and outline");
}
if (this.outline) {
  var i = a.getZoneOutlines(e);
  this._lineBatch = new l({
    scene: window.isoEngine.mapScene,
    x: 0,
    y: 0,
    position: 5,
    lines: i,
    lineWidth: 4,
    hue: r.anyToColorArray(this.outline),
    layer: s.MAP_LAYER_BACKGROUND,
    id: "zoneOutline" + f++
  });
}
if (this.color) {
  for (var n = [], u = 0; u < e.length; u++) {
    var g = o.cellCoord[e[u]],
      _ = d,
      v = g.x,
      y = g.y - _;
    n.push({
      x0: v,
      y0: y,
      x1: v + p,
      y1: y + m,
      x2: v,
      y2: y + h,
      x3: v - p,
      y3: y + m
    });
  }
  this._boxBatch = new c({
    scene: window.isoEngine.mapScene,
    x: 0,
    y: 0,
    position: 1,
    boxes: n,
    hue: r.anyToColorArray(this.color),
    layer: s.MAP_LAYER_BACKGROUND,
    id: "zoneColor" + f++
  });
}
for (var n = [], u = 0; u < e.length; u++) {
  var g = o.cellCoord[e[u]],
    _ = d,
    v = g.x,
    y = g.y - _;
  n.push({
    x0: v,
    y0: y,
    x1: v + p,
    y1: y + m,
    x2: v,
    y2: y + h,
    x3: v - p,
    y3: y + m
  });
}
for (var t = {}, i = 0; i < e.length; i++) {
  a(e[i], t);
}
for (var o = [], s = 0; s < t.length; s++) {
  var r = t[s].split(":");
  r[0] = ~~r[0], r[1] = ~~r[1];
  var l = n(r);
  "H" === r[2] ? r[0] += 1 : r[1] += 1;
  var d = n(r);
  o.push(new c(l.x, l.y, d.x, d.y));
}
if (this.nAssetsLoaded += 1, window.isoEngine.showLoadingProgress(this.nAssetsLoaded / this.nAssetsToLoad), this.nAssetsLoaded === this.nAssetsToLoad) {
  if (this.onLoadedCallback(), this.onLoadedCallback = null, this.obsolete) {
    return;
  }
  this.mapRenderer.isReady = !0, this.mapRenderer.emit("ready"), this.obsolete = !0;
}
if (this.onLoadedCallback(), this.onLoadedCallback = null, this.obsolete) {
  return;
}
if (r += 1, r === s) {
  var e = c.mapRenderer.mapScene,
    i = c.mapRenderer.mapId,
    n = e.createTexture(c._atlas, "mapAtlas" + i, "linear");
  c._atlas.width = 1, c._atlas.height = 1, t.setTexture(n);
}
if (!c.obsolete) {
  var n = t.sx,
    o = t.sy,
    a = t.sw,
    s = t.sh,
    r = t.cx || 0,
    l = t.cy || 0,
    d = t.cw || a,
    u = t.ch || s;
  r + d > e.width && (d = e.width - r), l + u > e.height && (u = e.height - l), c._atlasContext.drawImage(e, r, l, d, u, n, o, a, s), i();
}
for (var c = this, u = 0; u < a.length; u += 1) {
  var h = a[u],
    p = o[h],
    m = p.jpg ? "jpg" : "png",
    f = m + "/" + h + "." + m,
    g = d + f;
  n(g, p);
}
if (!this._stopped) {
  var t = 1e3 * (this.delayMin + (this.delayMax - this.delayMin) * Math.random());
  this._timeout = window.setTimeout(function () {
    e._stopped || e.animManager.assignSymbol(r, !1, function () {
      e._stopped || (e.animStatic && e.animManager.assignSymbol(s, !1), e._animateShoot());
    });
  }, t);
}
if (!e) {
  throw new Error("Need the logger!");
}
if (n) {
  if (64 & t) {
    i = !0;
  } else {
    var o = e < l.MAP_WIDTH;
    o && (32 & t || 128 & t) && (i = !0);
  }
}
if (64 & t) {
  i = !0;
} else {
  var o = e < l.MAP_WIDTH;
  o && (32 & t || 128 & t) && (i = !0);
}
if (n) {
  if (1 & t) {
    i = !0;
  } else {
    var o = (e + 1) % (2 * l.MAP_WIDTH) === 0;
    o && (2 & t || 128 & t) && (i = !0);
  }
}
if (1 & t) {
  i = !0;
} else {
  var o = (e + 1) % (2 * l.MAP_WIDTH) === 0;
  o && (2 & t || 128 & t) && (i = !0);
}
if (n) {
  if (4 & t) {
    i = !0;
  } else {
    var o = e >= l.NB_CELLS - l.MAP_WIDTH;
    o && (2 & t || 8 & t) && (i = !0);
  }
}
if (4 & t) {
  i = !0;
} else {
  var o = e >= l.NB_CELLS - l.MAP_WIDTH;
  o && (2 & t || 8 & t) && (i = !0);
}
if (n) {
  if (16 & t) {
    i = !0;
  } else {
    var o = e % (2 * l.MAP_WIDTH) === 0;
    o && (8 & t || 32 & t) && (i = !0);
  }
}
if (16 & t) {
  i = !0;
} else {
  var o = e % (2 * l.MAP_WIDTH) === 0;
  o && (8 & t || 32 & t) && (i = !0);
}
if (this.displayGrid !== e && (this.displayGrid = e, null !== this.gridLines)) {
  if (e) {
    this.gridLines.show(), new m(this.gridLines, ["alpha"]).to({
      alpha: 1
    }, 20).start();
  } else {
    var t = this;
    new m(this.gridLines, ["alpha"]).to({
      alpha: 0
    }, 15).start().onFinish(function () {
      t.gridLines && t.gridLines.hide();
    });
  }
}
if (e) {
  this.gridLines.show(), new m(this.gridLines, ["alpha"]).to({
    alpha: 1
  }, 20).start();
} else {
  var t = this;
  new m(this.gridLines, ["alpha"]).to({
    alpha: 0
  }, 15).start().onFinish(function () {
    t.gridLines && t.gridLines.hide();
  });
}
if (e.map && e.map.cells) {
  for (var t = e.map.cells, i = _.isRoleplayMode, n = {}, o = [], r = [], l = 0; l < a.NB_CELLS; l++) {
    var p = e.isWalkable(l);
    if (p) {
      var f = t[l],
        g = s.cellCoord[l],
        v = (i && f.f || 0) + w,
        I = g.x,
        A = I - M,
        S = I + M,
        E = g.y - v,
        N = E + T,
        x = E + y,
        L = I + "." + E + "-" + S + "." + N,
        O = I + "." + x + "-" + S + "." + N,
        R = I + "." + x + "-" + A + "." + N,
        D = I + "." + E + "-" + A + "." + N;
      void 0 === n[L] && (n[L] = !0, r.push(new c(I, E, S, N))), void 0 === n[O] && (n[O] = !0, r.push(new c(S, N, I, x))), void 0 === n[R] && (n[R] = !0, r.push(new c(I, x, A, N))), void 0 === n[D] && (n[D] = !0, r.push(new c(A, N, I, E)));
      var P = new d(I, E, S, N, I, x, A, N);
      P.cellId = l, o.push(P);
    }
  }
  this.gridLines && this.gridLines.remove(), this.gridLines = new u({
    scene: window.isoEngine.mapScene,
    x: 0,
    y: 0,
    position: 3,
    lines: r,
    lineWidth: 2,
    hue: C,
    layer: b,
    id: "combatGrid"
  }), this.gridLines.alpha = 0, this.displayGrid ? (this.gridLines.show(), new m(this.gridLines, ["alpha"]).to({
    alpha: 1
  }, 20).start()) : this.gridLines.hide(), this.isDebugMode && (this.initDebugOverlay(), this.cellIdOverlay.clear(), this.cellIdOverlay.generateOverlay());
}
for (var t = e.map.cells, i = _.isRoleplayMode, n = {}, o = [], r = [], l = 0; l < a.NB_CELLS; l++) {
  var p = e.isWalkable(l);
  if (p) {
    var f = t[l],
      g = s.cellCoord[l],
      v = (i && f.f || 0) + w,
      I = g.x,
      A = I - M,
      S = I + M,
      E = g.y - v,
      N = E + T,
      x = E + y,
      L = I + "." + E + "-" + S + "." + N,
      O = I + "." + x + "-" + S + "." + N,
      R = I + "." + x + "-" + A + "." + N,
      D = I + "." + E + "-" + A + "." + N;
    void 0 === n[L] && (n[L] = !0, r.push(new c(I, E, S, N))), void 0 === n[O] && (n[O] = !0, r.push(new c(S, N, I, x))), void 0 === n[R] && (n[R] = !0, r.push(new c(I, x, A, N))), void 0 === n[D] && (n[D] = !0, r.push(new c(A, N, I, E)));
    var P = new d(I, E, S, N, I, x, A, N);
    P.cellId = l, o.push(P);
  }
}
if (p) {
  var f = t[l],
    g = s.cellCoord[l],
    v = (i && f.f || 0) + w,
    I = g.x,
    A = I - M,
    S = I + M,
    E = g.y - v,
    N = E + T,
    x = E + y,
    L = I + "." + E + "-" + S + "." + N,
    O = I + "." + x + "-" + S + "." + N,
    R = I + "." + x + "-" + A + "." + N,
    D = I + "." + E + "-" + A + "." + N;
  void 0 === n[L] && (n[L] = !0, r.push(new c(I, E, S, N))), void 0 === n[O] && (n[O] = !0, r.push(new c(S, N, I, x))), void 0 === n[R] && (n[R] = !0, r.push(new c(I, x, A, N))), void 0 === n[D] && (n[D] = !0, r.push(new c(A, N, I, E)));
  var P = new d(I, E, S, N, I, x, A, N);
  P.cellId = l, o.push(P);
}
if (!this.cellIdOverlay) {
  var e = {
    scene: this.scene,
    layer: a.MAP_LAYER_FOREGROUND,
    position: 1,
    x: -a.HORIZONTAL_OFFSET,
    y: -a.VERTICAL_OFFSET,
    w: a.MAP_SCENE_WIDTH,
    h: a.MAP_SCENE_HEIGHT,
    id: "cellIdOverlay"
  };
  this.cellIdOverlay = new f(e);
}
for (var e = 0; e < this.zones.length; e++) {
  this.zones[e].destroy();
}
for (var i = 0; i < this.zones.length;) {
  this.zones[i].id === e ? (t && t(this.zones[i]), this.zones[i].destroy(), this.zones.splice(i, 1)) : i++;
}
for (var t = 0; t < this.zones.length; t++) {
  if (this.zones[t].id === e) {
    return this.zones[t].data;
  }
}
if (this.zones[t].id === e) {
  return this.zones[t].data;
}
if (i.data) {
  var n = window.foreground.convertScreenToCanvasCoordinate(e, t - I),
    o = window.isoEngine.mapScene.convertCanvasToSceneCoordinate(n.x, n.y),
    a = window.isoEngine.mapRenderer.getCellId(o.x, o.y),
    s = a.cell;
  window.isoEngine.cellHover(s, i.data.id);
}
if (_.isFightMode) {
  if (!i.data) {
    return;
  }
  var n = o(e, t - I);
  window.isoEngine.cellHoverRelease(n.cell);
}
if (!i.data) {
  return;
}
if (0 === Object.keys(e).length) {
  return console.error(new Error("Trying to add animation with no cells!")), null;
}
if (e) {
  e._listReference ? (this._layers.removeByReference(e._listReference), e._listReference = null) : console.error(new Error("GA: _listReference is missing."));
  for (var t, i, n = e.cellInfos, o = Object.keys(n), s = {}, c = this._layers.first; null !== c; c = c.next) {
    for (t = 0; t < o.length; t++) {
      i = o[t], c.object.cellInfos[i] && void 0 === s[i] && (s[i] = c.object.cellInfos[i]);
    }
  }
  for (t = 0; t < o.length; t++) {
    i = o[t];
    var d = n[i];
    void 0 === s[i] && (s[i] = new r(i, d.distanceToPlayer, l.empty));
  }
  e._listReference = this._layersBeingRemoved.add(e);
  var u = this,
    h = new a(s, this._gridOverlay);
  h.playAnimation(function () {
    u._resetBoundingBox(), u._layersBeingRemoved.removeByReference(e._listReference), e._listReference = null;
  });
}
for (var t, i, n = e.cellInfos, o = Object.keys(n), s = {}, c = this._layers.first; null !== c; c = c.next) {
  for (t = 0; t < o.length; t++) {
    i = o[t], c.object.cellInfos[i] && void 0 === s[i] && (s[i] = c.object.cellInfos[i]);
  }
}
for (t = 0; t < o.length; t++) {
  i = o[t], c.object.cellInfos[i] && void 0 === s[i] && (s[i] = c.object.cellInfos[i]);
}
for (t = 0; t < o.length; t++) {
  i = o[t];
  var d = n[i];
  void 0 === s[i] && (s[i] = new r(i, d.distanceToPlayer, l.empty));
}
for (var e = this._layersBeingRemoved.first; null !== e; e = e.next) {
  this._expandToFitBox(e.object);
}
if (0 === this._layers.length) {
  this._gridOverlay.hide();
} else {
  for (this._layers.length > 64 && console.error("layers are likely leaking"), e = this._layers.first; null !== e; e = e.next) {
    this._expandToFitBox(e.object);
  }
}
for (this._layers.length > 64 && console.error("layers are likely leaking"), e = this._layers.first; null !== e; e = e.next) {
  this._expandToFitBox(e.object);
}
for (var e = 0; e < r.NB_CELLS; e++) {
  var t = l.cellCoord[e],
    i = t.x,
    n = i - h,
    a = i + h,
    s = t.y - r.GRID_ALTITUDE_OFFSET,
    d = s + p,
    m = s + u,
    f = new c(i, s, a, d, i, m, n, d),
    g = e * this._boxByteSize,
    _ = new window.Float32Array(this._vertexBuffer, g, this._boxByteSize / 4),
    v = new window.Uint32Array(this._vertexBuffer, g, this._boxByteSize / 4),
    y = new o(e, f, _, v, this);
  this.spriteBoxes[y.cellId] = y;
}
if (void 0 === e) {
  var t = this.id,
    i = !1;
  this.renderer.loadSpriteBuffer(t, this._vertexBuffer, null, this._bbox, i), this.renderer.lockBuffer(this.id);
}
if (0 !== this.rotation) {
  var e = Math.cos(this.rotation),
    t = Math.sin(this.rotation),
    i = this._x0,
    n = this._x1,
    o = this._x2,
    a = this._x3;
  this._x0 = e * i - t * this._y0, this._y0 = t * i + e * this._y0, this._x1 = e * n - t * this._y1, this._y1 = t * n + e * this._y1, this._x2 = e * o - t * this._y2, this._y2 = t * o + e * this._y2, this._x3 = e * a - t * this._y3, this._y3 = t * a + e * this._y3;
}
for (var t = -(1 / 0), i = this._gridOverlay.spriteBoxes, n = Object.keys(this.cellInfos), a = 0; a < n.length; a++) {
  var s = n[a],
    r = this.cellInfos[s],
    l = i[s],
    c = r.transformState;
  if (l.transformState !== c) {
    var d = l.animate(c, .6 * r.distanceToPlayer);
    t < d && (t = d), this._expandToFitBox(l);
  }
}
if (l.transformState !== c) {
  var d = l.animate(c, .6 * r.distanceToPlayer);
  t < d && (t = d), this._expandToFitBox(l);
}
if (e) {
  if (t <= 0) {
    return e();
  }
  new o(t, e).start();
}
if (t <= 0) {
  return e();
}
if (void 0 === e) {
  var t = this.id,
    i = !1;
  this.renderer.loadSpriteBuffer(t, this._vertexBuffer, null, this._bbox, i), this.renderer.lockBuffer(this.id);
}
if (n.map && n.map.cells) {
  var s = n.map.cells;
  "string" == typeof e && (this.indexTextContext.fillStyle = e), this.indexTextContext.clearRect(0, 0, this.indexText.width, this.indexText.height);
  for (var r = 0; r < o.NB_CELLS; r++) {
    var l = n.isWalkable(r);
    if (l) {
      var h = s[r],
        p = a.cellCoord[r],
        m = h.f ? h.f + d : d,
        f = p.x,
        g = p.y - m;
      if (t && t.indexOf(r) >= 0) {
        var _ = this.indexTextContext.fillStyle;
        this.indexTextContext.fillStyle = i, this.indexTextContext.fillText(r, f + u + 10, g + c), this.indexTextContext.fillStyle = _;
      } else {
        this.indexTextContext.fillText(r, f + u + 10, g + c);
      }
    }
  }
  this.texture && this.texture.release(), this.texture = window.isoEngine.mapScene.createTexture(this.indexText), this.show();
}
for (var r = 0; r < o.NB_CELLS; r++) {
  var l = n.isWalkable(r);
  if (l) {
    var h = s[r],
      p = a.cellCoord[r],
      m = h.f ? h.f + d : d,
      f = p.x,
      g = p.y - m;
    if (t && t.indexOf(r) >= 0) {
      var _ = this.indexTextContext.fillStyle;
      this.indexTextContext.fillStyle = i, this.indexTextContext.fillText(r, f + u + 10, g + c), this.indexTextContext.fillStyle = _;
    } else {
      this.indexTextContext.fillText(r, f + u + 10, g + c);
    }
  }
}
if (l) {
  var h = s[r],
    p = a.cellCoord[r],
    m = h.f ? h.f + d : d,
    f = p.x,
    g = p.y - m;
  if (t && t.indexOf(r) >= 0) {
    var _ = this.indexTextContext.fillStyle;
    this.indexTextContext.fillStyle = i, this.indexTextContext.fillText(r, f + u + 10, g + c), this.indexTextContext.fillStyle = _;
  } else {
    this.indexTextContext.fillText(r, f + u + 10, g + c);
  }
}
if (t && t.indexOf(r) >= 0) {
  var _ = this.indexTextContext.fillStyle;
  this.indexTextContext.fillStyle = i, this.indexTextContext.fillText(r, f + u + 10, g + c), this.indexTextContext.fillStyle = _;
} else {
  this.indexTextContext.fillText(r, f + u + 10, g + c);
}
for (var t = this.getActorsOnCell(e), i = {
    onlinePlayer: [],
    npc: [],
    other: []
  }, n = 0; n < t.length; n += 1) {
  var o = t[n];
  o.isNPC() ? i.npc.push(o) : o.isPlayer() ? i.onlinePlayer.push(o) : i.other.push(o);
}
for (var i = t.fighters, n = 0, o = i.length; n < o; n++) {
  var a = i[n];
  if (a.alive) {
    var s = a.contextualId,
      r = e.getActor(s);
    if (r) {
      var l = a.disposition.cellId;
      l === -1 || r.cellId === l || r.moving || r.setDisposition(l, null);
    } else {
      e.addEmptyActor(a);
    }
  }
}
if (a.alive) {
  var s = a.contextualId,
    r = e.getActor(s);
  if (r) {
    var l = a.disposition.cellId;
    l === -1 || r.cellId === l || r.moving || r.setDisposition(l, null);
  } else {
    e.addEmptyActor(a);
  }
}
if (r) {
  var l = a.disposition.cellId;
  l === -1 || r.cellId === l || r.moving || r.setDisposition(l, null);
} else {
  e.addEmptyActor(a);
}
for (var t in this.actors) {
  this.actors[t].setInvisibility(e);
}
for (var e in this.actors) {
  this.actors[e].cleanupAnimations();
}
for (var i in t) {
  var n = t[i];
  if (n.isNPC() && (n.data.npcId === e || e === -1)) {
    return n;
  }
}
if (n.isNPC() && (n.data.npcId === e || e === -1)) {
  return n;
}
for (var i in t) {
  var n = t[i],
    o = n.data || {},
    a = o.staticInfos;
  if (o.creatureGenericId && o.creatureGenericId === e) {
    return n;
  }
  if (a && a.mainCreatureLightInfos && (a.mainCreatureLightInfos.creatureGenericId === e || e === -1)) {
    return n;
  }
}
if (o.creatureGenericId && o.creatureGenericId === e) {
  return n;
}
if (a && a.mainCreatureLightInfos && (a.mainCreatureLightInfos.creatureGenericId === e || e === -1)) {
  return n;
}
if (this.userId !== e) {
  var t = this.getActor(e);
  if (!t) {
    return console.error("switchUserActor: No actor with id", e);
  }
  var i = this.userActor.isDead,
    n = this.userId;
  this.actors[n] = this.userActor, this.userId = e, this.userActor = t, delete this.actors[e], i ? this.removeActor(n) : window.isoEngine.tryDisplayUserMovementZone();
}
if (!t) {
  return console.error("switchUserActor: No actor with id", e);
}
if (!s) {
  return console.warn("amsal: No actor with id", e), a();
}
if (s.animated || s.emoteAnimated && s.hasSameLook(t)) {
  return a();
}
if (s.carriedEntity) {
  var o = s.riderEntity || s.animManager;
  return o.addAnimation({
    base: "carrying",
    direction: -1
  }, function () {
    return o.addAnimationModifier("AnimStatique", "AnimStatiqueCarrying"), o.addAnimationModifier("AnimMarche", "AnimMarcheCarrying"), o.addAnimationModifier("AnimCourse", "AnimCourseCarrying"), o.addAnimationModifier("AnimHit", "AnimHitCarrying"), o.addAnimationModifier("AnimTacle", "AnimTacleCarrying"), n(e, a);
  });
}
for (var i in this.actors) {
  if (this.actors.hasOwnProperty(i)) {
    var n = this.actors[i],
      o = !n.isInvisible;
    e && e.showAlsoInvisibleInMyTeam && (o = _.isActorVisibleToUser(i)), o && (t[n.cellId] = n);
  }
}
if (this.actors.hasOwnProperty(i)) {
  var n = this.actors[i],
    o = !n.isInvisible;
  e && e.showAlsoInvisibleInMyTeam && (o = _.isActorVisibleToUser(i)), o && (t[n.cellId] = n);
}
if (!i) {
  return t();
}
for (var t in this.actors) {
  this.actors[t].removeTeamCircle(), this.actors[t].remove();
}
if (!window.gui.isConnected) {
  return t && t();
}
if (window.gui.playerData.isSpectator || n.show(), f.isFightMode) {
  return t && t();
}
for (o = 0; o < l; o++) {
  s = r[o], a = this.getActor(s.contextualId), a || (c += 1);
  var d = s.staticInfos && s.staticInfos.underlings;
  c += d ? d.length : 0;
}
for (var i = e.humanoidInfo ? e.humanoidInfo.options : [], n = 0; n < i.length; n++) {
  var a = i[n];
  if ("HumanOptionEmote" === a._type) {
    return window.isoEngine.playEmoteFromOption(o, a, t);
  }
}
if ("HumanOptionEmote" === a._type) {
  return window.isoEngine.playEmoteFromOption(o, a, t);
}
if (e.mapId === this.isoEngine.mapRenderer.mapId) {
  var t,
    i = this.actors,
    n = e.npcsIdsWithQuest;
  for (var o in i) {
    t = i[o], t.isNPC() && n.indexOf(t.actorId) === -1 && t.removeQuestIcon();
  }
  for (var a = 0; a < n.length; a++) {
    t = this.getActor(n[a]), t && t.addQuestIcon(e.questFlags[a]);
  }
}
for (var o in i) {
  t = i[o], t.isNPC() && n.indexOf(t.actorId) === -1 && t.removeQuestIcon();
}
for (var a = 0; a < n.length; a++) {
  t = this.getActor(n[a]), t && t.addQuestIcon(e.questFlags[a]);
}
for (var t in i._queuedToCarryActors) {
  var n = i.getActor(t);
  n === a && (n.carryCharacter(i._queuedToCarryActors[t]), delete i._queuedToCarryActors[t]);
}
if (o) {
  var s = i.getActor(o);
  s ? s.carryCharacter(a) : i._queuedToCarryActors[o] = a;
}
if (i) {
  return i;
}
if (e === this.userId) {
  if (i = this.userActor, !i.isDead) {
    return;
  }
} else {
  i = this.actors[e];
}
if (i = this.userActor, !i.isDead) {
  return;
}
for (var i = 0, n = e.length; i < n; i++) {
  this.removeActor(e[i], t);
}
if (f.isRoleplayMode && i === this.userId) {
  return a.roleplayUserActorMovement(n);
}
for (var i = 0, n = e.length; i < n; i++) {
  var o = e[i];
  if (o.cellId !== -1) {
    var a = o.id,
      s = this.getActor(a);
    if (!s) {
      if (t) {
        continue;
      }
      if (!o.cellId && 0 !== o.cellId) {
        continue;
      }
      var r = window.gui.fightManager.getFighter(a);
      if (r && r.data && !r.data.alive) {
        continue;
      }
      s = this.addEmptyActor({
        contextualId: a,
        disposition: o
      });
    }
    s.cellId === o.cellId && s.direction === o.direction || (s.setDisposition(o.cellId, o.direction), s.emoteAnimated && s.lastEmoteAnim && s.loadAndPlayAnimation({
      base: "AnimEmote",
      type: s.lastEmoteAnim
    }, {
      loop: !1,
      isEmoteAnimated: !0
    }));
  }
}
if (o.cellId !== -1) {
  var a = o.id,
    s = this.getActor(a);
  if (!s) {
    if (t) {
      continue;
    }
    if (!o.cellId && 0 !== o.cellId) {
      continue;
    }
    var r = window.gui.fightManager.getFighter(a);
    if (r && r.data && !r.data.alive) {
      continue;
    }
    s = this.addEmptyActor({
      contextualId: a,
      disposition: o
    });
  }
  s.cellId === o.cellId && s.direction === o.direction || (s.setDisposition(o.cellId, o.direction), s.emoteAnimated && s.lastEmoteAnim && s.loadAndPlayAnimation({
    base: "AnimEmote",
    type: s.lastEmoteAnim
  }, {
    loop: !1,
    isEmoteAnimated: !0
  }));
}
if (!s) {
  if (t) {
    continue;
  }
  if (!o.cellId && 0 !== o.cellId) {
    continue;
  }
  var r = window.gui.fightManager.getFighter(a);
  if (r && r.data && !r.data.alive) {
    continue;
  }
  s = this.addEmptyActor({
    contextualId: a,
    disposition: o
  });
}
if (t) {
  continue;
}
if (!o.cellId && 0 !== o.cellId) {
  continue;
}
if (r && r.data && !r.data.alive) {
  continue;
}
if (null !== t) {
  var i = this._occupiedCells[t];
  if (void 0 === i) {
    return;
  }
  var n = i.indexOf(e);
  n === -1 ? console.warn("[ActorManager.removeActorOccupation] Trying to remove an actor from an empty cell", e) : 1 === i.length ? delete this._occupiedCells[t] : i.splice(n, 1);
}
if (void 0 === i) {
  return;
}
if (void 0 === i) {
  this._occupiedCells[t] = [e];
} else {
  var n = i.indexOf(e);
  n === -1 ? i.push(e) : console.warn("[ActorManager.addActorOccupation] Trying to add an actor to a cell that it already belongs to", e);
}
for (var i = 1; Math.random() < i;) {
  var n = l.getAccessibleCells(t.i, t.j),
    o = n.length;
  if (0 === o) {
    break;
  }
  for (var a = [], s = 0, c = 0; c < o; c++) {
    var d = n[c],
      u = r.getCellIdFromMapPoint(d.i, d.j),
      h = void 0 === this._occupiedCells[u] ? 1 : y;
    a[c] = h, s += h;
  }
  for (var p = 0, m = s * Math.random() - a[0]; m > 0 && p < o;) {
    p += 1, m -= a[p];
  }
  t = n[p === o ? p - 1 : p], e = r.getCellIdFromMapPoint(t.i, t.j), i = this._occupiedCells[e] ? .995 : .8;
}
if (0 === o) {
  break;
}
for (var a = [], s = 0, c = 0; c < o; c++) {
  var d = n[c],
    u = r.getCellIdFromMapPoint(d.i, d.j),
    h = void 0 === this._occupiedCells[u] ? 1 : y;
  a[c] = h, s += h;
}
for (var p = 0, m = s * Math.random() - a[0]; m > 0 && p < o;) {
  p += 1, m -= a[p];
}
if (0 !== n && (s.showAllMonsters || i)) {
  null === e.followers && (e.followers = []);
  for (var o = e.actorId, a = 0; a < n; a++) {
    var r = t[a],
      l = o + ":follower:" + a,
      c = this.getActor(l);
    if (!c) {
      var d = this.computeFollowerPosition(e.cellId);
      c = this.addEmptyActor({
        contextualId: l,
        disposition: {
          cellId: d,
          direction: 1 + 2 * Math.round(3 * Math.random())
        }
      }), c.isFollower = !0, i === !0 ? c.isolationCoefficient = T : (c.isolationCoefficient = M, r.staticInfos && r.staticInfos.isMiniBoss ? c.addIcon("miniBoss") : c.removeIcon("miniBoss"), r.staticInfos || console.error("ActorManager#addActorFollowers: no staticInfos", "actorId:", o, "followerId:", l)), e.followers.push(c), c.groupBoss = e, c.data = e.data, this.followers.push(c);
    }
    this.setActorLook(l, r.look, {}, null);
  }
}
for (var o = e.actorId, a = 0; a < n; a++) {
  var r = t[a],
    l = o + ":follower:" + a,
    c = this.getActor(l);
  if (!c) {
    var d = this.computeFollowerPosition(e.cellId);
    c = this.addEmptyActor({
      contextualId: l,
      disposition: {
        cellId: d,
        direction: 1 + 2 * Math.round(3 * Math.random())
      }
    }), c.isFollower = !0, i === !0 ? c.isolationCoefficient = T : (c.isolationCoefficient = M, r.staticInfos && r.staticInfos.isMiniBoss ? c.addIcon("miniBoss") : c.removeIcon("miniBoss"), r.staticInfos || console.error("ActorManager#addActorFollowers: no staticInfos", "actorId:", o, "followerId:", l)), e.followers.push(c), c.groupBoss = e, c.data = e.data, this.followers.push(c);
  }
  this.setActorLook(l, r.look, {}, null);
}
if (!c) {
  var d = this.computeFollowerPosition(e.cellId);
  c = this.addEmptyActor({
    contextualId: l,
    disposition: {
      cellId: d,
      direction: 1 + 2 * Math.round(3 * Math.random())
    }
  }), c.isFollower = !0, i === !0 ? c.isolationCoefficient = T : (c.isolationCoefficient = M, r.staticInfos && r.staticInfos.isMiniBoss ? c.addIcon("miniBoss") : c.removeIcon("miniBoss"), r.staticInfos || console.error("ActorManager#addActorFollowers: no staticInfos", "actorId:", o, "followerId:", l)), e.followers.push(c), c.groupBoss = e, c.data = e.data, this.followers.push(c);
}
if (i && i.length) {
  for (var o = 0; o < i.length; o++) {
    var a = i[o];
    n.push(a.actorId);
    var s = this.followers.indexOf(a);
    s !== -1 && this.followers.splice(s, 1);
  }
  this.removeActors(n, t);
}
for (var o = 0; o < i.length; o++) {
  var a = i[o];
  n.push(a.actorId);
  var s = this.followers.indexOf(a);
  s !== -1 && this.followers.splice(s, 1);
}
if (e.moving !== !0) {
  var t = e.cellId,
    i = r.getMapPointFromCellId(t),
    n = r.getMapPointFromCellId(e.groupBoss.cellId),
    o = i.x,
    a = i.y,
    s = n.x - o,
    c = n.y - a,
    d = Math.sqrt(s * s + c * c);
  if (1 === this._occupiedCells[t].length) {
    var u = .95 / (1 + (d - 1) * e.isolationCoefficient);
    if (e.groupBoss.moving === !0 && (u *= .8), Math.random() < u) {
      return;
    }
  }
  for (var h, p = {
      i: i.x,
      j: i.y
    }, m = [t], f = 1; Math.random() < f;) {
    var g = l.getAccessibleCells(p.i, p.j),
      _ = g.length;
    if (0 === _) {
      return;
    }
    for (var v = [], b = 0, M = 0; M < _; M++) {
      var T = g[M],
        C = r.getCellIdFromMapPoint(T.i, T.j),
        I = void 0 === this._occupiedCells[C] ? 1 : y,
        A = T.i - p.i,
        S = T.j - p.j;
      I *= 0 === A && 0 === S ? y * y : 0 === A ? Math.pow(w, c / S) : Math.pow(w, s / A), v[M] = I, b += I;
    }
    for (var E = 0, N = b * Math.random() - v[0]; N > 0 && E < _;) {
      E += 1, N -= v[E];
    }
    p = g[E === _ ? E - 1 : E], h = r.getCellIdFromMapPoint(p.i, p.j), m.push(h), f = 1 - 1 / (1 + .5 * d);
  }
  e.setCellPosition(h), e.setPath(m);
}
if (1 === this._occupiedCells[t].length) {
  var u = .95 / (1 + (d - 1) * e.isolationCoefficient);
  if (e.groupBoss.moving === !0 && (u *= .8), Math.random() < u) {
    return;
  }
}
if (e.groupBoss.moving === !0 && (u *= .8), Math.random() < u) {
  return;
}
for (var h, p = {
    i: i.x,
    j: i.y
  }, m = [t], f = 1; Math.random() < f;) {
  var g = l.getAccessibleCells(p.i, p.j),
    _ = g.length;
  if (0 === _) {
    return;
  }
  for (var v = [], b = 0, M = 0; M < _; M++) {
    var T = g[M],
      C = r.getCellIdFromMapPoint(T.i, T.j),
      I = void 0 === this._occupiedCells[C] ? 1 : y,
      A = T.i - p.i,
      S = T.j - p.j;
    I *= 0 === A && 0 === S ? y * y : 0 === A ? Math.pow(w, c / S) : Math.pow(w, s / A), v[M] = I, b += I;
  }
  for (var E = 0, N = b * Math.random() - v[0]; N > 0 && E < _;) {
    E += 1, N -= v[E];
  }
  p = g[E === _ ? E - 1 : E], h = r.getCellIdFromMapPoint(p.i, p.j), m.push(h), f = 1 - 1 / (1 + .5 * d);
}
if (0 === _) {
  return;
}
for (var v = [], b = 0, M = 0; M < _; M++) {
  var T = g[M],
    C = r.getCellIdFromMapPoint(T.i, T.j),
    I = void 0 === this._occupiedCells[C] ? 1 : y,
    A = T.i - p.i,
    S = T.j - p.j;
  I *= 0 === A && 0 === S ? y * y : 0 === A ? Math.pow(w, c / S) : Math.pow(w, s / A), v[M] = I, b += I;
}
for (var E = 0, N = b * Math.random() - v[0]; N > 0 && E < _;) {
  E += 1, N -= v[E];
}
for (var e in this.customAnimMethods) {
  this.customAnimMethods[e]();
}
if (t > 0) {
  var i = Object.keys(this.actors).length;
  if (Math.random() > Math.min(.1, b / i)) {
    return;
  }
  for (var n = 0; n < t; n++) {
    this._moveFollower(this.followers[n]);
  }
}
if (Math.random() > Math.min(.1, b / i)) {
  return;
}
for (var n = 0; n < t; n++) {
  this._moveFollower(this.followers[n]);
}
for (var i = 0; i < e.length; i++) {
  var n = e[i],
    o = t[i],
    a = this.getActor(n);
  if (a && a.data.humanoidInfo && a.data.humanoidInfo.options) {
    for (var s = a.data.humanoidInfo.options, r = 0; r < s.length; r++) {
      var l = s[r];
      if ("HumanOptionAlliance" === l._type) {
        l.aggressable = o, a.addConquestIcon(l);
        break;
      }
    }
  }
}
if (a && a.data.humanoidInfo && a.data.humanoidInfo.options) {
  for (var s = a.data.humanoidInfo.options, r = 0; r < s.length; r++) {
    var l = s[r];
    if ("HumanOptionAlliance" === l._type) {
      l.aggressable = o, a.addConquestIcon(l);
      break;
    }
  }
}
for (var s = a.data.humanoidInfo.options, r = 0; r < s.length; r++) {
  var l = s[r];
  if ("HumanOptionAlliance" === l._type) {
    l.aggressable = o, a.addConquestIcon(l);
    break;
  }
}
if ("HumanOptionAlliance" === l._type) {
  l.aggressable = o, a.addConquestIcon(l);
  break;
}
for (var e = Object.keys(this.actors), t = e.length, i = 0; i < t; i++) {
  var n = this.actors[e[i]];
  n.removeReadyIconOnActor();
}
if (this.isTransparentModeOn !== e) {
  var t, i;
  e ? (t = c.MAP_LAYER_TRANSPARENT, i = c.TRANSPARENT_MODE_ALPHA) : (t = c.MAP_LAYER_PLAYGROUND, i = 1);
  for (var n in this.actors) {
    var o = this.actors[n];
    o.layer = t, o.alpha = i;
  }
  this.userActor.layer = t, this.userActor.alpha = i, this.isTransparentModeOn = e;
}
for (var n in this.actors) {
  var o = this.actors[n];
  o.layer = t, o.alpha = i;
}
if (e !== this.isCreatureModeOn) {
  if (!e) {
    return this._exitCreatureMode();
  }
  this.isCreatureModeOn = !0, this.userActor.carriedEntity || this.userActor.setCreatureLook({}, null);
  for (var t in this.actors) {
    var i = this.actors[t];
    i.setCreatureLook({}, null), i.fighterIndicator && (i.fighterIndicator.y = i.bbox[2] - i.y);
  }
  this.userActor.carriedEntity && this.userActor.setCreatureLook({}, null);
}
if (!e) {
  return this._exitCreatureMode();
}
for (var t in this.actors) {
  var i = this.actors[t];
  i.setCreatureLook({}, null), i.fighterIndicator && (i.fighterIndicator.y = i.bbox[2] - i.y);
}
if (this.isCreatureModeOn) {
  this.isCreatureModeOn = !1, this.userActor.carriedEntity || this.userActor.useRealLook();
  for (var e in this.actors) {
    var t = this.actors[e];
    t.useRealLook(), t.fighterIndicator && (t.fighterIndicator.y = t.bbox[2] - t.y);
  }
  this.userActor.carriedEntity && this.userActor.useRealLook();
}
for (var e in this.actors) {
  var t = this.actors[e];
  t.useRealLook(), t.fighterIndicator && (t.fighterIndicator.y = t.bbox[2] - t.y);
}
for (var i in this.actors) {
  var n = this.actors[i];
  n.data && (n.data.playerId || 0 === n.data.playerId) && t.push(n);
}
for (var t in this.actors) {
  var i = this.actors[t];
  e.push(i.actorId);
}
if (window.isoEngine.mapRenderer.map) {
  this.turnIndicatorOff();
  var t = this.getActor(e.id);
  if (t) {
    var i = t.getFighterData(),
      n = t.getTeamId(),
      o = e.data.disposition.cellId;
    if (o !== -1) {
      if (i.isCarryied && t.parentActor) {
        var a = t.parentActor.bbox[2] + (t.bbox[3] - t.bbox[2]);
        h.addTurnFeedback({
          x: t.parentActor.x,
          y: a,
          position: o
        }, n);
      } else {
        h.addTurnFeedback({
          x: t.x,
          y: t.y,
          position: o
        }, n);
      }
    }
  }
}
if (t) {
  var i = t.getFighterData(),
    n = t.getTeamId(),
    o = e.data.disposition.cellId;
  if (o !== -1) {
    if (i.isCarryied && t.parentActor) {
      var a = t.parentActor.bbox[2] + (t.bbox[3] - t.bbox[2]);
      h.addTurnFeedback({
        x: t.parentActor.x,
        y: a,
        position: o
      }, n);
    } else {
      h.addTurnFeedback({
        x: t.x,
        y: t.y,
        position: o
      }, n);
    }
  }
}
if (o !== -1) {
  if (i.isCarryied && t.parentActor) {
    var a = t.parentActor.bbox[2] + (t.bbox[3] - t.bbox[2]);
    h.addTurnFeedback({
      x: t.parentActor.x,
      y: a,
      position: o
    }, n);
  } else {
    h.addTurnFeedback({
      x: t.x,
      y: t.y,
      position: o
    }, n);
  }
}
if (i.isCarryied && t.parentActor) {
  var a = t.parentActor.bbox[2] + (t.bbox[3] - t.bbox[2]);
  h.addTurnFeedback({
    x: t.parentActor.x,
    y: a,
    position: o
  }, n);
} else {
  h.addTurnFeedback({
    x: t.x,
    y: t.y,
    position: o
  }, n);
}
for (var e = 0; e < this.actors.length; e++) {
  var t = this.actors[e];
  t.removeTeamCircle();
}
for (var e = 0; e < this.actors.length; e++) {
  var t = this.actors[e];
  t.fighterIndicator && t.fighterIndicator.remove();
}
for (var e in this.actors) {
  var t = this.actors[e];
  t.isPlayer() && t.isDisplayed && !t.isInvisible && this._attachNicknameLabel(t);
}
for (var e in this.actors) {
  var t = this.actors[e];
  t.isPlayer() && t.isDisplayed && !t.isInvisible && this.refreshNickname(t);
}
for (var e in this.actors) {
  this.actors[e].removeNicknameLabel();
}
for (var e in this.actors) {
  this.actors[e].addNicknameLabel(!1, e);
}
for (var e in this.actors) {
  this.actors[e].removeNicknameLabel();
}
for (var e in this.actors) {
  this.actors[e].removeTurnNumber();
}
for (var t in this.actors) {
  this.actors[t].carriedEntity && e.removeCarrying(this.actors[t]);
}
for (var e in this.actors) {
  var t = this.actors[e];
  t.refreshLook();
}
for (u = 0; u < a.length; u++) {
  e += a[u].animWeight;
}
for (u = 0; u < a.length; u++) {
  if (i += a[u].animWeight, a[u].animWeight > 0 && t <= i || u >= a.length) {
    return a[u].animName;
  }
}
if (i += a[u].animWeight, a[u].animWeight > 0 && t <= i || u >= a.length) {
  return a[u].animName;
}
if (o !== n.animManager && (o = n.animManager, n.actorState = r.IDLE, s = 0), n.actorState !== r.PLAYING_ANIMATION) {
  if (n.actorState === r.IDLE && Date.now() >= s) {
    var i = e();
    s = Date.now() + i, d ? n.playCustomAnimation({
      animationName: d,
      direction: n.direction,
      loop: !0,
      duration: i,
      delay: 0
    }, function () {
      n.actorState = r.WAITING_FOR_NEXT_ANIMATION;
    }) : n.actorState = r.WAITING_FOR_NEXT_ANIMATION;
  }
  n.actorState === r.WAITING_FOR_NEXT_ANIMATION && Date.now() >= s && n.playCustomAnimation({
    animationName: t(),
    direction: n.direction,
    loop: !1,
    duration: 0,
    delay: 0
  });
}
if (n.actorState === r.IDLE && Date.now() >= s) {
  var i = e();
  s = Date.now() + i, d ? n.playCustomAnimation({
    animationName: d,
    direction: n.direction,
    loop: !0,
    duration: i,
    delay: 0
  }, function () {
    n.actorState = r.WAITING_FOR_NEXT_ANIMATION;
  }) : n.actorState = r.WAITING_FOR_NEXT_ANIMATION;
}
if (this.data.npcData && !(this.data.npcData.animFunList.length <= 0)) {
  var n = this,
    o = this.animManager,
    a = n.data.npcData.animFunList,
    s = 0,
    d = null;
  this.actorState = r.IDLE;
  var u;
  for (u = 0; u < a.length; u++) {
    if (0 === a[u].animWeight) {
      d = a[u].animName;
      break;
    }
  }
  window.actorManager.addAnimBehaviourToActor(this.actorId, i);
}
for (u = 0; u < a.length; u++) {
  if (0 === a[u].animWeight) {
    d = a[u].animName;
    break;
  }
}
if (0 === a[u].animWeight) {
  d = a[u].animName;
  break;
}
if (!e.humanoidInfo) {
  return !1;
}
for (var t = e.humanoidInfo.options || [], i = !1, n = 0; n < t.length; n++) {
  var o = t[n];
  if ("HumanOptionOrnament" === o._type || "HumanOptionTitle" === o._type) {
    i = !0;
    break;
  }
}
if ("HumanOptionOrnament" === o._type || "HumanOptionTitle" === o._type) {
  i = !0;
  break;
}
if (i) {
  var n = !0;
  window.actorManager.paused && window.actorManager.userActor !== this && (this.position = i.cellId, this.cellId = i.cellId), this.moving && this.actorManager.userActor === this && c.isRoleplayMode && (n = !t.isMovementWaitingForConfirmation), n && this.setDisposition(i.cellId, i.direction);
}
if (o && o.isMiniBoss) {
  this.addIcon("miniBoss");
} else if (!d.showAllMonsters) {
  var a = e.staticInfos.underlings;
  if (a) {
    for (var s = 0; s < a.length; s++) {
      a[s].staticInfos.isMiniBoss && this.addIcon("miniBoss");
    }
  }
}
if (!d.showAllMonsters) {
  var a = e.staticInfos.underlings;
  if (a) {
    for (var s = 0; s < a.length; s++) {
      a[s].staticInfos.isMiniBoss && this.addIcon("miniBoss");
    }
  }
}
if (a) {
  for (var s = 0; s < a.length; s++) {
    a[s].staticInfos.isMiniBoss && this.addIcon("miniBoss");
  }
}
for (var s = 0; s < a.length; s++) {
  a[s].staticInfos.isMiniBoss && this.addIcon("miniBoss");
}
if (this.data.humanoidInfo && (this.data.humanoidInfo.restrictions = e), this.canMoveDiagonally = !e.cantWalk8Directions, this.canMoveDiagonally === !1 && 0 === (1 & this.direction)) {
  var t = this.direction + 1;
  t > 7 && (t = 1), this.setDisposition(this.position, t);
}
if (this.actorManager.removeActorFollowers(this, !0), this.data.humanoidInfo && this.data.humanoidInfo.options) {
  for (var e = this.data.humanoidInfo.options, t = 0; t < e.length; t++) {
    var i = e[t];
    "HumanOptionAlliance" === i._type ? this.addConquestIcon(i) : "HumanOptionFollowers" === i._type && this.actorManager.addActorFollowers(this, i.followingCharactersLook, !0);
  }
}
for (var e = this.data.humanoidInfo.options, t = 0; t < e.length; t++) {
  var i = e[t];
  "HumanOptionAlliance" === i._type ? this.addConquestIcon(i) : "HumanOptionFollowers" === i._type && this.actorManager.addActorFollowers(this, i.followingCharactersLook, !0);
}
if (t.moving = !1, t.step = 0, t.path = [], t.setCellPosition(a), t.actorId === window.gui.playerData.id && window.dofus.sendMessage("GameMapMovementCancelMessage", {
  cellId: a
}), t.moving || t.setDisposition(a), e) {
  return e();
}
if (n[n.length - 1].c === i) {
  return !0;
}
for (o = n.length - 2; o >= 0 && n[o].c !== i; o--) {
  ;
}
if (a >= o) {
  return !1;
}
for (var s = n[a + 1].c, r = e.length - 1; r >= 0 && (t.unshift(e[r]), e[r] !== s); r--) {
  ;
}
if (this.moving === !0) {
  var t = ~~this._step,
    i = this._step - t,
    n = this.path[t];
  if (n) {
    var o = this.path[t + 1] || this.path[t];
    this._x = n.x + (o.x - n.x) * i, this._y = n.y + (o.y - n.y) * i, i > .5 && this._position !== o.c && (this.position = o.c), this.animSymbol.id === n.a.id && this.direction === n.d || (this.animSymbol = n.a, this.direction = n.d, this.animManager.assignSymbol(this.animSymbol, !0));
  }
}
if (n) {
  var o = this.path[t + 1] || this.path[t];
  this._x = n.x + (o.x - n.x) * i, this._y = n.y + (o.y - n.y) * i, i > .5 && this._position !== o.c && (this.position = o.c), this.animSymbol.id === n.a.id && this.direction === n.d || (this.animSymbol = n.a, this.direction = n.d, this.animManager.assignSymbol(this.animSymbol, !0));
}
for (var o = 1, a = this.path.length - 1; o < a; o++) {
  n = i[o].m, this.pathTween.to({
    step: o + 1
  }, n);
}
if (!o.mapRenderer.isReady) {
  return console.warn("setPath: renderer was not ready"), i();
}
if (e.length <= 1) {
  return i && i();
}
if (o.mapRenderer.map) {
  _ = o.mapRenderer.map.cells;
} else {
  var v = "actorId: " + this.actorId;
  console.error(new Error("Actor#setPath: map is null, cells are unknown " + v));
}
for (var y = 0; y < e.length; y++) {
  var w = e[y],
    b = 0;
  r.isFightMode ? b = 0 : _ && _[w] && _[w].f && (b = _[w].f);
  var M,
    T = s.cellCoord[w];
  0 === y ? f = 1 : T.y === p ? (M = m.horizontal, f = T.x > h ? 0 : 4) : T.x === h ? (M = m.vertical, f = T.y > p ? 2 : 6) : (M = m.linear, f = T.x > h ? T.y > p ? 1 : 7 : T.y > p ? 3 : 5), M /= g, a && (f = this.direction);
  var C = this.getAnimSymbol(m.symbolId, f);
  y > 0 && (u.d = f, u.a = C, u.m = M), this.path.push(new n(w, T.x, T.y - b, f, C, M)), u = this.path[this.path.length - 1], h = T.x, p = T.y;
}
if (!t.humanoidInfo) {
  return !1;
}
for (var i = t.humanoidInfo.options || [], n = !1, o = 0; o < i.length; o++) {
  var a = i[o];
  if ("HumanOptionOrnament" === a._type || "HumanOptionTitle" === a._type) {
    n = !0;
    break;
  }
}
if ("HumanOptionOrnament" === a._type || "HumanOptionTitle" === a._type) {
  n = !0;
  break;
}
if (n.name = i.name, "full" === t) {
  for (var o, a, s, r, l = i.humanoidInfo.options || [], c = 0; c < l.length; c += 1) {
    var d = l[c];
    "HumanOptionGuild" === d._type ? (s = d.guildInformations, this.hasGuild = !0) : "HumanOptionAlliance" === d._type ? (r = d.allianceInformations, this.hasAlliance = !0) : "HumanOptionOrnament" === d._type ? (a = d.ornamentId, this.hasOrnament = !0) : "HumanOptionTitle" === d._type && (o = d.titleId, this.hasTitle = !0);
  }
  i.alignmentInfos && 0 !== i.alignmentInfos.alignmentGrade && (this.hasWings = !0);
  var u = i.alignmentInfos.characterPower - i.actorId,
    h = window.gui.playerData.getLevelDiff(u);
  this.setAttributes({
    charName: i.name,
    titleId: o,
    ornamentId: a,
    guild: s,
    alliance: r,
    gender: i.humanoidInfo.sex,
    alignmentInfos: i.alignmentInfos,
    levelDiff: h
  }), this.hasNameOnly = !1, n.gender = i.humanoidInfo.sex, n.guild = s, n.alliance = r, n.alignment = i.alignmentInfos, n.titleId = o, n.ornamentId = a;
} else {
  this.setAttributes({
    charName: i.name
  }), this.hasNameOnly = !0;
}
for (var o, a, s, r, l = i.humanoidInfo.options || [], c = 0; c < l.length; c += 1) {
  var d = l[c];
  "HumanOptionGuild" === d._type ? (s = d.guildInformations, this.hasGuild = !0) : "HumanOptionAlliance" === d._type ? (r = d.allianceInformations, this.hasAlliance = !0) : "HumanOptionOrnament" === d._type ? (a = d.ornamentId, this.hasOrnament = !0) : "HumanOptionTitle" === d._type && (o = d.titleId, this.hasTitle = !0);
}
for (var t in e) {
  this.hasOwnProperty("_" + t) && (this["_" + t] = e[t]);
}
if (window.actorManager.getActor(e.actorId)) {
  if (i) {
    return console.error(i);
  }
  t.hasWings ? t._nicknameLabelCanvas.updateWithWings() : t._nicknameLabelCanvas.update(), t.setTexture(t._canvas);
  var n = e.bbox,
    o = n[0] + (n[1] - n[0]) / 2,
    a = n[2];
  t.x = o - t.w / 2, t.y = a - t.h, t.show();
}
if (i) {
  return console.error(i);
}
if (!t._alignment || 0 === t._alignment.alignmentGrade) {
  return e();
}
if (!t._alignment || 0 === t._alignment.alignmentGrade) {
  return e();
}
if (e.font = w, this._nameWidth = e.measureText(this._charName).width, t.push(this._nameWidth), n = _, this.hasNameOnly ? (m = 0, f = 0, M = 3, T = 0) : (m = 160, f = 40, M = 10, T = 5), this.hasGuild) {
  var o = this._guild.guildName;
  e.font = y, this._guildNameWidth = e.measureText(o).width, t.push(this._guildNameWidth + A), t.push(this._nameWidth + A), n += T + g;
}
if (this.hasAlliance && (t.push(this._guildNameWidth + 2 * A), t.push(this._nameWidth + 2 * A)), this.hasTitle) {
  e.font = b;
  var a = this._title,
    s = e.measureText(a).width;
  t.push(s), n += T + v;
}
if (this.hasNameOnly && (s = 0), this.hasGuild && (s += g, this._nicknameLabelCanvas.displayText(this._guild.guildName, a + o, s, y, "#ffffff"), s += T), this._charName && (s += _, this._nicknameLabelCanvas.displayText(this._charName, a + o, s, w, "#ffffff"), s += T), this.hasTitle) {
  s += v;
  var r = this._title;
  this._nicknameLabelCanvas.displayText(r, Math.round(e / 2), s, b, "#00B346");
}
if (i) {
  var n = this._image,
    o = Math.round(e / 2),
    a = Math.round(t / 2);
  for (var s in i.symbols) {
    var r = i.symbols[s];
    if (r.className && r.className.indexOf("ornament_") !== -1) {
      this._resizeOrnament(r);
      for (var l = r.children.length - 1; l >= 0; l--) {
        var c = r.children[l],
          d = c.id,
          u = i.symbols[d],
          h = c.matrices[0],
          p = i.matrices[h],
          g = p[0],
          _ = p[1],
          v = p[2],
          y = p[3],
          w = p[4],
          b = p[5];
        switch (c.name) {
          case "left":
            b += a;
            break;
          case "right":
            w += e, b += a;
            break;
          case "picto":
            w += o;
            break;
          case "top":
            w += o;
            break;
          case "bottom":
            w += o, b += t;
        }
        this._nicknameLabelCanvas.saveAndTransform(g, _, v, y, w, b), this._nicknameLabelCanvas.displayTextAndOrnament(c.name, n, u, e, t, m, f), "bg" === c.name && this._displayText(), this._nicknameLabelCanvas.restore();
      }
    }
  }
}
for (var s in i.symbols) {
  var r = i.symbols[s];
  if (r.className && r.className.indexOf("ornament_") !== -1) {
    this._resizeOrnament(r);
    for (var l = r.children.length - 1; l >= 0; l--) {
      var c = r.children[l],
        d = c.id,
        u = i.symbols[d],
        h = c.matrices[0],
        p = i.matrices[h],
        g = p[0],
        _ = p[1],
        v = p[2],
        y = p[3],
        w = p[4],
        b = p[5];
      switch (c.name) {
        case "left":
          b += a;
          break;
        case "right":
          w += e, b += a;
          break;
        case "picto":
          w += o;
          break;
        case "top":
          w += o;
          break;
        case "bottom":
          w += o, b += t;
      }
      this._nicknameLabelCanvas.saveAndTransform(g, _, v, y, w, b), this._nicknameLabelCanvas.displayTextAndOrnament(c.name, n, u, e, t, m, f), "bg" === c.name && this._displayText(), this._nicknameLabelCanvas.restore();
    }
  }
}
if (r.className && r.className.indexOf("ornament_") !== -1) {
  this._resizeOrnament(r);
  for (var l = r.children.length - 1; l >= 0; l--) {
    var c = r.children[l],
      d = c.id,
      u = i.symbols[d],
      h = c.matrices[0],
      p = i.matrices[h],
      g = p[0],
      _ = p[1],
      v = p[2],
      y = p[3],
      w = p[4],
      b = p[5];
    switch (c.name) {
      case "left":
        b += a;
        break;
      case "right":
        w += e, b += a;
        break;
      case "picto":
        w += o;
        break;
      case "top":
        w += o;
        break;
      case "bottom":
        w += o, b += t;
    }
    this._nicknameLabelCanvas.saveAndTransform(g, _, v, y, w, b), this._nicknameLabelCanvas.displayTextAndOrnament(c.name, n, u, e, t, m, f), "bg" === c.name && this._displayText(), this._nicknameLabelCanvas.restore();
  }
}
for (var l = r.children.length - 1; l >= 0; l--) {
  var c = r.children[l],
    d = c.id,
    u = i.symbols[d],
    h = c.matrices[0],
    p = i.matrices[h],
    g = p[0],
    _ = p[1],
    v = p[2],
    y = p[3],
    w = p[4],
    b = p[5];
  switch (c.name) {
    case "left":
      b += a;
      break;
    case "right":
      w += e, b += a;
      break;
    case "picto":
      w += o;
      break;
    case "top":
      w += o;
      break;
    case "bottom":
      w += o, b += t;
  }
  this._nicknameLabelCanvas.saveAndTransform(g, _, v, y, w, b), this._nicknameLabelCanvas.displayTextAndOrnament(c.name, n, u, e, t, m, f), "bg" === c.name && this._displayText(), this._nicknameLabelCanvas.restore();
}
if (e.children.length) {
  for (var a = e.children.length - 1; a >= 0; a--) {
    var s = e.children[a],
      r = s.id,
      l = this._jsonObj.symbols[r];
    if (l.isGraphic) {
      var c = s.matrices[0],
        d = this._jsonObj.matrices[c],
        u = d[4] + l.x || 0,
        h = d[5] + l.y || 0;
      t = Math.min(t, h), i = Math.min(i, u), n = Math.max(n, u + l.w), o = Math.max(o, h + l.h);
    }
  }
  var p = Math.round(n - i + this._diffWidth),
    m = Math.round(o - t + this._diffHeight);
  this._resizeTextCanvas(p, m, -i, -t);
}
for (var a = e.children.length - 1; a >= 0; a--) {
  var s = e.children[a],
    r = s.id,
    l = this._jsonObj.symbols[r];
  if (l.isGraphic) {
    var c = s.matrices[0],
      d = this._jsonObj.matrices[c],
      u = d[4] + l.x || 0,
      h = d[5] + l.y || 0;
    t = Math.min(t, h), i = Math.min(i, u), n = Math.max(n, u + l.w), o = Math.max(o, h + l.h);
  }
}
if (l.isGraphic) {
  var c = s.matrices[0],
    d = this._jsonObj.matrices[c],
    u = d[4] + l.x || 0,
    h = d[5] + l.y || 0;
  t = Math.min(t, h), i = Math.min(i, u), n = Math.max(n, u + l.w), o = Math.max(o, h + l.h);
}
if ("bg" === e) {
  var l = i.sw / i.w,
    c = i.sh / i.h,
    d = .5 * a - i.x,
    u = .5 * s - i.y,
    h = i.w + i.x - .5 * a,
    p = i.h + i.y - .5 * s;
  r.drawImage(t, i.sx, i.sy, d * l, u * c, i.x, i.y, d, u), r.drawImage(t, i.sx + d * l, i.sy, h * l, u * c, i.x + d + n, i.y, h, u), r.drawImage(t, i.sx, i.sy + u * c, d * l, p * c, i.x, i.y + u + o, d, p), r.drawImage(t, i.sx + d * l, i.sy + u * c, h * l, p * c, i.x + d + n, i.y + u + o, h, p), r.drawImage(t, i.sx + d * l, i.sy, 1 * l, u * c, i.x + d, i.y, n, u), r.drawImage(t, i.sx + d * l, i.sy + u * c, 1 * l, p * c, i.x + d, i.y + u + o, n, p), r.drawImage(t, i.sx, i.sy + u * c, d * l, 1 * c, i.x, i.y + u, d, o), r.drawImage(t, i.sx + d * l, i.sy + u * c, d * l, 1 * c, i.x + d + n, i.y + u, d, o);
} else {
  r.drawImage(t, i.sx, i.sy, i.sw, i.sh, i.x, i.y, i.w, i.h);
}
if (!t || !t.accountId) {
  return void console.error("openPlayerContextualMenu was called on non player actor", this.actorId);
}
if (!t || !t.npcData) {
  return void console.error("openNpcContextualMenu was called on non npc actor", this.actorId);
}
if (1 === c) {
  switch (a.type) {
    case "GameRolePlayGroupMonsterInformations":
      window.gui.openContextualMenu("monster", a, l);
      break;
    case "GameRolePlayPrismInformations":
      window.gui.openContextualMenu("prism", a, l);
      break;
    case "GameRolePlayTaxCollectorInformations":
      a.mapId = window.isoEngine.mapRenderer.map.id, window.gui.openContextualMenu("taxCollector", a, l);
      break;
    case "GameRolePlayNpcInformations":
    case "GameRolePlayNpcWithQuestInformations":
      var f = window.isoEngine,
        g = f.mapRenderer.map.id,
        _ = a.npcId;
      if (!_) {
        return;
      }
      var v = a.npcData;
      if (!v) {
        return console.error("NPC id", _, "missing in database on mapId", g);
      }
      this.openNpcContextualMenu(l);
      break;
    case "GameRolePlayCharacterInformations":
    case "GameRolePlayMutantInformations":
      1 === h ? this.openPlayerContextualMenu(l) : this.isFollower || console.error("nbOnlinePlayersOnCell has an unexpected value (< 1): ", h, this.actorId);
      break;
    case "FightTeamInformations":
    case "FightAllianceTeamInformations":
    case "FightTeamLightInformations":
      window.gui.openContextualMenu("fightTeam", a, l);
      break;
    case "GameFightMutantInformations":
    case "GameFightCharacterInformations":
      window.gui.openContextualMenu("player", {
        playerId: a.playerId,
        playerName: a.name,
        isMutant: "GameFightMutantInformations" === a.type
      }, l);
      break;
    case "GameRolePlayMountInformations":
      var y = [{
        caption: o("ui.mount.viewMountDetails"),
        cb: function () {
          s.getWindow("mount").showPaddockMount(i);
        }
      }];
      window.gui.openContextualMenu("generic", {
        title: (a.name || o("ui.common.noName")) + "\n" + o("ui.mount.mountOf", a.ownerName) + "\n" + o("ui.common.rank", a.level),
        actions: y
      }, l);
      break;
    case "GameFightMonsterInformations":
    case "GameFightMonsterWithAlignmentInformations":
    case "GameFightTaxCollectorInformations":
      return void window.gui.openContextualMenu("fightSwap", a, l);
    case "PaddockObject":
      window.gui.openContextualMenu("paddockObject", {
        cellId: n,
        paddockObjectName: this.data.name
      }, l);
  }
} else {
  window.gui.openContextualMenu("playersList", {
    coordinates: l,
    actors: u,
    npc: p[0],
    monster: m[0]
  });
}
if (!_) {
  return;
}
if (!v) {
  return console.error("NPC id", _, "missing in database on mapId", g);
}
if (this.showTeamCircle(1 !== e), this._stopDetectedAnimation(), 3 === e) {
  this.removeHighlight(), this.isInvisible = !1, this.actorManager.addActorOccupation(this);
} else {
  var i = this.actorManager.userActor.getTeamId();
  t === i ? this.setHighlight(s) : (this.setHighlight(a), this.actorManager.turnIndicatorOff()), this.isInvisible = !0, this.actorManager.removeActorOccupation(this);
}
if (this.animManager.isTemporary) {
  return console.warn("Actor animManager is not ready."), void window.setTimeout(function () {
    t.carryCharacter(e);
  }, 2e3);
}
if (e) {
  return t(e);
}
for (var s in i) {
  var r = i[s];
  if (r) {
    var l = o(r);
    (!n || a < l) && (a = l, n = r);
  }
}
if (r) {
  var l = o(r);
  (!n || a < l) && (a = l, n = r);
}
if (i) {
  return t(i);
}
if (!n) {
  return t();
}
if (o) {
  var a = o && o.alignmentInfos.aggressable;
  i = a !== g.NON_AGGRESSABLE;
} else {
  console.error(new Error("characteristics of the player are null, isPlayerAggressable will be false"));
}
if (i && t.alliance.hasAlliance() && r && !l) {
  var c = p.entities.prism[t.position.subAreaId];
  if (c && c.prism && c.prism.state === f.PRISM_STATE_VULNERABLE) {
    var d = e.allianceInformations.allianceId,
      u = t.alliance.current.allianceId,
      h = c.getAlliance().allianceId,
      m = this.actorId === t.id;
    switch (e.aggressable) {
      case g.AvA_DISQUALIFIED:
        m && (s = "disqualified");
        break;
      case g.AvA_PREQUALIFIED_AGGRESSABLE:
        s = m ? "prequalified" : n(d, u, h);
        break;
      case g.AvA_ENABLED_AGGRESSABLE:
        s = m ? "ally" : n(d, u, h);
    }
  }
}
if (c && c.prism && c.prism.state === f.PRISM_STATE_VULNERABLE) {
  var d = e.allianceInformations.allianceId,
    u = t.alliance.current.allianceId,
    h = c.getAlliance().allianceId,
    m = this.actorId === t.id;
  switch (e.aggressable) {
    case g.AvA_DISQUALIFIED:
      m && (s = "disqualified");
      break;
    case g.AvA_PREQUALIFIED_AGGRESSABLE:
      s = m ? "prequalified" : n(d, u, h);
      break;
    case g.AvA_ENABLED_AGGRESSABLE:
      s = m ? "ally" : n(d, u, h);
  }
}
if (!i) {
  return console.error("Smiley " + e + " details are not available, it could not be displayed");
}
if (e) {
  return console.error("addQuestIcon:", e);
}
if (e) {
  return t(e);
}
if (!o) {
  return t();
}
if (i._getIcon(o, b.QUEST)) {
  return t();
}
if (n !== i._questIconLoadingStartTime) {
  return t();
}
if (!n) {
  var o;
  switch (t) {
    case b.SMILEY:
      o = "gfx/smilies/";
      break;
    case b.UI:
      o = "ui/";
      break;
    default:
      e = M[e], o = "gfx/icons/conquestIcon/";
  }
  if (!e) {
    return console.warn('Icon type "' + e + '" is unknown and could not be displayed.');
  }
  var a = this,
    s = o + e + ".png",
    r = new d({
      layer: l.MAP_LAYER_ICONS,
      x: this.x,
      y: this.y,
      w: 0,
      h: 0,
      scene: this.scene
    });
  this._setIcon(r, e, t), u.loadTexture(s, i, this.scene.renderer);
}
if (!e) {
  return console.warn('Icon type "' + e + '" is unknown and could not be displayed.');
}
for (var t in b) {
  var i,
    n = b[t],
    o = 0,
    a = 0;
  for (i in this.icons[n]) {
    var s = this.icons[n][i].w;
    o += s ? s : 0, a++;
  }
  if (0 !== a) {
    o += T * (a - 1);
    var r = ~~(.5 * -o),
      l = 0;
    for (i in this.icons[n]) {
      var c = this.icons[n][i],
        d = c.h ? c.h : 0;
      l = Math.max(l, c.h ? c.h : 50);
      var u = this.bbox ? this.bbox[2] - this.y - d - 10 : -100;
      u -= e, this.y + u < 0 && (u = this.bbox ? this.bbox[3] - this.y + 10 : 100, u += e), c.x = this.x + r, c.y = this.y + u, c.position = this.position, r += c.w + T;
    }
    e += l + C;
  }
}
for (i in this.icons[n]) {
  var s = this.icons[n][i].w;
  o += s ? s : 0, a++;
}
if (0 !== a) {
  o += T * (a - 1);
  var r = ~~(.5 * -o),
    l = 0;
  for (i in this.icons[n]) {
    var c = this.icons[n][i],
      d = c.h ? c.h : 0;
    l = Math.max(l, c.h ? c.h : 50);
    var u = this.bbox ? this.bbox[2] - this.y - d - 10 : -100;
    u -= e, this.y + u < 0 && (u = this.bbox ? this.bbox[3] - this.y + 10 : 100, u += e), c.x = this.x + r, c.y = this.y + u, c.position = this.position, r += c.w + T;
  }
  e += l + C;
}
for (i in this.icons[n]) {
  var c = this.icons[n][i],
    d = c.h ? c.h : 0;
  l = Math.max(l, c.h ? c.h : 50);
  var u = this.bbox ? this.bbox[2] - this.y - d - 10 : -100;
  u -= e, this.y + u < 0 && (u = this.bbox ? this.bbox[3] - this.y + 10 : 100, u += e), c.x = this.x + r, c.y = this.y + u, c.position = this.position, r += c.w + T;
}
if (1 === window.gui.fightManager.fightState && this.updateTurnIndicatorPosition(), this.fighterIndicator && (this.fighterIndicator.x = this.x, this.fighterIndicator.y = this.bbox[2] - 10), this._turnNumberLabel && this._turnNumberLabel.updatePosition(this.x, this.y), this.nicknameLabel) {
  var h = this.bbox,
    p = h[0] + (h[1] - h[0]) / 2,
    m = h[2];
  this.nicknameLabel.updatePosition(p, m);
}
for (var t in this.icons[e]) {
  this.removeIcon(t, e);
}
for (var e in b) {
  var t = b[e];
  this.removeIconCategory(t);
}
if (p) {
  return p;
}
for (var i in t) {
  var n = t[i],
    o = e.exec(n.maleLook)[1],
    a = e.exec(n.femaleLook)[1];
  p[o] = n.creatureBonesId, p[a] = n.creatureBonesId;
}
if (!e) {
  return console.error(new Error("getCreatureBones: look missing")), 666;
}
if (!d[t]) {
  return 1749;
}
if (c.isRoleplayMode && !d || u) {
  return this.realLook ? this.setLook(this.realLook, {
    useRealLook: !0
  }, i) : i();
}
if (!p) {
  return i();
}
if (!this.circleGraphic) {
  var t = this.getFighter();
  if (t) {
    var i = t.data.teamId,
      n = this;
    this.circleGraphic = new s({
      layer: a.MAP_LAYER_BACKGROUND,
      x: this.x,
      y: this.y,
      w: 0,
      h: 0,
      scene: this.scene
    });
    var r;
    0 === i ? r = u : 1 === i ? r = h : console.error("invalid team number"), o.loadTexture(r, e, this.scene.renderer);
  }
}
if (t) {
  var i = t.data.teamId,
    n = this;
  this.circleGraphic = new s({
    layer: a.MAP_LAYER_BACKGROUND,
    x: this.x,
    y: this.y,
    w: 0,
    h: 0,
    scene: this.scene
  });
  var r;
  0 === i ? r = u : 1 === i ? r = h : console.error("invalid team number"), o.loadTexture(r, e, this.scene.renderer);
}
if (e !== this._text) {
  var t = this.getForegroundColor(),
    i = this.getBackgroundColor();
  this.clearTexture(), this._textImage = new o(e), this.resetPosition(), this._text = e, this._centerText(), this.setForegroundColor(t), this.setBackgroundColor(i);
}
for (var e = 1 / 0, t = -(1 / 0), i = 1 / 0, n = -(1 / 0), o = 0; o < this.triangles.length; o++) {
  for (var a = 0; a < l; a++) {
    var s = (o * l + a) * c,
      r = this.vertices[this.triangles[o][a]],
      d = r.x,
      u = r.y,
      h = Math.max(-128, Math.min(127, 64 * r.r)),
      p = Math.max(-128, Math.min(127, 64 * this.green)),
      m = Math.max(-128, Math.min(127, 64 * r.b)),
      f = Math.max(-128, Math.min(127, 64 * (this.alpha && r.a))),
      g = (f << 24 & 4278190080) + (m << 16 & 16711680) + (p << 8 & 65280) + (255 & h);
    this._vertexBuffer[s] = d, this._vertexBuffer[s + 1] = u, this._colorBuffer[s + 3] = g, e > d ? e = d : t < d && (t = d), i > u ? i = u : n < u && (n = u);
  }
}
for (var a = 0; a < l; a++) {
  var s = (o * l + a) * c,
    r = this.vertices[this.triangles[o][a]],
    d = r.x,
    u = r.y,
    h = Math.max(-128, Math.min(127, 64 * r.r)),
    p = Math.max(-128, Math.min(127, 64 * this.green)),
    m = Math.max(-128, Math.min(127, 64 * r.b)),
    f = Math.max(-128, Math.min(127, 64 * (this.alpha && r.a))),
    g = (f << 24 & 4278190080) + (m << 16 & 16711680) + (p << 8 & 65280) + (255 & h);
  this._vertexBuffer[s] = d, this._vertexBuffer[s + 1] = u, this._colorBuffer[s + 3] = g, e > d ? e = d : t < d && (t = d), i > u ? i = u : n < u && (n = u);
}
if (void 0 === e) {
  var t = this.id,
    i = !1;
  this.renderer.loadSpriteBuffer(t, this._vertexBuffer, null, this._bbox, i), this.renderer.lockBuffer(this.id);
}
if (!i.mapRenderer.isReady) {
  return i.once("mapLoaded", function () {
    m(e);
  });
}
if (window.gui.fightManager.fightState !== O.UNDEFINED) {
  if (!f) {
    return void b.push(e);
  }
  f = !1;
  var n = e.sequence,
    o = n.shift(),
    a = n.pop(),
    s = Boolean(e.isFakeSequence);
  if (M = s ? M : a.actionId, o.sequenceType !== a.sequenceType) {
    return console.error(new Error("Different sequenceType"));
  }
  if (o.authorId !== a.authorId) {
    return console.error(new Error("Different authorId"));
  }
  var r = new C();
  return r.runSequence(n, function (e) {
    if (e) {
      return console.error("sequenceAssetPreload error:", e), t();
    }
    var i = [];
    T.eachSeries(n, function (e, t) {
      var n = R[e._messageType],
        o = D[e._messageType];
      return void 0 === n && void 0 === o ? (console.error(new Error("[process messageSequence] Unsupported game action: " + e._messageType)), t()) : o ? o(e, i, t) : (n && n(e, i), t());
    }, function (e) {
      if (e) {
        return console.error(e), void t();
      }
      try {
        T.series(i, function (e) {
          e && console.error("sequenceAnimationEnd error:", e), t();
        });
      } catch (n) {
        console.error("sequenceAnimationEnd catch error:", n), t();
      }
    });
  });
}
if (!f) {
  return void b.push(e);
}
if (M = s ? M : a.actionId, o.sequenceType !== a.sequenceType) {
  return console.error(new Error("Different sequenceType"));
}
if (o.authorId !== a.authorId) {
  return console.error(new Error("Different authorId"));
}
if (e) {
  return console.error("sequenceAssetPreload error:", e), t();
}
if (e) {
  return console.error(e), void t();
}
if (o === O.BATTLE) {
  var a = n.fightManager.getFighter(t.charId);
  if (a && a.data.alive) {
    var s = {
      _messageType: "messageSequence",
      sequence: [{
        _messageType: "SequenceStartMessage"
      }, {
        _messageType: "_GameActionFightLeaveMessage",
        actionId: 0,
        sourceId: 0,
        targetId: t.charId
      }, {
        _messageType: "SequenceEndMessage"
      }]
    };
    e.emit("messageSequence", s);
  }
}
if (a && a.data.alive) {
  var s = {
    _messageType: "messageSequence",
    sequence: [{
      _messageType: "SequenceStartMessage"
    }, {
      _messageType: "_GameActionFightLeaveMessage",
      actionId: 0,
      sourceId: 0,
      targetId: t.charId
    }, {
      _messageType: "SequenceEndMessage"
    }]
  };
  e.emit("messageSequence", s);
}
if (e) {
  var o = n || 0;
  return t === j && (o = 0), {
    base: "AnimArme",
    type: o
  };
}
if (void 0 !== i) {
  var a = i;
  return t === j && (a = 1), 101 === a && t === Y && (a = 1), {
    base: "AnimAttaque",
    type: a
  };
}
if (!n.position && 0 !== n.position) {
  var a = i.actorManager.getActor(e);
  if (!a) {
    return console.error(new Error("No actor " + e));
  }
  var s = a.look || {};
  n.position = a.cellId, n.direction = a.direction, n.bonesId = s.bonesId;
}
if (!a) {
  return console.error(new Error("No actor " + e));
}
if (0 !== t) {
  var o = z(),
    s = o.actorManager.getActor(t);
  if (!s || s.animManager.isTemporary) {
    return console.warn("No actor", t);
  }
  i.direction = a(t, n).direction, e.addAnimation(s, i);
}
if (!s || s.animManager.isTemporary) {
  return console.warn("No actor", t);
}
if (d) {
  var u = z(),
    h = new P({
      scene: u.isoEngine.mapScene,
      position: a,
      x: d.x,
      y: d.y - (s || 0)
    });
  if (c) {
    var p;
    p = c === q.TOWARD_POSITION2 ? r(a, l) : r(l, a), h.rotation = W[o] ? p + Math.PI : p;
  }
  return t["_" + n + "Orientation"] = o, t["_" + n] = h, e.loadAnimationManager(h, i + "/FX"), h;
}
if (c) {
  var p;
  p = c === q.TOWARD_POSITION2 ? r(a, l) : r(l, a), h.rotation = W[o] ? p + Math.PI : p;
}
if (!o) {
  return void console.warn("Source actor does not exist");
}
for (var L = Object.keys(o), O = [], D = 0; D < L.length; D++) {
  O.push(o[L[D]]);
}
for (var B = 1; B < O.length && !N; B++) {
  var k = O[B],
    H = s.getCoordinateGridFromCellId(k.cellId);
  a(H.i, H.j);
}
if (t._scriptParams.useSpellZone) {
  e.addWaitingRequest();
  var o = t.sourceId || t.casterId,
    a = t.destinationCellId || t.targetCellId,
    s = t.spellId,
    r = t.spellLevel;
  window.gui.fightManager.getFighterSpell(s, o, function (o, s) {
    var l;
    if (o) {
      console.error(o), l = [];
    } else {
      var c = s;
      if (c.setLevel(r), !window.isoEngine.mapRenderer.map || !window.isoEngine.mapRenderer.map.cells) {
        return e.removeWaitingRequest();
      }
      var d = window.isoEngine.mapRenderer.map.cells;
      l = B(d, i.position, a, c.getZoneEffect());
    }
    h(e, t, i, n, l), e.removeWaitingRequest();
  });
} else {
  h(e, t, i, n, []);
}
if (o) {
  console.error(o), l = [];
} else {
  var c = s;
  if (c.setLevel(r), !window.isoEngine.mapRenderer.map || !window.isoEngine.mapRenderer.map.cells) {
    return e.removeWaitingRequest();
  }
  var d = window.isoEngine.mapRenderer.map.cells;
  l = B(d, i.position, a, c.getZoneEffect());
}
if (c.setLevel(r), !window.isoEngine.mapRenderer.map || !window.isoEngine.mapRenderer.map.cells) {
  return e.removeWaitingRequest();
}
if (h) {
  if (t.destinationCellId !== -1 && h.position !== t.destinationCellId) {
    var m = N.getOrientation(h.position, t.destinationCellId, !1);
    h.direction = m, t._casterOrientation = m;
  }
  if (!t.silentCast) {
    var f, g;
    if (t.targetId) {
      if (f = a(t.targetId, i), !f) {
        return;
      }
      g = F.isActorVisibleToUser(t.targetId) ? f.position : null;
    } else {
      f = {
        direction: 1
      };
    }
    var _ = g || t.destinationCellId || t.targetCellId;
    t._targetCellId = _;
    var v = t._scriptParams || {};
    if (v.casterGfxId && u(e, t, v.casterGfxId, "casterGfx", h.position, h.direction, v.casterGfxYOffset, v.casterGfxDisplayType, v.casterGfxOriented, _), v.targetGfxId && u(e, t, v.targetGfxId, "targetGfx", _, h.direction, v.targetGfxYOffset, v.targetGfxDisplayType, v.targetGfxOriented, h.position), v.targetGfxId2 && u(e, t, v.targetGfxId2, "targetGfx2", _, h.direction, v.targetGfxYOffset2, v.targetGfxDisplayType2, v.targetGfxOriented2, h.position), r) {
      var y = v.animId;
      y && !v.targetGfxId && (v.targetGfxId2 && console.error(new Error("Message contains a targetGfdId2 and ")), l(e, t, y, "targetGfx2", 1, _)), t._spellAnimSymbol = {
        base: "AnimAttaque",
        type: 403
      };
    } else {
      v.missileGfxId && d(e, t, v.missileGfxId), t._spellAnimSymbol = n(o, h && h.bonesId, v.animId, t._weaponTypeId);
    }
    v.trailGfxId && p(e, t, h, f), t._spellAnimSymbol && s(e, c, t._spellAnimSymbol, i);
    for (var w = t._lifeVariationMsgs || [], b = t._deadIds, M = 0; M < w.length; M++) {
      var T = w[M],
        C = T.targetId;
      b && b.indexOf(C) !== -1 ? T._isDead = !0 : w[M].loss && s(e, C, {
        base: "AnimHit"
      }, i);
    }
  }
}
if (t.destinationCellId !== -1 && h.position !== t.destinationCellId) {
  var m = N.getOrientation(h.position, t.destinationCellId, !1);
  h.direction = m, t._casterOrientation = m;
}
if (!t.silentCast) {
  var f, g;
  if (t.targetId) {
    if (f = a(t.targetId, i), !f) {
      return;
    }
    g = F.isActorVisibleToUser(t.targetId) ? f.position : null;
  } else {
    f = {
      direction: 1
    };
  }
  var _ = g || t.destinationCellId || t.targetCellId;
  t._targetCellId = _;
  var v = t._scriptParams || {};
  if (v.casterGfxId && u(e, t, v.casterGfxId, "casterGfx", h.position, h.direction, v.casterGfxYOffset, v.casterGfxDisplayType, v.casterGfxOriented, _), v.targetGfxId && u(e, t, v.targetGfxId, "targetGfx", _, h.direction, v.targetGfxYOffset, v.targetGfxDisplayType, v.targetGfxOriented, h.position), v.targetGfxId2 && u(e, t, v.targetGfxId2, "targetGfx2", _, h.direction, v.targetGfxYOffset2, v.targetGfxDisplayType2, v.targetGfxOriented2, h.position), r) {
    var y = v.animId;
    y && !v.targetGfxId && (v.targetGfxId2 && console.error(new Error("Message contains a targetGfdId2 and ")), l(e, t, y, "targetGfx2", 1, _)), t._spellAnimSymbol = {
      base: "AnimAttaque",
      type: 403
    };
  } else {
    v.missileGfxId && d(e, t, v.missileGfxId), t._spellAnimSymbol = n(o, h && h.bonesId, v.animId, t._weaponTypeId);
  }
  v.trailGfxId && p(e, t, h, f), t._spellAnimSymbol && s(e, c, t._spellAnimSymbol, i);
  for (var w = t._lifeVariationMsgs || [], b = t._deadIds, M = 0; M < w.length; M++) {
    var T = w[M],
      C = T.targetId;
    b && b.indexOf(C) !== -1 ? T._isDead = !0 : w[M].loss && s(e, C, {
      base: "AnimHit"
    }, i);
  }
}
if (t.targetId) {
  if (f = a(t.targetId, i), !f) {
    return;
  }
  g = F.isActorVisibleToUser(t.targetId) ? f.position : null;
} else {
  f = {
    direction: 1
  };
}
if (f = a(t.targetId, i), !f) {
  return;
}
if (v.casterGfxId && u(e, t, v.casterGfxId, "casterGfx", h.position, h.direction, v.casterGfxYOffset, v.casterGfxDisplayType, v.casterGfxOriented, _), v.targetGfxId && u(e, t, v.targetGfxId, "targetGfx", _, h.direction, v.targetGfxYOffset, v.targetGfxDisplayType, v.targetGfxOriented, h.position), v.targetGfxId2 && u(e, t, v.targetGfxId2, "targetGfx2", _, h.direction, v.targetGfxYOffset2, v.targetGfxDisplayType2, v.targetGfxOriented2, h.position), r) {
  var y = v.animId;
  y && !v.targetGfxId && (v.targetGfxId2 && console.error(new Error("Message contains a targetGfdId2 and ")), l(e, t, y, "targetGfx2", 1, _)), t._spellAnimSymbol = {
    base: "AnimAttaque",
    type: 403
  };
} else {
  v.missileGfxId && d(e, t, v.missileGfxId), t._spellAnimSymbol = n(o, h && h.bonesId, v.animId, t._weaponTypeId);
}
for (var w = t._lifeVariationMsgs || [], b = t._deadIds, M = 0; M < w.length; M++) {
  var T = w[M],
    C = T.targetId;
  b && b.indexOf(C) !== -1 ? T._isDead = !0 : w[M].loss && s(e, C, {
    base: "AnimHit"
  }, i);
}
if (n.look !== t.entityLook) {
  return void (t._doNotProcess = !0);
}
if (n.nAssetsLoaded += 1, n.nAssetsLoaded === n.nAssetsToLoad) {
  return t();
}
if (n.nAssetsToLoad -= 1, n.nAssetsLoaded === n.nAssetsToLoad) {
  return t();
}
for (var o = 0; o < e.length; o++) {
  var a = e[o],
    s = V[a._messageType];
  s && s(this, a, i);
}
if (e.cellId !== -1) {
  var t = window.actorManager.getActor(e.sourceId);
  t && 1 === _.getDistance(t.cellId, e.cellId) && (e._messageType = "GameActionFightDropCharacterMessage");
}
for (var t = 0; t < e.length; t++) {
  var i = e[t],
    o = v[i._messageType];
  o && o(i);
}
for (0 === i && 0 === n ? (this._stop = !0, s = null) : 0 === i ? s = this._vertical : 0 === n ? s = this._horizontal : o === a ? s = this._equalSlope : o > a ? (s = this._xSlope, this.deltaError = a / o) : (s = this._ySlope, this.deltaError = o / a); !this._stop;) {
  s.apply(this), this.x === this.targetX && this.y === this.targetY && (this._stop = !0), this.cb(this.x, this.y, !0);
}
if (this.moving === !0) {
  var t = this.path,
    i = this.step,
    n = ~~i,
    o = this.prevCoords,
    a = {
      x: r([this.source[0], this.bezier[0], this.target[0]], i / this.pathLength),
      y: r([this.source[1], this.bezier[1], this.target[1]], i / this.pathLength)
    };
  this.x = a.x, this.y = a.y;
  var s = a.x - o.x,
    l = a.y - o.y;
  this.rotation = Math.atan2(l, s);
  var c = t[n];
  c !== this.prevPos && (this.position = c), this.prevPos = c, this.prevCoords = a;
}
if (!a) {
  return o(new Error("map is null, isReady is " + window.isoEngine.mapRenderer.isReady));
}
if (e = 0 | +e, !e) {
  throw new Error("Cannot create a interpolator with no elements");
}
if (l[e]) {
  return l[e];
}
for (var t = ["var ut = 1 - t", ""], i = e; i--;) {
  for (var n = 0; n < i; n += 1) {
    i + 1 === e ? t.push("var p" + n + " = arr[" + n + "] * ut + arr[" + (n + 1) + "] * t") : i > 1 ? t.push("p" + n + " = p" + n + " * ut + p" + (n + 1) + " * t") : t.push("return p" + n + " * ut + p" + (n + 1) + " * t");
  }
  i > 1 && t.push("");
}
for (var n = 0; n < i; n += 1) {
  i + 1 === e ? t.push("var p" + n + " = arr[" + n + "] * ut + arr[" + (n + 1) + "] * t") : i > 1 ? t.push("p" + n + " = p" + n + " * ut + p" + (n + 1) + " * t") : t.push("return p" + n + " * ut + p" + (n + 1) + " * t");
}
if (s.allowSpellEffects && !e.silentCast) {
  var f = e._spellAnimSymbol;
  f && t.push(function (e) {
    if (d) {
      d.oneShootAnim(f, {
        backToStatic: !0
      });
      var t = d.animManager.nbFrames;
      return new a(Math.min(r, t), e).start();
    }
    return console.error(new Error("Cannot oneShootAnim of source undefined. Before: " + u + " After: " + c.getActorsIDList().join(", "))), e();
  });
  var g = e._targetCellId || e.destinationCellId !== -1;
  g && (e._targetGfx && m.playTargetGfxFirst && i(), e._targetGfx2 && m.playTargetGfxFirst2 && l()), m.casterGfxId && t.push(function (t) {
    return n.playGfx(e._casterGfx, e._casterGfxOrientation, m.casterGfxShowUnder, h), t();
  }), e._missileGfx && e.destinationCellId !== -1 && t.push(function (t) {
    e._missileGfx.launch(e.destinationCellId, void 0 !== m.missileSpeed ? m.missileSpeed + 10 : 10, (m.missileCurvature || 0) / 10, m.missileGfxYOffset || 0, t);
  }), m.trailGfxId && t.push(function (t) {
    n.playGfxTrailAnimation(e._trailGfxs, e._trailGfxsOrientation, m.trailGfxShowUnder, h, t);
  }), g && (e._targetGfx && !m.playTargetGfxFirst && i(), e._targetGfx2 && !m.playTargetGfxFirst2 && l());
}
if (d) {
  d.oneShootAnim(f, {
    backToStatic: !0
  });
  var t = d.animManager.nbFrames;
  return new a(Math.min(r, t), e).start();
}
for (var i = 0; i < e._lifeVariationMsgs.length; i++) {
  var n = e._lifeVariationMsgs[i];
  if (!(n._isDead || n.delta > 0)) {
    var o = c.getActor(n.targetId);
    if (o) {
      var a = {
        base: n._animSymbol || "AnimHit"
      };
      o.oneShootAnim(a, {
        backToStatic: !0
      });
    } else {
      console.error("Target " + n.targetId + " is missing to play hit animation");
    }
  }
}
if (!(n._isDead || n.delta > 0)) {
  var o = c.getActor(n.targetId);
  if (o) {
    var a = {
      base: n._animSymbol || "AnimHit"
    };
    o.oneShootAnim(a, {
      backToStatic: !0
    });
  } else {
    console.error("Target " + n.targetId + " is missing to play hit animation");
  }
}
if (o) {
  var a = {
    base: n._animSymbol || "AnimHit"
  };
  o.oneShootAnim(a, {
    backToStatic: !0
  });
} else {
  console.error("Target " + n.targetId + " is missing to play hit animation");
}
if (e) {
  e.position += i ? -.1 : .1, e.animManager.assignSymbol({
    base: "FX",
    direction: t
  }, !1, function () {
    if (e.remove(), o) {
      return o();
    }
  });
} else if (r.error(new Error("gfx missing for spell " + n)), o) {
  return o();
}
if (e.remove(), o) {
  return o();
}
if (r.error(new Error("gfx missing for spell " + n)), o) {
  return o();
}
for (var l = 0, c = 0; c < e.length; c += 1) {
  o(e[c], t, i, l, n), l += s;
}
if (i && t < i + I) {
  var n = i + I;
  return C[e] = n, n - t;
}
if (t) {
  var i = e.maxRotation || 0,
    o = new l({
      position: 0,
      layer: c.MAP_LAYER_POINT_LABELS,
      bitmapFont: t.numbers,
      scene: window.actorManager.scene,
      text: e.pointVariation,
      color: e.color || _,
      x: e.x + 30 * (Math.random() - .5),
      y: e.y + 30 * (Math.random() - .5),
      rotation: (Math.random() - .5) * i
    });
  o.hide();
  var a = n(e.targetId) * c.TIME_UNITS_PER_SECOND / 1e3;
  new h(a, function () {
    new d(o.highlight, ["red", "green", "blue"]).from({
      red: 1,
      green: 1,
      blue: 1
    }).to({
      red: 4,
      green: 4,
      blue: 4
    }, 3, u.polyOut, 4).to({
      red: 1,
      green: 1,
      blue: 1
    }, 8, u.polyOut, 4).start(), new d(o, ["scaleX", "scaleY"]).from({
      scaleX: .2,
      scaleY: .2
    }).to({
      scaleX: 1.8,
      scaleY: 1.8
    }, 4, u.polyOut, 4).to({
      scaleX: 1,
      scaleY: 1
    }, 10, u.polyOut, 4).start();
    var e = o.rotation,
      t = (Math.random() - .5) * e;
    new d(o, ["y", "rotation"]).from({
      y: o.y,
      rotation: e
    }).to({
      y: o.y,
      rotation: e
    }, 8).to({
      y: o.y - 60,
      rotation: t
    }, 30, u.polyOut, 7).start(), new d(o, ["alpha"]).from({
      alpha: 0
    }).to({
      alpha: 1
    }, 3, u.polyOut, 4).to({
      alpha: 0
    }, 38, u.polyIn, 4).start().onFinish(function () {
      o.remove();
    }), o.show();
  }).start();
}
if (i) {
  var n = window.gui.fightManager.isFighterOnUsersTeam(e.targetId),
    a = window.actorManager.isActorInvisible(e.targetId),
    s = e.actionId === m.ACTION_CHARACTER_MOVEMENT_POINTS_USE;
  if ((n || !s || !a) && (e.shieldLoss || 0 !== e.delta && 0 !== e.loss)) {
    var r;
    r = e.actionId === m.ACTION_CHARACTER_DEBOOST_MOVEMENT_POINTS || e.actionId === m.ACTION_CHARACTER_DEBOOST_ACTION_POINTS ? "-" + e.delta : e.delta ? e.delta > 0 ? "+" + e.delta : e.delta : e.shieldLoss ? "-" + e.shieldLoss : "-" + e.loss, o({
      x: i.x,
      y: i.y - 70,
      maxRotation: .3,
      color: t,
      pointVariation: r,
      targetId: e.targetId
    });
  }
}
if ((n || !s || !a) && (e.shieldLoss || 0 !== e.delta && 0 !== e.loss)) {
  var r;
  r = e.actionId === m.ACTION_CHARACTER_DEBOOST_MOVEMENT_POINTS || e.actionId === m.ACTION_CHARACTER_DEBOOST_ACTION_POINTS ? "-" + e.delta : e.delta ? e.delta > 0 ? "+" + e.delta : e.delta : e.shieldLoss ? "-" + e.shieldLoss : "-" + e.loss, o({
    x: i.x,
    y: i.y - 70,
    maxRotation: .3,
    color: t,
    pointVariation: r,
    targetId: e.targetId
  });
}
for (var i = 0; i < e.length; i++) {
  var n = e[i];
  (p.showApMpUsed || n.actionId !== m.ACTION_CHARACTER_MOVEMENT_POINTS_USE && n.actionId !== m.ACTION_CHARACTER_ACTION_POINTS_USE) && n._labelColor && a(n, n._labelColor);
}
for (var i = 0; i < e.length; i++) {
  var n = e[i];
  n._labelColor = T[n.actionId];
}
for (var n = 0; n < i.length; n += 1) {
  " " === i[n] || this.characterDimensions[i[n]] || (e.fallbackText || 0 === e.fallbackText ? (console.error(new Error("TextSprite: character " + i[n] + " not in bitmap font: using fallback text")), i = e.fallbackText, "number" == typeof i && (i = i.toString()), e.fallbackText = null, n = -1) : (console.error(new Error("TextSprite: character " + i[n] + ' not in bitmap font: replacing with a "."')), i = i.substr(0, n) + "." + i.substr(n + 1)));
}
for (o = 0; o < i.length; o += 1) {
  r = i[o], " " === r ? this.textWidth += c : (l = this.characterDimensions[r], this.textWidth += l.w, l.h > this.textHeight && (this.textHeight = l.h));
}
for (this._bbox[0] = d, this._bbox[1] = d + this.textWidth, this._bbox[2] = u, this._bbox[3] = u + this.textHeight, this.characterPositions = [], o = 0; o < i.length; o += 1) {
  if (r = i[o], " " === r) {
    d += c;
  } else {
    l = this.characterDimensions[r];
    var h = (this.textHeight - l.h) / 2;
    this.characterPositions[o] = {
      x: d,
      y: u + h
    }, d += l.w;
  }
}
if (r = i[o], " " === r) {
  d += c;
} else {
  l = this.characterDimensions[r];
  var h = (this.textHeight - l.h) / 2;
  this.characterPositions[o] = {
    x: d,
    y: u + h
  }, d += l.w;
}
for (var n = this._floatView, o = this._longView, a = this._longView, s = this.texture.element.width, r = this.texture.element.height, l = 0; l < e.length; l += 1) {
  var c = e[l];
  if (" " !== c) {
    var d = this.characterPositions[l],
      u = this.characterDimensions[c],
      h = l * this._characterByteSize / 4,
      p = d.x,
      m = d.x + u.w,
      f = d.y,
      g = d.y + u.h;
    n[h + 0] = p, n[h + 1] = f, n[h + 5] = p, n[h + 6] = g, n[h + 10] = m, n[h + 11] = g, n[h + 15] = p, n[h + 16] = f, n[h + 20] = m, n[h + 21] = g, n[h + 25] = m, n[h + 26] = f;
    var _ = u.x / s * 65535 & 65535,
      v = u.y / r * 4294901760 & 4294901760,
      y = (u.x + u.w) / s * 65535 & 65535,
      w = (u.y + u.h) / r * 4294901760 & 4294901760;
    o[h + 2] = _ + v, o[h + 7] = _ + w, o[h + 12] = y + w, o[h + 17] = _ + v, o[h + 22] = y + w, o[h + 27] = y + v;
    var b = 1077952576;
    a[h + 3] = a[h + 8] = a[h + 13] = b, a[h + 18] = a[h + 23] = a[h + 28] = b;
    var M = Math.max(-128, Math.min(127, 128 * t[0])),
      T = Math.max(-128, Math.min(127, 128 * t[1])),
      C = Math.max(-128, Math.min(127, 128 * t[2])),
      I = Math.max(-128, Math.min(127, 128 * t[3])),
      A = (I << 24 & 4278190080) + (C << 16 & 16711680) + (T << 8 & 65280) + (255 & M);
    a[h + 4] = a[h + 9] = a[h + 14] = A, a[h + 19] = a[h + 24] = a[h + 29] = A;
  }
}
if (" " !== c) {
  var d = this.characterPositions[l],
    u = this.characterDimensions[c],
    h = l * this._characterByteSize / 4,
    p = d.x,
    m = d.x + u.w,
    f = d.y,
    g = d.y + u.h;
  n[h + 0] = p, n[h + 1] = f, n[h + 5] = p, n[h + 6] = g, n[h + 10] = m, n[h + 11] = g, n[h + 15] = p, n[h + 16] = f, n[h + 20] = m, n[h + 21] = g, n[h + 25] = m, n[h + 26] = f;
  var _ = u.x / s * 65535 & 65535,
    v = u.y / r * 4294901760 & 4294901760,
    y = (u.x + u.w) / s * 65535 & 65535,
    w = (u.y + u.h) / r * 4294901760 & 4294901760;
  o[h + 2] = _ + v, o[h + 7] = _ + w, o[h + 12] = y + w, o[h + 17] = _ + v, o[h + 22] = y + w, o[h + 27] = y + v;
  var b = 1077952576;
  a[h + 3] = a[h + 8] = a[h + 13] = b, a[h + 18] = a[h + 23] = a[h + 28] = b;
  var M = Math.max(-128, Math.min(127, 128 * t[0])),
    T = Math.max(-128, Math.min(127, 128 * t[1])),
    C = Math.max(-128, Math.min(127, 128 * t[2])),
    I = Math.max(-128, Math.min(127, 128 * t[3])),
    A = (I << 24 & 4278190080) + (C << 16 & 16711680) + (T << 8 & 65280) + (255 & M);
  a[h + 4] = a[h + 9] = a[h + 14] = A, a[h + 19] = a[h + 24] = a[h + 29] = A;
}
if (void 0 === e) {
  var t = this._floatView,
    i = !1;
  this.renderer.loadSpriteBuffer(this.id, t, this.texture, this.bbox, i), this.renderer.lockBuffer(this.id);
}
if (e.cellId !== -1) {
  var n = window.actorManager.getActor(e.targetId);
  n && t.push(function (t) {
    return window.gui.transmitFightSequenceMessage(e), n.setDisposition(e.cellId), i(e.targetId), t();
  });
}
if (n) {
  console.error("Unable to retrieve the effects visibility for " + e.effectId + ", " + n);
} else if (s && !s.visibleOnTerrain) {
  return t();
}
if (s && !s.visibleOnTerrain) {
  return t();
}
for (var c = e._glyph, u = 0, h = e.cells.length; u < h; u++) {
  var p = e.cells[u],
    _ = p.cellId,
    v = l.parseIndexedColor(p.cellColor).color,
    y = "rgba(" + v.r + "," + v.g + "," + v.b + ", 0.6)",
    w = "rgba(" + v.r + "," + v.g + "," + v.b + ", 0.3)",
    b = o(p),
    M = {
      markId: e.markId,
      markCell: _,
      markSize: p.zoneSize,
      sourceId: e.markAuthorId,
      spellId: e.markSpellId,
      type: e.markType
    },
    T = new d(b, {
      color: w,
      outline: y,
      data: M
    });
  if (c) {
    var C = r.cellCoord[_];
    c.x = C.x, c.y = C.y + f.y, c.position = _ + f.position, c.animManager.assignSymbol(m, !1), T.gfx = c;
  }
  i.addZone(T, "mark:" + e.markId);
}
if (c) {
  var C = r.cellCoord[_];
  c.x = C.x, c.y = C.y + f.y, c.position = _ + f.position, c.animManager.assignSymbol(m, !1), T.gfx = c;
}
if (!t) {
  return console.error(new Error("Cannot get mark shape, map is not ready yet")), [];
}
if (e) {
  return console.error("Could not sync marks", e);
}
for (var e = {}, t = Object.keys(g), i = 0; i < t.length; i++) {
  for (var n = g[t[i]], a = 0; a < n.cells.length; a++) {
    for (var s = o(n.cells[a]), r = 0; r < s.length; r += 1) {
      var l = s[r];
      e[l] || (e[l] = []), e[l].push(n);
    }
  }
}
for (var n = g[t[i]], a = 0; a < n.cells.length; a++) {
  for (var s = o(n.cells[a]), r = 0; r < s.length; r += 1) {
    var l = s[r];
    e[l] || (e[l] = []), e[l].push(n);
  }
}
for (var s = o(n.cells[a]), r = 0; r < s.length; r += 1) {
  var l = s[r];
  e[l] || (e[l] = []), e[l].push(n);
}
if (!n) {
  return console.error("No found actor with id " + e.targetId);
}
if (n && a) {
  var r = {
      base: "AnimPickup",
      direction: e._direction
    },
    l = !i.isCreatureModeOn && n.riderEntity || n.animManager,
    c = {
      animManager: a.animManager,
      bindingPoint: "carried_3_0",
      symbolModifier: o[s],
      bindingPointCategory: s
    };
  a.parentActor = n, n.carriedEntity = c, n.carriedActor = a, a.getFighterData().isCarryied = !0, t.push(function (e) {
    i.isCreatureModeOn || (l.addAnimationModifier("AnimStatique", "AnimStatiqueCarrying"), l.addAnimationModifier("AnimMarche", "AnimMarcheCarrying"), l.addAnimationModifier("AnimCourse", "AnimCourseCarrying"), l.addAnimationModifier("AnimHit", "AnimHitCarrying"), l.addAnimationModifier("AnimTacle", "AnimTacleCarrying")), l.addSubentity(c), a.setDisposition(n.cellId), a.y = -1e3, n.oneShootAnim(r, {
      backToStatic: !0
    }, e);
  });
}
if (s && o) {
  var r = e.cellId,
    l = {
      base: "AnimThrow",
      direction: e._direction
    };
  o.getFighterData().isCarryied = !1, t.push(function (e) {
    s.oneShootAnim(l, {
      backToStatic: !1
    }, function () {
      n(s), o.setDisposition(r), s.staticAnim();
    });
    var t = new a(7, e);
    t.start(!1);
  }), r !== -1 && (t.push(function (t) {
    e._throwingProjectile.launch(r, 13, .3, 70, t);
  }), t.push(function (t) {
    return o.setDisposition(r), window.gui.transmitFightSequenceMessage(e), t();
  }));
}
if (o) {
  var s = {
    base: "AnimDrop",
    direction: e._direction
  };
  a.getFighterData().isCarryied = !1, t.push(function (t) {
    o.oneShootAnim(s, {
      backToStatic: !1
    }, function () {
      return n(o), a.setDisposition(e.cellId), o.staticAnim(), window.gui.transmitFightSequenceMessage(e), t();
    });
  });
}
if (e) {
  return void console.error(new Error("ActionQueue.staticContent.getAllDataMap: " + e));
}
for (var i in t) {
  1 !== t[i].actionId && (s[i] = !0);
}
if (this._isActive && this._isCurrentAction(e)) {
  delete this._actionMap[e];
  var t = this._queue.shift();
  if (!t) {
    return void this.clear();
  }
  this._currentActionId = t.actionId, this._endOfQueueOnly = t.endOfQueueOnly, t.action();
}
if (!t) {
  return void this.clear();
}
if (!this._isActive) {
  return !0;
}
for (var a = 0; a < t; a++) {
  o.to(n, 12), o.to(i, 12);
}
if (!e.isWithinBounds(t, i)) {
  return !1;
}
for (var r = W.length, l = 0, c = 3; c < r; c += 4) {
  l += W[c];
}
for (var e = this.mapRenderer, t = e.identifiedElements, i = e.interactiveElements, n = this.actorManager.actors, a = [], s = Object.keys(i), r = 0; r < s.length; r += 1) {
  var l = s[r],
    c = i[l];
  if (0 !== c.enabledSkills.length || 0 !== c.disabledSkills.length) {
    var d = t[l];
    d && a.push(d);
  }
}
if (0 !== c.enabledSkills.length || 0 !== c.disabledSkills.length) {
  var d = t[l];
  d && a.push(d);
}
for (var u = Object.keys(n), h = 0; h < u.length; h += 1) {
  a.push(n[u[h]]);
}
for (i = 0; i < o.length; i++) {
  var u = o[i];
  if (this._isElementClicked(u, e, t)) {
    if (u.actorId) {
      if (u.isNPC()) {
        if (!l) {
          var h = u.data.npcData && u.data.npcData.actions && u.data.npcData.actions.length > 0;
          (r || h) && (l = u);
        }
      } else {
        d || (d = u);
      }
    } else {
      c || (c = u);
    }
  }
}
if (this._isElementClicked(u, e, t)) {
  if (u.actorId) {
    if (u.isNPC()) {
      if (!l) {
        var h = u.data.npcData && u.data.npcData.actions && u.data.npcData.actions.length > 0;
        (r || h) && (l = u);
      }
    } else {
      d || (d = u);
    }
  } else {
    c || (c = u);
  }
}
if (u.actorId) {
  if (u.isNPC()) {
    if (!l) {
      var h = u.data.npcData && u.data.npcData.actions && u.data.npcData.actions.length > 0;
      (r || h) && (l = u);
    }
  } else {
    d || (d = u);
  }
} else {
  c || (c = u);
}
if (u.isNPC()) {
  if (!l) {
    var h = u.data.npcData && u.data.npcData.actions && u.data.npcData.actions.length > 0;
    (r || h) && (l = u);
  }
} else {
  d || (d = u);
}
if (!l) {
  var h = u.data.npcData && u.data.npcData.actions && u.data.npcData.actions.length > 0;
  (r || h) && (l = u);
}
if (p = this.actorManager.isTransparentModeOn ? d || c || l : l || c || d, null === p) {
  return this._lastTapId = null, !1;
}
if (this.unblockedNpcId === -1 || p === l && p.data.npcId === this.unblockedNpcId) {
  var g = y([p._position, window.gui.playerData.position.mapId, f]);
  g === this._lastTapId ? (m = !0, this._lastTapId = null) : this._lastTapId = g, this.clearHighlights(null, L.DEFAULT);
  var _ = this.actionQueue.isActive();
  if (p.tap) {
    return _ || (m && p.actorId && "GameRolePlayGroupMonsterInformations" === p.data.type ? window.isoEngine.attackActor(p.actorId) : p.tap(e, t)), !0;
  }
  var v = n[p.id];
  if (!v) {
    return !0;
  }
  var w, b;
  if (1 === v.enabledSkills.length) {
    b = v.enabledSkills[0];
    var M = b.skillId;
    a(M) || s(M) || (w = b);
  }
  if (_ && !w) {
    for (i = 0; i < v.enabledSkills.length; i++) {
      if (b = v.enabledSkills[i], b.skillId === this.lastContextualMenuSkillId) {
        w = b;
        break;
      }
    }
  }
  if (w) {
    var T = this,
      C = this.actionQueue.enqueueInteractive(v.elementId, v.elementTypeId, function () {
        for (var e = !1, t = 0; t < v.enabledSkills.length; t++) {
          var i = v.enabledSkills[t];
          if (i.skillId === w.skillId) {
            e = !0;
            break;
          }
        }
        return e ? void T.queueUseInteractive(v.elementId, w.skillInstanceUid) : (T.actionQueue.clear(), T.clearHighlights(null, L.QUEUE));
      });
    return C ? (this._addHighlight(p, L.QUEUE), !0) : (!_ && 1 === v.enabledSkills.length && w && (this.instantUseInteractive(v.elementId, w.skillInstanceUid), this._addHighlight(p)), !0);
  }
  if (_) {
    return !0;
  }
  if (this._addHighlight(p), m) {
    for (var I = 0; I < R.length; I++) {
      if (v.elementTypeId === R[I].elementTypeId) {
        for (var A = 0; A < v.enabledSkills.length; A++) {
          if (v.enabledSkills[A].skillId === R[I].skillId) {
            return this.instantUseInteractive(v.elementId, v.enabledSkills[A].skillInstanceUid), !0;
          }
        }
      }
    }
  }
  var S = window.foreground.convertSceneToScreenCoordinate(e, t);
  return window.gui.openContextualMenu("interactive", v, {
    x: S.x,
    y: S.y
  }), !0;
}
if (p.tap) {
  return _ || (m && p.actorId && "GameRolePlayGroupMonsterInformations" === p.data.type ? window.isoEngine.attackActor(p.actorId) : p.tap(e, t)), !0;
}
if (!v) {
  return !0;
}
if (1 === v.enabledSkills.length) {
  b = v.enabledSkills[0];
  var M = b.skillId;
  a(M) || s(M) || (w = b);
}
if (_ && !w) {
  for (i = 0; i < v.enabledSkills.length; i++) {
    if (b = v.enabledSkills[i], b.skillId === this.lastContextualMenuSkillId) {
      w = b;
      break;
    }
  }
}
for (i = 0; i < v.enabledSkills.length; i++) {
  if (b = v.enabledSkills[i], b.skillId === this.lastContextualMenuSkillId) {
    w = b;
    break;
  }
}
if (b = v.enabledSkills[i], b.skillId === this.lastContextualMenuSkillId) {
  w = b;
  break;
}
if (w) {
  var T = this,
    C = this.actionQueue.enqueueInteractive(v.elementId, v.elementTypeId, function () {
      for (var e = !1, t = 0; t < v.enabledSkills.length; t++) {
        var i = v.enabledSkills[t];
        if (i.skillId === w.skillId) {
          e = !0;
          break;
        }
      }
      return e ? void T.queueUseInteractive(v.elementId, w.skillInstanceUid) : (T.actionQueue.clear(), T.clearHighlights(null, L.QUEUE));
    });
  return C ? (this._addHighlight(p, L.QUEUE), !0) : (!_ && 1 === v.enabledSkills.length && w && (this.instantUseInteractive(v.elementId, w.skillInstanceUid), this._addHighlight(p)), !0);
}
for (var e = !1, t = 0; t < v.enabledSkills.length; t++) {
  var i = v.enabledSkills[t];
  if (i.skillId === w.skillId) {
    e = !0;
    break;
  }
}
if (i.skillId === w.skillId) {
  e = !0;
  break;
}
if (_) {
  return !0;
}
if (this._addHighlight(p), m) {
  for (var I = 0; I < R.length; I++) {
    if (v.elementTypeId === R[I].elementTypeId) {
      for (var A = 0; A < v.enabledSkills.length; A++) {
        if (v.enabledSkills[A].skillId === R[I].skillId) {
          return this.instantUseInteractive(v.elementId, v.enabledSkills[A].skillInstanceUid), !0;
        }
      }
    }
  }
}
for (var I = 0; I < R.length; I++) {
  if (v.elementTypeId === R[I].elementTypeId) {
    for (var A = 0; A < v.enabledSkills.length; A++) {
      if (v.enabledSkills[A].skillId === R[I].skillId) {
        return this.instantUseInteractive(v.elementId, v.enabledSkills[A].skillInstanceUid), !0;
      }
    }
  }
}
if (v.elementTypeId === R[I].elementTypeId) {
  for (var A = 0; A < v.enabledSkills.length; A++) {
    if (v.enabledSkills[A].skillId === R[I].skillId) {
      return this.instantUseInteractive(v.elementId, v.enabledSkills[A].skillInstanceUid), !0;
    }
  }
}
for (var A = 0; A < v.enabledSkills.length; A++) {
  if (v.enabledSkills[A].skillId === R[I].skillId) {
    return this.instantUseInteractive(v.elementId, v.enabledSkills[A].skillInstanceUid), !0;
  }
}
if (v.enabledSkills[A].skillId === R[I].skillId) {
  return this.instantUseInteractive(v.elementId, v.enabledSkills[A].skillInstanceUid), !0;
}
if (t) {
  for (var i = 0; i < t.length; i++) {
    t[i].highlight = null;
  }
  this.highlightedElements[e] = [];
}
for (var i = 0; i < t.length; i++) {
  t[i].highlight = null;
}
if (e) {
  var i = this,
    n = new A(e, function () {
      i.clearHighlights(null, t);
    });
  return n.start();
}
if (t) {
  this._clearHighlightType(t);
} else {
  for (var o in this.highlightedElements) {
    this._clearHighlightType(o);
  }
  this.highlightedElements = {};
}
for (var o in this.highlightedElements) {
  this._clearHighlightType(o);
}
for (var e = 0; e < this.interactiveMessageStack.length; e++) {
  this.interactiveUseStart(this.interactiveMessageStack[e]);
}
if (this.isMapChanging) {
  return void this.interactiveMessageStack.push(e);
}
if (!o) {
  return i ? console.error("interactiveUseStart: user actor is not ready") : console.warn("interactiveUseStart: no actor with id " + e.entityId);
}
if (!s) {
  return i ? console.error("interactiveUseStart: no interactive with id " + e.elemId) : console.warn("interactiveUseStart: no interactive with id " + e.elemId);
}
if (!c || "AnimStatique" === c) {
  return void (i && t.actionQueue.dequeue(e.elemId));
}
if (i || u.areCellsNeighbours(a, l, {
  allowDiagonal: !0,
  useHeightCell: !0
})) {
  i || (p = a);
} else {
  var m = h.getPath(a, l, this.actorManager.getOccupiedCells(), !0, !0);
  p = m && m[m.length - 1];
}
if (!a || !o) {
  return console.warn("Element not found with ID: " + e);
}
for (var o in t) {
  var a = t[o],
    s = i[o],
    r = s instanceof _;
  s && (n && !r || 0 === a.enabledSkills.length && 0 === a.disabledSkills.length || l(s, e));
}
for (e in i) {
  var a = i[e],
    s = n[e];
  s && 0 !== a.enabledSkills.length && (t = a.elementTypeId, o[t] || (o[t] = []), o[t].push(s));
}
for (t in o) {
  if (~~t === O.UNSPECIFIED) {
    r = r.concat(o[t]);
  } else {
    var c = o[t].length,
      d = ~~(Math.random() * c);
    r.push(o[t][d]);
  }
}
if (~~t === O.UNSPECIFIED) {
  r = r.concat(o[t]);
} else {
  var c = o[t].length,
    d = ~~(Math.random() * c);
  r.push(o[t][d]);
}
for (var u = 0; u < r.length; u++) {
  l(r[u], 5);
}
if (!t) {
  return console.error("No entity with id", e.entityId);
}
if (this.bitmapFonts && !window.gui.fightManager.isInactive) {
  var t = p(e),
    i = m(e),
    n = this.mapScene,
    o = n.w / 2,
    a = n.h / 2,
    s = this.bitmapFonts.characters,
    r = new f({
      x: o,
      y: a,
      scene: n,
      text: t,
      fallbackText: i,
      position: 2 * Y + 1,
      layer: c.MAP_LAYER_POINT_LABELS,
      bitmapFont: s,
      color: [.2, .5, -.2, 0],
      isHudElement: !0
    }),
    l = s.dimensions.bann,
    d = r.textWidth,
    u = r.textHeight,
    h = l.h,
    _ = l.w,
    v = 2,
    y = Math.floor(_ / 2 - v),
    w = l.x,
    b = l.y,
    M = new g({
      x: o,
      y: a - u / 2,
      scene: n,
      position: 2 * Y,
      layer: c.MAP_LAYER_POINT_LABELS,
      texture: s.texture,
      controlPoints: [{
        x: -d / 2 - y,
        u: w,
        y: 0,
        v: b
      }, {
        x: -d / 2,
        u: w + y,
        y: 0,
        v: b
      }, {
        x: d / 2,
        u: w + y + v,
        y: h,
        v: b + h
      }, {
        x: d / 2 + y,
        u: w + _,
        y: h,
        v: b + h
      }],
      isHudElement: !0
    }),
    T = new S(r, ["y", "alpha"]).from({
      y: a - 30,
      alpha: 0
    }).to({
      y: a - 30,
      alpha: 0
    }, 4).to({
      y: a,
      alpha: 1
    }, 8, E.backOut, 2).to({
      y: a,
      alpha: 1
    }, 17).to({
      y: a - 30,
      alpha: 0
    }, 8, E.backIn, 2).onFinish(function () {
      r.remove();
    }).start(),
    C = new S(M, ["scaleX", "alpha"]).from({
      scaleX: .7,
      alpha: 0
    }).to({
      scaleX: 1,
      alpha: 1
    }, 8, E.backOut, 2).to({
      scaleX: 1,
      alpha: 1
    }, 24).to({
      scaleX: .7,
      alpha: 0
    }, 8, E.backIn, 2).onFinish(function () {
      M.remove();
    }).start();
  Y += 1, null !== this._currentBannerTweens.backTween && (this._currentBannerTweens.backTween.starting || this._currentBannerTweens.backTween.playing) && (this._currentBannerTweens.backTween.reset().to({
    scaleX: .7,
    alpha: 0
  }, 8, E.polyOut, 2).start(), this._currentBannerTweens.textTween.reset().to({
    y: a - 30,
    alpha: 0
  }, 8, E.polyOut, 2).start()), this._currentBannerTweens.backTween = C, this._currentBannerTweens.textTween = T;
}
for (var e = Object.keys(B), t = 0; t < e.length; t++) {
  window.clearTimeout(B[e[t]]), delete B[e[t]];
}
if (void 0 === e) {
  var t = this._floatView,
    i = !1;
  this.renderer.loadSpriteBuffer(this.id, t, this.texture, this.bbox, i), this.renderer.lockBuffer(this.id);
}
if (t) {
  if ("object" == typeof t && (t = t.valueOf()), "string" != typeof t) {
    throw new TypeError("Invalid type for salt: must be a string");
  }
  a = t;
}
if ("object" == typeof t && (t = t.valueOf()), "string" != typeof t) {
  throw new TypeError("Invalid type for salt: must be a string");
}
if ("o" === o && null !== e && (s = e.valueOf()), o = (typeof s)[0], "o" !== o || null === s) {
  return a.concat(o, s);
}
if (s instanceof Date) {
  return a.concat("d", s.toJSON());
}
if (s instanceof RegExp) {
  return a.concat("r", s.toString());
}
if ("f" === o) {
  throw new TypeError("Invalid type: function");
}
for (var c = 0; c < r.length; c += 1) {
  l = r[c], a = a.concat(o, l, n(s[l]));
}
for (var r = e[t], l = r.pathNodes, c = null, d = 0; d < l.length; d += 1) {
  var u = l[d];
  if (u.from === i) {
    c = new w();
    break;
  }
  var h = o - n;
  if (!(0 === h || h + 1 < u.distance - 1) && a.indexOf(u.from) === -1 && (c = s(e, u.from, i, n + 1, o, b(a)))) {
    break;
  }
}
if (u.from === i) {
  c = new w();
  break;
}
if (!(0 === h || h + 1 < u.distance - 1) && a.indexOf(u.from) === -1 && (c = s(e, u.from, i, n + 1, o, b(a)))) {
  break;
}
if (this._spellRangeLayer) {
  for (var a = {}, s = this._spellRangeLayer.cellInfos, r = Object.keys(s), l = 0; l < r.length; l++) {
    var c = s[r[l]];
    c.transformState === e ? a[c.cellId] = new m(c.cellId, c.distanceToPlayer, t) : c.transformState === i && (a[c.cellId] = new m(c.cellId, c.distanceToPlayer, n));
  }
  0 !== Object.keys(a).length && this._resetSpellRangeLayer(a);
}
for (var a = {}, s = this._spellRangeLayer.cellInfos, r = Object.keys(s), l = 0; l < r.length; l++) {
  var c = s[r[l]];
  c.transformState === e ? a[c.cellId] = new m(c.cellId, c.distanceToPlayer, t) : c.transformState === i && (a[c.cellId] = new m(c.cellId, c.distanceToPlayer, n));
}
if (this._spellEffectLayer) {
  for (a = {}, s = this._spellEffectLayer.cellInfos, r = Object.keys(s), l = 0; l < r.length; l++) {
    c = s[r[l]], a[c.cellId] = new m(c.cellId, c.distanceToPlayer, o);
  }
  this._resetSpellEffectLayer(a);
}
for (a = {}, s = this._spellEffectLayer.cellInfos, r = Object.keys(s), l = 0; l < r.length; l++) {
  c = s[r[l]], a[c.cellId] = new m(c.cellId, c.distanceToPlayer, o);
}
if (T !== o) {
  if (window.gui.pingSystem.isActive()) {
    return T && this.mapRenderer.deletePingHighlight(T), T = o, this.mapRenderer.addPingHighlight(o, this.getContext(o));
  }
  T = o, "fight" === i.mode && void 0 !== i.spellId ? this.displayEffectZone(o) : "fight" === i.mode && this._isUserTurn && (this.actorManager.getActorsOnCell(o).length > 0 ? this._resetWalkLayer() : (window.foreground.confirmBox.close(), A = this._displayPathInFight(o)));
}
if (window.gui.pingSystem.isActive()) {
  return T && this.mapRenderer.deletePingHighlight(T), T = o, this.mapRenderer.addPingHighlight(o, this.getContext(o));
}
if (!C[e]) {
  var s = h.getMapPointFromCellId(i),
    l = h.getMapPointFromCellId(a);
  S.set(s.x, s.y, l.x, l.y), S.exec(function (e, t) {
    var i = h.getCellIdFromMapPoint(e, t);
    C[i] ? a = i : S.stop();
  });
}
if (!p) {
  return o();
}
for (var g = p.reachable[p.reachable.length - 1], _ = {}, v = 0; v < p.reachable.length; v++) {
  _[p.reachable[v]] = new m(p.reachable[v], p.reachableMap[p.reachable[v]], f.walkable);
}
for (var y = 0; y < p.unreachable.length; y++) {
  _[p.unreachable[y]] = new m(p.unreachable[y], p.unreachableMap[p.unreachable[y]], f.unwalkable);
}
if (!this.isCellEmpty(e)) {
  var i = window.gui.fightManager,
    n = t[0].getFighter();
  if (!n || !n.id) {
    return M.PING_TARGET_NOTHING;
  }
  var o = i.isFighterOnUsersTeam(n.id),
    a = t[0].getFighter().isSummon() && o;
  if (a) {
    return M.PING_TARGET_SUMMON_ALLY;
  }
  if (this.actorManager.userActor.actorId === t[0].actorId) {
    return M.PING_TARGET_YOURSELF;
  }
  if (o) {
    return M.PING_TARGET_ALLY;
  }
  if (!o) {
    return M.PING_TARGET_ENNEMY;
  }
}
if (!n || !n.id) {
  return M.PING_TARGET_NOTHING;
}
if (a) {
  return M.PING_TARGET_SUMMON_ALLY;
}
if (this.actorManager.userActor.actorId === t[0].actorId) {
  return M.PING_TARGET_YOURSELF;
}
if (o) {
  return M.PING_TARGET_ALLY;
}
if (!o) {
  return M.PING_TARGET_ENNEMY;
}
if (!t.isPingBoxOpen()) {
  T && this.mapRenderer.deletePingHighlight(T);
  var i = e.cell;
  this.mapRenderer.addPingHighlight(i, this.getContext(i), !0);
}
if (d) {
  var u = this._tapInteractive(e, t);
  if (!u && !c.moving && (r = r || l.getFirstMapFlag(i.cell))) {
    var h = !0,
      p = this.actionQueue.enqueue("changeMap", h, function () {
        o.gotoNeighbourMap(r, i.cell, a, s);
      });
    return void (p && window.foreground.showBorderArrow(r, a, s));
  }
} else {
  this.lastContextualMenuSkillId = null;
}
if (!u && !c.moving && (r = r || l.getFirstMapFlag(i.cell))) {
  var h = !0,
    p = this.actionQueue.enqueue("changeMap", h, function () {
      o.gotoNeighbourMap(r, i.cell, a, s);
    });
  return void (p && window.foreground.showBorderArrow(r, a, s));
}
if (!c.isLocked) {
  if (c.moving || this.isMovementWaitingForConfirmation) {
    if (window.foreground.hideBorderArrow(), d && !r && this._tapInteractive(e, t)) {
      return;
    }
    return this.clearHighlights(), this.actionQueue.clear(), void this.cancelUserActorMovement(function () {
      o._touchEnd(e, t, i, n);
    });
  }
  if (!r) {
    if (this._tapInteractive(e, t)) {
      return;
    }
    var m = this.actorManager.getActorsOnCell(i.cell);
    if (m[0] && m[0].position === i) {
      return void (0 === i.dist && m[0].tap(e, t, l.camera));
    }
  }
  this.clearHighlights();
  var f = i.cell;
  return (r = r || l.getFirstMapFlag(i.cell)) ? this.gotoNeighbourMap(r, i.cell, a, s) : void this._movePlayerOnMap(f);
}
if (c.moving || this.isMovementWaitingForConfirmation) {
  if (window.foreground.hideBorderArrow(), d && !r && this._tapInteractive(e, t)) {
    return;
  }
  return this.clearHighlights(), this.actionQueue.clear(), void this.cancelUserActorMovement(function () {
    o._touchEnd(e, t, i, n);
  });
}
if (window.foreground.hideBorderArrow(), d && !r && this._tapInteractive(e, t)) {
  return;
}
if (!r) {
  if (this._tapInteractive(e, t)) {
    return;
  }
  var m = this.actorManager.getActorsOnCell(i.cell);
  if (m[0] && m[0].position === i) {
    return void (0 === i.dist && m[0].tap(e, t, l.camera));
  }
}
if (this._tapInteractive(e, t)) {
  return;
}
if (m[0] && m[0].position === i) {
  return void (0 === i.dist && m[0].tap(e, t, l.camera));
}
if (!this.unblockedCells || this.unblockedCells[o]) {
  window.foreground.fightIsUserTurn ? n.hideConfirmWindow = !1 : n.hideConfirmWindow = !0;
  var a = this._shouldSkipConfirmBox(_.confirmBoxWhenClickCasting, o);
  a ? this._castSpell(o, e, t, n) : this._castSpellConfirm(o, e, t, n);
}
if (this.mapRenderer.isReady && !window.gui.playerData.isSpectator) {
  this.clearSpellDisplay();
  var e = this.actorManager.userActor,
    t = e.cellId,
    i = C || c.getReachableZone(e, t);
  this.clearUserMovementZone();
  var n,
    o = {},
    a = window.isoEngine.actorManager.userActor.cellId;
  for (var s in i) {
    if (i.hasOwnProperty(s)) {
      var r,
        l = g.getDistance(a, s);
      r = i[s].reachable ? i[s].isTackled ? f.walkAreaRequiresAP : f.walkArea : f.walkAreaRestricted, o[s] = new m(~~s, l, r), n = !0;
    }
  }
  n && this._resetWalkAreaLayer(o);
}
for (var s in i) {
  if (i.hasOwnProperty(s)) {
    var r,
      l = g.getDistance(a, s);
    r = i[s].reachable ? i[s].isTackled ? f.walkAreaRequiresAP : f.walkArea : f.walkAreaRestricted, o[s] = new m(~~s, l, r), n = !0;
  }
}
if (i.hasOwnProperty(s)) {
  var r,
    l = g.getDistance(a, s);
  r = i[s].reachable ? i[s].isTackled ? f.walkAreaRequiresAP : f.walkArea : f.walkAreaRestricted, o[s] = new m(~~s, l, r), n = !0;
}
if (this.mapRenderer.isReady) {
  this.clearSpellDisplay();
  var t = this.actorManager.getActor(e.id);
  if (t) {
    var i = t.cellId,
      n = c.getReachableZone(t, i);
    this._resetWalkAreaLayer();
    for (var o, a = {}, s = Object.keys(n), r = 0; r < s.length; r++) {
      var l,
        d = s[r],
        u = g.getDistance(i, d);
      l = n[d].reachable ? n[d].isTackled ? f.enemyWalkAreaRequiresAP : f.enemyWalkArea : f.enemyWalkAreaRestricted, a[d] = new m(~~d, u, l), o = !0;
    }
    o && this._resetEnemyWalkAreaLayer(a);
  }
}
if (t) {
  var i = t.cellId,
    n = c.getReachableZone(t, i);
  this._resetWalkAreaLayer();
  for (var o, a = {}, s = Object.keys(n), r = 0; r < s.length; r++) {
    var l,
      d = s[r],
      u = g.getDistance(i, d);
    l = n[d].reachable ? n[d].isTackled ? f.enemyWalkAreaRequiresAP : f.enemyWalkArea : f.enemyWalkAreaRestricted, a[d] = new m(~~d, u, l), o = !0;
  }
  o && this._resetEnemyWalkAreaLayer(a);
}
for (var o, a = {}, s = Object.keys(n), r = 0; r < s.length; r++) {
  var l,
    d = s[r],
    u = g.getDistance(i, d);
  l = n[d].reachable ? n[d].isTackled ? f.enemyWalkAreaRequiresAP : f.enemyWalkArea : f.enemyWalkAreaRestricted, a[d] = new m(~~d, u, l), o = !0;
}
if (!this.unblockedCells || this.unblockedCells[r]) {
  if (this.actorManager.getActorsOnCell(r).length > 0 || !this._isUserTurn) {
    return o(), this._resetWalkLayer(), void c.close();
  }
  if (A || (A = this._displayPathInFight(r)), !A || 0 === A.reachable.length || !T && A.reachable.indexOf(r) === -1 && A.unreachable.indexOf(r) === -1) {
    return o(), this._resetWalkLayer(), void c.close();
  }
  var h = A && A.reachable;
  if (h && h.indexOf(r) > -1) {
    var p = {
        mp: A.costMP,
        ap: A.costAP
      },
      m = v(["move", p, h, r, s]);
    _.confirmBoxWhenWalking ? c.open("move", p, m, {
      startHidden: !1,
      allowDoubleTap: !0
    }, n) : n(!0);
  } else {
    u._resetWalkLayer();
  }
}
if (this.actorManager.getActorsOnCell(r).length > 0 || !this._isUserTurn) {
  return o(), this._resetWalkLayer(), void c.close();
}
if (A || (A = this._displayPathInFight(r)), !A || 0 === A.reachable.length || !T && A.reachable.indexOf(r) === -1 && A.unreachable.indexOf(r) === -1) {
  return o(), this._resetWalkLayer(), void c.close();
}
if (h && h.indexOf(r) > -1) {
  var p = {
      mp: A.costMP,
      ap: A.costAP
    },
    m = v(["move", p, h, r, s]);
  _.confirmBoxWhenWalking ? c.open("move", p, m, {
    startHidden: !1,
    allowDoubleTap: !0
  }, n) : n(!0);
} else {
  u._resetWalkLayer();
}
if (o.length) {
  var a = o[0];
  return void (window.gui.fightManager.isFighterOnUsersTeam(a.actorId) && a.tap(e, t, this.mapRenderer.camera));
}
for (var i = this.mapScene.convertCanvasToSceneCoordinate(e, t), n = null, o = 0; o < N.length; o++) {
  var a = N[o];
  if (this._isElementClicked(a, i.x, i.y)) {
    n = a;
    break;
  }
}
if (this._isElementClicked(a, i.x, i.y)) {
  n = a;
  break;
}
if (!o(e, r, l)) {
  return c;
}
if (0 === t.length) {
  return c;
}
for (var d = 0; d < t.length; d++) {
  var u = t[d];
  if (u && n(u, e)) {
    var h = a(e, u);
    h >= 1 || (c.mp += ~~(i * (1 - h) + .5), c.ap += ~~(s * (1 - h) + .5));
  }
}
if (u && n(u, e)) {
  var h = a(e, u);
  h >= 1 || (c.mp += ~~(i * (1 - h) + .5), c.ap += ~~(s * (1 - h) + .5));
}
if (!s) {
  return a;
}
for (var r = o.getFighter(e), l = r && r.hasState(g.STATE_KABOOM), c = 0; c < s.length; c += 1) {
  var d = s[c],
    u = d.markType,
    h = d.markId,
    p = o.getFighter(d.markAuthorId),
    m = l && p && p.data.teamId === r.data.teamId,
    _ = a.indexOf(h) === -1;
  (_ && u === f.TRAP || !m && u === f.WALL) && a.push(h);
}
if (a <= 0) {
  return i;
}
for (var v = l.getIndexedVisibleActors({
    showAlsoInvisibleInMyTeam: !0
  }), y = _.getCellIdsAffectedByMarks(); m.length;) {
  for (var w, b = m.pop(), M = b.cellId, T = p.getNeighbourCells(M, !1), C = [], I = 0; I < T.length;) {
    w = T[I];
    var A = v[w];
    void 0 === w || A ? (T.splice(I, 1), A && C.push(A)) : I++;
  }
  var S = s(e, C, b.availableMp, b.availableAp, t, M),
    E = S.ap > 0 || S.mp > 0,
    N = b.availableMp - S.mp - 1,
    x = b.availableAp - S.ap,
    L = o.movementPoints - N,
    O = o.actionPoints - x,
    R = b.distance + 1,
    D = N >= 0;
  for (I = 0; I < T.length; I++) {
    if (w = T[I], h.isWalkable(w)) {
      var P = u(e.actorId, w, y, b.damagingMarks);
      g = new r(w, M, N, x, L, O, R, P);
      var B = i[w];
      if (B) {
        var k = B.update(g, D, E);
        if (!k) {
          continue;
        }
      } else {
        i[w] = new d({
          ap: x,
          mp: N
        }, {
          ap: O,
          mp: L
        }, [g], D, E);
      }
      b.distance < a && m.push(g);
    }
  }
}
for (var w, b = m.pop(), M = b.cellId, T = p.getNeighbourCells(M, !1), C = [], I = 0; I < T.length;) {
  w = T[I];
  var A = v[w];
  void 0 === w || A ? (T.splice(I, 1), A && C.push(A)) : I++;
}
for (I = 0; I < T.length; I++) {
  if (w = T[I], h.isWalkable(w)) {
    var P = u(e.actorId, w, y, b.damagingMarks);
    g = new r(w, M, N, x, L, O, R, P);
    var B = i[w];
    if (B) {
      var k = B.update(g, D, E);
      if (!k) {
        continue;
      }
    } else {
      i[w] = new d({
        ap: x,
        mp: N
      }, {
        ap: O,
        mp: L
      }, [g], D, E);
    }
    b.distance < a && m.push(g);
  }
}
if (w = T[I], h.isWalkable(w)) {
  var P = u(e.actorId, w, y, b.damagingMarks);
  g = new r(w, M, N, x, L, O, R, P);
  var B = i[w];
  if (B) {
    var k = B.update(g, D, E);
    if (!k) {
      continue;
    }
  } else {
    i[w] = new d({
      ap: x,
      mp: N
    }, {
      ap: O,
      mp: L
    }, [g], D, E);
  }
  b.distance < a && m.push(g);
}
if (B) {
  var k = B.update(g, D, E);
  if (!k) {
    continue;
  }
} else {
  i[w] = new d({
    ap: x,
    mp: N
  }, {
    ap: O,
    mp: L
  }, [g], D, E);
}
if (!k) {
  continue;
}
for (var F in i) {
  i.hasOwnProperty(F) && i[F].pathNodes.sort(c);
}
for (var n = 0; n < this.pathNodes.length; n += 1) {
  var o = l(e, this.pathNodes[n]);
  if (o === b.SAME || o === b.WORSE) {
    return !1;
  }
  if (o === b.BETTER) {
    this.pathNodes[n] = e;
    break;
  }
}
if (o === b.SAME || o === b.WORSE) {
  return !1;
}
if (o === b.BETTER) {
  this.pathNodes[n] = e;
  break;
}
for (var o = h(i), a = Object.keys(t), s = 0; s < a.length; s++) {
  for (var r = a[s], d = h(r), p = c.getLine(o.x, o.y, d.x, d.y), m = !1, f = 0, g = p.length; f < g; f++) {
    var _ = l(p[f].x, p[f].y),
      v = e[_];
    if (n[_] && f < g - 1 || 2 !== (2 & v.l)) {
      m = !0;
      break;
    }
  }
  m && (window.foreground.fightIsUserTurn ? t[r].transformState = u.outSight : t[r].transformState = u.outSightEnemyTurn);
}
for (var r = a[s], d = h(r), p = c.getLine(o.x, o.y, d.x, d.y), m = !1, f = 0, g = p.length; f < g; f++) {
  var _ = l(p[f].x, p[f].y),
    v = e[_];
  if (n[_] && f < g - 1 || 2 !== (2 & v.l)) {
    m = !0;
    break;
  }
}
if (n[_] && f < g - 1 || 2 !== (2 & v.l)) {
  m = !0;
  break;
}
if (this.mapRenderer.map && this.mapRenderer.map.cells && m && !this.actorManager.userActor.isDead) {
  this.clearUserMovementZone();
  for (var e = this.mapRenderer.map.cells, t = this.actorManager.userActor.cellId, i = a.getSpellRange(e, t, m), o = window.actorManager.getIndexedVisibleActors(), s = {}, l = {}, c = window.foreground.fightIsUserTurn ? u.outSight : u.outSightEnemyTurn, h = window.foreground.fightIsUserTurn ? u.inSight : u.inSightEnemyTurn, p = 0; p < i.length; p++) {
    var g = r.getCellIdFromMapPoint(i[p][0], i[p][1]);
    if (void 0 !== g && !s[g]) {
      if (m.needFreeCell && o[g]) {
        l[g] = i[p][2], s[g] = new d(g, i[p][2], c);
      } else {
        var _ = e[g].l || 0;
        3 === (7 & _) && (s[g] = new d(g, i[p][2], h), l[g] = i[p][2]);
      }
    }
  }
  m.castTestLos && n(e, s, t, o), f = s, this._resetSpellRangeLayer(s), this._spellEffectLayer && this._resetSpellEffectLayer(this._spellEffectLayer.cellInfos), this._walkLayer && (this._resetWalkLayer(), window.foreground.confirmBox.hide(), window.gui.damagePreview.hide());
}
for (var e = this.mapRenderer.map.cells, t = this.actorManager.userActor.cellId, i = a.getSpellRange(e, t, m), o = window.actorManager.getIndexedVisibleActors(), s = {}, l = {}, c = window.foreground.fightIsUserTurn ? u.outSight : u.outSightEnemyTurn, h = window.foreground.fightIsUserTurn ? u.inSight : u.inSightEnemyTurn, p = 0; p < i.length; p++) {
  var g = r.getCellIdFromMapPoint(i[p][0], i[p][1]);
  if (void 0 !== g && !s[g]) {
    if (m.needFreeCell && o[g]) {
      l[g] = i[p][2], s[g] = new d(g, i[p][2], c);
    } else {
      var _ = e[g].l || 0;
      3 === (7 & _) && (s[g] = new d(g, i[p][2], h), l[g] = i[p][2]);
    }
  }
}
if (void 0 !== g && !s[g]) {
  if (m.needFreeCell && o[g]) {
    l[g] = i[p][2], s[g] = new d(g, i[p][2], c);
  } else {
    var _ = e[g].l || 0;
    3 === (7 & _) && (s[g] = new d(g, i[p][2], h), l[g] = i[p][2]);
  }
}
if (m.needFreeCell && o[g]) {
  l[g] = i[p][2], s[g] = new d(g, i[p][2], c);
} else {
  var _ = e[g].l || 0;
  3 === (7 & _) && (s[g] = new d(g, i[p][2], h), l[g] = i[p][2]);
}
if (this.background.removeTargetHighlights(), t.showDamagePreview && i.cancel(), f && m) {
  if (!f.hasOwnProperty(e)) {
    return void this._resetSpellEffectLayer();
  }
  if (f[e].transformState === u.outSight || f[e].transformState === u.outSightEnemyTurn) {
    return void this._resetSpellEffectLayer();
  }
  if (this.mapRenderer.map && this.mapRenderer.map.cells) {
    for (var n = this.actorManager.userActor.cellId, o = this.mapRenderer.map.cells, s = a.getSpellEffectZone(o, n, e, m.zoneEffect), r = Object.keys(s), l = 0; l < r.length; l++) {
      n = r[l];
      var c = this.actorManager.getActorsOnCell(n);
      if (c.length > 0) {
        var d = c[0],
          h = d.getTeamId();
        0 === h ? this.background.addTargetHighLights(n, d._x, d._y, u.redTeamStart, u.redTeamEnd, !window.foreground.fightIsUserTurn) : this.background.addTargetHighLights(n, d._x, d._y, u.blueTeamStart, u.blueTeamEnd, !window.foreground.fightIsUserTurn);
      }
    }
    t.showDamagePreview && i.preview(m.spellId, e), this._resetSpellEffectLayer(s);
  }
}
if (!f.hasOwnProperty(e)) {
  return void this._resetSpellEffectLayer();
}
if (f[e].transformState === u.outSight || f[e].transformState === u.outSightEnemyTurn) {
  return void this._resetSpellEffectLayer();
}
if (this.mapRenderer.map && this.mapRenderer.map.cells) {
  for (var n = this.actorManager.userActor.cellId, o = this.mapRenderer.map.cells, s = a.getSpellEffectZone(o, n, e, m.zoneEffect), r = Object.keys(s), l = 0; l < r.length; l++) {
    n = r[l];
    var c = this.actorManager.getActorsOnCell(n);
    if (c.length > 0) {
      var d = c[0],
        h = d.getTeamId();
      0 === h ? this.background.addTargetHighLights(n, d._x, d._y, u.redTeamStart, u.redTeamEnd, !window.foreground.fightIsUserTurn) : this.background.addTargetHighLights(n, d._x, d._y, u.blueTeamStart, u.blueTeamEnd, !window.foreground.fightIsUserTurn);
    }
  }
  t.showDamagePreview && i.preview(m.spellId, e), this._resetSpellEffectLayer(s);
}
for (var n = this.actorManager.userActor.cellId, o = this.mapRenderer.map.cells, s = a.getSpellEffectZone(o, n, e, m.zoneEffect), r = Object.keys(s), l = 0; l < r.length; l++) {
  n = r[l];
  var c = this.actorManager.getActorsOnCell(n);
  if (c.length > 0) {
    var d = c[0],
      h = d.getTeamId();
    0 === h ? this.background.addTargetHighLights(n, d._x, d._y, u.redTeamStart, u.redTeamEnd, !window.foreground.fightIsUserTurn) : this.background.addTargetHighLights(n, d._x, d._y, u.blueTeamStart, u.blueTeamEnd, !window.foreground.fightIsUserTurn);
  }
}
if (c.length > 0) {
  var d = c[0],
    h = d.getTeamId();
  0 === h ? this.background.addTargetHighLights(n, d._x, d._y, u.redTeamStart, u.redTeamEnd, !window.foreground.fightIsUserTurn) : this.background.addTargetHighLights(n, d._x, d._y, u.blueTeamStart, u.blueTeamEnd, !window.foreground.fightIsUserTurn);
}
if (null === r) {
  return window.foreground.deselectSpell(), void o.shortcutBar.deselectCurrentSlot();
}
if (f && m) {
  if (null === e) {
    return window.foreground.deselectSpell(), void window.gui.shortcutBar.deselectCurrentSlot();
  }
  window.gui.emit("checkServerLag", "fightAction", "start"), window.gui.fightManager.castSpell(m.spellId, e, window.gui.playerData.characters.controlledCharacterId), this.clearSpellDisplay(), m = null, window.gui.shortcutBar.deselectCurrentSlot(), window.gui.damagePreview.confirm();
}
if (null === e) {
  return window.foreground.deselectSpell(), void window.gui.shortcutBar.deselectCurrentSlot();
}
if (f && m) {
  if (null === e) {
    return n.deselectSpell(), void t.shortcutBar.deselectCurrentSlot();
  }
  var o = s(["spell", m.spellId, e, e]),
    a = this;
  n.confirmBox.open("spell", m, o, {
    startHidden: !n.fightIsUserTurn
  }, function (n) {
    return n ? (t.emit("checkServerLag", "fightAction", "start"), t.fightManager.castSpell(m.spellId, e, t.playerData.characters.controlledCharacterId), m = null, a.clearSpellDisplay(), t.shortcutBar.deselectCurrentSlot(), void i.confirm()) : (a.clearSpellDisplay(), void t.shortcutBar.deselectCurrentSlot());
  }, function () {
    a.isOutsight(e) ? i.cancel() : i.preview(m.spellId, e, {
      hasConfirmBox: !0
    });
  });
}
if (null === e) {
  return n.deselectSpell(), void t.shortcutBar.deselectCurrentSlot();
}
for (var t = {}, i = 0, n = 0; n < e.positionsForChallengers.length; n++) {
  var o = e.positionsForChallengers[n];
  t[o] = new d(o, i, u.fullRed);
}
for (var a = 0; a < e.positionsForDefenders.length; a++) {
  o = e.positionsForDefenders[a], t[o] = new d(o, i, u.fullBlue);
}
if (Math.abs(r.x - l.x) === Math.abs(r.y - l.y)) {
  d = Math.abs(r.x - l.x), c.x = l.x > r.x ? 1 : -1, c.y = l.y > r.y ? 1 : -1;
  for (var u = 0; u < d; u++) {
    s.push({
      x: Math.floor(r.x + c.x),
      y: Math.floor(r.y + c.y)
    }), r.x += c.x, r.y += c.y;
  }
} else {
  var h = a,
    p = o;
  Math.abs(r.x - l.x) > Math.abs(r.y - l.y) && (h = o, p = a), d = Math.abs(r[h] - l[h]), c[h] = l[h] >= r[h] ? 1 : -1, c[p] = l[p] > r[p] ? Math.abs(r[p] - l[p]) / d : -Math.abs(r[p] - l[p]) / d;
  for (var m = 0; m < d; m++) {
    var f = [],
      g = Math.round(1e4 * r[p] + 5e3 * c[p]) / 1e4,
      _ = Math.round(1e4 * r[p] + 15e3 * c[p]) / 1e4;
    Math.floor(g) === Math.floor(_) ? (f = [Math.floor(r[p] + c[p])], g === f[0] && _ < f[0] && (f = [Math.ceil(r[p] + c[p])]), _ === f[0] && g < f[0] && (f = [Math.ceil(r[p] + c[p])])) : Math.ceil(g) === Math.ceil(_) ? (f = [Math.ceil(r[p] + c[p])], g === f[0] && _ < f[0] && (f = [Math.floor(r[p] + c[p])]), _ === f[0] && g < f[0] && (f = [Math.floor(r[p] + c[p])])) : f = [Math.floor(g), Math.floor(_)];
    for (var v in f) {
      h === o ? s.push({
        x: Math.floor(r.x + c.x),
        y: f[v]
      }) : s.push({
        x: f[v],
        y: Math.floor(r.y + c.y)
      });
    }
    r.x += c.x, r.y += c.y;
  }
}
for (var u = 0; u < d; u++) {
  s.push({
    x: Math.floor(r.x + c.x),
    y: Math.floor(r.y + c.y)
  }), r.x += c.x, r.y += c.y;
}
for (var m = 0; m < d; m++) {
  var f = [],
    g = Math.round(1e4 * r[p] + 5e3 * c[p]) / 1e4,
    _ = Math.round(1e4 * r[p] + 15e3 * c[p]) / 1e4;
  Math.floor(g) === Math.floor(_) ? (f = [Math.floor(r[p] + c[p])], g === f[0] && _ < f[0] && (f = [Math.ceil(r[p] + c[p])]), _ === f[0] && g < f[0] && (f = [Math.ceil(r[p] + c[p])])) : Math.ceil(g) === Math.ceil(_) ? (f = [Math.ceil(r[p] + c[p])], g === f[0] && _ < f[0] && (f = [Math.floor(r[p] + c[p])]), _ === f[0] && g < f[0] && (f = [Math.floor(r[p] + c[p])])) : f = [Math.floor(g), Math.floor(_)];
  for (var v in f) {
    h === o ? s.push({
      x: Math.floor(r.x + c.x),
      y: f[v]
    }) : s.push({
      x: f[v],
      y: Math.floor(r.y + c.y)
    });
  }
  r.x += c.x, r.y += c.y;
}
for (var v in f) {
  h === o ? s.push({
    x: Math.floor(r.x + c.x),
    y: f[v]
  }) : s.push({
    x: f[v],
    y: Math.floor(r.y + c.y)
  });
}
for (var e in this.teams) {
  var t = this.teams[e];
  window.actorManager.removeActor(t.contextualId);
  for (var i in t.icons) {
    t.icons[i].remove();
  }
}
for (var i in t.icons) {
  t.icons[i].remove();
}
if (!t) {
  return console.error(new Error("No team with id " + e + " in fight " + this.id));
}
for (var o in t.icons) {
  t.icons[o].isDisplayed && i++, n = Math.max(t.icons[o].w, n);
}
for (o in t.icons) {
  t.icons[o].isDisplayed && (t.icons[o].x = l + c * (n + a) - t.icons[o].w / 2, t.icons[o].y = s.y - 2.1 * r.CELL_HEIGHT, c++);
}
if (!n) {
  return console.error(new Error("No team with id " + e + " in fight " + this.id));
}
if (void 0 === n.options[t]) {
  return n.options[t] = i, void this._createIcon(e, t, "ui/spectator/fightOption" + t + ".png");
}
if (n.options[t] = i, n.icons[t]) {
  var o = i ? "show" : "hide";
  n.icons[t][o](), this._updateIconsPosition(e);
}
for (var t = this.actorManager, i = e.fightId, s = e.fightTeams, r = e.fightTeamsPositions, l = e.fightTeamsOptions, c = new o(i), d = 0; d < s.length; d++) {
  var u = s[d],
    h = a(e, u);
  u.fightId = i, u.look = {
    bonesId: h,
    scales: [100],
    skins: [],
    indexedColors: []
  }, u.disposition = {
    cellId: r[d],
    direction: 0
  }, u.contextualId = n(i, u.teamId), t.addEmptyActor(u), c.addTeam(u.teamId, r[d]), t.setActorLook(u.contextualId, u.look, {}, null);
  for (var p in l[d]) {
    void 0 !== f[p] && l[d][p] && c.setFightOption(u.teamId, f[p], !0);
  }
}
for (var p in l[d]) {
  void 0 !== f[p] && l[d][p] && c.setFightOption(u.teamId, f[p], !0);
}
for (var t = 0; t < e.length; t++) {
  this.showChallenge(e[t]);
}
for (var e in _) {
  _[e].remove();
}
if (!m.isFightMode) {
  var t = e.fightId,
    i = e.team;
  i.fightId = t;
  var o = i.teamId,
    a = n(t, o),
    s = this.actorManager.getActor(a);
  return s ? void s.updateData(i) : console.warn("No fight id " + a);
}
if (!this.actorManager.isCreatureModeOn && t) {
  if (0 === e.emoteId) {
    return void t.staticAnim();
  }
  var i = e._emote;
  if (i) {
    var n = i.defaultAnim;
    if (n = n.substring(0, 1).toUpperCase() + n.substring(1) + "_0", !i.eight_directions) {
      var o = 2 * ~~(t.direction / 2) + 1;
      o !== t.direction && t.setDisposition(null, o);
    }
    return n;
  }
}
if (0 === e.emoteId) {
  return void t.staticAnim();
}
if (i) {
  var n = i.defaultAnim;
  if (n = n.substring(0, 1).toUpperCase() + n.substring(1) + "_0", !i.eight_directions) {
    var o = 2 * ~~(t.direction / 2) + 1;
    o !== t.direction && t.setDisposition(null, o);
  }
  return n;
}
if (n = n.substring(0, 1).toUpperCase() + n.substring(1) + "_0", !i.eight_directions) {
  var o = 2 * ~~(t.direction / 2) + 1;
  o !== t.direction && t.setDisposition(null, o);
}
if (!a) {
  return i();
}
if (s) {
  if (s.aura) {
    return i();
  }
  this.playEmote({
    actorId: a.actorId,
    emoteId: o,
    _emote: s
  }, i);
} else {
  m.getDataMap("Emoticons", [o], function (a, s) {
    return a ? i(a) : s[o] ? (_[o] = s[o], n.playEmoteFromOption(e, t, i)) : i();
  });
}
if (s.aura) {
  return i();
}
if (t) {
  var i,
    n = t.look;
  if (n && n.skins && n.skins[0]) {
    var o = n.skins[0];
    i = (1 & o).toString();
  } else {
    i = Math.random() < .5 ? "0" : "1";
  }
  var a;
  if (n && 1 === n.bonesId) {
    a = "AnimEmoteInterface_" + i;
  } else if (t.isRiding) {
    var s = l.getLookOfRider(n);
    s && 2 === s.bonesId && (a = "AnimLevelUpRiding");
  }
  a && t.loadAndPlayAnimation({
    base: a,
    direction: 1
  }, {
    loop: !1
  }), c("LEVEL_UP");
  var r = t.x,
    p = t.y,
    m = "LEVEL UP",
    _ = this.bitmapFonts.characters,
    v = new h({
      x: r,
      y: p,
      scene: this.mapScene,
      text: m,
      fallbackText: m,
      layer: d.MAP_LAYER_POINT_LABELS,
      bitmapFont: _,
      color: [.3, .5, -.1, 0]
    });
  v.scaleX = .7, v.scaleY = .7, new f(v, ["y", "alpha"]).from({
    y: p,
    alpha: 0
  }).to({
    y: p,
    alpha: 0
  }, 9).to({
    y: p - 40,
    alpha: 1
  }, 8, g.backOut, 2).to({
    y: p - 40,
    alpha: 1
  }, 16).to({
    y: p - 90,
    alpha: 0
  }, 12, g.backIn, 2).onFinish(function () {
    v.remove();
  }).start();
  var y = new u(t.position, r, p);
  y.red = 1, y.green = 1, y.blue = .9, new f(y, ["scaleX", "scaleY", "alpha"]).from({
    scaleX: .3,
    scaleY: .3,
    alpha: 0
  }).to({
    scaleX: 1,
    scaleY: 1,
    alpha: 1.7
  }, 7, g.polyOut, 4).to({
    scaleX: .3,
    scaleY: 1,
    alpha: 1.7
  }, 20, g.polyOut, 2).to({
    scaleX: .3,
    scaleY: 1,
    alpha: 0
  }, 7, g.polyOut, 2).onFinish(function () {
    y.remove();
  }).start();
}
if (n && n.skins && n.skins[0]) {
  var o = n.skins[0];
  i = (1 & o).toString();
} else {
  i = Math.random() < .5 ? "0" : "1";
}
if (n && 1 === n.bonesId) {
  a = "AnimEmoteInterface_" + i;
} else if (t.isRiding) {
  var s = l.getLookOfRider(n);
  s && 2 === s.bonesId && (a = "AnimLevelUpRiding");
}
if (t.isRiding) {
  var s = l.getLookOfRider(n);
  s && 2 === s.bonesId && (a = "AnimLevelUpRiding");
}
for (var t = {}, i = 0; i < e.length; i++) {
  t[e[i]] = !0;
}
for (n = 0; n < o; n++) {
  u += "┌───┐   ";
}
for (s = 0; s < a; s++) {
  for (u += "\n", u += p ? "│" : "├", n = 0; n < o; n++) {
    r = s * o + n, l = r < 100 ? " " : "", l += r, l += r < 10 ? " " : "", u += p ? "%c" + l + "%c├───┤" : "───┤%c" + l + "%c├", t[r] ? h.push("background-color: #FF0") : c && 2 !== (2 & c.cells[r].l) ? h.push("background-color: #00F") : c && 0 === (1 & c.cells[r].l) ? h.push("background-color: #113; color: #779") : d.cellId === r ? h.push("background-color: #CD8; color: #072") : this.actorManager.getActorsOnCell(r).length > 0 ? h.push("background-color: #F88") : h.push("background-color: #FFF"), h.push("background-color: #FFF, color: #000");
  }
  p = !p;
}
for (u += "\n", u += p ? "│" : "├", n = 0; n < o; n++) {
  r = s * o + n, l = r < 100 ? " " : "", l += r, l += r < 10 ? " " : "", u += p ? "%c" + l + "%c├───┤" : "───┤%c" + l + "%c├", t[r] ? h.push("background-color: #FF0") : c && 2 !== (2 & c.cells[r].l) ? h.push("background-color: #00F") : c && 0 === (1 & c.cells[r].l) ? h.push("background-color: #113; color: #779") : d.cellId === r ? h.push("background-color: #CD8; color: #072") : this.actorManager.getActorsOnCell(r).length > 0 ? h.push("background-color: #F88") : h.push("background-color: #FFF"), h.push("background-color: #FFF, color: #000");
}
for (u += "\n ", n = 0; n < o; n++) {
  u += "   └───┘";
}
for (var n in e) {
  e.hasOwnProperty(n) && (i[n] = e[n]);
}
for (var o in t) {
  if (t.hasOwnProperty(o)) {
    i[o] || (i[o] = []);
    for (var a = t[o], s = 0; s < a.length; s += 1) {
      i[o].push(a[s]);
    }
  }
}
if (t.hasOwnProperty(o)) {
  i[o] || (i[o] = []);
  for (var a = t[o], s = 0; s < a.length; s += 1) {
    i[o].push(a[s]);
  }
}
for (var a = t[o], s = 0; s < a.length; s += 1) {
  i[o].push(a[s]);
}
for (var r in e.graphicsPositions) {
  e.graphicsPositions.hasOwnProperty(r) && (s[r] = e.graphicsPositions[r]);
}
for (var l in t.graphicsPositions) {
  if (t.graphicsPositions.hasOwnProperty(l)) {
    if (s[l]) {
      continue;
    }
    var c = t.graphicsPositions[l];
    c.sx += i, s[l] = c;
  }
}
if (t.graphicsPositions.hasOwnProperty(l)) {
  if (s[l]) {
    continue;
  }
  var c = t.graphicsPositions[l];
  c.sx += i, s[l] = c;
}
if (s[l]) {
  continue;
}
if (e) {
  var o;
  switch (t) {
    case "top":
      o = 6;
      break;
    case "bottom":
      o = 2;
      break;
    case "left":
      o = 4;
      break;
    case "right":
      o = 0;
      break;
    default:
      o = 0;
  }
  var a = s.ANGLE_PER_DIRECTION[o];
  i && (a += Math.PI);
  var r = Math.cos(a) * b,
    l = Math.sin(a) * b;
  e.walkToSceneCoordinate(e.x + r, e.y + l, o, M, n);
} else if (console.error(new Error("makeActorWalkInDirection: actor is " + e)), n) {
  return n();
}
if (console.error(new Error("makeActorWalkInDirection: actor is " + e)), n) {
  return n();
}
if (n.startTextureRendering(o, 0, t, 0, i, !1), "black" === e) {
  this.mapScene.clear(0, 0, 0, 1);
} else {
  var a = t / this.mapScene.w;
  n.save(), n.scale(a, a), this.mapScene.render(), n.restore();
}
if (h) {
  n = m ? 1 : f ? 7 : 0;
} else if (p) {
  n = m ? 3 : f ? 5 : 4;
} else if (m) {
  n = 2;
} else {
  if (!f) {
    return;
  }
  n = 6;
}
if (p) {
  n = m ? 3 : f ? 5 : 4;
} else if (m) {
  n = 2;
} else {
  if (!f) {
    return;
  }
  n = 6;
}
if (m) {
  n = 2;
} else {
  if (!f) {
    return;
  }
  n = 6;
}
if (!f) {
  return;
}
if (null !== e) {
  this._mapLoadingMessage = null, this._waitingForMessage = !1, this.emit("mapChange", e), this.actorManager.userActor.staticAnim(), this.actorManager.pause();
  var t = e.mapId,
    i = e.obstacleMapId;
  if (t !== C) {
    this.releaseMap(C), C = t, this._isMapLoading = !0;
    var n = this,
      r = s.MAP_PATH + i + ".json",
      l = s.MAP_PATH + t + ".json",
      u = null,
      h = null;
    c.series([function (e) {
      return i ? void d.loadJson(r, function (t) {
        return u = t, e();
      }) : e();
    }, function (e) {
      d.loadJson(l, function (t) {
        return h = t, u && (h.obstacleMapId = i, h.cells = u.cells, h.midgroundLayer = o(h.midgroundLayer, u.midgroundLayer), h.atlasLayout = a(h.atlasLayout, u.atlasLayout)), e();
      });
    }], function (t) {
      return t ? window.dofus.disconnect("LOADING_MAP_ERROR " + t) : h === s.EMPTY_JSON ? window.dofus.disconnect("ASSET_MISSING") : void (h.id === C && (null === T ? (T = {
        msg: e,
        mapData: h
      }, n._loadMapAssets()) : T = {
        msg: e,
        mapData: h
      }));
    });
  }
}
if (t !== C) {
  this.releaseMap(C), C = t, this._isMapLoading = !0;
  var n = this,
    r = s.MAP_PATH + i + ".json",
    l = s.MAP_PATH + t + ".json",
    u = null,
    h = null;
  c.series([function (e) {
    return i ? void d.loadJson(r, function (t) {
      return u = t, e();
    }) : e();
  }, function (e) {
    d.loadJson(l, function (t) {
      return h = t, u && (h.obstacleMapId = i, h.cells = u.cells, h.midgroundLayer = o(h.midgroundLayer, u.midgroundLayer), h.atlasLayout = a(h.atlasLayout, u.atlasLayout)), e();
    });
  }], function (t) {
    return t ? window.dofus.disconnect("LOADING_MAP_ERROR " + t) : h === s.EMPTY_JSON ? window.dofus.disconnect("ASSET_MISSING") : void (h.id === C && (null === T ? (T = {
      msg: e,
      mapData: h
    }, n._loadMapAssets()) : T = {
      msg: e,
      mapData: h
    }));
  });
}