if ("object" == typeof _ && _.system && _.system.memory && a.isPhoneGap) {
  _.system.memory.getInfo(function (e) {
    a.capacity = e.capacity;
    n(o);
  });
} else {
  n(o);
}
if (e instanceof a) {
  e.forEach(function (e, t) {
    this.append(t, e);
  }, this);
} else {
  if (Array.isArray(e)) {
    e.forEach(function (e) {
      this.append(e[0], e[1]);
    }, this);
  } else {
    e && Object.getOwnPropertyNames(e).forEach(function (t) {
      this.append(t, e[t]);
    }, this);
  }
}
if (e) {
  if ("string" == typeof e) {
    this._bodyText = e;
  } else {
    if (y.blob && Blob.prototype.isPrototypeOf(e)) {
      this._bodyBlob = e;
    } else {
      if (y.formData && FormData.prototype.isPrototypeOf(e)) {
        this._bodyFormData = e;
      } else {
        if (y.searchParams && URLSearchParams.prototype.isPrototypeOf(e)) {
          this._bodyText = e.toString();
        } else {
          if (y.arrayBuffer && y.blob && t(e)) {
            this._bodyArrayBuffer = u(e.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else {
            if (y.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(e) || b(e))) {
              this._bodyArrayBuffer = u(e);
            } else {
              this._bodyText = e = Object.prototype.toString.call(e);
            }
          }
        }
      }
    }
  }
} else {
  this._bodyText = "";
}
if ("include" === s.credentials) {
  r.withCredentials = !0;
} else {
  "omit" === s.credentials && (r.withCredentials = !1);
}
if (e) {
  e(String.prototype, "codePointAt", {
    value: t,
    configurable: !0,
    writable: !0
  });
} else {
  String.prototype.codePointAt = t;
}
if (d <= 65535) {
  s.push(d);
} else {
  d -= 65536, n = (d >> 10) + 55296, o = d % 1024 + 56320, s.push(n, o);
}
if (e) {
  e(String, "fromCodePoint", {
    value: n,
    configurable: !0,
    writable: !0
  });
} else {
  String.fromCodePoint = n;
}
if (typeof t !== d) {
  typeof e !== d && e.exports && (t = e.exports = x), t.UAParser = x;
} else {
  n = function () {
    return x;
  }.call(t, i, t, e), !(n !== a && (e.exports = n));
}
if (i[4]) {
  this.prerelease = i[4].split(".").map(function (e) {
    if (/^[0-9]+$/.test(e)) {
      var t = +e;
      if (t >= 0 && t < Z) return t;
    }
    return e;
  });
} else {
  this.prerelease = [];
}
if (o(e.semver, h.semver, n)) {
  h = e;
} else {
  r(e.semver, p.semver, n) && (p = e);
}
if (i[2]) {
  this.semver = new s(i[2], this.loose);
} else {
  this.semver = Ye;
}
if (A[e]) {
  A[e].push(o);
} else {
  A[e] = [o], E < M ? c(e) : S.push(e);
}
if (N < C) {
  N += 1, e(t, i, o, a);
} else {
  x(function () {
    m(e, t, i, o, a);
  }, 0);
}
if (n) {
  window.setTimeout(a, n);
} else {
  a();
}
if (void 0 !== p && null !== p) {
  r += p;
} else {
  l && (!a || a && !a.isPreview) && i("arg " + h.toString() + " is null/undefined", e, t, n, o);
}
if (f) {
  r += e.substring(c + 3, m);
} else {
  l = !1;
}
if (s(n) && "function" == typeof n.then) {
  n.then(function (e) {
    d(i, null, e);
  }, function (e) {
    d(i, e.message ? e : new Error(e));
  });
} else {
  i(null, n);
}
if (e) {
  i(e);
} else {
  ++a !== s && t !== Rt || i(null);
}
if (t) {
  d._tasks.unshift(a);
} else {
  d._tasks.push(a);
}
if (0 === a) {
  r.shift();
} else {
  a > 0 && r.splice(a, 1);
}
if ("function" == typeof n) {
  t.pop();
} else {
  n = b;
}
if (n) {
  a(n);
} else {
  if (e(o) && !s) {
    r = !0, s = t(!0, i), a(null, Rt);
  } else {
    a();
  }
}
if (e) {
  a(e);
} else {
  a(null, r ? s : t(!1));
}
if (n) {
  pt(function () {
    i.apply(null, e);
  });
} else {
  i.apply(null, e);
}
if (i) {
  n(i);
} else {
  a && o.push({
    index: t,
    value: e
  }), n();
}
if (e) {
  n(e);
} else {
  n(null, ee(o.sort(function (e, t) {
    return e.index - t.index;
  }), De("value")));
}
if (ze(i, r)) {
  pt(function () {
    s.apply(null, i[r]);
  });
} else {
  if (ze(n, r)) {
    n[r].push(s);
  } else {
    n[r] = [s], o.apply(null, e.concat(function () {
      var e = a(arguments);
      i[r] = e;
      var t = n[r];
      delete n[r];
      for (var o = 0, s = t.length; o < s; o++) t[o].apply(null, e);
    }));
  }
}
if (e && c++ < r.times && ("function" != typeof r.errorFilter || r.errorFilter(e))) {
  setTimeout(o, r.intervalFunc(c));
} else {
  i.apply(null, arguments);
}
if (t.length > 1) {
  o(m, n);
} else {
  o(n);
}
if (e.next) {
  e.next.prev = t;
} else {
  this.tail = t;
}
if (e.prev) {
  e.prev.next = t;
} else {
  this.head = t;
}
if (this.head) {
  this.insertBefore(this.head, e);
} else {
  ge(this, e);
}
if (this.tail) {
  this.insertAfter(this.tail, e);
} else {
  ge(this, e);
}
if (o.call(i, s)) {
  i[s].push(r);
} else {
  i[s] = [r];
}
if (o) {
  i._tasks.insertBefore(o, r);
} else {
  i._tasks.push(r);
}
if (e) {
  Je(e, o, n);
} else {
  Je(o, n);
}
if (this._type === s.TIMEOUT) {
  this._timeout = window.setTimeout(n(this), t);
} else {
  this._type === s.INTERVAL && (this._timeout = window.setTimeout(a(this), t));
}
if (navigator.notification) {
  navigator.notification.alert(t, d, "Dofus Touch", "Reload");
} else {
  window.alert(t), d();
}
if (i) {
  this.disconnect("LOGIN_ERROR"), W = B, t.emit("loginEnd", i);
} else {
  W = F, t.emit("loginEnd");
}
if (e) {
  this.disconnect("GAME_HANDSHAKE_ERROR"), W = B, t.emit("accessGameEnd", e);
} else {
  W = z, t.emit("accessGameEnd");
}
if ("function" == typeof w[e]) {
  w["_" + e] = w[e];
} else {
  "object" == typeof w[e] && (w["_" + e] = Function.prototype.bind.call(w[e], w));
}
if ("string" == typeof s) {
  i[a] = s;
} else {
  i[a] = n(e[a], o);
}
if (n < 0) {
  n = 0;
} else {
  n + l > r.windowFullScreenWidth && (n = r.windowFullScreenWidth - l);
}
if (o < 0) {
  o = 0;
} else {
  o + c > r.windowFullScreenHeight && (o = r.windowFullScreenHeight - c);
}
if (t) {
  n.emit("positioned");
} else {
  n.emit("repositioned");
}
if (i.openState) {
  if (i === b) {
    this.close(e);
  } else {
    v.focusWindow(e);
  }
} else {
  this.open(e, t);
}
if (t.leftOf) {
  a = u - c, a < 0 && (a = 0, h = Math.min(c, r.screenWidth - d));
} else {
  t.rightOf && (a = u + d, a + c > r.screenWidth && (a = r.screenWidth - c, h = Math.max(0, a - d)));
}
if ("narrow" === e) {
  i = m.screenWidth, n = s.CHAT_BTN_MIN_WIDTH, m.mainControlBarSize = 132, o = s.PING_EMOTE_BTN_NARROW_MIN_WIDTH;
} else {
  i = m.screenHeight, n = s.CHAT_BTN_MIN_HEIGHT, m.mainControlBarSize = 72, o = s.PING_EMOTE_BTN_WIDE_MIN_HEIGHT;
}
if ("narrow" === e) {
  m.posChatBtn = a, a += n, m.pingEmoteBtnSize = o, m.posPingEmoteBtn = a, a += o;
} else {
  m.pingEmoteBtnSize = o, o = 0;
}
if (s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
  s = s.substr(1, s.length - 2), s = e.stylize(s, "name");
} else {
  s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = e.stylize(s, "string");
}
if (n.traceDeprecation) {
  console.trace(o);
} else {
  console.error(o);
}
if ("function" == typeof Object.create) {
  e.exports = function (e, t) {
    e.super_ = t;
    e.prototype = Object.create(t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    });
  };
} else {
  e.exports = function (e, t) {
    e.super_ = t;
    var i = function () {};
    i.prototype = t.prototype;
    e.prototype = new i();
    e.prototype.constructor = e;
  };
}
if (1 === i.length) {
  i.length = 0, delete this._events[e];
} else {
  i.splice(o, 1);
}
if (A) {
  u(A);
} else {
  e.emit("longtap", w) && r();
}
if (!A && C && T >= o - C) {
  e.emit("doubletap", n);
} else {
  e.emit("tap", n) && r();
}
if (this.isConnected) {
  this.emit("inactive", !1);
} else {
  this._pingServer();
}
if (o.left > s.width) {
  r = o.left - s.width;
} else {
  a.screenWidth - o.right > s.width && (r = o.left + o.width);
}
if (l < c) {
  l = c;
} else {
  l + e > a.screenWidth - c && (l = a.screenWidth - c - e);
}
if (s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
  s = s.substr(1, s.length - 2), s = e.stylize(s, "name");
} else {
  s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = e.stylize(s, "string");
}
if (n.traceDeprecation) {
  console.trace(o);
} else {
  console.error(o);
}
if ("function" == typeof Object.create) {
  e.exports = function (e, t) {
    e.super_ = t;
    e.prototype = Object.create(t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    });
  };
} else {
  e.exports = function (e, t) {
    e.super_ = t;
    var i = function () {};
    i.prototype = t.prototype;
    e.prototype = new i();
    e.prototype.constructor = e;
  };
}
if (1 === i.length) {
  i.length = 0, delete this._events[e];
} else {
  i.splice(o, 1);
}
if (this.openState) {
  this.setStyles({
    width: n[0] + "px",
    height: n[1] + "px",
    overflow: null
  }), m.forceReflow(this), this.addClassNames("transition"), _.tween(this, {
    width: l + "px",
    height: c + "px",
    webkitTransform: f
  }, {
    time: 150,
    easing: "ease-out"
  }, o);
} else {
  this.openState = !0, this.setStyles({
    width: l + "px",
    height: c + "px",
    overflow: null,
    webkitTransform: f,
    opacity: 1
  }), b("ROLLOVER");
}
if (i.openOnTap) {
  e.on("tap", o);
} else {
  i.longTapExplanation && e.on("tap", a);
}
if ("string" == typeof e) {
  i = i || l(e.length), e = c.createChild("div", {
    text: e
  });
} else {
  i = i || E;
}
if (window.wizAssets) {
  T.settings.getFileUri = function (e, t, i) {
    return n("audio/" + t + ".mp3") ? i("FROM_MISSING_AUDIO_LIST") : void C.push(function (n) {
      c.downloadFile(e + t + ".mp3", "audio/" + t + ".mp3", function (e) {
        return n(), i(null, e);
      }, function (e) {
        return n(), i(e);
      });
    });
  };
} else {
  T.settings.getFileUri = function (e, t) {
    return n("audio/" + t + ".mp3") ? "FROM_MISSING_AUDIO_LIST" : e + t + ".mp3";
  };
}
if (void 0 !== e && null !== e) {
  this.volume = e;
} else {
  e = this.volume;
}
if (u) {
  this.nextLoop && this.nextLoop.cancelOnLoadCallbacks(), this.nextLoop = c.createSound(e, this.id), this.nextLoop.load(function (e) {
    return e ? (m.nextLoop.unload(), void (m.nextLoop = null)) : (s(m.loopSound), void l());
  });
} else {
  this.nextLoop = c.createSound(e, this.id), s(this.loopSound, l);
}
if (I) {
  C.push(i);
} else {
  t.emit("messageSequence", i);
}
if (s[0].length === a || "#guest" === o.join(n)) {
  this._nickname = o.join(n), this._token = s[0];
} else {
  this._logger.error(new Error("Wrong format on the nickname:" + this._rawNickname));
}
if (t.isRiding && l && l.model) {
  e.ride_id = l.model;
} else {
  e.ride_id = void 0;
}
if (t) {
  n = a - m - t;
} else {
  t = a - m - n;
}
if (i) {
  o = l - g - i;
} else {
  i = l - g - o;
}
if (e) {
  a.push(e);
} else {
  u = t;
}
if (t) {
  a.push(t);
} else {
  h = i;
}
if (Array.isArray(e)) {
  i.ids = e;
} else {
  i.id = e;
}
if (c) {
  s[l] = c;
} else {
  n[l] = g.newDummyRecord(f.getKey(e), l);
}
if (e.target.result) {
  o[t] = e.target.result;
} else {
  r.push(t);
}
if (n.rows.length > 1) {
  r.__prefetchedData = n.rows, r.__prefetchedIndex = 0, e.DEBUG && console.log("Preloaded " + r.__prefetchedData.length + " records for cursor"), r.__decode(n.rows.item(0), o);
} else {
  if (1 === n.rows.length) {
    r.__decode(n.rows.item(0), o);
  } else {
    e.DEBUG && console.log("Reached end of cursors"), o(t, t);
  }
}
if (1 === i.rowsAffected) {
  s(t);
} else {
  r("No rows with key found" + t);
}
if (1 === n.rowsAffected) {
  i.__offset--, a(t);
} else {
  s("No rows with key found" + o);
}
if (n.__storeProps) {
  idbModules.DEBUG && console.log("Store properties - cached", n.__storeProps), t(n.__storeProps);
} else {
  e.executeSql("SELECT * FROM __sys__ where name = ?", [n.name], function (e, i) {
    if (1 !== i.rows.length) {
      t();
    } else {
      n.__storeProps = {
        name: i.rows.item(0).name,
        indexList: i.rows.item(0).indexList,
        autoInc: i.rows.item(0).autoInc,
        keyPath: i.rows.item(0).keyPath
      }, idbModules.DEBUG && console.log("Store properties", n.__storeProps), t(n.__storeProps);
    }
  }, function () {
    t();
  });
}
if (void 0 === primaryKey) {
  if ("true" === props.autoInc) {
    getNextAutoIncKey();
  } else {
    idbModules.util.throwDOMException(0, "Data Error - Could not eval key from keyPath");
  }
} else {
  callback(primaryKey);
}
if (o > s) {
  i.transaction(function (t) {
    t.executeSql("UPDATE dbVersions set version = ? where name = ?", [o, n], function () {
      var t = e.Event("upgradeneeded");
      t.oldVersion = s;
      t.newVersion = o;
      r.transaction = r.result.__versionTransaction = new e.IDBTransaction([], 2, r.source);
      e.util.callback("onupgradeneeded", r, t, function () {
        var t = e.Event("success");
        e.util.callback("onsuccess", r, t);
      });
    }, a);
  }, a);
} else {
  e.util.callback("onsuccess", r, d);
}
if (0 === t.rows.length) {
  e.executeSql("INSERT INTO dbVersions VALUES (?,?)", [n, o || 1], function () {
    s(0);
  }, a);
} else {
  s(t.rows.item(0).version);
}
if (i >= n.length) {
  t.executeSql("DROP TABLE __sys__", [], function () {
    a();
  }, o);
} else {
  t.executeSql("DROP TABLE " + e.util.quote(n.item(i).name), [], function () {
    s(i + 1);
  }, function () {
    s(i + 1);
  });
}
if (f >= 0) {
  d = m.substr(0, f), u = m.substr(f + 1);
} else {
  d = m, u = "";
}
if (i(a, h)) {
  if (Array.isArray(a[h])) {
    a[h].push(p);
  } else {
    a[h] = [a[h], p];
  }
} else {
  a[h] = p;
}
if (e === b.error) {
  g[e](new Error(t));
} else {
  g[e](t);
}
if (this.host) {
  o = e + this.host;
} else {
  this.hostname && (o = e + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (o += ":" + this.port));
}
if ("object" == typeof e && e.exports) {
  e.exports = r(i(153));
} else {
  o = [i(153)], n = r, a = "function" == typeof n ? n.apply(t, o) : n, !(void 0 !== a && (e.exports = a));
}
if (i && i[0]) {
  i = i[0].match(/[A-Z]/g), i = i ? i.join("") : void 0;
} else {
  i = t.match(/[A-Z]{3,5}/g), i = i ? i[0] : void 0;
}
if (null != fa[e] && null != fa[e].parentLocale) {
  fa[e].set(S(fa[e]._config, t));
} else {
  n = nt(e), null != n && (o = n._config), t = S(o, t), null == n && (t.abbr = e), i = new E(t), i.parentLocale = fa[e], fa[e] = i;
}
if (null != t.GG || null != t.W || null != t.E) {
  a = 1, s = 4, i = vt(t.GG, e._a[Uo], Ie(xt(), 1, 4).year), n = vt(t.W, 1), o = vt(t.E, 1), (o < 1 || o > 7) && (l = !0);
} else {
  a = e._locale._week.dow, s = e._locale._week.doy, c = Ie(xt(), a, s), i = vt(t.gg, e._a[Uo], c.year), n = vt(t.w, c.week), null != t.d ? (o = t.d, (o < 0 || o > 6) && (l = !0)) : null != t.e ? (o = t.e + a, (t.e < 0 || t.e > 6) && (l = !0)) : o = a;
}
if (n < 1 || n > Ae(i, a, s)) {
  g(e)._overflowWeeks = !0;
} else {
  if (null != l) {
    g(e)._overflowWeekday = !0;
  } else {
    r = Ce(i, n, o, a, s), e._a[Uo] = r.year, e._dayOfYear = r.dayOfYear;
  }
}
if (c(i)) {
  e._d = new Date(t.now());
} else {
  if (u(i)) {
    e._d = new Date(i.valueOf());
  } else {
    if ("string" == typeof i) {
      _t(e);
    } else {
      if (a(i)) {
        e._a = h(i.slice(0), function (e) {
          return parseInt(e, 10);
        }), wt(e);
      } else {
        if (s(i)) {
          It(e);
        } else {
          if (d(i)) {
            e._d = new Date(i);
          } else {
            t.createFromInputFallback(e);
          }
        }
      }
    }
  }
}
if (null != e) {
  this.utcOffset(e);
} else {
  this.utcOffset(0, !0);
}
if ("boolean" == typeof e) {
  d(t) && (i = t, t = void 0), t = t || "";
} else {
  t = e, i = t, e = !1, d(t) && (i = t, t = void 0), t = t || "";
}
if (null != o) {
  t[qo] = o;
} else {
  g(i).invalidMonth = e;
}
if (null != o) {
  t.d = o;
} else {
  g(i).invalidWeekday = e;
}
if (o) {
  g(i).era = o;
} else {
  g(i).invalidEra = e;
}
if (i._locale.eraYearOrdinalParse) {
  t[Uo] = i._locale.eraYearOrdinalParse(e, o);
} else {
  t[Uo] = parseInt(e, 10);
}
if (this._stack.buffer.length > 0) {
  this._stack.current = this._stack.buffer, this._stack.buffer = [], this._cbs.current = this._cbs.buffer, this._cbs.buffer = [], this._eventsProcessing = !1, this._nextTimeout || this._next(t);
} else {
  this._eventsProcessing = !1;
}
if (this._eventsProcessing) {
  this._stack.buffer.push(t), this._cbs.buffer.push(i);
} else {
  this._stack.current.push(t), this._cbs.current.push(i);
}
if (e.informations.alive) {
  window.actorManager.addActor(e.informations);
} else {
  window.actorManager.userActor.actorId === e.informations.contextualId && window.actorManager.userActor.loadAndPlayAnimation({
    base: "AnimMort"
  }, {
    loop: !1
  }, function () {
    window.actorManager.userActor.death();
  });
}
if (s === e.mapId) {
  window.isoEngine.reloadMap(e);
} else {
  o.lockMessages(), window.isoEngine.loadMap(e);
}
if (1 === l) {
  e(1);
} else {
  n.open({
    min: 1,
    max: l,
    x: s.x,
    y: s.y
  });
}
if (e.teamNumber === d.TEAM_CHALLENGER) {
  o.tapOptions.possiblePlacements = e.positionsForChallengers;
} else {
  if (e.teamNumber === d.TEAM_DEFENDER) {
    o.tapOptions.possiblePlacements = e.positionsForDefenders;
  } else {
    o.tapOptions.possiblePlacements && delete o.tapOptions.possiblePlacements;
  }
}
if (this.fightIsUserTurn) {
  if (e) {
    this._displaySpellRange();
  } else {
    window.isoEngine.displayUserMovementZone();
  }
} else {
  e && this._displaySpellRange();
}
if (m.isRoleplayMode) {
  this.tapOptions.mode = "roleplay";
} else {
  delete this.tapOptions.mode, this.hideBorderArrow();
}
if (_ !== y) {
  v.appendChild(_), _.delClassNames("customDragElement"), _.setStyles(I), _.emit("dragEnd", S.x, S.y);
} else {
  y.hide(), M.emit("dragEnd", S.x, S.y);
}
if (_ !== y) {
  v.appendChild(_), _.delClassNames("customDragElement"), _.setStyles(I), _.emit("dragEnd", S.x, S.y);
} else {
  y.hide(), M.emit("dragEnd", S.x, S.y);
}
if (_ !== y) {
  v.appendChild(_), _.delClassNames("customDragElement"), _.setStyles({
    left: I.left,
    top: I.top,
    webkitTransform: "translate3d(0px,0px, 0)"
  }), _.emit("dragEnd", a, s);
} else {
  M.emit("dragEnd", a, s);
}
if (t.dragOnTouchstart) {
  v = 0, o(n);
} else {
  t.dragInsteadOfScroll && p.setPriorityBehavior("DRAG");
}
if ("number" == typeof e) {
  n = e, i = o.intToString(n);
} else {
  i = e, n = this._parseNumber(i);
}
if (e === !1) {
  this.rootElement.removeAttribute("readonly");
} else {
  this.rootElement.setAttribute("readonly", "readonly");
}
if ("HumanOptionGuild" === r._type) {
  n = r.guildInformations;
} else {
  if ("HumanOptionAlliance" === r._type) {
    o = r.allianceInformations;
  } else {
    if ("HumanOptionOrnament" === r._type) {
      i = r.ornamentId;
    } else {
      "HumanOptionTitle" === r._type && (t = r.titleId);
    }
  }
}
if ("?" === t || "" === t) {
  a = b("ui.common.houseWithNoOwner");
} else {
  t === s && (a = b("ui.common.myHouse"));
}
if (P[E] < O.min) {
  P[E] = O.min, x[E] = e[E] - O.min;
} else {
  P[E] > O.max && (P[E] = O.max, x[E] = e[E] - O.max);
}
if ("x" === N) {
  a.reset().from({
    x: n
  }).to({
    x: o
  }, t / i);
} else {
  a.reset().from({
    y: n
  }).to({
    y: o
  }, t / i);
}
if (i === R || s.isBomb) {
  r.characters.addSummonedBomb();
} else {
  s.isCreature && r.characters.addSummonedCreature();
}
if (i === _.ACTION_CHARACTER_ACTION_POINTS_USE || i === _.ACTION_CHARACTER_ACTION_POINTS_LOST || i === _.ACTION_CHARACTER_ACTION_POINTS_WIN) {
  C(T.fightActionPointsVariationStep, [H ? H.castingSpellId : -1, t, n, i === _.ACTION_CHARACTER_ACTION_POINTS_USE]);
} else {
  i !== _.ACTION_CHARACTER_MOVEMENT_POINTS_USE && i !== _.ACTION_CHARACTER_MOVEMENT_POINTS_LOST && i !== _.ACTION_CHARACTER_MOVEMENT_POINTS_WIN || C(T.fightMovementPointsVariationStep, [H ? H.castingSpellId : -1, t, n, i === _.ACTION_CHARACTER_MOVEMENT_POINTS_USE]);
}
if (t) {
  window.actorManager.userActor.hide();
} else {
  window.actorManager.userActor.show();
}
if (e.isFightStarted) {
  window.isoEngine.displayTextBanner("tablet.fight.animation.fightStarts"), a.emit("fightEnterBattle", "PREPARATION_SKIPPED");
} else {
  window.isoEngine.displayTextBanner("tablet.fight.animation.preparationPhase"), a.emit("fightEnterPreparation", e);
}
if (t === _.ACTION_FIGHT_SPELL_DODGED_PA) {
  C(T.fightActionPointsLossDodge, [H ? H.castingSpellId : -1, e.targetId, e.amount, e.effectId]);
} else {
  t === _.ACTION_FIGHT_SPELL_DODGED_PM && C(T.fightMovementPointsLossDodge, [H ? H.castingSpellId : -1, e.targetId, e.amount, e.effectId]);
}
if (e.option === m.FIGHT_OPTION_SET_SECRET) {
  a.fightSecretOn = e.state;
} else {
  e.option === m.FIGHT_OPTION_ASK_FOR_HELP && (a.fightHelpOn = e.state);
}
if (n && 0 !== a) {
  C(T.fightCloseCombatStep, [H ? H.castingSpellId : -1, e.sourceId, a, e.critical]);
} else {
  C(T.fightSpellCastStep, [H ? H.castingSpellId : -1, e.sourceId, e.spellId, e.critical, e.effectId]);
}
if (0 === l.data.teamId) {
  n.push({
    fighter: r,
    init: d
  }), o += d;
} else {
  i.push({
    fighter: r,
    init: d
  }), a += d;
}
if (d.isActive()) {
  o.push(d), g && this.emit("BuffUpdate", d, r);
} else {
  d.remove(), this.emit("BuffRemove", d, r);
}
if (h && h.isBomb) {
  this.aliveSource = this.targetId;
} else {
  this.aliveSource = this.source;
}
if (this.effectUid === -1) {
  this.initParam(n || 0, o || 0, a || 0, s);
} else {
  p.getDataMap("SpellEffects", [this.effectUid], function (e, t) {
    var i = t && t[r.effectUid];
    if (e) {
      console.error("Unable to retrieve the effects visibility for " + r.effectUid + ", " + e);
    } else {
      i && (r.visibleInBuffUI = i.visibleInBuffUI, r.visibleInFightLog = i.visibleInFightLog);
    }
    r.initParam(n || 0, o || 0, a || 0, s);
  });
}
if (this.stack.length > 0) {
  this.unstack(e.uid), this.addBuff(e);
} else {
  this.remove();
}
if (i) {
  t[2] = i.Emoticons[t[0]].nameId, e.setDescription(t);
} else {
  o("Emoticons", t[0], e);
}
if (i) {
  t[0] = i.ItemTypes[t[0]].nameId, e.setDescription(t);
} else {
  o("ItemTypes", t[0], e);
}
if (i) {
  t[0] = i.Monsters[t[0]].nameId, e.setDescription(t);
} else {
  o("Monsters", t[0], e);
}
if (i) {
  t[0] = i.Spells[t[0]].nameId || "[SPELL_NAME_ID#" + t[0] + "]", e.setDescription(t);
} else {
  o("Spells", t[0], e);
}
if (i) {
  t[2] = i.Spells[t[2]].nameId, e.setDescription(t);
} else {
  o("Spells", t[2], e);
}
if (i) {
  t[2] = i.Jobs[t[0]].nameId, e.setDescription(t);
} else {
  o("Jobs", t[0], e);
}
if (i && i.SpellLevels && i.SpellLevels[t[2]]) {
  if (i.Spells && i.Spells[i.SpellLevels[t[2]].spellId]) {
    t[2] = i.Spells[i.SpellLevels[t[2]].spellId].nameId, e.setDescription(t);
  } else {
    o("Spells", i.SpellLevels[t[2]].spellId, e);
  }
} else {
  o("SpellLevels", t[2], e);
}
if (i) {
  t[1] = i.Jobs[t[1]].nameId, e.setDescription(t);
} else {
  o("Jobs", t[1], e);
}
if (i) {
  t[2] = i.Spells[t[0]].nameId, e.setDescription(t);
} else {
  o("Spells", t[0], e);
}
if (i) {
  t[2] = i.Documents[t[0]].titleId, e.setDescription(t);
} else {
  o("Documents", t[0], e);
}
if (i) {
  t[2] = i.Monsters[t[1]].nameId, e.setDescription(t);
} else {
  o("Monsters", t[1], e);
}
if (i) {
  t[2] = i.AlignmentSides[t[0]].titleId, e.setDescription(t);
} else {
  o("AlignmentSides", t[0], e);
}
if (i) {
  t[0] = i.Jobs[t[0]].nameId, e.setDescription(t);
} else {
  o("Jobs", t[0], e);
}
if (i) {
  t[0] = i.MonsterRaces[t[0]].nameId, e.setDescription(t);
} else {
  o("MonsterRaces", t[0], e);
}
if (i) {
  t[2] = i.Ornaments[t[0]].nameId, e.setDescription(t);
} else {
  o("Ornaments", t[0], e);
}
if (t[1] > 6) {
  t[0] = f("ui.petWeight.fat", [t[1]]);
} else {
  if (t[2] > 6) {
    t[0] = f("ui.petWeight.lean", [t[2]]);
  } else {
    if ("EffectInstanceInteger" === e._type && t[0] > 6) {
      t[0] = f("ui.petWeight.lean", [t[0]]);
    } else {
      t[0] = f("ui.petWeight.nominal");
    }
  }
}
if (t[0]) {
  if (i) {
    t[0] = i.Items[t[0]].nameId || "unknown", e.setDescription(t);
  } else {
    o("Items", t[0], e);
  }
} else {
  t[0] = f("ui.common.none"), e.setDescription(t);
}
if (b === A) {
  t[0] = "missing_item_" + t[0], e.setDescription(t), e.iconId = 15116;
} else {
  t[0] = b.nameId, e.setDescription(t), e.iconId = b.iconId;
}
if (i) {
  t[1] = i.Monsters[t[1]].nameId, e.setDescription(t);
} else {
  o("Monsters", t[1], e);
}
if (i) {
  t[2] = i.Items[t[0]].nameId, e.setDescription(t);
} else {
  o("Items", t[0], e);
}
if (i) {
  t[2] = i.SpellStates[t[2]].nameId, e.setDescription(t);
} else {
  o("SpellStates", t[2], e);
}
if (i) {
  t[0] = i.Companions[t[0]].nameId, e.setDescription(t);
} else {
  o("Companions", t[0], e);
}
if (s) {
  a.effect = s;
} else {
  e[o] = null;
}
if (t.EFFECT_SHAPES[n.zoneShape].hasMinSize) {
  n.zoneMinSize = parseInt(i[1], 10);
} else {
  n.zoneEfficiencyPercent = parseInt(i[1], 10);
}
if (t.EFFECT_SHAPES[n.zoneShape].hasMinSize) {
  n.zoneMinSize = parseInt(i[1], 10), n.zoneEfficiencyPercent = parseInt(i[2], 10);
} else {
  n.zoneEfficiencyPercent = parseInt(i[1], 10), n.zoneMaxEfficiency = parseInt(i[2], 10);
}
if (0 === e) {
  this.date = Number(t);
} else {
  if (1 === e) {
    this.modelId = Number(t);
  } else {
    2 === e && (this.mountId = Number(t));
  }
}
if ("" !== i && "" !== n) {
  i += "\n" + n;
} else {
  "" === i && (i += n);
}
if (c.name === h.FIGHTER_LIFE_LOSS) {
  E[c.params[0]] = !0;
} else {
  c.name === h.FIGHTER_DEATH && (S[c.params[0]] = !0);
}
if (s === r) {
  n = s, o = 0, a = 0;
} else {
  if (s > r) {
    n = r, o = s, a = 0;
  } else {
    n = s, o = r, a = 0;
  }
}
if ("GameFightCharacterInformations" === this.data._type) {
  e.neutralPercent.setText(Math.min(f, t.neutralElementResistPercent) + "%"), e.strengthPercent.setText(Math.min(f, t.earthElementResistPercent) + "%"), e.intelligencePercent.setText(Math.min(f, t.fireElementResistPercent) + "%"), e.chancePercent.setText(Math.min(f, t.waterElementResistPercent) + "%"), e.agilityPercent.setText(Math.min(f, t.airElementResistPercent) + "%");
} else {
  e.neutralPercent.setText(t.neutralElementResistPercent + "%"), e.strengthPercent.setText(t.earthElementResistPercent + "%"), e.intelligencePercent.setText(t.fireElementResistPercent + "%"), e.chancePercent.setText(t.waterElementResistPercent + "%"), e.agilityPercent.setText(t.airElementResistPercent + "%");
}
if (i) {
  i.addBuff(e);
} else {
  this.buffs.push(e);
}
if (i) {
  window.gui.fightManager.emit("BuffUpdate", i, this);
} else {
  window.gui.fightManager.emit("BuffAdd", e, this);
}
if (a.canBeDispell(e, Number.MIN_VALUE, i)) {
  window.gui.fightManager.emit("BuffRemove", a, this), a.remove();
} else {
  n.push(a);
}
if (e === r.castingSpell.spell.id && r.canBeDispell(t, Number.MIN_VALUE, n)) {
  r.remove(), a.push(r);
} else {
  s.push(r);
}
if ("fitin" === this.scale) {
  this.horizontalAlign = e.horizontalAlign || "left", this.verticalAlign = e.verticalAlign || "bottom";
} else {
  this.horizontalAlign = e.horizontalAlign || "none", this.verticalAlign = e.verticalAlign || "none";
}
if (isNaN(r)) {
  r = this._scale;
} else {
  r *= .01;
}
if (null === this._spriteRef) {
  this._spriteRef = this.displayList.add(this);
} else {
  this._spriteRef = this.displayList.reposition(this._spriteRef);
}
if (u) {
  s.merge(u, !0);
} else {
  console.error("onTemplatesLoaded: skinTemplate is missing on index", d, "of", n.length, "for skinIds", i, "and boneId", t, "stack:", g);
}
if (l) {
  a = new n(c, t.matrices, t.colors), r = u, o = t.symbols;
} else {
  a = c, r = h, o = t;
}
if (void 0 === D) {
  b.push(R), M.push(A), I += 1;
} else {
  u[A] = D;
}
if (p) {
  t(p, u);
} else {
  l.push(h), c.push(u);
}
if (M.maskStart) {
  y.push(new a(M.id)), Array.prototype.push.apply(y, T), y.push(new s(M.id));
} else {
  Array.prototype.push.apply(y, T);
}
if (e !== -1 && y[e] ^ t) {
  this.scaleX > 0 && (this.mirrored = !0, this.scaleX *= -1);
} else {
  this.scaleX < 0 && (this.mirrored = !1, this.scaleX *= -1);
}
if (c.child) {
  l.assignSymbol(c.child, t, i), i = null;
} else {
  l.assignSymbol(o, !1);
}
if (t >= this._duration) {
  if (1 === this._iterations) {
    this._time = this._duration, this._update(), null !== this._onUpdate && this._onUpdate(), this._finished();
  } else {
    this._time = t % this._duration, this._update(), null !== this._onUpdate && this._onUpdate(), this._iterations -= 1;
  }
} else {
  this._time = t, this._update(), null !== this._onUpdate && this._onUpdate();
}
if (a.ref.container === this.memoryChunksUsed) {
  this.memoryChunksUsed.removeByRef(a.ref), delete this.chunksById[a.id];
} else {
  this.memoryChunksFree.removeByReference(a.ref);
}
if (e === this.root) {
  this.root = t;
} else {
  if (n.right === e) {
    n.right = t;
  } else {
    n.left = t;
  }
}
if (null === i) {
  o = 0;
} else {
  i.parent = e, o = i.height;
}
if (e === this.root) {
  this.root = t;
} else {
  if (e.parent.left === e) {
    e.parent.left = t;
  } else {
    e.parent.right = t;
  }
}
if (null === i) {
  n = 0;
} else {
  i.parent = e, n = i.height;
}
if (null === t) {
  this.root = o;
} else {
  if (t.right === e) {
    t.right = o;
  } else {
    t.left = o;
  }
}
if (null === a) {
  this._buildProgram(t);
} else {
  this.gl.useProgram(t.binder);
}
if (null === e) {
  t.disable(t.SCISSOR_TEST);
} else {
  t.enable(t.SCISSOR_TEST), t.scissor(e[0], e[1], e[2], e[3]);
}
if (n(e.width) && n(e.height)) {
  a = o.LINEAR_MIPMAP_LINEAR, o.generateMipmap(o.TEXTURE_2D);
} else {
  console.warn("[WebGLRenderer._setFiltering]", "Cannot build mipmap from image", i, " because its dimensions are not a power of 2.");
}
if (void 0 === t && void 0 === e) {
  e = this.level, t = e + 1;
} else {
  void 0 === t && (t = e, e = this.level);
}
if (i + r < s) {
  i = s;
} else {
  i += r;
}
if (o === C.CAST_INTERVAL) {
  e.castInterval.setPts(n.value.getAllValues());
} else {
  o === C.CAST_INTERVAL_SET && e.castIntervalSet.setPts(n.value.getAllValues());
}
if (i > 0) {
  W.push(k.FIGHTER_MP_GAINED, [t, i], t, -1, e, !1, 2, a);
} else {
  i < 0 && (n ? W.push(k.FIGHTER_MP_USED, [t, Math.abs(i)], t, -1, e, !1, 2, a) : W.push(k.FIGHTER_MP_LOST, [t, Math.abs(i)], t, -1, e, !1, 2, a));
}
if (i > 0) {
  W.push(k.FIGHTER_AP_GAINED, [t, i], t, -1, e, !1, 2, a);
} else {
  i < 0 && (n ? W.push(k.FIGHTER_AP_USED, [t, Math.abs(i)], t, -1, e, !1, 2, a) : W.push(k.FIGHTER_AP_LOST, [t, Math.abs(i)], t, -1, e, !1, 2, a));
}
if (i !== F.VISIBLE && s === F.VISIBLE) {
  a = F.INVISIBLE;
} else {
  i === F.VISIBLE && s !== F.VISIBLE && (a = F.VISIBLE);
}
if (this.spells[o]) {
  void 0 !== a.spellLevel && void 0 !== a.position && (this.spells[o].setLevel(a.spellLevel), this.spells[o].setPosition(a.position));
} else {
  n[o] = {
    level: a.spellLevel,
    position: a.position
  }, i.push(o);
}
if (window.gui.playerData.isSubscriberAtMinLevel(l.NORMAL)) {
  this._bonusContainer.addClassNames("bonusPackActive"), this._linkToShop.disable();
} else {
  this._bonusContainer.delClassNames("bonusPackActive"), this._linkToShop.enable();
}
if (t) {
  h.loadImage(t.imagePath, function (i) {
    N(i, t, e._wingsBottomCanvas, e._wingsBottomCtx, !1);
    e._wingsBottomCanvas.show();
  });
} else {
  e._wingsBottomCanvas.hide();
}
if (n) {
  u = n.holdTexture(f), u ? p = !1 : (p = !0, v += 1);
} else {
  p = !0, v += 1;
}
if (w || b) {
  c[y.name] = !0, o.BR.x = a + r, o.BR.y = s + l, o.TL.x = a, o.TL.y = s, h--;
} else {
  u = y.name, a = o.TL.x, s = o.TL.y, c = {}, d++, h = -1;
}
if (g.isIOSApp) {
  document.addEventListener("pause", e, !1), document.addEventListener("resume", t, !1);
} else {
  document.addEventListener("visibilitychange", function (i) {
    if (i.target.hidden) {
      e();
    } else {
      t();
    }
  }, !1);
}
if (n.isConnected && n.chat.active) {
  n.chat.deactivate();
} else {
  if (h.isOpen()) {
    h.close();
  } else {
    if (n.isConnected && !e) {
      ve["switch"]("global");
    } else {
      if (e) {
        ve.getWindow(e).backButtonClose();
      } else {
        n.loginScreen.isVisible() && navigator.app.exitApp();
      }
    }
  }
}
if (this.initialized) {
  this.serversData.onServerList(e);
} else {
  this.once("initialized", function () {
    this.serversData.onServerList(e);
  });
}
if (g.isDevice) {
  Ye.replaceClassNames(["no-touch"], ["touch"]);
} else {
  Ye.replaceClassNames(["touch"], ["no-touch"]);
}
if (i <= 1.5) {
  this.ipadRatio = !0, Ye.replaceClassNames(["largeRatio"], ["ipadRatio"]), v.resizeNarrowScreen(e), this.sidebarBackground.setStyles({
    left: 0,
    top: t.mapBottom - 1 + "px",
    width: t.screenWidth + "px",
    height: t.screenHeight - t.mapBottom + 1 + "px"
  }), this.mapBorder1.addClassNames("vertical"), this.mapBorder1.setStyles({
    left: 0,
    top: 0,
    width: t.mapLeft + "px",
    height: t.mapHeight + "px"
  }), this.mapBorder2.addClassNames("vertical"), this.mapBorder2.setStyles({
    left: t.mapRight + "px",
    top: 0,
    width: t.screenWidth - t.mapRight + "px",
    height: t.mapHeight + "px"
  }), this.screenLeftover.setStyles({
    left: 0,
    top: 0,
    width: t.screenWidth + "px",
    height: t.mapTop + "px"
  });
} else {
  this.ipadRatio = !1, Ye.replaceClassNames(["ipadRatio"], ["largeRatio"]), v.resizeWideScreen(e), this.sidebarBackground.setStyles({
    left: t.mapRight + "px",
    top: 0,
    width: t.screenWidth - t.mapRight + "px",
    height: t.screenHeight + "px"
  }), this.mapBorder1.delClassNames("vertical"), this.mapBorder1.setStyles({
    left: t.mapLeft + "px",
    top: 0,
    width: t.mapWidth + "px",
    height: t.mapTop + "px"
  }), this.mapBorder2.delClassNames("vertical"), this.mapBorder2.setStyles({
    left: t.mapLeft + "px",
    top: t.mapBottom - 1 + "px",
    width: t.mapWidth + "px",
    height: t.screenHeight - t.mapBottom + 1 + "px"
  }), this.screenLeftover.setStyles({
    left: 0,
    top: 0,
    width: t.mapLeft + "px",
    height: t.screenHeight + "px"
  });
}
if (e) {
  this.iScroll.enable();
} else {
  this.iScroll.disable();
}
if (this.options.useTransition && this.isInTransition) {
  this.isInTransition = !1, t = this.getComputedPosition(), this._translate(n.round(t.x), n.round(t.y)), this._execEvent("scrollEnd");
} else {
  !this.options.useTransition && this.isAnimating && (this.isAnimating = !1, this._execEvent("scrollEnd"));
}
if (!i || this.options.useTransition && n.style) {
  this._transitionTimingFunction(n.style), this._transitionTime(i), this._translate(e, t);
} else {
  this._animate(e, t, i, n.fn);
}
if (o > 0) {
  o = 0;
} else {
  o < this.maxScrollX && (o = this.maxScrollX);
}
if (a > 0) {
  a = 0;
} else {
  a < this.maxScrollY && (a = this.maxScrollY);
}
if (this.options.snapThreshold % 1 === 0) {
  this.snapThresholdX = this.options.snapThreshold, this.snapThresholdY = this.options.snapThreshold;
} else {
  this.snapThresholdX = n.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold), this.snapThresholdY = n.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
}
if (e >= this.pages.length) {
  e = this.pages.length - 1;
} else {
  e < 0 && (e = 0);
}
if (t >= this.pages[e].length) {
  t = this.pages[e].length - 1;
} else {
  t < 0 && (t = 0);
}
if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
  o += i ? 1 : this.wrapperWidth;
} else {
  a += i ? 1 : this.wrapperHeight;
}
if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
  o -= i ? 1 : this.wrapperWidth;
} else {
  a -= i ? 1 : this.wrapperHeight;
}
if (o > 0) {
  o = 0, this.keyAcceleration = 0;
} else {
  o < this.maxScrollX && (o = this.maxScrollX, this.keyAcceleration = 0);
}
if (a > 0) {
  a = 0, this.keyAcceleration = 0;
} else {
  a < this.maxScrollY && (a = this.maxScrollY, this.keyAcceleration = 0);
}
if (this.options.listenX && !this.options.listenY) {
  this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? "block" : "none";
} else {
  if (this.options.listenY && !this.options.listenX) {
    this.indicatorStyle.display = this.scroller.hasVerticalScroll ? "block" : "none";
  } else {
    this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? "block" : "none";
  }
}
if (this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll) {
  l.addClass(this.wrapper, "iScrollBothScrollbars"), l.removeClass(this.wrapper, "iScrollLoneScrollbar"), this.options.defaultScrollbars && this.options.customStyle && (this.options.listenX ? this.wrapper.style.right = "8px" : this.wrapper.style.bottom = "8px");
} else {
  l.removeClass(this.wrapper, "iScrollBothScrollbars"), l.addClass(this.wrapper, "iScrollLoneScrollbar"), this.options.defaultScrollbars && this.options.customStyle && (this.options.listenX ? this.wrapper.style.right = "2px" : this.wrapper.style.bottom = "2px");
}
if (this.scroller.options.useTransform) {
  this.indicatorStyle[l.style.transform] = "translate(" + e + "px," + t + "px)" + this.scroller.translateZ;
} else {
  this.indicatorStyle.left = e + "px", this.indicatorStyle.top = t + "px";
}
if (e < 0) {
  e = 0;
} else {
  e > this.maxPosX && (e = this.maxPosX);
}
if (t < 0) {
  t = 0;
} else {
  t > this.maxPosY && (t = this.maxPosY);
}
if ("undefined" != typeof e && e.exports) {
  e.exports = o;
} else {
  t.IScroll = o;
}
if (r.disabled) {
  l.addClassNames(c, "disabled");
} else {
  r.ticked && l.addClassNames(c, "ticked"), r.addClassNames && l.addClassNames(r.addClassNames), l.addClassNames(c), l.action = r;
}
if (e.playerId && window.gui.playerData.socialData.isSpouse(e.playerId)) {
  t.addClassNames("spouse");
} else {
  if (e.playerId && window.gui.playerData.socialData.isFriend(e.playerId)) {
    t.addClassNames("friend");
  } else {
    if (e.guildId && window.gui.playerData.guildData.isOnSameGuild(e.guildId)) {
      t.addClassNames("guildMember");
    } else {
      e.guildId && window.gui.playerData.alliance.isGuildOnSameAlliance(e.guildId) && t.addClassNames("allianceMember");
    }
  }
}
if (n) {
  this._guildName.setText(n.guildName), this._guildName.show(), i = n.guildEmblem, i && this._guildEmblem.setValue(i, !0), this._guildEmblem.show();
} else {
  this._guildName.hide(), this._guildEmblem.hide();
}
if (o) {
  this.addClassNames("alliance"), n ? this._guildName.setText(n.guildName + " - [" + o.allianceTag + "]") : (this._guildName.setText(o.allianceName), this._guildName.show()), i = o.allianceEmblem, i && (i.isAlliance = !0, this._allianceEmblem.setValue(i, !0), this._allianceEmblem.show());
} else {
  this.delClassNames("alliance"), this._allianceEmblem.hide();
}
if (t) {
  o = t.filter(function (e) {
    return e._parentJobId && (e.skillId === w || e._parentJobId !== _);
  });
} else {
  n && (o = n.disabledSkills.length > 0 ? n.disabledSkills.filter(function (e) {
    return e._parentJobId && e._parentJobId === y;
  }) : n.enabledSkills.filter(function (e) {
    return e._parentJobId && e._parentJobId === y;
  }));
}
if (t) {
  this.bidHouseCatList.selectAndShowSubitem(e);
} else {
  this._pushHistory();
}
if (0 === e.itemCount) {
  this.bidHouseCatList.toggleBreadcrumb(!1), this.bidHouseCatList.setPlaceholder(v("tablet.bidHouse.noCatHasMatchingItem", this.currentSearchText)), this.shopViewer.setPlaceholder(v("tablet.bidHouse.noMatchingItem", this.currentSearchText)), this._resetShopViewerHeader();
} else {
  this.bidHouseCatList.setPlaceholder(null);
}
if (t) {
  this._selectItemType(t, !0);
} else {
  this.bidHouseCatList.collapseAll();
}
if (this.subitemFilterFunc(e, o, a)) {
  i++, 1 === i && (t = a), a.show();
} else {
  a.hide();
}
if (this.itemFilterFunc(o)) {
  t++, 1 === t && (e = o), this.isItemDeployed(o) && this.subitemFilterFunc && this._filterOneItemSubitems(o), o.show();
} else {
  o.hide();
}
if (i) {
  if (i === this) {
    i.tappedOnMe = !0, e.options.disableSelectionToggle || e.deselectItem(i.getWuiName(), {
      noSound: !0
    }), i.tappedOnMe = !1;
  } else {
    e.deselectItem(e.currentSelected.getWuiName(), {
      noSound: !0
    }), e.selectItem(t);
  }
} else {
  e.selectItem(t);
}
if (s) {
  o += f;
} else {
  o = f;
}
if (s) {
  a.itemSetName = s.nameId;
} else {
  m.error(new Error("ItemSet id " + a.itemSetId + " for item id " + a.id + " does not exist.")), a.itemSetName = null;
}
if (d === u - 1) {
  o += h, a(this.criterions, l, o, t, i);
} else {
  if (s) {
    if (")" === h) {
      if (0 === r) {
        s = !1;
      } else {
        r -= 1, o += h;
      }
    } else {
      o += h;
    }
  } else {
    if ("(" === h) {
      r += 1, s = !0, l = !0;
    } else {
      if ("&" === h || "|" === h) {
        a(this.criterions, l, o, t, i), r = -1, l = !1, this.operator = "&" === h ? c.and : c.or, o = "";
      } else {
        o += h;
      }
    }
  }
}
if (n.criterions) {
  e.push("(" + n.getText() + ")");
} else {
  e.push(n.getText());
}
if (window.gui.playerData.identification.hasRights) {
  this._text = a("ui.social.guildHouseRights") + " " + this.getOperatorText() + " " + this.getValueText();
} else {
  this._text = "";
}
if (this.operator === s.operators.equal) {
  this._text = r("ui.criterion.allianceAvA");
} else {
  this._text = "";
}
if (e === g.taxCollector) {
  window.dofus.sendMessage("GuildFightLeaveRequestMessage", {
    taxCollectorId: t,
    characterId: i
  });
} else {
  window.dofus.sendMessage("PrismFightJoinLeaveRequestMessage", {
    subAreaId: t,
    join: !1
  });
}
if (r) {
  r.updateInfo(s), h.emit("entityUpdated", g.prism, r);
} else {
  r = new u(s), t[r.id] = r, h.emit("entityAdded", g.prism, r);
}
if (0 === this.value) {
  this._text = a("ui.criterion.noAlliance");
} else {
  if (1 === this.value) {
    this._text = a("ui.criterion.hasAlliance");
  } else {
    this._text = a("ui.criterion.hasValidAlliance");
  }
}
if (this.operator === a.operators.equal) {
  this._text = s("ui.criterion.allianceRights", [t]);
} else {
  this._text = s("ui.criterion.notAllianceRights", [t]);
}
if (0 === this.value && "B" === this.key) {
  this._text = a("ui.criterion.initialBones");
} else {
  this._text = a("ui.criterion.bones") + " " + this.getOperatorText() + " " + this.value;
}
if (this.operator === o.operators.equal) {
  this._text = a("ui.tooltip.beABreed", [t]);
} else {
  this._text = a("ui.tooltip.dontBeABreed", [t]);
}
if (t.length > 1) {
  this._giftId = parseInt(t[0], 10), this._giftLevel = parseInt(t[1], 10);
} else {
  this._giftId = parseInt(this.value, 10), this._giftLevel = -1;
}
if (t.length > 1) {
  this._jobId = parseInt(t[0], 10), this._jobLevel = parseInt(t[1], 10);
} else {
  this._jobId = parseInt(this.value, 10), this._jobLevel = -1;
}
if (t.length > 1) {
  this._mapId = parseInt(t[0], 10), this.value = parseInt(t[1], 10);
} else {
  this._mapId = window.gui.playerData.position.mapId;
}
if (i.length > 1) {
  t = parseInt(i[0], 10), this._quantityMonster = parseInt(i[1], 10);
} else {
  t = parseInt(this.value, 10), this._quantityMonster = 1;
}
if (t.length > 1) {
  console.error(new Error("SpellItemCriterion: too much parameters: " + t));
} else {
  this._spellId = this.value;
}
if (t[0] === v) {
  t = t.substr(1), i.withIcon = !0, i.tooltip = t + " (" + l("tablet.lot") + ")";
} else {
  i.tooltip = t;
}
if (e === !1) {
  this._inputBox.rootElement.removeAttribute("readonly");
} else {
  this._inputBox.rootElement.setAttribute("readonly", "readonly");
}
if (o > 0) {
  i = "+";
} else {
  o < 0 && (i = "-");
}
if (i.showWeight === !1) {
  e.weight.hide();
} else {
  e.weight.setText(M("ui.common.short.weight", t.getProperty("weight"))), e.weight.show();
}
if (t[n] !== !1 && E[n](o, e, t)) {
  o.show();
} else {
  o.hide();
}
if (n.dbEffect.bonusType === -1) {
  o.addClassNames("malus");
} else {
  1 === n.dbEffect.bonusType && o.addClassNames("bonus");
}
if ("string" == typeof n.description) {
  o.setHtml(h + " " + n.description);
} else {
  o.appendChild(n.description);
}
if (n instanceof m) {
  i.content = n, i.appendChild(n);
} else {
  i.content = i, i.setText(n);
}
if (o.sort) {
  n = e.appendChild(new h({
    className: ["col", o.id],
    name: o.id
  }, r)), n.myTable = this;
} else {
  n = e.createChild("div", {
    className: ["col", o.id]
  });
}
if (e) {
  this.spinner.addSpinner("content");
} else {
  this.spinner.removeSpinner("content");
}
if (e) {
  this._sexIcon.replaceClassNames(["male"], ["female"]);
} else {
  this._sexIcon.replaceClassNames(["female"], ["male"]);
}
if (e) {
  this.mountRenamedHandler || (this.mountRenamedHandler = this._processMountRenamed.bind(this), this.mountSterilizedHandler = this._processMountSterilized.bind(this), this.mountReleasedHandler = this._processMountReleased.bind(this), this.updateMountBoostHandler = this._processUpdateMountBoost.bind(this), this.setRatioHandler = this._setXpRatio.bind(this), this.mountRidingHandler = this._processMountRiding.bind(this)), i.on("MountRenamedMessage", this.mountRenamedHandler), i.on("MountSterilizedMessage", this.mountSterilizedHandler), i.on("MountReleasedMessage", this.mountReleasedHandler), i.on("UpdateMountBoostMessage", this.updateMountBoostHandler), t.on("setMountRatio", this.setRatioHandler), t.on("mountRiding", this.mountRidingHandler);
} else {
  i.removeListener("MountRenamedMessage", this.mountRenamedHandler), i.removeListener("MountSterilizedMessage", this.mountSterilizedHandler), i.removeListener("MountReleasedMessage", this.mountReleasedHandler), i.removeListener("UpdateMountBoostMessage", this.updateMountBoostHandler), t.removeListener("setMountRatio", this.setRatioHandler), t.removeListener("mountRiding", this.mountRidingHandler);
}
if (l) {
  this._rideButton.setEnable(e.isRideable), this._setRideButton(n.isRiding);
} else {
  this.mountableIcon.setEnabled(e.isRideable);
}
if (t) {
  this.value = e, i = e / t;
} else {
  this.value = e, i = e;
}
if (isNaN(p)) {
  console.error("MountType: Color is not a number for mountId: " + e + ", index: " + l);
} else {
  a[l] = "#" + p.toString(16);
}
if (t) {
  this.humanValue = e, void 0 !== i ? e = i : e /= t;
} else {
  this.humanValue = Math.round(100 * e);
}
if (this.isMini) {
  this.serenityBarWidth = h, this.serenityCursorOffset = -p / 2;
} else {
  this.serenityBarWidth = this._serenityBar.rootElement.clientWidth, this.serenityCursorOffset = -this._serenityBarCursor.rootElement.clientWidth / 2;
}
if (t && t === i) {
  if (this.index < i.index) {
    this._canRightSlide = !0, this._canLeftSlide = !1, this.rightTab = t, t.position = 100, t.content.show(), t.content.setStyle("webkitTransform", "translate" + this._axis + "(100%)");
  } else {
    this._canRightSlide = !1, this._canLeftSlide = !0, this.leftTab = i, i.position = -100, i.content.show(), i.content.setStyle("webkitTransform", "translate" + this._axis + "(-100%)");
  }
} else {
  t ? (this._canRightSlide = !0, this.rightTab = t, t.position = 100, t.content.show(), t.content.setStyle("webkitTransform", "translate" + this._axis + "(100%)")) : this._canRightSlide = !1, i ? (this._canLeftSlide = !0, this.leftTab = i, i.position = -100, i.content.show(), i.content.setStyle("webkitTransform", "translate" + this._axis + "(-100%)")) : this._canLeftSlide = !1;
}
if ("customFlag" === m.categoryId) {
  d.show(), o.hide();
} else {
  if ("questObjective" === m.categoryId) {
    i.flagId = m.id, i.show();
  } else {
    if ("zaap" === m.categoryId) {
      t.flagId = m.id, t.show();
    } else {
      if ("hint" === m.categoryId) {
        n.flagId = m.id, n.show();
      } else {
        "estate" === m.categoryId && (u.flagId = m.id, u.show());
      }
    }
  }
}
if (n) {
  n = Number(n), n > o && (n = o);
} else {
  n = o;
}
if (null === s) {
  s = 65533, r = 1;
} else {
  s > 65535 && (s -= 65536, n.push(s >>> 10 & 1023 | 55296), s = 56320 | 1023 & s);
}
if (isFinite(i)) {
  i = 0 | i, void 0 === n && (n = "utf8");
} else {
  n = i, i = void 0;
}
if (t < 0) {
  t += n, t < 0 && (t = 0);
} else {
  t > n && (t = n);
}
if (i < 0) {
  i += n, i < 0 && (i = 0);
} else {
  i > n && (i = n);
}
if (i.length > s) {
  i = o(e).update(i).digest();
} else {
  i.length < s && (i = t.concat([i, a], s));
}
if (e.partyType === r.PARTY_TYPE_ARENA) {
  this.restrictedMsg.hide();
} else {
  this.restrictedMsg.show(), this.restrictedMsg.setEnable(e.isLeader), this.restrictedMsg.toggleClassName("ticked", e.isRestricted);
}
if (o) {
  t.updateContent(i);
} else {
  e.updateContent(i);
}
if (r && r.getGuest(h)) {
  this.partyTitle.show(), this.cancelPartyInvitation.show();
} else {
  r && r.getMember(h) || this.inviteParty.show();
}
if (l && l.getGuest(h)) {
  this.arenaTitle.show(), this.cancelArenaInvitation.show();
} else {
  l && l.getMember(h) || this.inviteArena.show();
}
if (d.isIgnored(u)) {
  this.stopIgnoreSession.show();
} else {
  this.ignoreSession.show();
}
if (!m && g) {
  this.spouseJoin.show();
} else {
  o.position.isInIncarnam() && this.join.show();
}
if (h) {
  window.dofus.sendMessage("GuildInvitationMessage", {
    targetId: h
  });
} else {
  window.dofus.sendMessage("GuildInvitationByNameMessage", {
    name: p
  });
}
if (r) {
  n.disable();
} else {
  n.enable();
}
if ("AlliancePrismInformation" === t._type) {
  s = o.prism.alliance, f = s.allianceName, e.setContent({
    alliance: s
  }), r.alliance.hasAlliance() && r.alliance.current.allianceId === s.allianceId ? (i.hide(), n.toggleDisplay(r.guild.hasRight(l.GUILD_RIGHT_SET_ALLIANCE_PRISM))) : (i.show(), r.isAlive() && t.state === d.PRISM_STATE_NORMAL ? i.enable() : i.disable(), n.hide()), p.hide();
} else {
  s = window.gui.playerData.alliance.current, f = s.allianceName, e.setContent({
    alliance: s
  }), i.hide(), p.toggleDisplay(t.hasTeleporterModule), r.guild.hasRight(l.GUILD_RIGHT_SET_ALLIANCE_PRISM) ? n.show() : n.hide();
}
if (n) {
  l("ExchangeObjectTransfertAllToInvMessage", {});
} else {
  l("ExchangeObjectTransfertAllFromInvMessage", {});
}
if (n) {
  l("ExchangeObjectTransfertExistingToInvMessage", {});
} else {
  l("ExchangeObjectTransfertExistingFromInvMessage", {});
}
if (r || l) {
  i.enable();
} else {
  i.disable();
}
if (g.staticInfos) {
  this.playersList.appendChild(new s({
    text: r("tablet.monster.cell", g.staticInfos.nameId),
    className: "cmButton"
  }, o.bind(null, m)));
} else {
  console.error(new Error("Not a monster, type " + m.type));
}
if (v.data && v.data.playerId) {
  this.playersList.appendChild(new s({
    text: v.data.name,
    className: "cmButton"
  }, i.bind(null, v)));
} else {
  console.warn("ContextualMenuPlayersList: skipped actor:", v.actorId);
}
if (r.systemNotificationsEnabled) {
  this._controller.takeNoteOfPlayerChoice();
} else {
  this._controller.takeNoteOfTriggeringEvent(), this._controller.scheduleCheck();
}
if (e) {
  c();
} else {
  n();
}
if (e) {
  c();
} else {
  l();
}
if (e.success) {
  t.icon.challengeState.addClassNames("success"), t.details.challengeStatus.addClassNames("success"), t.details.challengeStatus.setText(l("ui.fight.challenge.complete"));
} else {
  t.icon.challengeState.addClassNames("fail"), t.details.challengeStatus.addClassNames("fail"), t.details.challengeStatus.setText(l("ui.fight.challenge.failed"));
}
if (t.isFullScreen) {
  p = 0, f = 0, m = o.screenWidth, g = o.screenHeight;
} else {
  p = o.mapLeft, f = o.mapTop, m = o.mapRight, g = o.mapBottom;
}
if (M > C) {
  M = C;
} else {
  M < A && (M = A);
}
if (T > I) {
  T = I;
} else {
  T < S && (T = S);
}
if (t === e.activePreset) {
  e._togglePresetChannels(t);
} else {
  e._setActivePreset(t);
}
if (e.displayMode === $.FIGHT) {
  O.setValue("ChatHeightForFight", e.logWrapper.windowHeight);
} else {
  O.setValue("ChatForRP", {
    width: e.logWrapper.windowWidth,
    height: e.logWrapper.windowHeight
  });
}
if (a === -1 || i) {
  a === -1 && i && (n.push(t), o = !0);
} else {
  n.splice(a, 1), o = !0;
}
if (this.chatInput.isChannelAllowedForSending(n)) {
  Z[n] || (!l || c || 0 !== a || t[n] || (this._setChannelInPreset(a, n, !0), c = !0), !l && c && (this._setChannelInPreset(a, n, !1), c = !1)), c ? (d.activate(!0), t[n]++) : d.deactivate(!0);
} else {
  d.hide();
}
if (e) {
  this.delClassNames("hiddenChatTimestamp");
} else {
  this.addClassNames("hiddenChatTimestamp");
}
if (this.outgoingChannel === I && this.previousPrivateReceiver) {
  this.inputChat.setValue(this.previousPrivateReceiver + " " + e), t && this.inputChat.setCaretPosition(this.previousPrivateReceiver.length);
} else {
  this.inputChat.setValue(e);
}
if (t.defaultValue) {
  this._active = !0, this.addClassNames("on");
} else {
  this._active = !1;
}
if (this._active && !this.isRadio) {
  this.deactivate(), r("CHECKBOX_UNCHECKED");
} else {
  this._active || (this.activate(), r("CHECKBOX_CHECKED"));
}
if (e) {
  this.activate(t);
} else {
  this.deactivate(t);
}
if (i) {
  i.cbs.push(t);
} else {
  window.dofus.sendMessage("BasicWhoIsRequestMessage", {
    search: e,
    verbose: !1
  }), this._whoIsMap[e] = {
    cbs: [t],
    timeout: r.setTimeout(this._playerOnlineHandler.bind(this, e, !1), u)
  };
}
if (e.position === o.MODERATOR) {
  i += '(<span class="position mod">' + n("ui.common.moderator") + "</span>)";
} else {
  if (e.position === o.GAMEMASTER_PADAWAN) {
    i += '(<span class="position gma">' + n("ui.common.gameMasterAssistant") + "</span>)";
  } else {
    if (e.position === o.GAMEMASTER) {
      i += '(<span class="position gm">' + n("ui.common.gameMaster") + "</span>)";
    } else {
      e.position === o.ADMIN && (i += '(<span class="position admin">' + n("ui.common.administrator") + "</span>)");
    }
  }
}
if (window.gui.chat.active) {
  window.gui.chat.deactivate();
} else {
  window.gui.chat.activate();
}
if (e.skillId === p.UPGRADING) {
  u.open("legendaryWeaponUpgradingWindow");
} else {
  e.skillId === p.SHATTER && u.open("legendaryWeaponShatterWindow");
}
if (e === n.NO) {
  s.refuse && s.refuse();
} else {
  if (e === n.IGNORE) {
    s.ignore && s.ignore();
  } else {
    s.confirm && s.confirm();
  }
}
if (u) {
  t();
} else {
  i();
}
if ("object" == typeof e) {
  o.appendChild(e);
} else {
  o.setHtml(e.toString());
}
if (u.autoGpsFlags) {
  this.addAllFollowedQuestsObjectives();
} else {
  this._removeAllPois(), this._scheduleRendering();
}
if (n) {
  n.followSpouse && e.addOrUpdateSpouse(n.spouseName, n.mapId);
} else {
  t.once("SpouseInformationsMessage", function (t) {
    n = t.spouse;
    n.followSpouse && e.addOrUpdateSpouse(n.spouseName, n.mapId);
  });
}
if (n && n !== e) {
  i.gui.openConfirmPopup({
    title: d("ui.server.confirmPreferredServerTitle"),
    message: d("ui.server.confirmPreferredServerMessage"),
    cb: function (i) {
      if (i) {
        t._continueSelectServer(e);
      } else {
        u.goBackToSelectionOf("server");
      }
    }
  });
} else {
  t._continueSelectServer(e);
}
if (this.serversWithMyCharacter.length > 0) {
  c.open("serverSelection", this.serversWithMyCharacter);
} else {
  c.open("serverSimpleSelection", this.serversRawData);
}
if (e === this._rows.length) {
  this.content.appendChild(n);
} else {
  n.insertBefore(this._rows[e]);
}
if (d instanceof o) {
  c.appendChild(d);
} else {
  void 0 !== d && null !== d || (d = ""), c.setHtml(d.toString());
}
if (r) {
  a = e[l];
} else {
  a = e[c], n[c] = a;
}
if (i.openState && t === n) {
  g.close(e);
} else {
  g.open(e, {
    tabId: t
  });
}
if (g.getWindow("bidHouseShop").openState) {
  g.close("bidHouseShop");
} else {
  s.openBidHouse(!1);
}
if (o < w) {
  t("Bag");
} else {
  o >= w && i("Bag");
}
if ("Carac" === t) {
  s = "Characteristics";
} else {
  if ("Goultine" === t) {
    s = "Shop";
  } else {
    if ("Conquest" === t) {
      s = "Koliseum";
    } else {
      if ("Book" === t) {
        s = "Quests";
      } else {
        "Bag" === t && (s = "Equipment");
      }
    }
  }
}
if (o.action) {
  o.action();
} else {
  n(o.windowId, o.tabId);
}
if (window.gui.ipadRatio) {
  e.x = (y + 1) * (t % this._iconsPerLine), e.y = (y + 2) * Math.floor(t / this._iconsPerLine);
} else {
  e.x = (y + 4) * Math.floor(t / this._iconsPerColumn), e.y = y * (t % this._iconsPerColumn);
}
if (window.gui.ipadRatio) {
  this._iconsPerLine = this._sizeInIcons, this._iconsPerColumn = Math.ceil(C.length / this._iconsPerLine), this.setStyles({
    top: "",
    right: "",
    bottom: 0,
    left: l.posMenuBar + "px",
    width: l.menuBarSize + "px",
    height: l.bottomBarHeight + "px"
  }), this._icons.setStyle("height", y * this._iconsPerColumn + M[t] + "px"), this._icons.setStyle("width", y * this._iconsPerLine + "px"), e = "top";
} else {
  this._iconsPerColumn = this._sizeInIcons, this._iconsPerLine = Math.ceil(C.length / this._iconsPerColumn), this.setStyles({
    bottom: "",
    left: "",
    top: l.posMenuBar + "px",
    right: 0,
    width: l.sideBarWidth + "px",
    height: l.menuBarSize + "px"
  }), this._icons.setStyle("width", y * this._iconsPerLine + M[t] + "px"), e = "left";
}
if (e) {
  e instanceof Array || (e = [e]);
} else {
  e = "all";
}
if (e) {
  e instanceof Array || (e = [e]);
} else {
  e = "all";
}
if (n.getCurrentDrawerSize() >= n.getCurrentContentSize()) {
  n.setAsAlwaysOpen(!0), i.hide();
} else {
  n.setAsAlwaysOpen(!1), i.show();
}
if (n.isOpen) {
  n.close();
} else {
  n.open();
}
if (t * this._direction <= 0) {
  t = 0;
} else {
  t * this._direction > this._contentSize - this._visibleSize && (t = (this._contentSize - this._visibleSize) * this._direction);
}
if (t * this._direction >= 0) {
  t = 0;
} else {
  t * this._direction < this._visibleSize - this._contentSize && (t = (this._visibleSize - this._contentSize) * this._direction);
}
if (o) {
  this._open(!0);
} else {
  this._close(!0);
}
if (window.gui.ipadRatio) {
  this.setStyles({
    bottom: 0,
    top: "",
    right: "",
    left: s.posMainControlBar + "px",
    width: s.mainControlBarSize + "px",
    height: s.bottomBarHeight + "px"
  }), e = "top";
} else {
  this.setStyles({
    bottom: "",
    top: s.posMainControlBar + "px",
    right: 0,
    left: "",
    width: s.sideBarWidth + "px",
    height: s.mainControlBarSize + "px"
  }), e = "left";
}
if (e) {
  this._changeButtonPosition("monsterInfoButton", "showFightsButton");
} else {
  this._changeButtonPosition("monsterInfoButton", "nicknamesButton");
}
if (e) {
  _.turnOff(), t._tacticalModeBtn.delClassNames("on"), h.setValue("tacticModeEngaged", !1);
} else {
  _.turnOn(), t._tacticalModeBtn.addClassNames("on"), h.setValue("tacticModeEngaged", !0);
}
if (e) {
  window.actorManager.turnNicknamesOff();
} else {
  window.actorManager.turnNicknamesOn();
}
if (this._shieldPoints > 0) {
  this._addShieldColor();
} else {
  this._removeShieldColor();
}
if (this._shieldPoints > 0) {
  this.lifePointsNumber.setHtml(this._lifePoints + "<br>" + this._shieldPoints);
} else {
  this.lifePointsNumber.setHtml(this._lifePoints);
}
if (e > s) {
  this.setClassNames(["networkIndicator", "bad"]), console.debug("Current server lag is bad:", e);
} else {
  if (e > r) {
    this.setClassNames(["networkIndicator", "slow"]);
  } else {
    this.setClassNames(["networkIndicator", "good"]);
  }
}
if (e && m.isFightMode) {
  o();
} else {
  r();
}
if (e.isReady) {
  e.hideGraphics(), e.hideStatedElements(), window.background.hide(), a(), s(), _.show(), g.show();
} else {
  e.once("ready", o);
}
if (s.x0 > n) {
  n = s.x0, this._createBox(a, o ? i : t);
} else {
  n = 0, o = !o, this._createBox(a, o ? i : t);
}
if (t.wuidom) {
  a.createChild("div", {
    className: "dialogText"
  }), a.appendChild(t.wuidom);
} else {
  a.createChild("div", {
    className: "dialogText",
    text: t.text
  });
}
if (null !== e) {
  window.dofus.sendMessage("NpcDialogReplyMessage", {
    replyId: this.replyIds[e]
  });
} else {
  this._closeDialog();
}
if (e) {
  this._zoomOnActor(this._showLockedBubble);
} else {
  this._showLockedBubble();
}
if (t) {
  this.inDialog || (this.actor = window.actorManager.getActorFromNpcId(e.id), this._zoomOnActor());
} else {
  this._restoreZoom();
}
if ("string" == typeof e) {
  e = e.replace(I, "").toString(), e || (e = "0");
} else {
  e = e.toFixed();
}
if (t) {
  this.keyMap[e].enable();
} else {
  this.keyMap[e].disable();
}
if (n) {
  n.memberData = t, this.updateMember(i.type, t);
} else {
  this.addMember(i.type, t);
}
if (this.numParties > 0) {
  this._selectPartyType(o(e));
} else {
  this.hide();
}
if (o) {
  o.addClassNames("following");
} else {
  console.error(new Error("Cannot find the new child " + e.followedId));
}
if (e) {
  e.numAsked < 4 && !e.isNeverAsk && h.open("ratingWindow");
} else {
  this.characterBaseInformations.level >= 40 && h.open("ratingWindow");
}
if (t.current) {
  t.current.setInfo(e.allianceInfo);
} else {
  t.current = o.createAlliance(e.allianceInfo);
}
if (t.current) {
  t.current.setInfo(i);
} else {
  t.current = o.createAlliance(i);
}
if ("PrismGeolocalizedInformation" === l._type && "AllianceInsiderPrismInformation" === l.prism._type) {
  l.prism.alliance = t.current, a[l.subAreaId] = l, n.push(l);
} else {
  a[l.subAreaId] && (delete a[l.subAreaId], o.push(l.subAreaId));
}
if (void 0 === r) {
  i = s, this._gidByUid[a] = o;
} else {
  i = s - r;
}
if (n) {
  this._countByGid[n] -= this._countByUid[i], 0 === this._countByGid[n] && delete this._countByGid[n], delete this._countByUid[i], delete this._gidByUid[i];
} else {
  console.error("Invalid UID: " + i);
}
if (t || 0 === i) {
  n = o("ui.pvp.doUAttack", a);
} else {
  if (2 === i) {
    n = o("ui.pvp.doUAttackNeutral");
  } else {
    if (i === -1) {
      n = o("ui.pvp.doUAttackNoGain", a);
    } else {
      1 === i && (n = o("ui.pvp.doUAttackBonusGain", a));
    }
  }
}
if ("CRAFTER" === this.craftSide && "craftInventory" !== e) {
  window.dofus.sendMessage("ExchangeObjectUseInWorkshopMessage", {
    objectUID: o,
    quantity: i
  });
} else {
  window.dofus.sendMessage("ExchangeObjectMoveMessage", {
    objectUID: o,
    quantity: i
  });
}
if (c) {
  a[l] = c;
} else {
  console.warn("JobsData: No data for skillId", l);
}
if (n) {
  t.categoriesTotalPercentage[n] = t.categoriesTotalCurrentAchievementCount[n] / t.categoriesTotalAchievementCount[n];
} else {
  t.categoriesTotalPercentage[o] = t.categoriesTotalCurrentAchievementCount[o] / t.categoriesTotalAchievementCount[o];
}
if (0 === e.parentId) {
  i > 0 && (t.categoriesTotalAchievementCount[e.id] ? t.categoriesTotalAchievementCount[e.id] += i : t.categoriesTotalAchievementCount[e.id] = i, t.categoriesAchievementCount[e.id] = i, t.categories[e.id] = e.achievementIds);
} else {
  t.categoriesTotal[e.parentId] ? t.categoriesTotal[e.parentId].push(e.id) : t.categoriesTotal[e.parentId] = [e.id], t.categoriesTotalAchievementCount[e.parentId] ? t.categoriesTotalAchievementCount[e.parentId] += i : t.categoriesTotalAchievementCount[e.parentId] = i, t.subCategoriesAchievementCount[e.id] = i, t.subCategories[e.id] = e.achievementIds;
}
if (n) {
  n.forEach(function (n) {
    t.finishedAchievementsIds.indexOf(n) !== -1 && (t.subCategoriesCurentAchievementCount[i]++, t.categoriesTotalCurrentAchievementCount[e]++);
  }), t.subCategoriesPercentage[i] = t.subCategoriesCurentAchievementCount[i] / t.subCategoriesAchievementCount[i];
} else {
  console.error("getCategoryPercentage : Cannot get sub category ID ", i);
}
if ("MapComplementaryInformationsWithCoordsMessage" === e._messageType) {
  i(e, {
    worldX: e.worldX,
    worldY: e.worldY
  });
} else {
  if ("MapComplementaryInformationsDataInHouseMessage" === e._messageType) {
    i(e, e.currentHouse);
  } else {
    i(e);
  }
}
if (e.accepted) {
  t.nbArenaFigthersReady++, t.emit("arenaFighterReady", t.nbArenaFigthersReady);
} else {
  t.emit("arenaFightDeclined", e.fightId, e.playerId);
}
if (s.dbQuest) {
  c.updateQuestObjectives(s, function (t) {
    return t ? i(t) : (e.emit("questUpdate", s.questId), void i());
  });
} else {
  c.initializeActiveQuests([s], function (t, n) {
    return t ? i(t) : (r = n[a].dbQuest.repeatType === m ? e.dailyQuests : e, a === f ? (e.dailyQuests.mainQuest = n[a], e.emit("mainDQStarted", a)) : n[a].dbQuest.repeatType === m ? (e.dailyQuests.active[a] = e.dailyQuests.all[a] = n[a], e.emit("DQStarted", a), e._pendingDailyQuest === a && (delete e.dailyQuests.all[e._pendingOldDaily], delete e.dailyQuests.active[e._pendingOldDaily], e.emit("rerollDQ", {
      oldDQId: e._pendingOldDaily,
      newDQId: a
    }), e._pendingOldDaily = 0, e._pendingDailyQuest = 0)) : (e.active[a] = e.all[a] = n[a], e.emit("questStarted", a)), o(window.gui.chat, s, !!e.dailyQuests.all[a], r), void i());
  });
}
if (e.dailyQuests.all[t.questId]) {
  a = e.dailyQuests, e.emit("DQFinished", t.questId);
} else {
  t.questId !== f && (e.emit("QuestFinished", t.questId), a = e);
}
if ("getText" === T.type) {
  a(v, s, b);
} else {
  "table" === T.type && o(g, v, y, s, b, T);
}
if (this.alignmentInfos) {
  r.preloadImage(this._imagePaths[this.alignmentInfos.alignmentSide], e);
} else {
  r.preloadImage(this._imagePaths[0], e);
}
if (e > 0 && e <= 50) {
  i += p;
} else {
  e > 50 && e <= 100 && (i += m);
}
if (50 === e) {
  i += f;
} else {
  100 === e && (i += g);
}
if (e.current.scoreStageList) {
  t.steps.forEach(function (t) {
    for (var i = !1, n = 0; n < e.current.scoreStageList.length; n++) if (e.current.scoreStageList[n].stageLevel === t.stageLevel) {
      e.current.scoreStageList[n] = t;
      i = !0;
      break;
    }
    i || e.current.scoreStageList.push(t);
  });
} else {
  e.current.scoreStageList = t.steps, e.current.scoreStageList.sort(function (e, t) {
    return e.stageLevel > t.stageLevel ? 1 : -1;
  });
}
if (i) {
  this.alreadyOpenedPopup = !0, this._displayMarketingPopup(i);
} else {
  this._processPopupsWithTriggers();
}
if ("RECEIPT_ALREADY_VALIDATED" === e.reason) {
  A(e.iapKey, e.orderId, function () {
    H();
  });
} else {
  H(), window.gui.openSimplePopup(ee("tablet.shop.validateIAPFail"));
}
if ("android" === t.platform) {
  console.error("[Haapi info] ShopWindow sending shopMobileValidateOrderRequest with data: " + JSON.stringify({
    orderId: e,
    receipt: i,
    iapKey: n
  }));
} else {
  console.error("[Haapi info] ShopWindow sending shopMobileValidateOrderRequest with data: " + JSON.stringify({
    orderId: e,
    iapKey: n
  }));
}
if (X) {
  if (o) {
    K.trackIAPBought(i, o._parsedPrice, X.currency, n), "com.ankama.dofustouchnext.starterpackalbueraios" !== i && "com.ankama.dofustouch.starterpackalbueraios" !== i && "com.ankama.dofustouchnext.starterpackalbueraandroid" !== i && "com.ankama.dofustouch.starterpackalbueraandroid" !== i || re.sendTagAlbueraStarterPackBought();
  } else {
    console.error(new Error("Could not send event to Adjust, no product found for key: " + i));
  }
} else {
  console.error(new Error("Could not send event to Adjust, store infos are no longer available"));
}
if (e === ce.GOULTINES_RESTRICTION) {
  window.gui.openSimplePopup(ee("tablet.shop.goultinesRestriction"));
} else {
  if (e === ce.COUNTRY_COHERENCE_RESTRICTION) {
    window.gui.openSimplePopup(ee("ui.error.countryCoherenceRestriction"));
  } else {
    if (e === ce.FRAUD_DETECTED) {
      window.gui.openSimplePopup(ee("ui.error.fraudDetected"));
    } else {
      window.gui.openSimplePopup(ee("tablet.shop.buyFail"));
    }
  }
}
if ("android" === e.platform) {
  console.error("[Haapi info] ShopWindow sending shopMobileValidatePendingOrderRequest with data: " + JSON.stringify({
    receipt: t,
    iapKey: i
  }));
} else {
  console.error("[Haapi info] ShopWindow sending shopMobileValidatePendingOrderRequest with data: " + JSON.stringify({
    iapKey: i
  }));
}
if ((r = u.search(/e/i)) > 0) {
  s < 0 && (s = r), s += +u.slice(r + 1), u = u.substring(0, r);
} else {
  s < 0 && (s = u.length);
}
if ((s = u.indexOf(".")) > -1) {
  u = u.replace(".", "");
} else {
  s = u.length;
}
if (e.e > B) {
  e.c = e.e = null;
} else {
  e.e < P && (e.c = [e.e = 0]);
}
if (T[0]) {
  T[C++] = O[A] || 0;
} else {
  T = [O[A]], C = 1;
}
if (s) {
  h.c.length > s && (h.c.length = s);
} else {
  o && (h = h.mod(i));
}
if (s) {
  m.c && m.c.length > s && (m.c.length = s);
} else {
  o && (m = m.mod(i));
}
if (t.id === o) {
  e._animate(i);
} else {
  e._setStatic(), e._setPercentage(0);
}
if (null !== i) {
  this._animate(i, n);
} else {
  this._setStatic(), this._setPercentage(n);
}
if (window.gui.ipadRatio) {
  this.setStyle("width", "100%");
} else {
  this.setStyle("width", s.shortcutBarSize - 9 + "px");
}
if (window.gui.ipadRatio) {
  this._chatIcons.setPanelsStyle("right", "auto"), this._chatIcons.setPanelsStyle("left", r.pingEmoteBtnSize + "px"), this._chatIcons.setPanelsStyle("bottom", this._emoteBoxSize + "px"), this.setStyle("left", l.CHAT_BTN_MIN_WIDTH + "px"), this.setStyle("width", r.pingEmoteBtnSize + "px"), this.setStyle("height", this._emoteBoxSize + "px"), this.setStyle("bottom", r.bottomBarHeight + "px"), this.setStyle("line-height", "inherit");
} else {
  this._chatIcons.setPanelsStyle("left", "auto"), this._chatIcons.setPanelsStyle("right", this._emoteBoxSize + "px"), this._chatIcons.setPanelsStyle("bottom", r.pingEmoteBtnSize + "px"), this.setStyle("left", r.mapRight - this._emoteBoxSize + "px"), this.setStyle("width", this._emoteBoxSize + "px"), this.setStyle("height", r.pingEmoteBtnSize + "px"), this.setStyle("bottom", "0px"), this.setStyle("line-height", r.pingEmoteBtnSize + "px");
}
if (window.gui.ipadRatio) {
  c.tween(this, {
    webkitTransform: "translate3d(0, " + this._emoteBoxSize + "px, 0)"
  }, {
    time: this._time,
    delay: this._delay,
    easing: this._easing
  }, function () {
    e.setStyle("visibility", "collapse");
    e.isOpen = !1;
  });
} else {
  c.tween(this, {
    webkitTransform: "translate3d(" + this._emoteBoxSize + "px, 0, 0)"
  }, {
    time: this._time,
    delay: this._delay,
    easing: this._easing
  }, function () {
    e.setStyle("visibility", "collapse");
    e.isOpen = !1;
  });
}
if ("smileys" === e.openPanel) {
  e.closePanels();
} else {
  e.openSmileys(), e.emit("activated");
}
if ("attitudes" === e.openPanel) {
  e.closePanels();
} else {
  e.openAttitudes(), e.emit("activated");
}
if (r) {
  if (i._autoAssign) {
    i.assignGift(a, window.gui.playerData.id), i._autoAssign = !1;
  } else {
    i._toaRetryPending.push(a);
  }
} else {
  t.push(o);
}
if (t.spellShortcuts) {
  e._setPanelContentRequest("spell", t.spellShortcuts);
} else {
  e._emptyPanel("spell");
}
if (o.isBehaviourEnabled(L.ORGANIZE_BTN)) {
  e._organizeBtn.enable();
} else {
  e._organizeBtn.disable();
}
if (t instanceof N || t instanceof E) {
  e._selectedSlot = t;
} else {
  null === t && (e._selectedSlot = null);
}
if (this.overlay) {
  this.overlay.toggleDisplay(!e);
} else {
  this.overlay = this.content.createChild("div", {
    className: "overlay",
    hidden: e
  });
}
if (window.gui.ipadRatio) {
  this.setStyles({
    top: "",
    right: "",
    left: u.posShortcutBar + "px",
    bottom: "0px",
    width: u.shortcutBarSize + "px",
    height: u.bottomBarHeight + "px"
  }), e = u.shortcutBarSize - 75, this._columns = Math.floor(e / D), this._lines = Math.ceil(P / this._columns), t = this._lines * D + 8, this.setOpeningSide("top"), i.setSwipeDirection("horizontal"), n.setSwipeDirection("horizontal"), this._trashZone.setStyle("width", e + "px"), this._buttonBox.appendChild(this._organizeBtn), this._buttonBox.appendChild(this._pagination), this._pagination.setDirection("horizontal");
} else {
  this.setStyles({
    bottom: "",
    left: "",
    right: "0px",
    top: u.posShortcutBar + "px",
    width: u.sideBarWidth + "px",
    height: u.shortcutBarSize + "px"
  }), t = u.shortcutBarSize - 29, this._lines = Math.floor(t / D), this._columns = Math.ceil(P / this._lines), e = this._columns * D + 13 + 30, this.setOpeningSide("left"), i.setSwipeDirection("vertical"), n.setSwipeDirection("vertical"), this._trashZone.setStyle("height", t + "px"), this._panelBox.appendChild(this._organizeBtn), this._panelBox.appendChild(this._pagination), this._pagination.setDirection("vertical");
}
if (window.gui.ipadRatio) {
  t = s % this._columns, i = Math.floor(s / this._columns), n = t * D, o = i * D;
} else {
  t = s % this._lines, i = Math.floor(s / this._lines), n = i * D, o = t * D;
}
if (a.isEmpty()) {
  t._removeShortcutClient(i, o);
} else {
  t._setShortcutClient(s);
}
if (o.isEmpty()) {
  o.image && o.setImage();
} else {
  o.unset();
}
if (d) {
  (p.isEmpty() || p.getShortcutHash() !== d.getHash()) && (p.setShortcut(d), a(p, u));
} else {
  p.isEmpty() || (p.unset(), s(p, u));
}
if (this.isEmpty()) {
  e = !1;
} else {
  !e && "spell" === this.type && window.gui.fightManager.isInBattle() && (e = !0);
}
if (o !== n) {
  this._domElements.points.range.setText(" - " + o);
} else {
  this._domElements.points.range.clearContent();
}
if (i > 0) {
  this._domElements.criticalHit.setText(I("ui.common.short.CriticalHit") + I("ui.common.colon") + "1/" + i);
} else {
  this._domElements.criticalHit.clearContent();
}
if (i > 0 && n > 0 && this._domElements.criticalHit.isVisible()) {
  this._domElements.criticalReal.setText(I("ui.itemtooltip.itemCriticalReal", "1/" + n));
} else {
  this._domElements.criticalReal.clearContent();
}
if (t.length) {
  this._domElements.areaOfEffect.setText(I("ui.common.spellArea") + I("ui.common.colon") + t);
} else {
  this._domElements.areaOfEffect.setText(t);
}
if (0 !== e.getProperty("typeId", t)) {
  this._domElements.breed.setText(I("ui.common.breedSpell") + I("ui.common.colon") + e.getHumanReadableSpellType());
} else {
  this._domElements.breed.clearContent();
}
if (e.getProperty("rangeCanBeBoosted", t)) {
  this._domElements.rangeBoost.setText(I("ui.spell.rangeBoost"));
} else {
  this._domElements.rangeBoost.clearContent();
}
if (!e.getProperty("castTestLos", t) && e.getProperty("range", t)) {
  this._domElements.castWithoutLos.setText(I("ui.spellInfo.castWithoutLos"));
} else {
  this._domElements.castWithoutLos.clearContent();
}
if (e.getProperty("castInLine", t) && !e.getProperty("castInDiagonal", t)) {
  this._domElements.castInLine.setText(I("ui.spellInfo.castInLine"));
} else {
  this._domElements.castInLine.clearContent();
}
if (i > 0) {
  this._domElements.maxCastPerTurn.setText(I("ui.spellInfo.maxCastPerTurn") + I("ui.common.colon") + i);
} else {
  this._domElements.maxCastPerTurn.clearContent();
}
if (i > 0) {
  this._domElements.maxCastPerTarget.setText(I("ui.spellInfo.maxCastPerTarget") + I("ui.common.colon") + i);
} else {
  this._domElements.maxCastPerTarget.clearContent();
}
if (e.getProperty("maxStack", t) > 0) {
  this._domElements.maxStack.setText(I("ui.spellInfo.maxStack") + I("ui.common.colon") + e.getProperty("maxStack", t));
} else {
  this._domElements.maxStack.clearContent();
}
if (e.getProperty("globalCooldown", t) === -1) {
  this._domElements.globalCooldown.setText(I("ui.spellInfo.globalCastInterval"));
} else {
  this._domElements.globalCooldown.clearContent();
}
if (i > 0) {
  this._domElements.initialCooldown.setText(I("ui.spellInfo.initialCastInterval") + I("ui.common.colon") + i);
} else {
  this._domElements.initialCooldown.clearContent();
}
if (t > 0) {
  if (t > Math.PI / 2) {
    this.arrow.addClassNames("bottomLeft");
  } else {
    this.arrow.addClassNames("bottomRight");
  }
} else {
  if (t < -Math.PI / 2) {
    this.arrow.addClassNames("topLeft");
  } else {
    this.arrow.addClassNames("topRight");
  }
}
if (e.emitAtDestination) {
  e.once("atDestination", this._findPositionAppearAndListen.bind(this));
} else {
  this._findPositionAppearAndListen();
}
if (s.data.alive) {
  s.updateNumber(i), i++;
} else {
  s.updateNumber();
}
if (this.selectedFighter === e) {
  this.selectedFighter = null, this.buffList.hide();
} else {
  window.actorManager.selectionIndicatorOn(e), e.picto.addClassNames("selected"), this.selectedFighter = e, this.buffList.open(e);
}
if (e) {
  d.addClassNames("readyForFight");
} else {
  d.delClassNames("readyForFight");
}
if (t.canSayReady) {
  d.enable();
} else {
  d.disable();
}
if (e) {
  t.enable();
} else {
  t.disable();
}
if (0 !== o.parentBoostUid) {
  t.push(o);
} else {
  e.push(o);
}
if (a > 0) {
  this.key = t + "#" + i + "#" + o + "#" + a;
} else {
  this.key = t + "#" + i + "#" + o;
}
if (i > 0) {
  this.setCooldown(i);
} else {
  this.setCooldown(e);
}
if (e === -1) {
  this.cooldownLabel.setText("+"), this.cooldownLabel.show();
} else {
  if (0 === e || e === Number.MAX_VALUE) {
    this.cooldownLabel.setText(""), this.cooldownLabel.hide();
  } else {
    if (e < -1) {
      this.cooldownLabel.setText(d.INFINITE_CHARACTER), this.cooldownLabel.show();
    } else {
      this.cooldownLabel.setText(e), this.cooldownLabel.show();
    }
  }
}
if ((a.isCriticalEffect || !p.effects.length) && p.criticalEffects.length > 0) {
  a.isCriticalEffect = !0;
} else {
  a.isCriticalEffect = !1;
}
if (this.maximizeEffect) {
  f.damage.min = f.damage.max, f.erosionPercent.min = f.erosionPercent.max, f.lifePointsAdded.min = f.lifePointsAdded.max;
} else {
  this.minimizeEffect && (f.damage.max = f.damage.min, f.erosionPercent.max = f.erosionPercent.min, f.lifePointsAdded.max = f.lifePointsAdded.min);
}
if (M || T) {
  m.type = l.TYPE.EROSION, m.erosionLifePoints = M ? this.target.erosionLifePoints : this.caster.erosionLifePoints, m.erosionPercent.normal = v.diceNum;
} else {
  g = s.getMinMaxDamageFromRawEffect(v), this.isGlyph ? m.origin = l.ORIGIN.GLYPH : this.isTrap && (m.origin = l.ORIGIN.TRAP), m.damage.min = g.min + this.spellWeaponCriticalBonus, m.damage.max = g.max + this.spellWeaponCriticalBonus;
}
if (v.effectId === d.ACTION_CHARACTER_DISPATCH_LIFE_POINTS_PERCENT) {
  if (this.target.id !== this.caster.id) {
    m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * C / 100;
  } else {
    m.type = l.TYPE.FIXED, m.damage.normal = v.diceNum * C / 100;
  }
} else {
  if (v.effectId === d.ACTION_FIGHT_LIFE_POINTS_WIN_PERCENT) {
    m.lifePointsAddedBasedOnLifePercent.normal = v.diceNum * I / 100;
  } else {
    g = s.getMinMaxDamageFromRawEffect(v), m.lifePointsAdded.min = g.min + this.spellWeaponCriticalBonus, m.lifePointsAdded.max = g.max + this.spellWeaponCriticalBonus;
  }
}
if (A) {
  T.E = T.E || m && m.indexOf(N) !== -1;
} else {
  T.E = T.E || f && f.indexOf(N) !== -1;
}
if (i.critical) {
  c.damage.convertToCritical(), c.lifePointsAdded.convertToCritical();
} else {
  c.damage.resetCritical(), c.lifePointsAdded.resetCritical();
}
if (h) {
  h.damage.addFromDamage(c.damage), h.lifePointsAdded.addFromDamage(c.lifePointsAdded);
} else {
  c.nameId = u, a.addEffectDamage(c);
}
if (i.random > 0) {
  e.damage.min = e.damage.min > 0 ? Math.min(e.damage.min, i.damage.min) : i.damage.min, e.damage.max = Math.max(e.damage.max, i.damage.max), e.damage.minCritical = e.damage.minCritical > 0 ? Math.min(e.damage.minCritical, i.damage.minCritical) : i.damage.minCritical, e.damage.maxCritical = Math.max(e.damage.maxCritical, i.damage.maxCritical), e.lifePointsAdded.min = e.lifePointsAdded.min > 0 ? Math.min(e.lifePointsAdded.min, i.lifePointsAdded.min) : i.lifePointsAdded.min, e.lifePointsAdded.max = Math.max(e.lifePointsAdded.max, i.lifePointsAdded.max), e.lifePointsAdded.minCritical = e.lifePointsAdded.minCritical > 0 ? Math.min(e.lifePointsAdded.minCritical, i.lifePointsAdded.minCritical) : i.lifePointsAdded.minCritical, e.lifePointsAdded.maxCritical = Math.max(e.lifePointsAdded.maxCritical, i.lifePointsAdded.maxCritical), e.lifePointsAddedBasedOnLifePercent.normal = e.lifePointsAddedBasedOnLifePercent.normal > 0 ? Math.min(e.lifePointsAddedBasedOnLifePercent.normal, i.lifePointsAddedBasedOnLifePercent.normal) : i.lifePointsAddedBasedOnLifePercent.normal;
} else {
  this.updateFromEffectDamage(i);
}
if (h === -1 || h !== n && null !== n) {
  h !== -1 && h !== n && (n = -1);
} else {
  n = h;
}
if (n.indexOf("DA") !== -1) {
  i = M.AIR;
} else {
  if (n.indexOf("DE") !== -1) {
    i = M.EARTH;
  } else {
    if (n.indexOf("DF") !== -1) {
      i = M.FIRE;
    } else {
      if (n.indexOf("DN") !== -1) {
        i = M.NEUTRAL;
      } else {
        n.indexOf("DW") !== -1 && (i = M.WATER);
      }
    }
  }
}
if (t[r]) {
  t[r].lifePointsAdded.addFromDamage(l.lifePointsAdded);
} else {
  t[r] = l;
}
if (e[r]) {
  e[r].damage.addFromDamage(c.damage);
} else {
  e[r] = c;
}
if (e.random > 0) {
  e.lifePointsAdded.min = Math.min(i, e.damage.min * n / 2), e.lifePointsAdded.max = Math.min(i, e.damage.max * n / 2);
} else {
  t.lifePointsAdded.min = Math.min(i, t.lifePointsAdded.min + e.damage.min * n / 2), t.lifePointsAdded.max = Math.min(i, t.lifePointsAdded.max + e.damage.max * n / 2);
}
if (this.sharedDamages.length > 0) {
  this._computeAllSharedDamages(s, r, e);
} else {
  this._computeAllElementaryDamages(s, r);
}
if (w.EFFECTS_IDS.TARGET_EROSION_DAMAGE[P]) {
  U = this.target.lifeLost.clone(), U.applyMultiplier(q), U.addFrom(e.erosionLifePoints), U.addFromDamage(this.target.spellErosionLifePoints), G = n(U, e.erosionPercent, c, I);
} else {
  if (w.EFFECTS_IDS.CASTER_EROSION_DAMAGE[P]) {
    U = this.caster.lifeLost.clone(), U.applyMultiplier(Y), U.addFrom(e.erosionLifePoints), this.target.id === this.caster.id && U.addFromDamage(this.target.spellErosionLifePoints), G = n(U, e.erosionPercent, c, I);
  } else {
    this.target.spellErosionLifePoints.min += G.min * q, this.target.spellErosionLifePoints.max += G.max * q;
  }
}
if (o < n) {
  n = o, i = [e];
} else {
  o === n && i.push(e);
}
if (0 === this._distance) {
  this._angle = Math.atan2(-o.mapWidth, -o.mapHeight);
} else {
  this._angle = Math.atan2(i, t);
}
if (this._markerDom) {
  t = s.MOVE;
} else {
  this._markerDom = new a(this._compass, this._arrowType || this._id, this._tooltip), t = e ? s.APPEAR_CENTER : s.APPEAR;
}
if (this._sameMapMarker) {
  window.gui.mapCoordinateDisplay.removeMarker(this._sameMapMarker), this._sameMapMarker = null;
} else {
  this._compass.removeChild(this);
}
if (0 === this._distance) {
  this._sameMapMarker = window.gui.mapCoordinateDisplay.addMarker(this._type, this._tooltipText);
} else {
  this._compass.appendChild(this);
}
if (t <= -34 && t >= -146) {
  n = (s - Math.tan(Math.PI / 2 - e) * r) / 2, o = 0;
} else {
  if (t >= 34 && t <= 146) {
    n = (s + Math.tan(Math.PI / 2 - e) * r) / 2, o = r;
  } else {
    if (t < 34 && t > -34) {
      n = s, o = (r + Math.tan(e) * s) / 2;
    } else {
      n = 0, o = (r - Math.tan(e) * s) / 2;
    }
  }
}
if (t !== f.questFilterId) {
  e._isQuestFilter = !1;
} else {
  e._isQuestFilter = !0;
}
if (e instanceof r) {
  this.content.appendChild(e);
} else {
  this.content.setText(e);
}
if (e.msgType === r.TEXT_INFORMATION_ERROR) {
  window.gui.chat.logError(e.text, e.msgPriority);
} else {
  window.gui.chat.logMsg(e.text, i[e.msgType], e.msgPriority);
}
if (i.domIsCreated) {
  i._initializeView();
} else {
  i.once("domCreated", i._initializeView);
}
if (i.listUpdateRequested) {
  i.setItemList(i.listUpdateRequested), i.dataHandlerItemList = i.listUpdateRequested, i.listUpdateRequested = null;
} else {
  t.manualReset || i.resetDisplay();
}
if (t.indexOf(e) !== -1) {
  t.splice(t.indexOf(e), 1);
} else {
  console.error(new Error("StorageViewer: remove unknown filter"));
}
if (l) {
  this.displayedSlotCount += 1;
} else {
  this.unSelectSlot(e.objectUID);
}
if (r) {
  this.displayedSlotCount += 1, this._filteredItemList[o] = a;
} else {
  this.unSelectSlot(a.objectUID);
}
if (t || i || n) {
  this._isTagBarHidden = !1;
} else {
  this._isTagBarHidden = !0;
}
if (t.selected) {
  i.currentOpenedWindow.emit("slot-doubletap", t, e.x, e.y);
} else {
  if (t !== i.selectedSlot) {
    i.selectSlot(t), i.currentOpenedWindow.emit("slot-tap", t, e.x, e.y);
  } else {
    i.currentOpenedWindow.tapSelectedEmitsDoubleTap && i.currentOpenedWindow.emit("slot-doubletap", t, e.x, e.y);
  }
}
if (this.selectedSlot !== t) {
  this.selectedSlot && this.selectedSlot.unselect(), t.select(), this.selectedSlot = t;
} else {
  t.unselect(), this.selectedSlot = null;
}
if (t.currentOpenedWindow) {
  t.setItemList(e);
} else {
  t.listUpdateRequested = e;
}
if (e.preset) {
  L.deleteSetButton.enable(), L.saveSetButton.enable();
} else {
  L.deleteSetButton.disable(), L.saveSetButton.disable();
}
if (Object.keys(i).length >= y) {
  L.addSetButton.disable();
} else {
  L.addSetButton.enable();
}
if (t === _.YES) {
  L.saveCustom = !0;
} else {
  e.setItem(i);
}
if (L.setSlotsBox.getChild(t.getWuiName())) {
  i = L.setSlotsBox, L._displaySet(t.preset);
} else {
  if (L.setItemSlotsBox.getChild(t.getWuiName())) {
    i = L.setItemSlotsBox, L.emit("setItemSlotTapped", t);
  } else {
    i = L.setIconsBox;
  }
}
if (i === _.YES) {
  window.dofus.sendMessage("InventoryPresetDeleteMessage", {
    presetId: t.presetId
  }), L.addClassNames("spinner");
} else {
  e.enable();
}
if (this._buttonNo.isVisible() || this.closeButton.isVisible()) {
  this.noAction();
} else {
  if (this._buttonIgnore.isVisible()) {
    this.ignoreAction();
  } else {
    this.yesAction();
  }
}
if (n <= 0) {
  i._buttonYes.setText(i._buttonYesLabel), i._buttonYes.enable(), clearInterval(o);
} else {
  i._buttonYes.setText(i._buttonYesLabel + " (" + n + ")");
}
if (e.level >= R) {
  console.warn(e.message);
} else {
  console.log(e.message);
}
if (t) {
  e.logMessage("Push token: " + t);
} else {
  e.logMessage("No push token.");
}
if (40 === i) {
  t.preventDefault(), e.nextCmd();
} else {
  38 === i && (t.preventDefault(), e.previousCmd());
}
if (a) {
  this.runCommand(n);
} else {
  this.cmdInput.setValue(n);
}
if (n) {
  i._handleEvent(t);
} else {
  f.openUrlInAppBrowser(t);
}
if (this.partyId) {
  this.leaveArenaBtn.enable();
} else {
  this.leaveArenaBtn.disable();
}
if (this.isLeader || !this.leaderId) {
  this.registerBtn.enable(), this.unregisterBtn.enable();
} else {
  this.registerBtn.disable(), this.unregisterBtn.disable();
}
if (e.arenaRegistered) {
  this.registerBtn.hide(), this.unregisterBtn.show();
} else {
  this.registerBtn.show(), this.unregisterBtn.hide();
}
if (t) {
  d.slot = d.appendChild(new u({
    tooltipOptions: {
      longTapExplanation: !0
    }
  })), d.slot.setSpell(t, m), d.appendChild(new c({
    spell: t
  }, f)), d.show();
} else {
  p.error(new Error("Cannot find spell id " + d.spellId + " for breed id " + this.breedData.id));
}
if (this.mountFilterBox) {
  this.mountFilterBox.resetFilters();
} else {
  console.error("_resetDom: mountFilterBox was " + this.mountFilterBox);
}
if (this.equipBox) {
  this._resetDom();
} else {
  this._createDom();
}
if ("equip" === a) {
  this.equipBox.box.appendChild(d), d.addClassNames("equip");
} else {
  this.roomDropZones.appendChild(d), d.addClassNames("room");
}
if (o) {
  delete this.mountDataFromCertifId[n];
} else {
  this.nonLoadedCertifCount--;
}
if (0 === i) {
  n = h("tablet.mount.emptyRoom");
} else {
  i === t && (n = h("tablet.mount.filteredMounts", i));
}
if (t) {
  if (i) {
    this._displayMountDetails(t);
  } else {
    this._selectTile(this.rooms.equip, this.equipBox.tile);
  }
} else {
  i && this._hideMountDetails();
}
if (e === C) {
  t._staminaGauge.setValue(i.stamina, i.staminaMax), t._maturityGauge.setValue(i.maturity, i.maturityForAdult), t._loveGauge.setValue(i.love, i.loveMax), t._serenityGauge.setValue(i.serenity), t.gaugeDiv.delClassNames("partial");
} else {
  t.gaugeDiv.addClassNames("partial");
}
if (e.isReady) {
  this._createDom();
} else {
  e.once("mountFiltersReady", this._createDom.bind(this));
}
if (t) {
  this.selectState(E), window.gui.openContextualMenuAround("generic", this, {
    actions: this.menuActions
  });
} else {
  s.call(this, null);
}
if (t) {
  o.mountFilters.addBehaviorFilter(n, t, !0), o._addFilterButton(n, i), this.setLabel(i), this.selectState(N);
} else {
  this.setLabel(this.emptyLabel), this.selectState(E);
}
if (t) {
  this.selectState(E), window.gui.openContextualMenuAround("generic", this, {
    actions: this.menuActions
  });
} else {
  l.call(this, null);
}
if (e) {
  this.mountFilters.setFilter("name", e.toLowerCase()), this._addFilterButton("searchBox", '"' + e + '"');
} else {
  this.mountFilters.removeFilter("name");
}
if (o.isReversible) {
  n = L;
} else {
  o.isReversed && (n = O);
}
if (0 === n || 3 === n || 2 === n && !s) {
  this.mountFilters.removeFilter("serenity");
} else {
  1 === n && o ? i = 0 : (1 === n && s || 2 === n && !a) && (i = y.GOOD_SERENITY_MAX), 1 === n && a ? t = 0 : (1 === n && s || 2 === n && !o) && (t = y.GOOD_SERENITY_MIN), this.mountFilters.setFilter("serenity", [t, i]);
}
if (t !== S) {
  a = o.getSingleColorMap()[t].colors[0], o.addColorFilter(n, t);
} else {
  i = u, o.addPureColorFilter(n);
}
if (t) {
  this._addFilterButton(e, i.label), void 0 !== i.equal && (this.minFatigue = this.maxFatigue = i.equal), void 0 !== i.min && (this.minFatigue = i.min), void 0 !== i.max && (this.maxFatigue = i.max);
} else {
  this._delFilterButton(e), void 0 === i.min && void 0 === i.equal || (this.minFatigue = 0), void 0 === i.max && void 0 === i.equal || (this.maxFatigue = 100);
}
if (0 !== this.minFatigue || 100 !== this.maxFatigue) {
  this.mountFilters.setFilter("fatigue", [this.minFatigue, this.maxFatigue]);
} else {
  this.mountFilters.removeFilter("fatigue");
}
if (o) {
  l = -1, s = n - 1, r = i - 1;
} else {
  l = 1, s = i, r = n;
}
if (n.options.closable && o === n.curentTabId) {
  n.close();
} else {
  n.openTab(o), r("TAB");
}
if (e === n) {
  this.close();
} else {
  this.openTab(n);
}
if (e > i) {
  this.progressCircle.setValue(0, 1), this.valueElement.setText("0%"), this.labelElt.setText(t ? t : ""), this.delClassNames("spinner"), this.gauge.show(), this.labelElt.show();
} else {
  this.labelElt.hide();
}
if (e) {
  this.refundedValueDom.show(), this.upgradeButton.hide(), this.resetCheckbox.toggleDisplay(this.getRefundedPts() > 0), this.labelDom.rootElement.setAttribute("colspan", 1);
} else {
  this.refundedValueDom.hide(), this.upgradeButton.show(), this.resetCheckbox.hide(), this.labelDom.rootElement.setAttribute("colspan", 2);
}
if (t >= b && e) {
  c.open("deleteCharacterConfirm", {
    id: i,
    name: n,
    secretQuestion: e
  });
} else {
  T.openConfirmPopup({
    title: d("ui.popup.warning"),
    message: d("ui.popup.warnBeforeDelete", n),
    cb: function (e) {
      if (e) {
        var t = u(i + "~000000000000000000");
        window.dofus.sendMessage("CharacterDeletionRequestMessage", {
          characterId: i,
          secretAnswerHash: t
        });
      }
    }
  });
}
if (e.reason === _.DEL_ERR_TOO_MANY_CHAR_DELETION) {
  t = "TooManyDeletion";
} else {
  if (e.reason === _.DEL_ERR_BAD_SECRET_ANSWER) {
    t = "WrongAnswer";
  } else {
    e.reason === _.DEL_ERR_RESTRICED_ZONE && (t = "UnsecureMode");
  }
}
if (e.constructor == String) {
  e = i && "binary" === i.encoding ? a.stringToBytes(e) : n.stringToBytes(e);
} else {
  if (o(e)) {
    e = Array.prototype.slice.call(e, 0);
  } else {
    Array.isArray(e) || (e = e.toString());
  }
}
if (a > 1) {
  a = 1;
} else {
  a < 0 && (a = 0);
}
if (F) {
  window.dofus.sendMessage("InteractiveUseRequestMessage", v);
} else {
  m(c) || window.gui.chat.logMsg(y("ui.chat.calligraphyWronglyDrawn"));
}
if (1 === t.points.length) {
  t.points.push({
    x: U,
    y: q
  }), S(U, q, P, t);
} else {
  !l && c > r && (t.points.push({
    x: U,
    y: q
  }), S(U, q, P, t));
}
if (n < i.min.x) {
  n = i.min.x;
} else {
  n > i.max.x && (n = i.max.x);
}
if (o < i.min.y) {
  o = i.min.y;
} else {
  o > i.max.y && (o = i.max.y);
}
if (n) {
  this._updateItemBox(n);
} else {
  this._itemBox.hide();
}
if (this.myWindow.itemInstance) {
  _.openBidHouse(!0, null, this.myWindow.itemInstance);
} else {
  _.openBidHouse(!1, null, this.myWindow.itemId);
}
if (i[a.id]) {
  r.addClassNames("exotic");
} else {
  if (a.bonusType === -1) {
    r.addClassNames("malus");
  } else {
    1 === a.bonusType && r.addClassNames("bonus");
  }
}
if (e.getProperty("isWeapon")) {
  m(e.getProperty("statsFormatted"), this.panelCollection.characteristics), this.itemInfoTabs.toggleTabDisplay(2, !0);
} else {
  this.itemInfoTabs.toggleTabDisplay(2, !1);
}
if (i.length > 2) {
  this._addedLevel += i[2];
} else {
  this._addedLevel++;
}
if (i.length > 2) {
  this._addedLevel -= i[2];
} else {
  this._addedLevel--;
}
if (!this._hasText && i) {
  this.lblContent.hide(), this.txIllu.setStyles({
    backgroundImage: this._image.src,
    backgroundPosition: "center center",
    width: "100%"
  });
} else {
  this.lblContent.show(), this._lblContentScroller.toggleClassName("small", i), this.txIllu.toggleDisplay(i), i && (t = t.replace(this._image.regExpResult, ""), this.txIllu.setStyles({
    backgroundImage: this._image.src,
    backgroundPosition: "center top",
    width: ""
  })), this.lblContent.appendChild(this._formatLinks(t)), window.setTimeout(function () {
    e._lblContentScroller.refresh();
  }, 0);
}
if (t[0] === p) {
  window.dofus.sendMessage("QuestStartRequestMessage", {
    questId: t[1]
  }), this.close();
} else {
  if (t[0] === m) {
    window.dofus.sendMessage("QuestObjectiveValidationMessage", {
      questId: t[1],
      objectiveId: t[2]
    }), this.close();
  } else {
    t[0] === f && window.gui.emit("CompassUpdateMessage", {
      type: a.COMPASS_TYPE_SIMPLE,
      worldX: ~~t[1],
      worldY: ~~t[2]
    });
  }
}
if (n) {
  e.addEventListener(r.end, function (e) {
    l.openUrlInAppBrowser(t);
    e.preventDefault();
  });
} else {
  e.addEventListener(r.end, function (e) {
    i._linkHandler(t);
    e.preventDefault();
  });
}
if (u.indexOf(g) !== -1) {
  t(d, u.split(",")[1], !0);
} else {
  t(d, u), d.href = "#";
}
if ("insertRule" in e) {
  e.insertRule(t + "{" + i + "}", n);
} else {
  "addRule" in e && e.addRule(t, i, n);
}
if (e) {
  this._updatePageLeft(), this.lblPageNumberRight.setText(this._currentIndex + 2);
} else {
  this._updatePageLeft(), this._updatePageRight();
}
if (!o && i && a(t, e.data)) {
  s(t, e.data);
} else {
  window.gui.playerData.inventory.equipItem(e.data.objectUID, this.position);
}
if (a && a.twoHanded) {
  o.lock();
} else {
  o.itemInstance || o.unset();
}
if (n) {
  this._setSlot(e, n);
} else {
  this._unsetSlot(e);
}
if (n === w.notEquipped) {
  e._unsetSlot(i);
} else {
  e._setSlot(n, t);
}
if (i.isRiding) {
  e._setSlot(w.mount, i.equippedMount);
} else {
  e._unsetSlot(w.mount);
}
if (e.mountLocation) {
  this._itemBox.displayMount(e);
} else {
  this._itemBox.displayItem(e);
}
if ("house" === e) {
  this.roomSelector.show(), this.chestSelector.show(), this.housingAreaSelector.show(), this.skillSelector.show(), this.mountSelector.hide(), this.breedingSelector.hide(), this.paddocksAreaSelector.hide();
} else {
  this.roomSelector.hide(), this.chestSelector.hide(), this.housingAreaSelector.hide(), this.skillSelector.hide(), this.mountSelector.show(), this.breedingSelector.show(), this.paddocksAreaSelector.show();
}
if (this.currentPageIndex <= 1) {
  this.leftButton.disable();
} else {
  this.leftButton.enable();
}
if (this.currentPageIndex >= t.totalPage) {
  this.rightButton.disable();
} else {
  this.rightButton.enable();
}
if (t) {
  T.setValues([_, v, y]), y >= 1 && T.createChild("div", {
    className: "reached100"
  });
} else {
  T.setValues([_, v]);
}
if (this.shouldGetPixelValue) {
  this._tryAndGetPixelValue(this._refresh);
} else {
  this._refresh();
}
if (this.maxValue) {
  e === d && (this.humanValue = t), void 0 !== i ? t = i : t /= this.maxValue;
} else {
  e === d && (this.humanValue = Math.round(100 * t));
}
if (this.shouldGetPixelValue) {
  this._tryAndGetPixelValue(this._refresh);
} else {
  this._refresh();
}
if (0 === i.teamId) {
  n.insertAsFirstChild(o);
} else {
  n.appendChild(o);
}
if (o === d.FIGHT_TYPE_PVP_ARENA) {
  n += " fightType1", r += h("ui.common.koliseum");
} else {
  if (o === d.FIGHT_TYPE_CHALLENGE) {
    n += " fightType2", r += h("ui.fight.challenge");
  } else {
    if (o === d.FIGHT_TYPE_AGRESSION) {
      n += " fightType3", r += h("ui.alert.event.11");
    } else {
      o === d.FIGHT_TYPE_PvT && (n += " fightType3", r += h("ui.spectator.taxcollectorAttack"));
    }
  }
}
if (t.hasGroupMember || i.hasGroupMember) {
  u = b("relation1", h("ui.spectator.isGroup"));
} else {
  if (t.hasFriend || i.hasFriend) {
    u = b("relation2", h("ui.spectator.isFriend"));
  } else {
    (t.hasGuildMember || i.hasGuildMember) && (u = b("relation3", h("ui.spectator.isGuild")));
  }
}
if (l) {
  t.disable();
} else {
  t.enable();
}
if (!e && q && q.fightSpectatorLocked) {
  U.buttonSpectate.disable();
} else {
  U.buttonSpectate.enable();
}
if (i) {
  this.pvpButton.setText(c("ui.pvp.disabled")), this.pvpContainer.delClassNames("disabled"), t.getTopWings(t.alignmentInfos, function (t) {
    p.loadImage(t.imagePath, function (i) {
      e.alignmentWingsContainer.setStyles({
        left: t.left + f + "px",
        top: t.top + g + "px",
        width: t.width + "px",
        height: t.height + "px",
        backgroundImage: 'url("' + i.src + '")'
      });
    });
  }), this.alignmentGrade.setText(t.getAlignmentGradeString()), this.honorPoints.setValue(t.getHonor());
} else {
  this.pvpButton.setText(c("ui.pvp.enabled")), this.pvpContainer.addClassNames("disabled"), this.alignmentWingsContainer.setStyle("backgroundImage", "none"), this.alignmentGrade.setText("-"), this.honorPoints.setValue(0);
}
if (0 === t.alignmentSide) {
  this.rightColumn.addClassNames("disabled"), this.pvpButton.hide();
} else {
  this.rightColumn.delClassNames("disabled"), this.pvpButton.show();
}
if (0 === i.parentId) {
  e.getCategoryPercentage(i.id), t._updateBarsAndPercentages(i.id, null);
} else {
  n.push(i);
}
if (t) {
  o = this.categoriesList.getItem(t), o.sublist && o.sublist.getItem(e).getChild("label").getChild("percentage").setText((100 * n.subCategoriesPercentage[e]).toFixed() + "%");
} else {
  o = this.categoriesList.getItem(e), t = e;
}
if (t.tappedOnMe) {
  e.categoriesList.selectItem("mainProgressBar");
} else {
  e._cleanRightSideContent();
}
if (i.tappedOnMe) {
  e.categoriesList.selectItem(t.parentId);
} else {
  e._cleanRightSideContent();
}
if (n) {
  n.setImage(e[t]);
} else {
  console.warn("Missing icon for achievement #" + t, a[t]);
}
if (o.isSelected) {
  t.achievementsList.selectItem(e);
} else {
  c.isSelected || a.selectItem(c.id), c.sublist.show(), t.openAchievementWithID = e, d.selectItem(n.categoryId);
}
if (this.searchName) {
  s.searchDataMap("Achievements", {
    match: e
  }, function (e, n) {
    return t.hasSearchedName = !0, e ? console.error("AchievementsWindow achievements search", e) : (i(n), void t._searchResult());
  });
} else {
  this.hasSearchedName = !0;
}
if (this.searchDescription) {
  s.searchDataMap("Achievements", {
    match: e,
    matchProp: "descriptionId"
  }, function (e, n) {
    return t.hasSearchedDescription = !0, e ? console.error("AchievementsWindow description search", e) : (i(n), void t._searchResult());
  });
} else {
  this.hasSearchedDescription = !0;
}
if (this.searchObjective) {
  s.searchDataMap("AchievementObjectives", {
    match: e
  }, function (e, n) {
    return t.hasSearchedObjectives = !0, e ? console.error("AchievementsWindow objectives search", e) : (i(n, !0), void t._searchResult());
  });
} else {
  this.hasSearchedObjectives = !0;
}
if (isNaN(w)) {
  console.warn("Failed parsing achievementId of objective.criterion: " + f.criterion);
} else {
  g.achievementID = w, m(g), g.on("tap", a);
}
if (1 === n.maxValue) {
  this.progression.hide(), this.objectivesBox.show();
} else {
  this.progression.show(), this.objectivesBox.hide(), this.progressionText.setText(n.value + "/" + n.maxValue), this.progressionBar.setValue(n.value, n.maxValue);
}
if (1 === n.maxValue) {
  this.progression.hide(), this.objectivesBox.show();
} else {
  this.progression.show(), this.objectivesBox.hide(), this.progressionText.setText(n.maxValue + "/" + n.maxValue), this.progressionBar.setValue(n.maxValue, n.maxValue);
}
if (s[u]) {
  s[u].push(d.id);
} else {
  s[u] = [d.id];
}
if (c <= 1) {
  d.push([g, l[g]]);
} else {
  if (u[c]) {
    u[c].push(g);
  } else {
    u[c] = [g];
  }
}
if (t.more) {
  t.more.show(), this.refresh();
} else {
  e._createMonsterMoreInfo(t);
}
if (a) {
  t.hide();
} else {
  t.show();
}
if (c.dropInfo.dropMinPercent < 2) {
  c.addClassNames("rareDrop");
} else {
  c.dropInfo.dropMinPercent < 10 && c.addClassNames("okDrop");
}
if (y === r) {
  c.push(e[f]);
} else {
  d++, g.areaId !== p && (m = g.areaId);
}
if (void 0 !== this.x) {
  l.open("worldMap", {
    x: this.x,
    y: this.y
  });
} else {
  if (this.subareaId) {
    l.open("worldMap", {
      subarea: this.subareaId
    });
  } else {
    this.subareaIds && l.open("worldMap", {
      subareas: this.subareaIds,
      favorite: this.favorite,
      centerOn: this.centerOn
    });
  }
}
if (this._ornamentIdToSelect) {
  this.tabs.openTab("ornaments"), this.ornamentList.selectItem(this._ornamentIdToSelect);
} else {
  if (this._titleIdToSelect) {
    this.tabs.openTab("titles"), this.titleList.selectItem(this._titleIdToSelect);
  } else {
    this._selectActiveTitleAndOrnament();
  }
}
if (0 !== window.gui.playerData.alignment.alignmentInfos.alignmentGrade) {
  this.warningWings.show();
} else {
  this.warningWings.hide();
}
if (e.isActivePOI(t)) {
  e.removePOI(t, void 0, !0), i._updateQuestFollow(n, !1, !1);
} else {
  e.addQuestObjectiveFromObjective({
    objectiveDb: this.objectiveDb,
    objectiveId: this.objective.objectiveId,
    questId: n
  }), e.questFollower.isQuestFollowed(n) || i._updateQuestFollow(n, !0, !1);
}
if (e[l]) {
  a = !1, r.show();
} else {
  r.hide();
}
if (a) {
  n.hide();
} else {
  n.show();
}
if (n <= this.index) {
  e._displayStepData(i);
} else {
  e._displayUnknownStep(i);
}
if (s) {
  t.hide();
} else {
  t.show();
}
if (R.active[e]) {
  s.delClassNames("completed");
} else {
  s.addClassNames("completed");
}
if (t && !o) {
  n.questFollower.followQuest(e, i);
} else {
  !t && o && n.questFollower.unfollowQuest(e, i);
}
if ("-" === e) {
  a.noFilter = !0;
} else {
  a.filter = parseInt(e, 10);
}
if (this.isVisible()) {
  this._refreshAllContent();
} else {
  this.mustRefreshAll = !0;
}
if (0 === l || 1 === r.getMaxLevel()) {
  o.hide(), s.hide(), t.hide();
} else {
  1 === c ? o.disable() : o.toggleClassName("locked", !n && c <= l), a(r, Math.min(c + 1, r.getMaxLevel())) && c !== r.getMaxLevel() || s.disable();
}
if (null === t) {
  i = null, n = null;
} else {
  i = t.id, n = t.experience ? t.experience.jobLevel : 1;
}
if (t) {
  this.jobSelectSpecialButtons.push(o);
} else {
  this.jobSelectButtons.push(o), o.createChild("div", {
    className: "level",
    name: "level"
  });
}
if (o) {
  d[i].setText(o.nameId);
} else {
  console.error(new Error("JobsWindow: no interactive for id " + n));
}
if (o === n.activeItem) {
  n.deactivate();
} else {
  n.activate(o);
}
if (t.nbCase && t.nbCase < T) {
  e.forEach(function (e) {
    e.ingredientIds.length <= t.nbCase && a.push(e);
  });
} else {
  e.forEach(function (e) {
    a.push(e);
  });
}
if (p) {
  c += " " + p.nameId, t._createIngredientSlot(p, i.quantities[u]), d += 1;
} else {
  console.error("RecipeBox#setupRecipe: ingredientId", h, "from recipeId", t.recipeId, "is missing, just continue");
}
if (t.canChangeName && t.canChangeEmblem) {
  e.modification = "all";
} else {
  if (t.canChangeName) {
    e.modification = "name";
  } else {
    e.modification = "emblem";
  }
}
if (t.canChangeName && t.canChangeEmblem && t.canChangeTag) {
  e.modification = "all";
} else {
  if (t.canChangeName) {
    e.modification = "name";
  } else {
    e.modification = "emblem";
  }
}
if (t) {
  this.selector.select(t.categoryId);
} else {
  console.error("SocialGroupCreationWindow._setEmblem: emblemSymbol is null for symbolId", this.symbolId);
}
if (this.openState) {
  this._setAlliance(e), p.focusWindow("allianceCard");
} else {
  p.open("allianceCard", e);
}
if (this.openState) {
  this._setGuild(e), f.focusWindow("guildCard");
} else {
  f.open("guildCard", e);
}
if (i.bought) {
  t.openPopup({
    title: d("ui.popup.information"),
    message: d("ui.common.houseBuy", e.houseOwner, c.kamasToString(i.realPrice, ""))
  });
} else {
  t.openPopup({
    title: d("ui.popup.information"),
    message: d("ui.common.cantBuyHouse", c.kamasToString(i.realPrice, ""))
  });
}
if (0 === e.realPrice) {
  t.openPopup({
    title: d("ui.popup.information"),
    message: d("ui.common.houseNosell", "'" + i + "'")
  });
} else {
  t.openPopup({
    title: d("ui.popup.information"),
    message: d("ui.common.houseSell", "'" + i + "'", c.kamasToString(e.realPrice, ""))
  });
}
if (o) {
  this.confirmButton.enable();
} else {
  this.confirmButton.disable();
}
if (i >= t.itemInstance.livingObjectLevel) {
  n.unset();
} else {
  n.setImage(e[i]);
}
if (e.livingObjectId && e.objectGID) {
  this.feedButton.enable(), this.dissociateButton.enable();
} else {
  this.feedButton.disable(), this.dissociateButton.disable();
}
if (a) {
  t.itemRecipeBox.getChild("title").setText(l("ui.item.utilityReceipt")), t.recipeBox = new h(a, {
    isMenuOnItemDisabled: !0
  }), t._craftDetails = new _("div", {
    "class": "craftDetails"
  }), t.recipeBox.on("itemTapped", r), t.recipeBox.myWindow = t, t.recipeBox.setupRecipe(function (e) {
    return e ? void console.error(new Error("setupRecipe error: " + e)) : void (t.itemRecipeBox && (t.itemRecipeBox.appendChild(t.recipeBox), t._craftDetails.setText(t.recipeBox.craftDetails), t.itemRecipeBox.appendChild(t._craftDetails)));
  }), t.recipeBox.myWindow = t;
} else {
  if (u) {
    t.itemRecipeBox.getChild("title").setText(l("ui.item.secretReceipt"));
  } else {
    t.itemRecipeBox.getChild("title").setText(l("ui.item.utilityNoReceipt"));
  }
}
if (n) {
  t();
} else {
  e();
}
if (o < 0) {
  t.selectedItemIds.push(i.dbItem.id), this.select();
} else {
  t.selectedItemIds.splice(o, 1), this.unselect();
}
if (I) {
  C = I.possibleEffects;
} else {
  this._logger.error("Missing item", M), C = {};
}
if (S.effect && S.effect.category === r.special) {
  h.push(S);
} else {
  S.effect.showInSet && b.push(S);
}
if (e.item.isChangingCharacterLookWhenEquipped()) {
  this._showHelp(d("tablet.mimicry.helpMerge"));
} else {
  this._showWarning(d("tablet.mimicry.fixedAppearance"));
}
if (n) {
  t.index = n.index;
} else {
  t.index = Object.keys(this.members).length;
}
if (e) {
  t.on("partyInvitationDetails", this.joinPartyHandler), t.on("partyInvitationCancelled", this.closePartyInvitationHandler), t.on("partyLeaderUpdate", this.setLeaderHandler), t.on("partyNewGuest", this.addOrUpdateMemberHandler), t.on("partyNewMember", this.addOrUpdateMemberHandler), t.on("partyUpdateMember", this.addOrUpdateMemberHandler), t.on("partyMemberLeaving", this.removeMemberHandler), t.on("partyGuestLeaving", this.removeMemberHandler);
} else {
  t.removeListener("partyInvitationDetails", this.joinPartyHandler), t.removeListener("partyInvitationCancelled", this.closePartyInvitationHandler), t.removeListener("partyLeaderUpdate", this.setLeaderHandler), t.removeListener("partyNewGuest", this.addOrUpdateMemberHandler), t.removeListener("partyNewMember", this.addOrUpdateMemberHandler), t.removeListener("partyUpdateMember", this.addOrUpdateMemberHandler), t.removeListener("partyMemberLeaving", this.removeMemberHandler), t.removeListener("partyGuestLeaving", this.removeMemberHandler);
}
if (3 === e.status) {
  d.enable();
} else {
  d.disable();
}
if (s) {
  if (r) {
    r.setServer(s), r.show();
  } else {
    o(s, E.length % 2);
  }
} else {
  r && r.hide();
}
if (i.data.isSelectable) {
  Y.enable();
} else {
  Y.disable();
}
if (T) {
  T = !1, G.delClassNames("selected");
} else {
  T = !0, G.addClassNames("selected");
}
if (C) {
  C = !1, U.delClassNames("selected");
} else {
  C = !0, U.addClassNames("selected");
}
if (h <= 0) {
  f.disable();
} else {
  f.enable();
}
if (h >= t.length - d) {
  _.disable();
} else {
  _.enable();
}
if (window.gui.serversData.connectedServerId === u) {
  window.dofus.sendMessage("CharactersListRequestMessage"), r.close(o.id);
} else {
  window.gui.serversData.selectServer(u);
}
if (i < e.charactersCount) {
  o.addClassNames("on");
} else {
  o.delClassNames("on");
}
if (e.isSelectable) {
  this.enable();
} else {
  this.disable();
}
if (this.selectedMapId) {
  i.buttonOk.enable();
} else {
  i.buttonOk.disable();
}
if (c === e.spawnMapId) {
  this.windowTitle.addClassNames("saved");
} else {
  this.windowTitle.delClassNames("saved");
}
if (c === e.spawnMapId) {
  this.windowTitle.addClassNames("saved");
} else {
  this.windowTitle.delClassNames("saved");
}
if (o.target.table.getRows().length <= 0) {
  o.tab.disable();
} else {
  o.tab.enable(), i || (e.openTab(n), i = !0);
}
if ("items" === r) {
  t(e);
} else {
  window.dofus.sendMessage("ExchangeObjectMoveKamaMessage", {
    quantity: e
  });
}
if ("items" === _) {
  e(t);
} else {
  window.dofus.sendMessage("ExchangeObjectMoveKamaMessage", {
    quantity: -t
  });
}
if (this.openState) {
  this._setContent(e, t, i);
} else {
  v.open(this.id, {
    mode: e,
    item: t,
    currency: i
  });
}
if (e === -1) {
  this.averagePrice.setText(c("ui.item.averageprice.unavailable"));
} else {
  this.averagePrice.setText(u.kamasToString(e));
}
if (!t || Date.now() - t.timestamp > w) {
  window.dofus.sendMessage("ExchangeBidHouseListMessage", {
    id: e
  });
} else {
  this._displayMinPrice();
}
if (i >= 100) {
  i = Math.round(i);
} else {
  i >= 10 && (i = Math.round(10 * i) / 10);
}
if (a <= -1) {
  a < -99 && (a = -99), n = " -" + Math.round(-a) + "%";
} else {
  a >= 1 && (n = " +" + Math.round(a) + "%");
}
if (_.getMountInfoFromCertificate(e)) {
  this.mountWindow = T.getWindow("mount"), this.mountWindow.showCertificateMount(e);
} else {
  this._hideMountPreview();
}
if (this.table) {
  this.table.clearContent();
} else {
  this.table = this.tableBox.appendChild(new w(l, "id", {
    scaleOnPress: !0
  }));
}
if (this.isItemSearchable) {
  this.searchDiv.toggleDisplay(!0), this.rowCount.setText("..."), this.rowCount.show(), this.table.sortByColumnId("shortName", "ascending"), this.table.delClassNames("noShortName");
} else {
  this.searchDiv.toggleDisplay(!1), this.table.sortBy && "shortName" === this.table.sortBy.id && this.table.resetSort(), this.table.addClassNames("noShortName");
}
if (i > o) {
  this.buyButton.disable(), this.totalPriceValue.addClassNames("red");
} else {
  this.buyButton.enable(), this.totalPriceValue.delClassNames("red");
}
if ("number" == typeof e) {
  t = e;
} else {
  t = e.getProperty("id"), i = e.getItemInstance();
}
if (n) {
  p.arrangeOpeningWindowVertically(this.id, {
    below: "wallet",
    fullHeight: !0
  });
} else {
  p.positionWindow(this.id, g);
}
if (d) {
  e = n % c || c;
} else {
  if (u) {
    e = n % l || l;
  } else {
    h && (e = n % r || r);
  }
}
if (t._optionButtonsLoaded) {
  t._refreshOptionsButtonsSelections();
} else {
  t._createOptionsButtons(), t._createConquestButton();
}
if (1 === t._worldMap.getDisplayedWorldmapId()) {
  t.conquestButton.show();
} else {
  t.conquestButton.hide();
}
if (e._isConquestListDisplayed) {
  e._conquestPresenter.hideConquestList(), e._isConquestListDisplayed = !1, e.toggleClassName("withoutLeftColumn", !0);
} else {
  e._conquestPresenter.showConquestList(), e._isConquestListDisplayed = !0, e.toggleClassName("withoutLeftColumn", !1);
}
if (3 === this._worldMapId) {
  this._worldMapWidth = n.totalWidth / 2, this._worldMapHeight = n.totalHeight / 2;
} else {
  this._worldMapWidth = n.totalWidth, this._worldMapHeight = n.totalHeight;
}
if (2 * m < u) {
  this._zoomLevels.push(h), u = h, h = m;
} else {
  h = m;
}
if (this._worldMapData) {
  i = this._worldMapData.origineX % e, n = this._worldMapData.origineY % t;
} else {
  console.error(new Error("worldMapData are not ready yet!"));
}
if (this._zoneHighlight.isDisplayed) {
  (this._zoneHighlightTween.starting || this._zoneHighlightTween.playing) && this._zoneHighlightTween.stop(), this._zoneHighlightTween.reset().from({
    x: this._zoneHighlight.x,
    y: this._zoneHighlight.y
  }).to({
    x: i.x,
    y: i.y
  }, 16, W.polyOut, 9).start();
} else {
  this._zoneHighlight.show(), this._zoneHighlight.x = i.x, this._zoneHighlight.y = i.y;
}
if (u > this._worldMapWidth) {
  i = Math.max(this._worldMapWidth - l.fovW * C, 0), n = this._worldMapWidth;
} else {
  i = d, n = u;
}
if (p > this._worldMapHeight) {
  o = Math.max(this._worldMapHeight - l.fovH * C, 0), s = this._worldMapHeight;
} else {
  o = h, s = p;
}
if (void 0 === z) {
  M.push(W), this._chunkBatchIndexes[x] = this._chunkBatchCurrent;
} else {
  this._createChunkGraphic(W);
}
if (n < o) {
  t = 0, a = n;
} else {
  n > g.cropPosition.width - o && (t = g._worldMapWidth, a = g.cropPosition.width - n);
}
if (null === t) {
  f.x = w.x;
} else {
  f.x = t, Math.abs(t - w.x) > v && (v = Math.abs(t - w.x), y = T * (o - a) / o);
}
if (null === i) {
  f.y = w.y;
} else {
  f.y = i, Math.abs(i - w.y) > v && (v = Math.abs(i - w.y), y = T * (o - u) / o);
}
if (l) {
  e.setIcons(l, g._iconsImage), e.displayIcons();
} else {
  if (n) {
    e.displaySubArea();
  } else {
    e.displayCoordinates();
  }
}
if (this.usePrecisionRendering) {
  this.areasToRefresh = [], this.sceneRendering = this.renderer.startTextureUsage(this.r - this.l, this.b - this.t, this.sceneTextureRatio, this.name), this.sceneTextureRatio = this.sceneRendering.width / (this.r - this.l), this.renderingProgram = this.renderer._programFiltering, this.renderingParams = {
    ratio: .15,
    resolution: 250
  }, this.refresh = this._refreshPrecisionRendering, this.render = this._compositePrecisionRendering, this.clear = this._clearPrecisionRendering;
} else {
  this.refresh = this._refresh, this.render = this._composite, this.clear = this._clear;
}
if (this.renderingProgram === this.renderer._programPixelArt) {
  this.renderingProgram = this.renderer._programFiltering;
} else {
  this.renderingProgram = this.renderer._programPixelArt;
}
if (t === -1) {
  this.gameScenes.push(e);
} else {
  console.warn("[animationController.addScene] Scene already in the animation controller");
}
if (t !== -1) {
  this.gameScenes.splice(t, 1);
} else {
  console.warn("[animationController.removeScene] Scene not in the animation controller");
}
if (void 0 === this.iconsPerCategory[i]) {
  this.iconsPerCategory[i] = [e];
} else {
  this.iconsPerCategory[i].push(e);
}
if (s && a) {
  t.push(n);
} else {
  s && e.push(n);
}
if (t === -1) {
  console.error(new Error("[IconCluster.remove] Icon not in cluster: " + e.id));
} else {
  this.icons.splice(t, 1), e.visible && (this.nVisibleIcons -= 1);
}
if (i._worldMapLoaded) {
  t();
} else {
  i._deferredActionQueue.enqueue(t);
}
if (i._worldMapLoaded) {
  t();
} else {
  i._deferredActionQueue.enqueue(t);
}
if (e._worldMapLoaded) {
  e._worldMap.removeIcon(i.id), e._worldMap.addIcon(i, "icon_" + i.gfx);
} else {
  console.error("map not loaded!");
}
if ("PrismGeolocalizedInformation" === n._type) {
  this._activePrisms[n.subAreaId] = n;
} else {
  this._emptyPrisms[n.subAreaId] = n;
}
if ("PrismGeolocalizedInformation" === n._type) {
  (!a || a.mapId !== n.mapId || a.worldX !== n.worldX || a.worldY !== n.worldY || a.subAreaId !== n.subAreaId || a.prism.state !== n.prism.state || a.prism.alliance && n.prism.alliance && a.prism.alliance.allianceTag !== n.prism.alliance.allianceTag) && (this._changingPrisms[n.subAreaId] = n), this._activePrisms[o] = n, delete this._emptyPrisms[o];
} else {
  this._emptyPrisms[o] = n, delete this._activePrisms[o];
}
if (this._worldmap) {
  i();
} else {
  this._deferredActionQueue.enqueue(i);
}
if (this.openState) {
  this.openTab("guild", {
    tabId: t
  }), m.focusWindow(this.id);
} else {
  m.open(this.id, {
    tabId: "guild",
    tabParams: {
      tabId: t
    }
  });
}
if (t.table.hasRow(e)) {
  t.table.selectRow(e);
} else {
  t.table.unSelectRow();
}
if (0 === i && 0 === n) {
  this.conquestsInfo.setText(l("ui.alliance.noArea"));
} else {
  if (i > 0 && 0 === n) {
    this.conquestsInfo.setText(l("ui.alliance.nbAreas", i, i));
  } else {
    if (0 === i && n > 0) {
      this.conquestsInfo.setText(l("ui.alliance.nbVillages", n, n));
    } else {
      this.conquestsInfo.setText(l("ui.alliance.nbAreasAndVillages", i, n, n + i));
    }
  }
}
if (e.remainSeconds > 0) {
  o(e);
} else {
  a(e);
}
if (u.isPlayerFightingFor(n, y.prism, i, w.allies)) {
  e && n === e.id && window.dofus.sendMessage("PrismFightJoinLeaveRequestMessage", {
    subAreaId: i,
    join: !1
  });
} else {
  if (e && 5 === t.fighters[w.allies].length) {
    window.dofus.sendMessage("PrismFightSwapRequestMessage", {
      subAreaId: i,
      targetId: e.id
    });
  } else {
    window.dofus.sendMessage("PrismFightJoinLeaveRequestMessage", {
      subAreaId: i,
      join: !0
    });
  }
}
if (u.isPlayerFightingFor(n, y.taxCollector, i, w.allies)) {
  e && n === e.id && window.dofus.sendMessage("GuildFightLeaveRequestMessage", {
    taxCollectorId: i,
    characterId: n
  });
} else {
  if (e && 5 === t.fighters[w.allies].length) {
    window.dofus.sendMessage("GuildFightTakePlaceRequestMessage", {
      taxCollectorId: i,
      replacedCharacterId: e.id
    });
  } else {
    window.dofus.sendMessage("GuildFightJoinRequestMessage", {
      taxCollectorId: i
    });
  }
}
if (o) {
  a(i[n], o);
} else {
  s(i[n]);
}
if (e.isConnected) {
  window.gui.openContextualMenu("player", {
    playerId: e.characterId,
    accountId: e.accountId,
    playerName: e.name
  });
} else {
  window.gui.openContextualMenu("offlinePlayer", {
    playerId: e.characterId,
    playerName: e.name,
    hoursSinceLastConnection: e.lastConnection
  });
}
if (o.isActivate()) {
  o.activate();
} else {
  o.deactivate();
}
if (o.isActivate()) {
  o.activate();
} else {
  o.deactivate();
}
if (this.connected) {
  window.gui.openContextualMenu("player", {
    playerId: this.id,
    accountId: this.accountId,
    playerName: this.name,
    guildId: window.gui.playerData.guild.current.guildId
  });
} else {
  window.gui.openContextualMenu("offlinePlayer", {
    playerId: this.id,
    playerName: this.name,
    hoursSinceLastConnection: this.hoursSinceLastConnection
  });
}
if (W) {
  k.stateIcon = new r("div", {
    className: ["stateIcon", "smiley"]
  }), M.push(k.stateIcon), T.push("gfx/smilies/" + W.gfxId + ".png");
} else {
  console.error("Smiley " + z + " details are not available, it could not be displayed");
}
if (e.length) {
  this.joinButton.enable();
} else {
  this.joinButton.disable();
}
if (e) {
  this._startEditing();
} else {
  d.showNotification(r("tablet.lockedBy", o(t)), this._editBtn);
}
if (e.length) {
  this.joinButton.enable();
} else {
  this.joinButton.disable();
}
if (g.isPlayerFightingFor(n, y.taxCollector, i, w.allies)) {
  e && n === e.id && window.dofus.sendMessage("GuildFightLeaveRequestMessage", {
    taxCollectorId: i,
    characterId: n
  });
} else {
  if (e && 5 === t.fighters.allies.length) {
    window.dofus.sendMessage("GuildFightTakePlaceRequestMessage", {
      taxCollectorId: i,
      replacedCharacterId: e.id
    });
  } else {
    window.dofus.sendMessage("GuildFightJoinRequestMessage", {
      taxCollectorId: i
    });
  }
}
if (e.remainSeconds > 0) {
  i._updateTimerProgressBar(e);
} else {
  i._clearFightStartTimer(e);
}
if (t) {
  _.focusWindow(t.id);
} else {
  _.createPanel(e, new p(), {
    title: c("ui.social.guildTaxCollectors") + " - " + c("ui.social.guildBoosts"),
    width: 797,
    height: 497
  });
}
if (t) {
  this._rowCounter.setText(s("tablet.firstResults", e.length));
} else {
  this._rowCounter.setText(s("tablet.nResults", e.length));
}
if (e.length) {
  this._table.setPlaceholderText(""), this._table.addList(e, !0, !0);
} else {
  this._table.setPlaceholderText(s("ui.search.noResult"));
}
if (t) {
  e.enable();
} else {
  e.disable();
}
if (o) {
  m.hide(), window.dofus.sendMessage("PaddockSellRequestMessage", {
    price: 0
  });
} else {
  d.close(M.id);
}
if (M.currency === g) {
  e(L, t !== b);
} else {
  e(L, !0);
}
if (e.length > 0) {
  n.table.highlight(0), n.validButton.enable();
} else {
  n.validButton.disable();
}
if (e.open) {
  a.openDialog("spellForget");
} else {
  a.close("spellForget");
}
if (e) {
  this.addClassNames("selected");
} else {
  this.delClassNames("selected");
}
if (this.relookingParams) {
  this._initCharacterForRelooking(e);
} else {
  this._initCharacter(e);
}
if (e.breedId) {
  this._sex = e.sex, a = e.cosmeticId, s = e.breedId;
} else {
  if (this.relookingParams.canRegender) {
    this._sex = o.sex ? re : le;
  } else {
    this._sex = o.sex ? le : re;
  }
}
if (n.canRebreed) {
  t = A("tablet.connection.rebreed"), i = A("tablet.charcrea.titleRebreed");
} else {
  if (n.canRename) {
    t = A("ui.connection.rename"), i = A("ui.charcrea.titleRename");
  } else {
    if (n.canRecolor) {
      t = A("ui.connection.recolor"), i = A("ui.charcrea.titleRecolor");
    } else {
      n.canReface && (t = A("ui.connection.relook"), i = A("ui.charcrea.titleRelook"));
    }
  }
}
if (n.canRebreed) {
  this._stepLayoutSetup(ne);
} else {
  this._stepLayoutSetup(oe);
}
if (i) {
  this.backButton.setText(A("ui.common.cancel"));
} else {
  t && (this.headSexTabs.toggleTabAvailability(re, this._sex === re), this.headSexTabs.toggleTabAvailability(le, this._sex === le), this._selectCurrentHeads(), this.relookingParams ? (this._allowElement(this.headSexTabs, this.relookingParams.canRegender), this._allowElement(this.nameSelector, this.relookingParams.canRename, K), this._allowElement(this.colorTool, this.relookingParams.canRecolor, J), this.createBtn.setText(A("ui.common.validation")), this.backButton.setText(A("ui.common.cancel"))) : (this._selectColor(0, !0), this.backButton.setText(A("ui.common.back"))));
}
if (this._canStepBack()) {
  this._stepLayoutSetup(ne);
} else {
  k.close(this.id), T.backToSelection();
}
if (e) {
  i = 1 + (e - 1) * ce * 2, n = i + 2 * ce - 1, this.loadedHeads[e] = !0;
} else {
  i = 1, n = this.numBreeds * ce * 2;
}
if (i) {
  this._loadColors(i, !0);
} else {
  this._resetColors();
}
if (this.active && i && "function" == typeof i) {
  this.on("tap", i);
} else {
  this.addClassNames("inactive");
}
if (e) {
  this.plainColor.setStyle("display", "block"), this.plainColor.setStyle("background", e.hex), this.plainColor.setStyle("background", "-moz-linear-gradient(top,  #ffffff 0%, " + e.hex + " 14%, " + e.hex + " 85%, " + e.hex + " 85%, #110f0d 100%)"), this.plainColor.setStyle("background", "-webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(14%," + e.hex + "), color-stop(85%," + e.hex + "), color-stop(85%," + e.hex + "), color-stop(100%,#110f0d))"), this.plainColor.setStyle("background", "-webkit-linear-gradient(top,  #ffffff 0%," + e.hex + " 14%," + e.hex + " 85%," + e.hex + " 85%,#110f0d 100%)"), this.plainColor.setStyle("background", "-o-linear-gradient(top,  #ffffff 0%," + e.hex + " 14%," + e.hex + " 85%," + e.hex + " 85%,#110f0d 100%)"), this.plainColor.setStyle("background", "-ms-linear-gradient(top,  #ffffff 0%," + e.hex + " 14%," + e.hex + " 85%," + e.hex + " 85%,#110f0d 100%)"), this.plainColor.setStyle("background", "linear-gradient(to bottom,  #ffffff 0%," + e.hex + " 14%," + e.hex + " 85%," + e.hex + " 85%,#110f0d 100%)");
} else {
  this.plainColor.setStyle("display", "none");
}
if (t.length > 0 && r) {
  this.setValue(n, !1);
} else {
  n = e, this.setValue(n, !1);
}
if (t.length > 0) {
  this.addClassNames("invalid"), this.emit("validationFailed", t);
} else {
  this.delClassNames("invalid"), this.emit("validationPassed");
}
if (e) {
  this.show();
} else {
  this.hide();
}
if (o.isRecipeKnown && !e.keepResultVisible) {
  l._itemResult.hide(), l._craftResultBox._clearProgress(), l.highlightedRecipeId = o.itemToCraft.resultId;
} else {
  l.highlightedRecipeId = null;
}
if (h.playerData.inventory.objects[n.objectUID]) {
  l._mySlotElems.addAndModifySlot(n);
} else {
  l._targetSlotElems.addAndModifySlot(n);
}
if (l._isInAutoCraft) {
  l._buttonMerge.disable();
} else {
  l._restoreMergeStopButtons();
}
if (e !== this.selectedSlot) {
  window.gui.openContextualMenuAround("item", e, {
    item: t
  }), this._selectCurrentSlot(e, i.movedQty > 1 ? "stackMove" : "");
} else {
  this.jobsData.removeItemFromCraft(t.objectUID, i.movedQty);
}
if (n || 0 === n) {
  t = i[n], t.setItem(e);
} else {
  t = i[this._usedSlots], t.setItem(e), this._usedSlots += 1;
}
if (t) {
  this._playerRole.setText(i + " " + u("ui.common.short.level") + " " + t);
} else {
  this._playerRole.setText(u("ui.craft.client"));
}
if (t) {
  c.playerData.id === e.id && (i.setText(a("ui.common.cancel")), o._restoreMergeStopButtons());
} else {
  i.setText(a("ui.common.merge")), o._isReady = !1;
}
if (window.gui.playerData.id === o) {
  e(window.gui.playerData.characterBaseInformations.entityLook);
} else {
  window.dofus.sendMessage("ContactLookRequestByIdMessage", {
    contactType: r.SOCIAL_CONTACT_CRAFTER,
    playerId: t.playerInfo.playerId
  });
}
if (this.isInAutoCraft) {
  this.jobsData.startCombining();
} else {
  this.jobsData.stopCombining();
}
if (e) {
  this.itemPlaceholder.setText(null);
} else {
  this.itemPlaceholder.setText(this.placeholderText);
}
if (i.magicPoolStatus === r.MAGIC_POOL_INCREASE) {
  d = " +" + s("ui.craft.smithResidualMagic");
} else {
  if (i.magicPoolStatus === r.MAGIC_POOL_LOSS) {
    d = " -" + s("ui.craft.smithResidualMagic");
  } else {
    a = a.substring(0, a.length - 1);
  }
}
if (this.isCrafter) {
  this._setEnableCraftingBox(t), this._setEnableIngredientsBag(t), i = e ? "tablet.craftHelp.magicMultiCrafter2" : "tablet.craftHelp.magicMultiCrafter1";
} else {
  this._setEnableCraftingBox(!1), this._setEnableIngredientsBag(!t), this.acceptBtn.setEnable(!t), this.stopBtn.setEnable(t), i = e ? "tablet.craftHelp.magicMultiClient2" : "tablet.craftHelp.magicMultiClient1";
}
if (t) {
  this.jobsData.moveItemToCraft(this.droppedItemSource, this.newItemInstance, e);
} else {
  this.jobsData.removeItemFromCraft(this.newItemInstance.objectUID, e);
}
if (i.onlySuccess) {
  t._successPayment.setKama(n);
} else {
  t._normalPayment.setKama(n);
}
if (i.onlySuccess) {
  t._successPayment.addItem(a);
} else {
  t._normalPayment.addItem(a);
}
if (i.onlySuccess) {
  t._successPayment.modifyItem(a);
} else {
  t._normalPayment.modifyItem(a);
}
if (i.onlySuccess) {
  t._successPayment.removeItem(i.objectUID);
} else {
  t._normalPayment.removeItem(i.objectUID);
}
if (e) {
  this.positionInfo = this._positionInfoOnSuccess;
} else {
  this.positionInfo = this._positionInfoNormal;
}
if (t >= e) {
  this._nextBtn.disable();
} else {
  this._nextBtn.enable();
}
if (t <= 1) {
  this._previousBtn.disable();
} else {
  this._previousBtn.enable();
}
if (r) {
  a.setItem(r), a.itemUI.backgroundImage = a.getImage(), a.paymentType = this._paymentType, this._readOnly ? s.disableDrag(a) : s.enableDrag(a);
} else {
  delete a.paymentType, a.unset(), s.disableDrag(a);
}
if (t) {
  e.addFilters([D]);
} else {
  e.removeFilter(D);
}
if ("craftMagus" === R) {
  L = {}, D = i;
} else {
  if ("decrafting" === R) {
    D = n;
  } else {
    L = E.getStorageCraftFilterMap(O, l), D = t;
  }
}
if (e.remote) {
  v._otherCharacterTradeSpace.modifyKama(e.quantity);
} else {
  v._myTradeSpace.modifyKama(e.quantity);
}
if (t) {
  v._otherCharacterTradeSpace.addAndModifyItem(s), v._otherCharacterTradeSpace.blink(p), v._otherCharacterTradeSpace.incrementExchangePodsQty(-d), v._myTradeSpace.incrementExchangePodsQty(d);
} else {
  v._myTradeSpace.addAndModifyItem(s), v._otherCharacterTradeSpace.incrementExchangePodsQty(d), v._myTradeSpace.incrementExchangePodsQty(-d);
}
if (t) {
  v._otherCharacterTradeSpace.removeItem(i), v._otherCharacterTradeSpace.blink(p), v._otherCharacterTradeSpace.incrementExchangePodsQty(a), v._myTradeSpace.incrementExchangePodsQty(-a);
} else {
  v._myTradeSpace.removeItem(i), v._otherCharacterTradeSpace.incrementExchangePodsQty(-a), v._myTradeSpace.incrementExchangePodsQty(a);
}
if (t === g) {
  v._toggleConfirmForMe(i);
} else {
  v._otherCharacterTradeSpace.toggleReady(i);
}
if (e) {
  v._buttonConfirm.disable();
} else {
  v._buttonConfirm.enable();
}
if (n <= 60) {
  this._exchangePodsProgressBar.replaceClassNames(["yellow", "orange", "red"], ["green"]);
} else {
  if (n <= 70) {
    this._exchangePodsProgressBar.replaceClassNames(["green", "orange", "red"], ["yellow"]);
  } else {
    if (n <= 80) {
      this._exchangePodsProgressBar.replaceClassNames(["green", "yellow", "red"], ["orange"]);
    } else {
      this._exchangePodsProgressBar.replaceClassNames(["green", "yellow", "orange"], ["red"]);
    }
  }
}
if (t) {
  p._npcTradeSpace.addAndModifyItem(a), p._npcTradeSpace.blink(u);
} else {
  p._myTradeSpace.addAndModifyItem(a);
}
if (t) {
  p._npcTradeSpace.removeItem(n), p._npcTradeSpace.blink(u);
} else {
  p._myTradeSpace.removeItem(n);
}
if (e.remote) {
  p._npcTradeSpace.modifyKama(e.quantity);
} else {
  p._myTradeSpace.modifyKama(e.quantity);
}
if (a.getCurrentValue) {
  o = a.getCurrentValue();
} else {
  a.gameOptionId && (o = _[a.gameOptionId]);
}
if ("bool" === a.type) {
  s.toggleActivation(o, !0);
} else {
  if ("dropdown" === a.type) {
    s.select(o, !0);
  } else {
    "custom" === a.type && "function" == typeof s.updateVisual && s.updateVisual(o);
  }
}
if (o) {
  e++, s.toggleClassName("odd", e % 2 === 0), null === t && (t = i);
} else {
  this._hideSection(i);
}
if (l.isIOSApp) {
  t = e.schemeiOS;
} else {
  l.isAndroidApp && (t = e.schemeAndroid);
}
if (l > r) {
  this.buyBtn.disable();
} else {
  this.buyBtn.enable();
}
if (m[p] && "1" !== h.quantity) {
  m[p].quantity++;
} else {
  m[p] = {
    slot: t.appendChild(new r({
      tooltip: g.name
    })),
    quantity: parseInt(h.quantity, 10) || 1
  }, f.push(g.id);
}
if ("key" === w) {
  v = c.KEY;
} else {
  if ("infinity" === w) {
    _ = 1 / 0;
  } else {
    y = !0, _ = parseInt(w, 10) || 1;
  }
}
if (I.flag === c.KEY) {
  I.slot.addClassNames("key");
} else {
  if (I.flag === c.GIFT) {
    I.slot.addClassNames("gift");
  } else {
    if (I.quantity === 1 / 0) {
      I.slot.addClassNames("infinity");
    } else {
      if (I.flag === c.CROWN_QTY) {
        I.slot.setQuantity(I.quantity), I.slot.addClassNames("pinkCrownQty");
      } else {
        I.slot.setQuantity(I.quantity), I.slot.addClassNames("pinkQty");
      }
    }
  }
}
if ("banner" === y) {
  this._promoBanner.toggleDisplay(!!I && !c), this._promoBannerOver.toggleDisplay(!1), this._promoBannerFree.toggleDisplay(c), I && (this._clearCountdown(), this.countdown = new m(new Date(e.enddate), function (e, t, n) {
    return e ? console.error(e) : (i._promoBanner.setText(h("tablet.shop.promo.banner", n)), void i._promoBannerFree.setText(h("tablet.shop.promo.banner", n)));
  }, function () {
    return i.rootElement ? (i._promoBannerOver.setText(h("tablet.shop.promo.banner.over")), i._promoBannerFree.setText(h("tablet.shop.promo.banner.over")), i._promoBannerOver.toggleDisplay(!c), void i._promoBanner.toggleDisplay(!1)) : console.error(new Error("articleBox onTimeout: the box is missing " + i.articleId));
  }));
} else {
  if ("corner" === y) {
    this._promoCorner.toggleDisplay(C), this._promoCorner.toggleClassName("promoCorner", !c), this._promoCorner.toggleClassName("promoCornerFree", c), C && this._promoRate.setText(s(e));
  } else {
    "strip" === y && (this._promoStrip.toggleDisplay(C), this._promoStrip.toggleClassName("promoStrip", !c), this._promoStrip.toggleClassName("promoStripFree", c), C && this._promoStrip.setText(s(e)));
  }
}
if (n) {
  e.delClassNames(["unavailable"]), e.currentPriceText.setText(t);
} else {
  e.toggleClassName("unavailable", !t), o ? (e.currentPriceText.setText(h("ui.shop.free")), e.replaceClassNames(["bigPrice"], ["lowPrice"]), e.enable()) : t ? (e.currentPriceText.setText(c.kamasToString(t, "")), t >= p ? e.replaceClassNames(["lowPrice"], ["bigPrice"]) : t < m ? e.replaceClassNames(["bigPrice"], ["lowPrice"]) : e.delClassNames(["lowPrice", "bigPrice"]), e.enable(), i && (a = c.kamasToString(i, ""), e.originalPriceText.setText(a))) : (e.currentPriceText.setText(h("ui.item.averageprice.unavailable")), e.replaceClassNames(["lowPrice"], ["bigPrice"]), e.disable());
}
if ("goultines" === e) {
  this._openGoultinesCategory();
} else {
  "bonuspack" === e && this._openCategory(x);
}
if (h) {
  this._displayItemDetails(this._articleIdToOpen);
} else {
  console.error(new Error("ShopWindow: Cannot find article: " + this._articleIdToOpen));
}
if (o) {
  this._loadCategory(o);
} else {
  this._saveAndExecuteAction(function () {
    i.setSpinnerVisible(!0);
    t._requestPageOfCategory(e, 1);
  });
}
if (a > C) {
  n();
} else {
  this.requestTimeout = window.setTimeout(n, C - a);
}
if ("ARTICLE" === t.type) {
  e.emit("displayItemDetails", t.id);
} else {
  "CATEGORY" === t.type && e.emit("openCategory", t.id);
}
if (a) {
  n.updatePrice(a);
} else {
  console.error(new Error("Article " + o + " missing for an ArticleBox"));
}
if (r) {
  this._banners[a].setStyle("backgroundImage", d(r));
} else {
  s.className && this._banners[a].addClassNames(s.className);
}
if (n) {
  n.addClassNames("spinner"), n.setStyles({
    width: t + "px",
    height: i + "px"
  });
} else {
  console.error(new Error("Cannot find the current banner for page " + this._currentPage));
}
if (n) {
  s = 0 | e;
} else {
  i && (s = 0);
}
if (e) {
  this._loadContent.addClassNames("spinner"), this._loadContent.delClassNames("showArrow");
} else {
  this._loadContent.delClassNames("spinner"), this._loadContent.addClassNames("showArrow");
}
if (e) {
  this._itemsScroll.addClassNames("spinner");
} else {
  this._itemsScroll.delClassNames("spinner");
}
if (a) {
  n.updatePrice(a);
} else {
  console.error(new Error("Article " + o + " missing for an ArticleBox"));
}
if (a === -1) {
  r.push("malus");
} else {
  1 === a && r.push("bonus");
}
if (l && l !== -1) {
  this._firstItemOfSet = i, this._linkToItemSet.show();
} else {
  this._firstItemOfSet = null, this._linkToItemSet.hide();
}
if (n.length) {
  f.generateOutfits(n);
} else {
  f.setLook(o());
}
if (Object.keys(this._purchasesDetails).length <= this._purchasesList.getChildCount()) {
  this._spinner.hide();
} else {
  this._spinner.show();
}
if (n === u.SUCCEEDED) {
  e++;
} else {
  t || n !== u.FAILED || (t = !0);
}
if (this._pendingPurchases.length) {
  this._processNext();
} else {
  this._endProcessing();
}
if (e.canTabBeDisable(r)) {
  s.tab.disable();
} else {
  s.tab.enable();
}
if (i) {
  this._score.delClassNames("unavailable"), this._score.setText(o("ui.common.score") + o("ui.common.colon") + t);
} else {
  this._score.addClassNames("unavailable"), this._score.setText(o("ui.toa.ascensionClosed"));
}
if ("." === o) {
  e.splice(n, 1);
} else {
  if (".." === o) {
    e.splice(n, 1), i++;
  } else {
    i && (e.splice(n, 1), i--);
  }
}
if (e.more) {
  e.more.show(), this.refresh();
} else {
  t._createMonsterMoreInfo(e), this.refresh();
}
if (this._isTutorial) {
  this._shield.model = 1, this._shield.bonusesPerLevel = [{
    effectId: 125,
    descriptionId: "#1{~1~2 to }#2 Vitality",
    bonusRatio: 1
  }], this._updateTutorialShieldInformations(e.itemInstance), e.mode = "shieldTutorial";
} else {
  this._updateShieldInformations(e.itemInstance), e.mode = "shield";
}
if (e.isPreview) {
  e.destroy();
} else {
  e.setText(e.currentStatDescription);
}
if (window.gui.gifts.getToaRetryPendingUid().length) {
  e._message.setText(r("ui.toa.retryOwned"));
} else {
  e._message.setText(r("ui.toa.retryMessage", s.TOA_RETRY_HC_PRICE));
}
if (this._cb) {
  this._cb(e, this._stepNumber);
} else {
  r.error(new Error("ToaRetryPopupLogic: cb is falsy"));
}
if (a > h) {
  n();
} else {
  this.requestTimeout = window.setTimeout(n, h - a);
}
if (e._popupInfo.articleId) {
  u.close("market"), u.open("market", {
    tabId: "shop",
    tabParams: {
      articleId: e._popupInfo.articleId
    }
  }), e._shopRedirection = !0;
} else {
  e._popupInfo.link && m.openUrlInAppBrowser(e._popupInfo.link);
}
if (e.description) {
  this.setStyle("height", f + "px"), this._description.setStyle("height", g + "px"), this._description.show();
} else {
  this.setStyle("height", f - g + "px"), this._description.setStyle("height", 0), this._description.hide();
}
if (window.cordova && window.cordova.InAppBrowser) {
  window.cordova.InAppBrowser.open(n, "_system", "location=yes,hidden=yes");
} else {
  window.open(n, "_system");
}
if (e.isDislikeDofus) {
  e._setUserPref({
    isNeverAsk: !0
  }), e.close();
} else {
  if (e.isLikeDofus) {
    e._setUserPref({
      isNeverAsk: !1
    }), e.close();
  } else {
    e._dislikeDofus();
  }
}
if (e) {
  e.numAsked++;
} else {
  e = {
    isNeverAsk: !1,
    numAsked: 1
  };
}
if (e(r)) {
  s.tab.disable();
} else {
  s.tab.enable();
}
if (o.possibleEffects[0].effectId === a) {
  i.unshift(a);
} else {
  i.push(a);
}
if (d.effectId === r.typeActionId) {
  d.value += l;
} else {
  d.effectId === f.ACTION_GRIND_LEVEL && d.value++;
}
if (e) {
  this.currentLW.displayItem(e), this.currentLW.show(), this.placeHolderLW.setText(null);
} else {
  this.currentLW.hide(), this.placeHolderLW.setText(r("ui.common.selectItem"));
}
if (e) {
  this.upgradedLW.displayItem(e), this.upgradedLW.show(), this.placeHolderUpgradedLW.setText(null);
} else {
  this.upgradedLW.hide(), this.placeHolderUpgradedLW.setText(r("ui.search.noResult"));
}
if (e) {
  this.currentLW.displayItem(e), this.currentLW.show(), this.placeHolderLW.setText(null);
} else {
  this.currentLW.hide(), this.placeHolderLW.setText(r("ui.common.selectItem"));
}
if (d.effectId === l) {
  i.unshift(l);
} else {
  i.push(l);
}
if (t._answer[e - 1]) {
  t._answer[e - 1].addClassNames("disabled");
} else {
  t._answer[e + 1].addClassNames("disabled");
}
if (t === a.ALBUERA_QUEST_ID) {
  e.changeStep(e._getCurrentStep());
} else {
  e.checkCondition(d.NEW_QUEST_START, {
    questId: t
  });
}
if (e instanceof l) {
  this._content.appendChild(e);
} else {
  this._content.appendChild(s.process(e));
}
if (e) {
  this.setStyles({
    left: "",
    right: a.screenWidth - (a.mapLeft + a.mapWidth) + "px"
  });
} else {
  this.setStyles({
    left: d + "px",
    right: ""
  });
}
if (e) {
  this.showLoginForm();
} else {
  this.showGuestForm();
}
if (r._href) {
  h.openUrlInAppBrowser(r._href);
} else {
  console.error("SplashScreenNews: url missing for language", r._language);
}
if (this.isAlreadyGuest) {
  this._createAccount.setText(r("tablet.oldGuest.register")), "guestWithNoNickname" === e ? this._introText.setText(r("tablet.oldGuest.desc.no.nick")) : this._introText.setText(r("tablet.oldGuest.desc", e));
} else {
  this._createAccount.setText(r("tablet.login.createAccount")), this._introText.setText(r("tablet.newGuest.desc"));
}
if (window.Config.disabledFeatures.guest) {
  this._guestLink.toggleDisplay(!1), this._btnVersion.replaceClassNames(["formBtn2"], ["formBtn"]);
} else {
  this._guestLink.toggleDisplay(!0), this._btnVersion.replaceClassNames(["formBtn"], ["formBtn2"]);
}
if (window.developmentMode) {
  this._inputPassword.setValue(window.Config.defaultPassword || "");
} else {
  this._inputPassword.setValue("");
}
if (t._isExpanded) {
  t._retract(), t._boundedBlock && t._boundedBlock.expand();
} else {
  t.expand(), r.log("HUD.Click_on_button", {
    interface_id: "ChangeLog",
    button_id: "BTN_CHANGELOG_OPEN_BEFORE_LOGIN",
    clic_parameter_key: "occurrence",
    clic_parameter_value: ++n,
    clic_type: "Simple_court"
  }, {
    override: !0
  });
}
if (this === t) {
  t._expand();
} else {
  t._retract();
}
if (/alt=/i.test(c)) {
  o = c.substr(4);
} else {
  if (/width=/i.test(c)) {
    a = c.substr(6);
  } else {
    /height=/i.test(c) && (s = c.substr(7));
  }
}
if (/author=/i.test(m)) {
  l = m.substr(7);
} else {
  if (/link=/i.test(m)) {
    c = m.substr(5), M.test(c) || T.test(c) || (c = void 0);
  } else {
    /date=/i.test(m) && (d = Number(m.substr(5)));
  }
}
if (h.getValue().length < 3) {
  g.disable();
} else {
  g.enable();
}
if (o.registerLogic.isParentEmailNeeded()) {
  H.focus();
} else {
  q.focus();
}
if (o.registerLogic.hasGuestAccount()) {
  o.setTitle(r("tablet.oldGuest.register"));
} else {
  o.setTitle(r("ui.login.createAccount"));
}
if (n) {
  o.setTitle(s("tablet.oldGuest.register"));
} else {
  o.setTitle(s("ui.login.createAccount"));
}
if (_.isActivate()) {
  w.enable();
} else {
  w.disable();
}
if (this._state.hasStartedDownloading) {
  this._retryDownloading();
} else {
  this._startDownloading();
}
if (window.gui.fightManager && window.gui.fightManager.isInFight()) {
  this.wholeSessionFightFPS.resetEntries(), this.wholeSessionFightFPS.addEntry(e), 0 === this._lastTimeFightFPS && (this._lastTimeFightFPS = Date.now()), Date.now() - this._lastTimeFightFPS >= d && (this._lastTimeFightFPS = Date.now(), this.lastSecondsAverageFightFPS.resetEntries(), this.lastSecondsAverageFightFPS.addEntry(Math.round(this._lastSecondsFightFPS.getData().average)), this._lastSecondsFightFPS.resetValues()), this._lastSecondsFightFPS.addEntry(e);
} else {
  this.wholeSessionRoleplayFPS.resetEntries(), this.wholeSessionRoleplayFPS.addEntry(e), 0 === this._lastTimeRoleplayFPS && (this._lastTimeRoleplayFPS = Date.now()), Date.now() - this._lastTimeRoleplayFPS >= d && (this._lastTimeRoleplayFPS = Date.now(), this.lastSecondsAverageRoleplayFPS.resetEntries(), this.lastSecondsAverageRoleplayFPS.addEntry(Math.round(this._lastSecondsRoleplayFPS.getData().average)), this._lastSecondsRoleplayFPS.resetValues()), this._lastSecondsRoleplayFPS.addEntry(e);
}
if (v.isFightMode) {
  this.cleanupChallenges(), r.removeScene(this.actorManager);
} else {
  r.addScene(this.actorManager), this.actorManager.userActor.show(), this.clearUserMovementZone(), this.background.deleteAllZones();
}
if (a.length && a[0].actorId >= 0) {
  window.dofus.sendMessage("ObjectUseOnCharacterMessage", {
    characterId: a[0].actorId,
    objectUID: i
  });
} else {
  window.dofus.sendMessage("ObjectUseOnCellMessage", {
    cells: o,
    objectUID: i
  });
}
if (w.isFightMode) {
  this.switchGameContextFight();
} else {
  this.switchGameContextRoleplay();
}
if (s) {
  s.disabledSkills = n.disabledSkills, s.enabledSkills = n.enabledSkills;
} else {
  console.warn("Interactive element id " + n.elementId + " does not exist.");
}
if (o) {
  o instanceof c && (w.isFightMode ? (o.state = -1, o.changeState(1)) : o.changeState ? o.changeState(n.elementState) : o.state = n.elementState);
} else {
  console.warn("stated element not identified:" + n.elementId + ", cellId=" + n.elementCellId);
}
if (a) {
  if (a.changeState) {
    a.changeState(o.elementState);
  } else {
    console.warn("Identified element " + o.elementId + " is not a stated element."), a.state = o.elementState;
  }
} else {
  console.warn("Identified element " + o.elementId + " not found.");
}
if (o._pingHighlight[e]) {
  o._pingHighlight[e].texture = n, o._pingHighlight[e].forceRefresh();
} else {
  n.release();
}
if (s.state === O) {
  l.l |= 1;
} else {
  s.state === R && (l.l &= 254);
}
if (0 === (1 & n)) {
  0 !== (1 & i) && this._removeCell(e, t);
} else {
  0 === (1 & i) && this._addCell(e, t);
}
if (!t && o.template && o.template.exposedSymbols[r.id]) {
  this.animated = !0, o.assignSymbol(r, !1, i);
} else {
  i();
}
if (e.layer < this.layer) {
  i = 0;
} else {
  i = Math.round(e.position), i < 0 ? i = 0 : i > l && (i = l);
}
if (t.layer > this.layer) {
  n = l;
} else {
  n = Math.round(t.position), n < 0 ? n = 0 : n > l && (n = l);
}
if (void 0 !== e && 1 & e.l) {
  t.floor = e.f || 0, t.zone = e.z || 0, t.speed = 1 + (e.s || 0) / 10, t.zone !== C && (T = !1);
} else {
  t.floor = -1, t.zone = -1;
}
if (t[e]) {
  delete t[e];
} else {
  t[e] = !0;
}
if ("H" === r[2]) {
  r[0] += 1;
} else {
  r[1] += 1;
}
if (s.isFightMode) {
  t.stop();
} else {
  t.animate();
}
if (this.texture) {
  this.texture.release(), this.texture = null;
} else {
  console.warn("[Background.clear] Clearing background although no texture was ever set");
}
if (this.displayGrid) {
  this.gridLines.show(), new m(this.gridLines, ["alpha"]).to({
    alpha: 1
  }, 20).start();
} else {
  this.gridLines.hide();
}
if (this.isDebugMode) {
  this.cellIdOverlay.generateOverlay(e);
} else {
  this.cellIdOverlay.clear();
}
if (this.gridAnimator) {
  this.gridAnimator.removeGridLayer(e);
} else {
  this.gridAnimator = new h();
}
if (e._listReference) {
  this._layers.removeByReference(e._listReference), e._listReference = null;
} else {
  console.error(new Error("GA: _listReference is missing."));
}
if (this.texture) {
  this.texture.release(), this.texture = null;
} else {
  console.warn("[CellIdOverlay.clear] Clearing CellIdOverlay although no texture was ever set");
}
if (o.isNPC()) {
  i.npc.push(o);
} else {
  if (o.isPlayer()) {
    i.onlinePlayer.push(o);
  } else {
    i.other.push(o);
  }
}
if (i) {
  this.removeActor(n);
} else {
  window.isoEngine.tryDisplayUserMovementZone();
}
if (a) {
  a.updateData(e);
} else {
  a = i.addEmptyActor(e);
}
if (a) {
  a.updateData(e), o = !1;
} else {
  a = this.addEmptyActor(e);
}
if (s) {
  s.carryCharacter(a);
} else {
  i._queuedToCarryActors[o] = a;
}
if (n === -1) {
  console.warn("[ActorManager.removeActorOccupation] Trying to remove an actor from an empty cell", e);
} else {
  if (1 === i.length) {
    delete this._occupiedCells[t];
  } else {
    i.splice(n, 1);
  }
}
if (n === -1) {
  i.push(e);
} else {
  console.warn("[ActorManager.addActorOccupation] Trying to add an actor to a cell that it already belongs to", e);
}
if (i === !0) {
  c.isolationCoefficient = T;
} else {
  c.isolationCoefficient = M, r.staticInfos && r.staticInfos.isMiniBoss ? c.addIcon("miniBoss") : c.removeIcon("miniBoss"), r.staticInfos || console.error("ActorManager#addActorFollowers: no staticInfos", "actorId:", o, "followerId:", l);
}
if (e) {
  t = c.MAP_LAYER_TRANSPARENT, i = c.TRANSPARENT_MODE_ALPHA;
} else {
  t = c.MAP_LAYER_PLAYGROUND, i = 1;
}
if ("" === t) {
  i.removeTurnNumber();
} else {
  i.addTurnNumber(t);
}
if (n) {
  i(e, n);
} else {
  this._onIdAdded[e] = i;
}
if (f.isRoleplayMode && this._fullNicknameLabelCount < s.maxTitlesOrnaments) {
  e.addNicknameLabel(!0), e.nicknameLabel && "full" === e.nicknameLabel.getType() && this._fullNicknameLabelCount++, e.moving && e.nicknameLabel.set(e, "name");
} else {
  e.addNicknameLabel(!1);
}
if (t.loop) {
  o.loopAnim(e, i);
} else {
  o.oneShootAnim(e, {
    backToStatic: !1,
    isEmoteAnimated: t.isEmoteAnimated
  }, i);
}
if (d) {
  n.playCustomAnimation({
    animationName: d,
    direction: n.direction,
    loop: !0,
    duration: i,
    delay: 0
  }, function () {
    n.actorState = r.WAITING_FOR_NEXT_ANIMATION;
  });
} else {
  n.actorState = r.WAITING_FOR_NEXT_ANIMATION;
}
if ("HumanOptionAlliance" === i._type) {
  this.addConquestIcon(i);
} else {
  "HumanOptionFollowers" === i._type && this.actorManager.addActorFollowers(this, i.followingCharactersLook, !0);
}
if (this.moving) {
  console.warn('[Actor._startPath] error: actor "' + this.actorId + '" is already moving.');
} else {
  this.pathTween.start(!1), this.pathTween.onceFinish(function () {
    t.moving = !1;
    r.isRoleplayMode && l.hasFullNicknameLabelData(t) && t.nicknameLabel && t._hadFullNicknameLabel && "name" === t.nicknameLabel.getType() && t.nicknameLabel.set(t, "full");
    var i = t.path[t.path.length - 1];
    return t.animSymbol = i.a, t._x = i.x, t._y = i.y, t.animManager.assignSymbol(t.animSymbol, !0), e && e();
  });
}
if (r.isFightMode) {
  b = 0;
} else {
  _ && _[w] && _[w].f && (b = _[w].f);
}
if (0 === y) {
  f = 1;
} else {
  if (T.y === p) {
    M = m.horizontal, f = T.x > h ? 0 : 4;
  } else {
    if (T.x === h) {
      M = m.vertical, f = T.y > p ? 2 : 6;
    } else {
      M = m.linear, f = T.x > h ? T.y > p ? 1 : 7 : T.y > p ? 3 : 5;
    }
  }
}
if ("none" === this._textureId) {
  this.texture = window.isoEngine.mapScene.createTexture(e, this.id, "nearest", "throwable");
} else {
  this.texture = window.isoEngine.mapScene.createTexture(e, this._textureId, "nearest", "archivable");
}
if ("HumanOptionGuild" === d._type) {
  s = d.guildInformations, this.hasGuild = !0;
} else {
  if ("HumanOptionAlliance" === d._type) {
    r = d.allianceInformations, this.hasAlliance = !0;
  } else {
    if ("HumanOptionOrnament" === d._type) {
      a = d.ornamentId, this.hasOrnament = !0;
    } else {
      "HumanOptionTitle" === d._type && (o = d.titleId, this.hasTitle = !0);
    }
  }
}
if (t.hasWings) {
  t._nicknameLabelCanvas.updateWithWings();
} else {
  t._nicknameLabelCanvas.update();
}
if (e) {
  n.height = this._canvas.height + t.height + i, o.drawImage(t, s, 0), this._canvasHasContents && o.drawImage(this._canvas, a, t.height + i);
} else {
  n.height = this._canvas.height + t.height + i, o.drawImage(t, s, this._canvas.height + i), this._canvasHasContents && o.drawImage(this._canvas, 0, 0);
}
if (this._top) {
  this._canvasHasContents = !0, this._syncCanvas(!1, this._textCanvas, 0), this._syncCanvas(!0, this._topCanvas, this._textOffset);
} else {
  this._syncCanvas(!1, this._textCanvas, 0);
}
if (i) {
  n(this._topCanvas), this._textOffset = -(t.top + o.height), this._topCanvas.width = o.width, this._topCanvas.height = o.height, this._topCtx.drawImage(o, 0, 0), this._top = !0;
} else {
  n(this._bottomCanvas), this._bottomOffset = t.top - o.height, this._bottomCanvas.width = o.width, this._bottomCanvas.height = o.height, this._bottomCtx.drawImage(o, 0, 0), this._bottom = !0;
}
if (1 === h) {
  this.openPlayerContextualMenu(l);
} else {
  this.isFollower || console.error("nbOnlinePlayersOnCell has an unexpected value (< 1): ", h, this.actorId);
}
if (t === i) {
  this.setHighlight(s);
} else {
  this.setHighlight(a), this.actorManager.turnIndicatorOff();
}
if (n.circleGraphic) {
  n.circleGraphic.w = e.element.width, n.circleGraphic.h = e.element.height, n.circleGraphic.texture = e, n._positionCircle(), n.circleGraphic.forceRefresh();
} else {
  e.release();
}
if (0 === i) {
  r = u;
} else {
  if (1 === i) {
    r = h;
  } else {
    console.error("invalid team number");
  }
}
if (e) {
  this.nicknameLabel.set(this, "full"), this._hadFullNicknameLabel = !0;
} else {
  this.nicknameLabel.set(this, "name"), this._hadFullNicknameLabel = !1;
}
if (this.texture) {
  this.texture.release(), this.texture = null;
} else {
  console.warn("[CanvasText.clear] Clearing CanvasText, but it was already clear");
}
if (e > d) {
  e = d;
} else {
  t < d && (t = d);
}
if (i > u) {
  i = u;
} else {
  n < u && (n = u);
}
if (b && b.indexOf(C) !== -1) {
  T._isDead = !0;
} else {
  w[M].loss && s(e, C, {
    base: "AnimHit"
  }, i);
}
if (p.showApMpUsed || e.actionId === m.ACTION_CHARACTER_ACTION_POINTS_LOST || e.actionId === m.ACTION_CHARACTER_MOVEMENT_POINTS_LOST) {
  s(e, t, T[e.actionId]);
} else {
  s(e, t, null);
}
if (e.carriedActor) {
  e.carriedActor.parentActor = null;
} else {
  console.warn("attempted to drop actor that did not exist.");
}
if (g === this._lastTapId) {
  m = !0, this._lastTapId = null;
} else {
  this._lastTapId = g;
}
if (e) {
  I = !0, window.foreground.showInfobox(e, t);
} else {
  I && (I = !1, window.foreground.hideInfobox());
}
if (c.transformState === e) {
  a[c.cellId] = new m(c.cellId, c.distanceToPlayer, t);
} else {
  c.transformState === i && (a[c.cellId] = new m(c.cellId, c.distanceToPlayer, n));
}
if ("fight" === i.mode && void 0 !== i.spellId) {
  this.displayEffectZone(o);
} else {
  "fight" === i.mode && this._isUserTurn && (this.actorManager.getActorsOnCell(o).length > 0 ? this._resetWalkLayer() : (window.foreground.confirmBox.close(), A = this._displayPathInFight(o)));
}
if (C[i]) {
  a = i;
} else {
  S.stop();
}
if (this._spellRangeLayer && this._spellRangeLayer.cellInfos.hasOwnProperty(e)) {
  if (t) {
    this._castSpellImmediately(e), this.clearSpellDisplay();
  } else {
    this._castSpellImmediatelyConfirm(e);
  }
} else {
  this.clearSpellDisplay();
}
if (window.foreground.fightIsUserTurn) {
  n.hideConfirmWindow = !1;
} else {
  n.hideConfirmWindow = !0;
}
if (a) {
  this._castSpell(o, e, t, n);
} else {
  this._castSpellConfirm(o, e, t, n);
}
if (_.confirmBoxWhenWalking) {
  c.open("move", p, m, {
    startHidden: !1,
    allowDoubleTap: !0
  }, n);
} else {
  n(!0);
}
if (void 0 === w || A) {
  T.splice(I, 1), A && C.push(A);
} else {
  I++;
}
if (t.reachable) {
  this.reachable.push(e), this.reachableMap[e] = i;
} else {
  this.unreachable.push(e), this.unreachableMap[e] = i;
}
if (0 === h) {
  this.background.addTargetHighLights(n, d._x, d._y, u.redTeamStart, u.redTeamEnd, !window.foreground.fightIsUserTurn);
} else {
  this.background.addTargetHighLights(n, d._x, d._y, u.blueTeamStart, u.blueTeamEnd, !window.foreground.fightIsUserTurn);
}
if (c.isOutsight(r)) {
  a.cancel();
} else {
  a.preview(m.spellId, r, {
    hasConfirmBox: !0
  });
}
if (a.isOutsight(e)) {
  i.cancel();
} else {
  i.preview(m.spellId, e, {
    hasConfirmBox: !0
  });
}
if (Math.floor(g) === Math.floor(_)) {
  f = [Math.floor(r[p] + c[p])], g === f[0] && _ < f[0] && (f = [Math.ceil(r[p] + c[p])]), _ === f[0] && g < f[0] && (f = [Math.ceil(r[p] + c[p])]);
} else {
  if (Math.ceil(g) === Math.ceil(_)) {
    f = [Math.ceil(r[p] + c[p])], g === f[0] && _ < f[0] && (f = [Math.floor(r[p] + c[p])]), _ === f[0] && g < f[0] && (f = [Math.floor(r[p] + c[p])]);
  } else {
    f = [Math.floor(g), Math.floor(_)];
  }
}
if (this._loadingProgressVisible === !1) {
  this._loadingProgressVisible = !0, t.x = this.mapScene.w / 2, t.y = this.mapScene.h / 2, this._loadingProgress.show(), this._loadingProgress.progressEggFrameTween.reset().from({
    frame: 0
  }).to({
    frame: .4 * i
  }, 30, p.polyIn, 2).start();
} else {
  this._loadingProgress.progressEggFrameTween.reset().from({
    frame: t.animManager.frame
  }).to({
    frame: (.7 * e + .4) * i
  }, 5).start();
}
if (t._activateMapScene()) {
  t._loadingProgress.progressEgg.alpha = 1, t.mapScene.renderingParams.ratio = 1, t._saveImageForTransition("black"), t._startLoading();
} else {
  t._loadingFadeInTransitionRunning === !1 && (t._isMapLoading ? t._startLoading() : (e && t._makeUserActorWalkInDirection(e, !1), t._runLoadingFadeInTransition()));
}
if (null === this._mapSceneTransitionGraphic) {
  this._mapSceneTransitionGraphic = new m({
    w: this.mapScene.w,
    h: this.mapScene.h,
    scene: this.mapScene,
    position: 0,
    isHudElement: !0,
    alpha: 1
  }, o.texture);
} else {
  this._mapSceneTransitionGraphic.clear(), this._mapSceneTransitionGraphic.texture = o.texture, this._mapSceneTransitionGraphic.show();
}
if (this.changeMapTimeout) {
  window.clearTimeout(this.changeMapTimeout), this.changeMapTimeout = null;
} else {
  window.foreground.lock("loadMap");
}